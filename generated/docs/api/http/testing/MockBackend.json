{
  "id": "api/http/testing/MockBackend",
  "title": "MockBackend",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"mockbackend\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#mockbackend\"><i class=\"material-icons\">link</i></a>MockBackend</h1>\n    <label class=\"api-type-label class\">class</label>\n    <label class=\"api-status-label deprecated\">deprecated</label>\n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/http\">@angular/http</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a> } from <a href=\"api/http/testing\">'@angular/http/testing'</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/http/testing/src/mock_backend.ts#L107-L292\">http/testing/src/mock_backend.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n<section class=\"deprecated\">\n  <h2 id=\"deprecation-notes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#deprecation-notes\"><i class=\"material-icons\">link</i></a>Deprecation Notes</h2>\n  <p>use @angular/common/http instead</p>\n\n</section>\n\n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a> implements <a class=\"code-anchor\" href=\"api/http/ConnectionBackend\">ConnectionBackend</a> {\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#constructor()\">constructor()</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#connections\">connections: any</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#connectionsArray\">connectionsArray: MockConnection[]</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#pendingConnections\">pendingConnections: any</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#verifyNoPendingRequests\">verifyNoPendingRequests()</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#resolveAllConnections\">resolveAllConnections()</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#createConnection\">createConnection(req: Request): MockConnection</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>A mock backend for testing the <a href=\"api/http/Http\"><code>Http</code></a> service.</p>\n<p>This class can be injected in tests, and should be used to override providers\nto other backends, such as <a href=\"api/http/XHRBackend\"><code>XHRBackend</code></a>.</p>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nimport {<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>, <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>} from '@angular/core';\nimport {<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>, <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>} from '@angular/core/testing';\nimport {<a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>, <a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>, <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>, <a href=\"api/http/RequestOptions\" class=\"code-anchor\">RequestOptions</a>} from '@angular/http';\nimport {<a href=\"api/http/Response\" class=\"code-anchor\">Response</a>, <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>} from '@angular/http';\nimport {<a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>, <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>} from '@angular/http/testing';\n\nconst HERO_ONE = 'HeroNrOne';\nconst HERO_TWO = 'WillBeAlwaysTheSecond';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass HeroService {\n  constructor(private http: <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>) {}\n\n  getHeroes(): Promise&#x3C;String[]> {\n    return this.http.get('myservices.de/api/heroes')\n        .toPromise()\n        .then(response => response.json().data)\n        .catch(e => this.handleError(e));\n  }\n\n  private handleError(error: any): Promise&#x3C;any> {\n    console.error('An error occurred', error);\n    return Promise.reject(error.message || error);\n  }\n}\n\ndescribe('<a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a> HeroService Example', () => {\n  beforeEach(() => {\n    this.injector = Injector.create([\n      {provide: <a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>, useClass: <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>},\n      {provide: <a href=\"api/http/RequestOptions\" class=\"code-anchor\">RequestOptions</a>, useClass: <a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>},\n      <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>,\n      HeroService,\n    ]);\n    this.heroService = this.injector.get(HeroService);\n    this.backend = this.injector.get(<a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>) as <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>;\n    this.backend.connections.subscribe((connection: any) => this.lastConnection = connection);\n  });\n\n  it('getHeroes() should <a href=\"api/animations/query\" class=\"code-anchor\">query</a> current service url', () => {\n    this.heroService.getHeroes();\n    expect(this.lastConnection).toBeDefined('no http service connection at all?');\n    expect(this.lastConnection.request.url).toMatch(/api\\/heroes$/, 'url invalid');\n  });\n\n  it('getHeroes() should return some heroes', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n       let result: String[];\n       this.heroService.getHeroes().then((heroes: String[]) => result = heroes);\n       this.lastConnection.mockRespond(new <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>(new <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>({\n         body: JSON.stringify({data: [HERO_ONE, HERO_TWO]}),\n       })));\n       <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n       expect(result.length).toEqual(2, 'should contain given amount of heroes');\n       expect(result[0]).toEqual(HERO_ONE, ' HERO_ONE should be the first hero');\n       expect(result[1]).toEqual(HERO_TWO, ' HERO_TWO should be the second hero');\n     }));\n\n  it('getHeroes() while server is down', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n       let result: String[];\n       let catchedError: any;\n       this.heroService.getHeroes()\n           .then((heroes: String[]) => result = heroes)\n           .catch((error: any) => catchedError = error);\n       this.lastConnection.mockRespond(new <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>(new <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>({\n         status: 404,\n         statusText: 'URL not Found',\n       })));\n       <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n       expect(result).toBeUndefined();\n       expect(catchedError).toBeDefined();\n     }));\n});\n</code-example>\n<p>This method only exists in the mock implementation, not in real Backends.</p>\n\n</section>\n\n\n  \n  \n\n\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor()</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"connections\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">connections: any</code-example>\n  <a href=\"api/core/EventEmitter\"><code>EventEmitter</code></a>\n<p>of <a href=\"api/http/testing/MockConnection\"><code>MockConnection</code></a> instances that have been created by this backend. Can be subscribed\nto in order to respond to connections.</p>\n<h3 id=\"example-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#example-1\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nimport {<a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>} from '@angular/core';\nimport {<a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>, <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>} from '@angular/core/testing';\nimport {<a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>, <a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>, <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>, <a href=\"api/http/RequestOptions\" class=\"code-anchor\">RequestOptions</a>} from '@angular/http';\nimport {<a href=\"api/http/Response\" class=\"code-anchor\">Response</a>, <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>} from '@angular/http';\nimport {<a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>, <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>} from '@angular/http/testing';\n\nit('should get <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> response', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     let connection:\n         <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>;  // this will be set when <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new connection is emitted from the\n                          // backend.\n     let text: string;    // this will be set from mock response\n     let injector = Injector.create([\n       {provide: <a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>, useClass: <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>},\n       {provide: <a href=\"api/http/RequestOptions\" class=\"code-anchor\">RequestOptions</a>, useClass: <a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>},\n       <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>,\n     ]);\n     let backend = injector.get(<a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>);\n     let http = injector.get(<a href=\"api/http/Http\" class=\"code-anchor\">Http</a>);\n     backend.connections.subscribe((c: <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>) => connection = c);\n     http.request('something.json').toPromise().then((res: any) => text = res.text());\n     connection.mockRespond(new <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>(new <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>({body: 'Something'})));\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n     expect(text).toBe('Something');\n   }));\n</code-example>\n<p>This property only exists in the mock implementation, not in real Backends.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"connectionsArray\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">connectionsArray: <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>[]</code-example>\n  <p>An array representation of <code>connections</code>. This array will be updated with each connection that\nis created by this backend.</p>\n<p>This property only exists in the mock implementation, not in real Backends.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"pendingConnections\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">pendingConnections: any</code-example>\n  <a href=\"api/core/EventEmitter\"><code>EventEmitter</code></a>\n<p> of <a href=\"api/http/testing/MockConnection\"><code>MockConnection</code></a> instances that haven't yet been resolved (i.e.\nwith a <code>readyState</code>\nless than 4). Used internally to verify that no connections are pending via the\n<code>verifyNoPendingRequests</code> method.</p>\n<p>This property only exists in the mock implementation, not in real Backends.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"verifyNoPendingRequests\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">verifyNoPendingRequests()</code-example>\n  <p>Checks all connections, and raises an exception if any connection has not received a response.</p>\n<p>This method only exists in the mock implementation, not in real Backends.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"resolveAllConnections\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">resolveAllConnections()</code-example>\n  <p>Can be used in conjunction with <code>verifyNoPendingRequests</code> to resolve any not-yet-resolve\nconnections, if it's expected that there are connections that have not yet received a response.</p>\n<p>This method only exists in the mock implementation, not in real Backends.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"createConnection\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">createConnection(req: <a href=\"api/http/Request\" class=\"code-anchor\">Request</a>): <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a></code-example>\n  <p>Creates a new <a href=\"api/http/testing/MockConnection\"><code>MockConnection</code></a>. This is equivalent to calling <code>new <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>()</code>, except that it also will emit the new <code><a href=\"api/http/Connection\" class=\"code-anchor\">Connection</a></code> to the <code>connections</code>\nemitter of this <code><a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a></code> instance. This method will usually only be used by tests\nagainst the framework itself, not by end-users.</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n<section class=\"annotations\">\n  <h2 id=\"annotations\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#annotations\"><i class=\"material-icons\">link</i></a>Annotations</h2>\n    <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code-example>\n    \n  \n</section>\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/http/ConnectionBackend\n - api/http/Http\n - api/http/ResponseOptions\n - api/http/testing\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/animations/query\n - api/core/EventEmitter\n - api/core/Injectable\n - api/core/Injector\n - api/core/testing/async\n - api/core/testing/fakeAsync\n - api/core/testing/tick\n - api/http/BaseRequestOptions\n - api/http/Connection\n - api/http/ConnectionBackend\n - api/http/Http\n - api/http/Request\n - api/http/RequestOptions\n - api/http/Response\n - api/http/ResponseOptions\n - api/http/XHRBackend\n - api/http/testing\n - api/http/testing/MockBackend#annotations\n - api/http/testing/MockBackend#connections\n - api/http/testing/MockBackend#connectionsArray\n - api/http/testing/MockBackend#constructor\n - api/http/testing/MockBackend#constructor()\n - api/http/testing/MockBackend#createConnection\n - api/http/testing/MockBackend#deprecation-notes\n - api/http/testing/MockBackend#description\n - api/http/testing/MockBackend#example\n - api/http/testing/MockBackend#example-1\n - api/http/testing/MockBackend#members\n - api/http/testing/MockBackend#mockbackend\n - api/http/testing/MockBackend#overview\n - api/http/testing/MockBackend#pendingConnections\n - api/http/testing/MockBackend#resolveAllConnections\n - api/http/testing/MockBackend#verifyNoPendingRequests\n - api/http/testing/MockConnection\n - api/router/RouterLinkWithHref\n - https://github.com/angular/angular/tree/5.2.11/packages/http/testing/src/mock_backend.ts#L107-L292\n - https://www.npmjs.com/package/@angular/http\n-->"
}