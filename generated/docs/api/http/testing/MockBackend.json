{
  "id" : "api/http/testing/MockBackend",
  "title" : "MockBackend",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"mockbackend\">MockBackend</h1>\n    <label class=\"api-type-label class\">class</label>\n    <label class=\"api-status-label deprecated\">deprecated</label>\n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/http\">@angular/http</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a> } from <a href=\"api/http/testing\">'@angular/http/testing'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/http/testing/src/mock_backend.ts#L107-L292\">http/testing/src/mock_backend.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n<section class=\"deprecated\">\n  <h2 id=\"deprecation-notes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxhln38nrp36303qqb6hgjwp9\"><i class=\"material-icons\">link</i>弃用说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76x00miep182jnm2o7zo0lf26\">改用 @angular/common/http</p>\n\n</section>\n\n  <section class=\"class-overview\">\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a> implements <a class=\"code-anchor\" href=\"api/http/ConnectionBackend\">ConnectionBackend</a> {\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#constructor()\">constructor()</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#connections\">connections: any</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#connectionsArray\">connectionsArray: MockConnection[]</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#pendingConnections\">pendingConnections: any</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#verifyNoPendingRequests\">verifyNoPendingRequests()</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#resolveAllConnections\">resolveAllConnections()</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#createConnection\">createConnection(req: Request): MockConnection</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apyo74dmy5gdlv6eeaf2r1ehr\">用于测试 \n<a href=\"api/http/Http\"><code>Http</code></a> 服务的模拟后端。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1c5auxw67eg8t74pknu8ah6us\">此类可以在测试中注入，并应用于覆盖提供者到其他后端，例如 \n<a href=\"api/http/XHRBackend\"><code>XHRBackend</code></a>。</p>\n<h3 id=\"example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nimport {<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>, <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>} from '@angular/core';\nimport {<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>, <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>} from '@angular/core/testing';\nimport {<a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>, <a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>, <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>, <a href=\"api/http/RequestOptions\" class=\"code-anchor\">RequestOptions</a>} from '@angular/http';\nimport {<a href=\"api/http/Response\" class=\"code-anchor\">Response</a>, <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>} from '@angular/http';\nimport {<a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>, <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>} from '@angular/http/testing';\n\nconst HERO_ONE = 'HeroNrOne';\nconst HERO_TWO = 'WillBeAlwaysTheSecond';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass HeroService {\n  constructor(private http: <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>) {}\n\n  getHeroes(): Promise&lt;String[]&gt; {\n    return this.http.get('myservices.de/api/heroes')\n        .toPromise()\n        .then(response =&gt; response.json().data)\n        .catch(e =&gt; this.handleError(e));\n  }\n\n  private handleError(error: any): Promise&lt;any&gt; {\n    console.error('An error occurred', error);\n    return Promise.reject(error.message || error);\n  }\n}\n\ndescribe('<a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a> HeroService Example', () =&gt; {\n  beforeEach(() =&gt; {\n    this.injector = Injector.create([\n      {provide: <a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>, useClass: <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>},\n      {provide: <a href=\"api/http/RequestOptions\" class=\"code-anchor\">RequestOptions</a>, useClass: <a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>},\n      <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>,\n      HeroService,\n    ]);\n    this.heroService = this.injector.get(HeroService);\n    this.backend = this.injector.get(<a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>) as <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>;\n    this.backend.connections.subscribe((connection: any) =&gt; this.lastConnection = connection);\n  });\n\n  it('getHeroes() should <a href=\"api/animations/query\" class=\"code-anchor\">query</a> current service url', () =&gt; {\n    this.heroService.getHeroes();\n    expect(this.lastConnection).toBeDefined('no http service connection at all?');\n    expect(this.lastConnection.request.url).toMatch(/api\\/heroes$/, 'url invalid');\n  });\n\n  it('getHeroes() should return some heroes', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() =&gt; {\n       let result: String[];\n       this.heroService.getHeroes().then((heroes: String[]) =&gt; result = heroes);\n       this.lastConnection.mockRespond(new <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>(new <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>({\n         body: JSON.stringify({data: [HERO_ONE, HERO_TWO]}),\n       })));\n       <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n       expect(result.length).toEqual(2, 'should contain given amount of heroes');\n       expect(result[0]).toEqual(HERO_ONE, ' HERO_ONE should be the first hero');\n       expect(result[1]).toEqual(HERO_TWO, ' HERO_TWO should be the second hero');\n     }));\n\n  it('getHeroes() while server is down', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() =&gt; {\n       let result: String[];\n       let catchedError: any;\n       this.heroService.getHeroes()\n           .then((heroes: String[]) =&gt; result = heroes)\n           .catch((error: any) =&gt; catchedError = error);\n       this.lastConnection.mockRespond(new <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>(new <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>({\n         status: 404,\n         statusText: 'URL not Found',\n       })));\n       <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n       expect(result).toBeUndefined();\n       expect(catchedError).toBeDefined();\n     }));\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80m3gh3xiyw01m63s4a2jauf0\">此方法仅存在于模拟实现中，而不是在真实后端中。</p>\n\n</section>\n\n\n  \n  \n\n\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64p310lbzdqiret0qyhhannvq\"><i class=\"material-icons\">link</i>构造函数</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor()</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"connections\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">connections: any</code-example>\n  <a href=\"api/core/EventEmitter\"><code>EventEmitter</code></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"801mnit7akbznt4b84d30ryhv\">由此后端创建的 \n<a href=\"api/http/testing/MockConnection\"><code>MockConnection</code></a> 实例的流。可以订阅以响应连接。</p>\n<h3 id=\"example-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nimport {<a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>} from '@angular/core';\nimport {<a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>, <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>} from '@angular/core/testing';\nimport {<a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>, <a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>, <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>, <a href=\"api/http/RequestOptions\" class=\"code-anchor\">RequestOptions</a>} from '@angular/http';\nimport {<a href=\"api/http/Response\" class=\"code-anchor\">Response</a>, <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>} from '@angular/http';\nimport {<a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>, <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>} from '@angular/http/testing';\n\nit('should get <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> response', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() =&gt; {\n     let connection:\n         <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>;  // this will be set when <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new connection is emitted from the\n                          // backend.\n     let text: string;    // this will be set from mock response\n     let injector = Injector.create([\n       {provide: <a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>, useClass: <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>},\n       {provide: <a href=\"api/http/RequestOptions\" class=\"code-anchor\">RequestOptions</a>, useClass: <a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>},\n       <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>,\n     ]);\n     let backend = injector.get(<a href=\"api/http/ConnectionBackend\" class=\"code-anchor\">ConnectionBackend</a>);\n     let http = injector.get(<a href=\"api/http/Http\" class=\"code-anchor\">Http</a>);\n     backend.connections.subscribe((c: <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>) =&gt; connection = c);\n     http.request('something.json').toPromise().then((res: any) =&gt; text = res.text());\n     connection.mockRespond(new <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>(new <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>({body: 'Something'})));\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n     expect(text).toBe('Something');\n   }));\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s6x4w1147z74ip1ktvyfmi1o\">此属性仅存在于模拟实现中，而不是在真实后端中。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"connectionsArray\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">connectionsArray: <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>[]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6y5b2v77ckblgrca7z1ub5xgx\"><code>connections</code> 的数组表示形式。此数组将随着此后端创建的每个连接而更新。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s6x4w1147z74ip1ktvyfmi1o\">此属性仅存在于模拟实现中，而不是在真实后端中。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"pendingConnections\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">pendingConnections: any</code-example>\n  <a href=\"api/core/EventEmitter\"><code>EventEmitter</code></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7maw4mfmcy0seova01med6g2t\">尚未解析的 \n<a href=\"api/http/testing/MockConnection\"><code>MockConnection</code></a> 实例的流（即 \n<code>readyState</code> 小于 4）。在内部使用，通过 \n<code>verifyNoPendingRequests</code> 方法验证没有连接处于挂起状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s6x4w1147z74ip1ktvyfmi1o\">此属性仅存在于模拟实现中，而不是在真实后端中。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"verifyNoPendingRequests\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">verifyNoPendingRequests()</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wx6tbv9pjatko81mcw6t9vqn\">检查所有连接，如果任何连接没有收到响应，则抛出异常。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80m3gh3xiyw01m63s4a2jauf0\">此方法仅存在于模拟实现中，而不是在真实后端中。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"resolveAllConnections\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">resolveAllConnections()</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70nt5l2j7jadtbclpdm74p4go\">可以与 \n<code>verifyNoPendingRequests</code> 结合使用，以解析任何尚未解析的连接，如果预期存在尚未收到响应的连接。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80m3gh3xiyw01m63s4a2jauf0\">此方法仅存在于模拟实现中，而不是在真实后端中。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"createConnection\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">createConnection(req: <a href=\"api/http/Request\" class=\"code-anchor\">Request</a>): <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"et66ltdvke0wgss9cfs5zjc6z\">创建一个新的 \n<a href=\"api/http/testing/MockConnection\"><code>MockConnection</code></a>。这等效于调用 \n<code>new <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>()</code>，除了它还会将新的 \n<code><a href=\"api/http/Connection\" class=\"code-anchor\">Connection</a></code> 发射到此 \n<code><a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a></code> 实例的 \n<code>connections</code> 发射器。此方法通常仅由针对框架本身的测试使用，而不是由最终用户使用。</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n<section class=\"annotations\">\n  <h2 id=\"annotations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ptfpgifdyh5hp4kme5clquv2\"><i class=\"material-icons\">link</i>注解</h2>\n    <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code-example>\n    \n  \n</section>\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/http/ConnectionBackend\n - api/http/Http\n - api/http/ResponseOptions\n - api/http/testing\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/animations/query\n - api/core/EventEmitter\n - api/core/Injectable\n - api/core/Injector\n - api/core/testing/async\n - api/core/testing/fakeAsync\n - api/core/testing/tick\n - api/http/BaseRequestOptions\n - api/http/Connection\n - api/http/ConnectionBackend\n - api/http/Http\n - api/http/Request\n - api/http/RequestOptions\n - api/http/Response\n - api/http/ResponseOptions\n - api/http/XHRBackend\n - api/http/testing\n - api/http/testing/MockBackend#annotations\n - api/http/testing/MockBackend#connections\n - api/http/testing/MockBackend#connectionsArray\n - api/http/testing/MockBackend#constructor\n - api/http/testing/MockBackend#constructor()\n - api/http/testing/MockBackend#createConnection\n - api/http/testing/MockBackend#deprecation-notes\n - api/http/testing/MockBackend#description\n - api/http/testing/MockBackend#example\n - api/http/testing/MockBackend#example-1\n - api/http/testing/MockBackend#members\n - api/http/testing/MockBackend#mockbackend\n - api/http/testing/MockBackend#overview\n - api/http/testing/MockBackend#pendingConnections\n - api/http/testing/MockBackend#resolveAllConnections\n - api/http/testing/MockBackend#verifyNoPendingRequests\n - api/http/testing/MockConnection\n - api/router/RouterLinkWithHref\n - https://github.com/angular/angular/tree/5.2.11/packages/http/testing/src/mock_backend.ts#L107-L292\n - https://www.npmjs.com/package/@angular/http\n-->"
}