{
  "id" : "api/core/Directive",
  "title" : "Directive",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"directive\">Directive</h1>\n    <label class=\"api-type-label decorator\">decorator</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from <a href=\"api/core\">'@angular/core'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/core/src/metadata/directives.ts#L404-L404\">core/src/metadata/directives.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51479y04dmyipo3vhfwrycs61\">将一个类标记为 Angular 指令，并收集指令配置元数据。</p>\n\n</div>\n\n  \n  \n  \n<section class=\"decorator-overview\">\n<h2 id=\"metadata-overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fjwdt3xnpakx7xgzk2vpwaph\"><i class=\"material-icons\">link</i>元数据概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ \n  <a class=\"code-anchor\" href=\"api/core/Directive#selector\">selector?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#inputs\">inputs?: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#outputs\">outputs?: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#host\">host?: {...}</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#providers\">providers?: Provider[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#exportAs\">exportAs?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#queries\">queries?: {...}</a>\n})\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cflu95twzi71qd095ghj9h0y7\"><i class=\"material-icons\">link</i>使用方法</h2>\n  <code-example>\nimport {<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>} from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: 'my-directive',\n})\nexport class MyDirective {\n}\n</code-example>\n\n</section>\n\n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8l1x9k16kprjo3srqee159afx\">Directive 装饰器允许你将一个类标记为 Angular 指令，并提供额外的元数据，这些元数据决定了指令在运行时如何被处理、实例化和使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jvynft3h6jfzvp5vs5jnkrb9\">指令允许你将行为附加到 DOM 中的元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1h4xarvositcet3ov6jbxfac\">指令必须属于一个 NgModule，才能被其他指令、组件或应用程序使用。要指定指令是 NgModule 的成员， 你应该在该 NgModule 的 \n<code>declarations</code> 字段中列出它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxcaxcfik05nqxx5aoc3cmufl\">除了通过 Directive 装饰器指定的元数据配置之外， 指令还可以通过实现各种生命周期钩子来控制其运行时行为。</p>\n<p><strong data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1u4v1votfskbocdqnt8pe0z4w\">元数据属性：</strong></p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnbbbxnvj5xxh6oij0mp6aswr\"><strong>exportAs</strong> - 组件实例在模板中导出的名称。可以 指定单个名称或以逗号分隔的名称列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4agl41fva161hpfrcj4etvmet\"><strong>host</strong> - 类属性到宿主元素绑定的映射表，用于事件、属性和 属性</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdkdmo5q23p780vgiufxq2qaq\"><strong>inputs</strong> - 类属性名称列表，作为组件输入进行数据绑定</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5c934b3btdl1eb8mypibpm3ll\"><strong>outputs</strong> - 类属性名称列表，用于公开输出事件，其他人可以 订阅这些事件</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oxts4knjv3m734zawxnivsj2\"><strong>providers</strong> - 此组件及其子组件可用的提供者列表</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ws2o76ebhoph6bcm3l1brefp\"><strong>queries</strong> - 配置可以注入到组件中的查询</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b91mztjqhz8bu3butk0hbmcz9\"><strong>selector</strong> - 在模板中标识此组件的 CSS 选择器</li>\n</ul>\n\n</section>\n\n  \n\n<section class=\"metadata-members\">\n  <h2 id=\"metadata-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aemhqqiorm5lfvyoik0hnjq89\"><i class=\"material-icons\">link</i>元数据属性</h2>\n  \n    <div class=\"metadata-member\">\n  <a id=\"selector\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">selector?: string</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cl8ee3qkzd2xfdxbp74vkyizt\">触发指令实例化的 CSS 选择器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69jlpcrx1dzlluq4johm7il1r\">Angular 只允许指令触发不跨越元素边界的 CSS 选择器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k6yqbxs1i8c9g0qmi6km1tsz\"><code>selector</code> 可以声明为以下之一：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ltvyqhku9dgy5ozgbdtid1r7\"><code>element-name</code>：按元素名称选择。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48p6ee0iebgwz0naekvj0z2f6\"><code>.class</code>：按类名选择。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fdmipbbieq23wfc25d7g7zyr\"><code>[attribute]</code>：按属性名称选择。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej4ff4l8qg247i81v2zl9yu6p\"><code>[attribute=value]</code>：按属性名称和值选择。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5r1z36nm9dwyxagc2zbnluctq\"><code>:not(sub_selector)</code>：仅当元素不匹配 \n<code>sub_selector</code> 时选择。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhhk7b2ceamwlcgo19xxj1ywq\"><code>selector1, selector2</code>：如果 \n<code>selector1</code> 或 \n<code>selector2</code> 匹配，则选择。</li>\n</ul>\n<h3 id=\"example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqxq4y97xxo2zecq220k9rr3e\">假设我们有一个带有 \n<code>input[type=text]</code> 选择器的指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9usjgr9a657wmvqbohki0v91z\">以及以下 HTML：</p>\n<code-example language=\"html\">\n&lt;form&gt;\n  &lt;input type=\"text\"&gt;\n  &lt;input type=\"radio\"&gt;\n&lt;form&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lyezrq4druyg5ehc1ye3orc9\">该指令将仅在 \n<code>&lt;input type=\"text\"&gt;</code> 元素上实例化。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"inputs\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">inputs?: string[]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"elizlaqtphj4ype17d3pzyp6j\">列举某个指令的一组可供数据绑定的输入属性</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kp2s8lt3gj0yiyv7mxi97dw9\">Angular 在变更检测期间自动更新输入属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aff7lx9e62aytjz1z46ohs3n5\"><code>inputs</code> 属性定义了一组 \n<code>directiveProperty</code> 到 \n<code>bindingProperty</code> 的配置：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94j22rhc9eeya294s2gr00upz\"><code>directiveProperty</code> 指定写入值的组件属性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"at8cib3y4abz87eot1hpt971f\"><code>bindingProperty</code> 指定读取值的 DOM 属性。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0x530ag19mkj6u0onua5qszx\">当未提供 \n<code>bindingProperty</code> 时，它被假定为等于 \n<code>directiveProperty</code>。</p>\n<h3 id=\"example-live-demo\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ribhqklmck72b72sfcgzpusu\"><i class=\"material-icons\">link</i>示例 (\n<a href=\"http://plnkr.co/edit/ivhfXY?p=preview\">动态示例</a>)</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z0wgc2tdmfmygzh4nd0jza1r\">以下示例创建了一个具有两个数据绑定属性的组件。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'bank-account',\n  inputs: ['bankName', 'id: account-id'],\n  template: `\n    Bank Name: {{bankName}}\n    Account Id: {{id}}\n  `\n})\nclass BankAccount {\n  bankName: string;\n  id: string;\n\n  // this property is not bound, and won't be automatically updated by Angular\n  normalizedBankName: string;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app',\n  template: `\n    &lt;bank-account bankName=\"RBC\" account-id=\"4747\"&gt;&lt;/bank-account&gt;\n  `\n})\nclass App {}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"outputs\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">outputs?: string[]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"arkbfu9xqvfmi8by7s1fs8e2s\">列举一组可供事件绑定的输出属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1p1f90y96mjh8ym58aqvt2j2o\">当输出属性发出事件时，将调用附加到该事件的模板中的事件处理程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95b390mqk6xr5zst4u4bdqvpg\"><code>outputs</code> 属性定义了一组 \n<code>directiveProperty</code> 到 \n<code>bindingProperty</code> 的配置：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dthems01sfhmp4vxdwgxs31g\"><code>directiveProperty</code> 用于指定要发出事件的指令属性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6potdo7enpdxed3tnsgw7kgzq\"><code>bindingProperty</code> 指定事件处理程序附加到的 DOM 属性。</li>\n</ul>\n<h3 id=\"example-live-demo-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8p0cjrulfn5kwnyo5eu3wzgx\"><i class=\"material-icons\">link</i>示例 (\n<a href=\"http://plnkr.co/edit/d5CNq7?p=preview\">动态示例</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: 'interval-dir',\n  outputs: ['everySecond', 'five5Secs: everyFiveSeconds']\n})\nclass IntervalDir {\n  everySecond = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>();\n  five5Secs = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>();\n\n  constructor() {\n    setInterval(() =&gt; this.everySecond.emit(\"event\"), 1000);\n    setInterval(() =&gt; this.five5Secs.emit(\"event\"), 5000);\n  }\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app',\n  template: `\n    &lt;interval-dir (everySecond)=\"everySecond()\" (everyFiveSeconds)=\"everyFiveSeconds()\"&gt;\n    &lt;/interval-dir&gt;\n  `\n})\nclass App {\n  everySecond() { console.log('second'); }\n  everyFiveSeconds() { console.log('five seconds'); }\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"host\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">host?: {\n    [key: string]: string;\n}</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehf6kuwkfe2lfasypad295c3w\">指定与宿主元素相关的事件、操作、属性和属性。</p>\n<h2 id=\"host-listeners\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4013awnftx8g6oyupl2fhadn8\"><i class=\"material-icons\">link</i>宿主监听器</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ey6m09qx7r12fza7fajebisr5\">指定指令通过一组 \n<code>(event)</code> 到 \n<code>method</code> 的键值对监听哪些 DOM 事件：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qnqch26k3zkughpxa4rldh6s\"><code>event</code>：指令监听的 DOM 事件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64tbk56do0tw8teig116m54l\"><code>statement</code>：事件发生时要执行的语句。 如果语句的求值结果为 \n<code>false</code>，则 \n<code>preventDefault</code> 将应用于 DOM 事件。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fgcxb2n1qpjnalpwruj2vg5p\">要监听全局事件，必须在事件名称中添加目标。 目标可以是 \n<code>window</code>、\n<code>document</code> 或 \n<code>body</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sju5thp06gs8fjb6fiyw2cqh\">在编写指令事件绑定时，还可以引用 \n<code>$event</code> 局部变量。</p>\n<h3 id=\"example-live-demo-2\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ucdn0lqh73quu4kag36hhbbr\"><i class=\"material-icons\">link</i>示例 (\n<a href=\"http://plnkr.co/edit/DlA5KU?p=preview\">动态示例</a>)</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"813vtzweajz8z9mzi98hmn3tp\">以下示例声明了一个指令，该指令将点击监听器附加到按钮并计算点击次数。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: 'button[counting]',\n  host: {\n    '(click)': 'onClick($event.target)'\n  }\n})\nclass CountClicks {\n  numberOfClicks = 0;\n\n  onClick(btn) {\n    console.log(\"button\", btn, \"number of clicks:\", this.numberOfClicks++);\n  }\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app',\n  template: `&lt;button counting&gt;Increment&lt;/button&gt;`\n})\nclass App {}\n</code-example>\n<h2 id=\"host-property-bindings\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dy4yjcah3v4kpt51dn5atfmsm\"><i class=\"material-icons\">link</i>宿主属性绑定</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fzpiuo3j1zrh1g8h23qf2gyg\">指定指令更新哪些 DOM 属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fa7xqq041w1ixb5fx9x0v8za\">Angular 在变更检测期间自动检查宿主属性绑定。 如果绑定发生更改，它将更新指令的宿主元素。</p>\n<h3 id=\"example-live-demo-3\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5stq0305tllof574umo7ysytg\"><i class=\"material-icons\">link</i>示例 (\n<a href=\"http://plnkr.co/edit/gNg0ED?p=preview\">动态示例</a>)</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qocqenbsbjfcb3pcc2zkde42\">以下示例创建了一个指令，该指令在具有 \n<code>ngModel</code> 指令的 DOM 元素上设置 \n<code>valid</code> 和 \n<code>invalid</code> 类。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]',\n  host: {\n    '[class.valid]': 'valid',\n    '[class.invalid]': 'invalid'\n  }\n})\nclass NgModelStatus {\n  constructor(public control:<a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>) {}\n  get valid { return this.control.valid; }\n  get invalid { return this.control.invalid; }\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app',\n  template: `&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"prop\"&gt;`\n})\nclass App {\n  prop;\n}\n</code-example>\n<h2 id=\"attributes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2e7a5u3w81azvyldqrbf228ud\"><i class=\"material-icons\">link</i>属性</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ieh49bjgfh5ugyaqiaxu424p\">指定应传播到宿主元素的静态属性。</p>\n<h3 id=\"example-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ug8vf3eibwx7punrxr6jro7a\">在此示例中，在宿主元素（此处：\n<code>&lt;div&gt;</code>）上使用 \n<code>my-button</code> 指令（例如：\n<code>&lt;div my-button&gt;&lt;/div&gt;</code>）将确保此元素将获得 \"button\" 角色。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[my-button]',\n  host: {\n    'role': 'button'\n  }\n})\nclass MyButton {\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"providers\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">providers?: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a>[]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28m8impfma2g3b7g7ewk9wqbg\">定义对指令及其轻 DOM 子元素可见的注入对象集。</p>\n<h2 id=\"simple-example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e0ehtrqzapj0lv5nn6iutlmhe\"><i class=\"material-icons\">link</i>简单的例子</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wyybe1tc68m5rl2knzahnye1\">以下是一个可注入类的示例：</p>\n<code-example>\nclass Greeter {\n   greet(name:string) {\n     return 'Hello ' + name + '!';\n   }\n}\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: 'greet',\n  providers: [\n    Greeter\n  ]\n})\nclass HelloWorld {\n  greeter:Greeter;\n\n  constructor(greeter:Greeter) {\n    this.greeter = greeter;\n  }\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"exportAs\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">exportAs?: string</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6nkz4tbhrxm4vhuboismt49k0\">定义一个名字，用于在模板中把该指令赋值给一个变量。</p>\n<h2 id=\"simple-example-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e0ehtrqzapj0lv5nn6iutlmhe\"><i class=\"material-icons\">link</i>简单的例子</h2>\n<code-example>\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: 'child-dir',\n  exportAs: 'child'\n})\nclass ChildDir {\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'main',\n  template: `&lt;child-dir #c=\"child\"&gt;&lt;/child-dir&gt;`\n})\nclass MainComponent {\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"queries\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">queries?: {\n    [key: string]: any;\n}</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"96nqwwl1g4kle3zw75y5xho3w\">配置一些查询，它们将被注入到该指令中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m9owf7ix3mi9npy1x4ptmvus\">内容查询在调用 \n<code>ngAfterContentInit</code> 回调之前设置。 视图查询在调用 \n<code>ngAfterViewInit</code> 回调之前设置。</p>\n<h3 id=\"example-2\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'someDir',\n  queries: {\n    contentChildren: new <a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a>(ChildDirective),\n    viewChildren: new <a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a>(ChildDirective)\n  },\n  template: '&lt;child-directive&gt;&lt;/child-directive&gt;'\n})\nclass SomeDir {\n  contentChildren: <a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a>&lt;ChildDirective&gt;,\n  viewChildren: <a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a>&lt;ChildDirective&gt;\n\n  ngAfterContentInit() {\n    // contentChildren is set\n  }\n\n  ngAfterViewInit() {\n    // viewChildren is set\n  }\n}\n</code-example>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/common/NgClass\n - api/common/NgComponentOutlet\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgPlural\n - api/common/NgPluralCase\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/common/NgTemplateOutlet\n - api/core\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildDecorator\n - api/core/ContentChildren\n - api/core/ContentChildrenDecorator\n - api/core/DirectiveDecorator\n - api/core/Host\n - api/core/HostDecorator\n - api/core/ViewChild\n - api/core/ViewChildDecorator\n - api/core/ViewChildren\n - api/core/ViewChildrenDecorator\n - api/core/ViewContainerRef\n - api/core/testing/TestBed\n - api/forms/CheckboxControlValueAccessor\n - api/forms/CheckboxRequiredValidator\n - api/forms/DefaultValueAccessor\n - api/forms/EmailValidator\n - api/forms/FormArrayName\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/MaxLengthValidator\n - api/forms/MinLengthValidator\n - api/forms/NG_VALIDATORS\n - api/forms/NgControlStatus\n - api/forms/NgControlStatusGroup\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/forms/NgSelectOption\n - api/forms/PatternValidator\n - api/forms/RadioControlValueAccessor\n - api/forms/RequiredValidator\n - api/forms/SelectControlValueAccessor\n - api/forms/SelectMultipleControlValueAccessor\n - api/forms/Validator\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterLinkWithHref\n - api/router/RouterOutlet\n - api/upgrade/static/UpgradeComponent\n - guide/aot-compiler\n - guide/architecture-components\n - guide/attribute-directives\n - guide/bootstrapping\n - guide/cheatsheet\n - guide/dependency-injection-in-action\n - guide/dynamic-component-loader\n - guide/form-validation\n - guide/forms\n - guide/lifecycle-hooks\n - guide/npm-packages\n - guide/structural-directives\n - guide/styleguide\n - guide/template-syntax\n - guide/testing\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/core\n - api/core/Component\n - api/core/ContentChildren\n - api/core/Directive#attributes\n - api/core/Directive#description\n - api/core/Directive#directive\n - api/core/Directive#example\n - api/core/Directive#example-1\n - api/core/Directive#example-2\n - api/core/Directive#example-live-demo\n - api/core/Directive#example-live-demo-1\n - api/core/Directive#example-live-demo-2\n - api/core/Directive#example-live-demo-3\n - api/core/Directive#exportAs\n - api/core/Directive#host\n - api/core/Directive#host-listeners\n - api/core/Directive#host-property-bindings\n - api/core/Directive#how-to-use\n - api/core/Directive#inputs\n - api/core/Directive#metadata-overview\n - api/core/Directive#metadata-properties\n - api/core/Directive#outputs\n - api/core/Directive#providers\n - api/core/Directive#queries\n - api/core/Directive#selector\n - api/core/Directive#simple-example\n - api/core/Directive#simple-example-1\n - api/core/EventEmitter\n - api/core/Provider\n - api/core/QueryList\n - api/core/ViewChildren\n - api/forms/NgModel\n - http://plnkr.co/edit/DlA5KU?p=preview\n - http://plnkr.co/edit/d5CNq7?p=preview\n - http://plnkr.co/edit/gNg0ED?p=preview\n - http://plnkr.co/edit/ivhfXY?p=preview\n - https://github.com/angular/angular/tree/5.2.11/packages/core/src/metadata/directives.ts#L404-L404\n - https://www.npmjs.com/package/@angular/core\n-->"
}