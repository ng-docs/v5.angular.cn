{
  "id": "api/core/TypeProvider",
  "title": "TypeProvider",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"typeprovider\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/TypeProvider#typeprovider\"><i class=\"material-icons\">link</i></a>TypeProvider</h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { <a href=\"api/core/TypeProvider\" class=\"code-anchor\">TypeProvider</a> } from <a href=\"api/core\">'@angular/core'</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/core/src/di/provider.ts#L245-L271\">core/src/di/provider.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p>Configures the <a href=\"api/core/Injector\"><code>Injector</code></a> to return an instance of <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code> when `Type' is used\nas token.</p>\n\n</div>\n\n  \n  \n  <section class=\"interface-overview\">\n<h2 id=\"interface-overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/TypeProvider#interface-overview\"><i class=\"material-icons\">link</i></a>Interface Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/core/TypeProvider\" class=\"code-anchor\">TypeProvider</a> extends <a class=\"code-anchor\" href=\"api/core/Type\">Type<any></any></a> { \n}\n</code-example>\n</section>\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/TypeProvider#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <code-example>\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass MyService {}\n\nconst provider: <a href=\"api/core/TypeProvider\" class=\"code-anchor\">TypeProvider</a> = MyService;\n</code-example>\n\n</section>\n\n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/TypeProvider#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>Create an instance by invoking the <code>new</code> operator and supplying additional arguments.\nThis form is a short form of <code><a href=\"api/core/TypeProvider\" class=\"code-anchor\">TypeProvider</a></code>;</p>\n<p>For more details, see the <a href=\"guide/dependency-injection\">\"Dependency Injection Guide\"</a>.</p>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/TypeProvider#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Greeting {\n  salutation = 'Hello';\n}\n\nconst injector = ReflectiveInjector.resolveAndCreate([\n  Greeting,  // Shorthand for { provide: Greeting, useClass: Greeting }\n]);\n\nexpect(injector.get(Greeting).salutation).toBe('Hello');\n\n</code-example>\n\n</section>\n\n  \n  \n  \n\n  \n  \n  \n\n  \n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/core\n - api/core/Provider\n - api/core/Type\n-->\n<!-- links from this doc:\n - api/core\n - api/core/Injectable\n - api/core/Injector\n - api/core/Type\n - api/core/TypeProvider#description\n - api/core/TypeProvider#example\n - api/core/TypeProvider#how-to-use\n - api/core/TypeProvider#interface-overview\n - api/core/TypeProvider#typeprovider\n - guide/dependency-injection\n - https://github.com/angular/angular/tree/5.2.11/packages/core/src/di/provider.ts#L245-L271\n - https://www.npmjs.com/package/@angular/core\n-->"
}