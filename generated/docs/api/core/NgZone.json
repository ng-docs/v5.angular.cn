{
  "id" : "api/core/NgZone",
  "title" : "NgZone",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"ngzone\">NgZone</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a> } from <a href=\"api/core\">'@angular/core'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/core/src/zone/ng_zone.ts#L13-L218\">core/src/zone/ng_zone.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a> {\n  <a class=\"code-anchor\" href=\"api/core/NgZone#constructor()\">constructor(__0)</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#isInAngularZone\">static isInAngularZone(): boolean</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#assertInAngularZone\">static assertInAngularZone(): void</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#assertNotInAngularZone\">static assertNotInAngularZone(): void</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#hasPendingMicrotasks\">get hasPendingMicrotasks: boolean</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#hasPendingMacrotasks\">get hasPendingMacrotasks: boolean</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#isStable\">get isStable: boolean</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#onUnstable\">get onUnstable: EventEmitter&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#onMicrotaskEmpty\">get onMicrotaskEmpty: EventEmitter&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#onStable\">get onStable: EventEmitter&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#onError\">get onError: EventEmitter&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#run\">run&lt;T&gt;(fn: (...args: any[]) =&gt; T, applyThis?: any, applyArgs?: any[]): T</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#runTask\">runTask&lt;T&gt;(fn: (...args: any[]) =&gt; T, applyThis?: any, applyArgs?: any[], name?: string): T</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#runGuarded\">runGuarded&lt;T&gt;(fn: (...args: any[]) =&gt; T, applyThis?: any, applyArgs?: any[]): T</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#runOutsideAngular\">runOutsideAngular&lt;T&gt;(fn: (...args: any[]) =&gt; T): T</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3xfcxr50sz036hhsc9i26qrdq\">一种用于在 Angular Zone 内部或外部执行任务的可注入服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7a97vbvb8tv5p1k29ie1laa8u\">此服务的常见用途是在启动由 一个或多个异步任务组成的工作时优化性能，这些任务不需要 UI 更新或错误处理由 Angular 处理。此类任务可以通过 \n<a href=\"api/core/NgZone#runOutsideAngular\">runOutsideAngular</a> 启动，如果需要，这些任务 可以通过 \n<a href=\"api/core/NgZone#run\">run</a> 重新进入 Angular 区域。</p>\n<!-- TODO: add/fix links to:\n  - docs explaining zones and the use of zones in Angular and change-detection\n  - link to runOutsideAngular/run (throughout this file!)\n  -->\n<h3 id=\"example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>} from '@angular/core';\nimport {<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>} from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-zone-demo',\n  template: `\n    &lt;h2&gt;Demo: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>&lt;/h2&gt;\n\n    &lt;p&gt;Progress: {{progress}}%&lt;/p&gt;\n    &lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"progress &gt;= 100\"&gt;Done processing {{label}} of Angular zone!&lt;/p&gt;\n\n    &lt;button (click)=\"processWithinAngularZone()\"&gt;Process within Angular zone&lt;/button&gt;\n    &lt;button (click)=\"processOutsideOfAngularZone()\"&gt;Process outside of Angular zone&lt;/button&gt;\n  `,\n})\nexport class NgZoneDemo {\n  progress: number = 0;\n  label: string;\n\n  constructor(private _ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n\n  // Loop inside the Angular zone\n  // so the UI DOES refresh after each setTimeout cycle\n  processWithinAngularZone() {\n    this.label = 'inside';\n    this.progress = 0;\n    this._increaseProgress(() =&gt; console.log('Inside Done!'));\n  }\n\n  // Loop outside of the Angular zone\n  // so the UI DOES NOT refresh after each setTimeout cycle\n  processOutsideOfAngularZone() {\n    this.label = 'outside';\n    this.progress = 0;\n    this._ngZone.runOutsideAngular(() =&gt; {\n      this._increaseProgress(() =&gt; {\n        // reenter the Angular zone and display done\n        this._ngZone.run(() =&gt; { console.log('Outside Done!'); });\n      });\n    });\n  }\n\n  _increaseProgress(doneCallback: () =&gt; void) {\n    this.progress += 1;\n    console.log(`Current progress: ${this.progress}%`);\n\n    if (this.progress &lt; 100) {\n      window.setTimeout(() =&gt; this._increaseProgress(doneCallback), 10);\n    } else {\n      doneCallback();\n    }\n  }\n}\n</code-example>\n\n</section>\n\n\n  \n  \n\n\n\n<section class=\"static-members\">\n  <h2 id=\"static-members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ixh78z2dfifcy2khe8k014ge\"><i class=\"material-icons\">link</i>静态成员</h2>\n  \n    <div class=\"static-member\">\n  <a id=\"isInAngularZone\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> isInAngularZone(): boolean</code-example>\n  \n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"static-member\">\n  <a id=\"assertInAngularZone\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> assertInAngularZone(): void</code-example>\n  \n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"static-member\">\n  <a id=\"assertNotInAngularZone\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> assertNotInAngularZone(): void</code-example>\n  \n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64p310lbzdqiret0qyhhannvq\"><i class=\"material-icons\">link</i>构造函数</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor(__0)</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"hasPendingMicrotasks\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get hasPendingMicrotasks: boolean</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"hasPendingMacrotasks\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get hasPendingMacrotasks: boolean</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"isStable\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get isStable: boolean</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"1yxjbsg2cabyaqwtbo11dh1hy\">是否没有未解决的微任务或宏任务。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"onUnstable\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get onUnstable: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"84g3d87j9uuo69dx0vyw1onfm\">在代码进入 “Angular Zone ” 时通知。这首先在 VM 周期中触发。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"onMicrotaskEmpty\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get onMicrotaskEmpty: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"etbuljlpqmqod1dxwt673gq3w\">在当前的 VM Turn 中没有更多微任务排队时通知。这是 Angular 进行变更检测的提示，它可能会排队更多的微任务。因此，此事件可在每次 VM 周期中触发多次。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"onStable\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get onStable: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4hoy01qttery3mp9p1g90agvw\">在最后一个 <code>onMicrotaskEmpty</code> 已运行并且没有更多微任务时通知，这意味着我们将放弃 VM 周期。该事件只会被调用一次。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"onError\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get onError: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ejqq7w9amz17xonb1vggi9963\">通知已传递的错误。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"run\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">run&lt;T&gt;(fn: (...args: any[]) =&gt; T, applyThis?: any, applyArgs?: any[]): T</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"do6dd7qxl80ij1ryxggtmkqnf\">在 Angular Zone 内同步执行的 <code>fn</code> 函数，并返回该函数返回的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zf26h3ajvne7shd9mdsy8xjy\">通过 \n<code>run</code> 运行函数，可以让你从在 Angular 区域之外执行的任务（通常通过 \n<a href=\"api/core/NgZone#runOutsideAngular\">runOutsideAngular</a> 启动）重新进入 Angular 区域。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dwx445acha4xnc1fjydeer4q1\">在此功能内计划的任何将来的任务或微任务将在 Angular Zone 内继续执行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"abqpwkglpp9r7bm7a6u1fdn1b\">如果发生同步错误，它将被重新抛出，并且不会通过 <code>onError</code> 报告。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"runTask\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">runTask&lt;T&gt;(fn: (...args: any[]) =&gt; T, applyThis?: any, applyArgs?: any[], name?: string): T</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6r7m9c4xqmtf72u9bhulwfc37\">作为任务在 Angular Zone 中同步执行 <code>fn</code> 函数，并返回该函数返回的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zf26h3ajvne7shd9mdsy8xjy\">通过 \n<code>run</code> 运行函数，可以让你从在 Angular 区域之外执行的任务（通常通过 \n<a href=\"api/core/NgZone#runOutsideAngular\">runOutsideAngular</a> 启动）重新进入 Angular 区域。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dwx445acha4xnc1fjydeer4q1\">在此功能内计划的任何将来的任务或微任务将在 Angular Zone 内继续执行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"abqpwkglpp9r7bm7a6u1fdn1b\">如果发生同步错误，它将被重新抛出，并且不会通过 <code>onError</code> 报告。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"runGuarded\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">runGuarded&lt;T&gt;(fn: (...args: any[]) =&gt; T, applyThis?: any, applyArgs?: any[]): T</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ep4agotgwwcqxacxam1yh16tz\">与 <code>run</code> 相同，但同步错误是通过 <code>onError</code> 捕获并转发的，而不是重新抛出。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"runOutsideAngular\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">runOutsideAngular&lt;T&gt;(fn: (...args: any[]) =&gt; T): T</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6n1ckye7ko2mt4izool5l5tkj\">在 Angular 的父 Zone 中同步执行 <code>fn</code> 函数，并返回该函数返回的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34dmrav3dagdm8czw8nsjbwlw\">通过 \n<a href=\"api/core/NgZone#runOutsideAngular\">runOutsideAngular</a> 运行函数，可以让你跳出 Angular 区域，执行不会触发 Angular 变化检测或不受 Angular 错误处理影响的工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ac0phpwa5cg3l56qdw2lxts5r\">从此函数中计划的任何将来的任务或微任务将在 Angular Zone 之外继续执行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ernwyx9jcmg4s0a5b3zad8dkm\">使用 \n<a href=\"api/core/NgZone#run\">run</a> 重新进入 Angular 区域，执行更新应用程序模型的工作。</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/core\n - api/core/Testability\n - api/core/testing/ComponentFixture\n - api/platform-browser/EventManager\n - api/platform-browser/testing/BrowserTestingModule\n - api/platform-webworker/MessageBus\n - api/platform-webworker/MessageBusSink\n - api/platform-webworker/MessageBusSource\n - api/platform-webworker/WorkerAppModule\n - api/upgrade/static/UpgradeModule\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/common/NgIf\n - api/core\n - api/core/Component\n - api/core/EventEmitter\n - api/core/NgZone#assertInAngularZone\n - api/core/NgZone#assertNotInAngularZone\n - api/core/NgZone#constructor\n - api/core/NgZone#constructor()\n - api/core/NgZone#description\n - api/core/NgZone#example\n - api/core/NgZone#hasPendingMacrotasks\n - api/core/NgZone#hasPendingMicrotasks\n - api/core/NgZone#isInAngularZone\n - api/core/NgZone#isStable\n - api/core/NgZone#members\n - api/core/NgZone#ngzone\n - api/core/NgZone#onError\n - api/core/NgZone#onMicrotaskEmpty\n - api/core/NgZone#onStable\n - api/core/NgZone#onUnstable\n - api/core/NgZone#overview\n - api/core/NgZone#run\n - api/core/NgZone#runGuarded\n - api/core/NgZone#runOutsideAngular\n - api/core/NgZone#runTask\n - api/core/NgZone#static-members\n - api/upgrade/static\n - https://github.com/angular/angular/tree/5.2.11/packages/core/src/zone/ng_zone.ts#L13-L218\n - https://www.npmjs.com/package/@angular/core\n-->"
}