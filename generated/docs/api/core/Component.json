{
  "id" : "api/core/Component",
  "title" : "组件",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2n8tguxhs6hbmqbwyqfclvff1\"><i class=\"material-icons\">link</i>组件</h1>\n    <label class=\"api-type-label decorator\">decorator</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from <a href=\"api/core\">'@angular/core'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/core/src/metadata/directives.ts#L756-L757\">core/src/metadata/directives.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"375xy7lcdt0o4smohugneents\">将一个类标记为 Angular 组件，并收集组件配置元数据。</p>\n\n</div>\n\n  \n  \n  \n<section class=\"decorator-overview\">\n<h2 id=\"metadata-overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fjwdt3xnpakx7xgzk2vpwaph\"><i class=\"material-icons\">link</i>元数据概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ \n  <a class=\"code-anchor\" href=\"api/core/Component#changeDetection\">changeDetection?: ChangeDetectionStrategy</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#viewProviders\">viewProviders?: Provider[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#moduleId\">moduleId?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#templateUrl\">templateUrl?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#template\">template?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#styleUrls\">styleUrls?: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#styles\">styles?: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#animations\">animations?: any[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#encapsulation\">encapsulation?: ViewEncapsulation</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#interpolation\">interpolation?: [string, string]</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#entryComponents\">entryComponents?: Array&lt;Type&lt;any&gt; | any[]&gt;</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#preserveWhitespaces\">preserveWhitespaces?: boolean</a>\n  // inherited from <a class=\"code-anchor\" href=\"api/core/Directive\">core/Directive</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#selector\">selector?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#inputs\">inputs?: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#outputs\">outputs?: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#host\">host?: {...}</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#providers\">providers?: Provider[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#exportAs\">exportAs?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#queries\">queries?: {...}</a>\n})\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cflu95twzi71qd095ghj9h0y7\"><i class=\"material-icons\">link</i>使用方法</h2>\n  <code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'greet', template: 'Hello {{name}}!'})\nclass Greet {\n  name: string = 'World';\n}\n\n</code-example>\n\n</section>\n\n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1m4pk69dzgp8giby4qk4cdstj\">组件装饰器允许你将一个类标记为 Angular 组件，并提供额外的元数据，这些元数据决定了组件在运行时如何被处理、实例化和使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3konczlgycx0zj1hqtwpsn670\">组件是 Angular 应用中 UI 的最基本构建块。Angular 应用是 Angular 组件的树形结构。Angular 组件是指令的子集。与指令不同，组件始终具有模板，并且每个模板元素只能实例化一个组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csf9qi3jx68f2tqcj5lo8hx5c\">组件必须属于某个 NgModule，才能被其他组件或应用使用。要指定组件是某个 NgModule 的成员，你应该在该 NgModule 的 \n<code>declarations</code> 字段中列出它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4yiaszo4qqmcljzogy90zklx9\">除了通过组件装饰器指定的元数据配置之外，组件还可以通过实现各种生命周期钩子来控制其运行时行为。</p>\n<p><strong data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1u4v1votfskbocdqnt8pe0z4w\">元数据属性：</strong></p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cogqhsj0r3axx06hfshsblkb8\"><strong>animations</strong> - 此组件的动画列表</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9r7e6dvw7cy0eb01m6c9e6rc7\"><strong>changeDetection</strong> - 此组件使用的变更检测策略</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xm1klvc3bpir2t7clsmd5emg\"><strong>encapsulation</strong> - 此组件使用的样式封装策略</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2efnbozdgb29qcb4wcn031pj2\"><strong>entryComponents</strong> - 动态插入到此组件视图中的组件列表</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wks463fi4c427of0gzazo20q\"><strong>exportAs</strong> - 在模板中导出组件实例的名称</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4agl41fva161hpfrcj4etvmet\"><strong>host</strong> - 类属性到宿主元素绑定的映射表，用于事件、属性和 属性</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdkdmo5q23p780vgiufxq2qaq\"><strong>inputs</strong> - 类属性名称列表，作为组件输入进行数据绑定</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efbshu630x85urscqezai6qq1\"><strong>interpolation</strong> - 此组件模板中使用的自定义插值标记</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dhmeap36fadhr8ov8301h4y\"><strong>moduleId</strong> - 定义此组件的文件的 ES/CommonJS 模块 ID</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5c934b3btdl1eb8mypibpm3ll\"><strong>outputs</strong> - 类属性名称列表，用于公开输出事件，其他人可以 订阅这些事件</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oxts4knjv3m734zawxnivsj2\"><strong>providers</strong> - 此组件及其子组件可用的提供者列表</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ws2o76ebhoph6bcm3l1brefp\"><strong>queries</strong> - 配置可以注入到组件中的查询</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b91mztjqhz8bu3butk0hbmcz9\"><strong>selector</strong> - 在模板中标识此组件的 CSS 选择器</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0na3lg5l5smp2yluno25oa7v\"><strong>styleUrls</strong> - 应用于此组件视图的样式表的 URL 列表</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c6vznh8hgiunaj4al7khoqgv\"><strong>styles</strong> - 应用于此组件视图的内联定义的样式</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9s1ywjfblwz0owsyflz3t8pp\"><strong>template</strong> - 视图的内联定义的模板</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rkcm5jz4one6l1sew8v67ve0\"><strong>templateUrl</strong> - 包含视图模板的外部文件的 URL</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xtfrqyfv2vecsfhh7vkksa22\"><strong>viewProviders</strong> - 可用于此组件及其视图子级的提供者列表</li>\n</ul>\n<h3 id=\"example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'greet', template: 'Hello {{name}}!'})\nclass Greet {\n  name: string = 'World';\n}\n\n</code-example>\n\n</section>\n\n  \n\n<section class=\"metadata-members\">\n  <h2 id=\"metadata-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aemhqqiorm5lfvyoik0hnjq89\"><i class=\"material-icons\">link</i>元数据属性</h2>\n  \n    <div class=\"metadata-member\">\n  <a id=\"changeDetection\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">changeDetection?: <a href=\"api/core/ChangeDetectionStrategy\" class=\"code-anchor\">ChangeDetectionStrategy</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0ow7hiwk2nej9ui7gr16i3na\">定义使用的变更检测策略。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hw4khpzbx6lbvdgfl1xljvc0\">当实例化组件时，Angular 会创建一个变更检测器，它负责传播组件的绑定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzor00scmci7fxwbm5nkekfxn\"><code>changeDetection</code> 属性定义变更检测是每次都检查，还是只有在组件告诉它这样做时才检查。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"viewProviders\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">viewProviders?: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a>[]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9eebu6ys6eg86ilyaa9r60l9q\">定义对视图 DOM 子级可见的注入对象集。</p>\n<h2 id=\"simple-example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e0ehtrqzapj0lv5nn6iutlmhe\"><i class=\"material-icons\">link</i>简单的例子</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wyybe1tc68m5rl2knzahnye1\">以下是一个可注入类的示例：</p>\n<code-example>\nclass Greeter {\n   greet(name:string) {\n     return 'Hello ' + name + '!';\n   }\n}\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: 'needs-greeter'\n})\nclass NeedsGreeter {\n  greeter:Greeter;\n\n  constructor(greeter:Greeter) {\n    this.greeter = greeter;\n  }\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'greet',\n  viewProviders: [\n    Greeter\n  ],\n  template: `&lt;needs-greeter&gt;&lt;/needs-greeter&gt;`\n})\nclass HelloWorld {\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"moduleId\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">moduleId?: string</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2e0i1mqppllhpxafr5p2ne0sa\">包含组件的模块的模块 ID。需要能够解析模板和样式的相对 URL。在 CommonJS 中，这始终可以设置为 \n<code>module.id</code>，类似地，SystemJS 在每个模块中公开 \n<code>__moduleName</code> 变量。</p>\n<h2 id=\"simple-example-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e0ehtrqzapj0lv5nn6iutlmhe\"><i class=\"material-icons\">link</i>简单的例子</h2>\n<code-example>\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: 'someDir',\n  moduleId: module.id\n})\nclass SomeDir {\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"templateUrl\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">templateUrl?: string</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dawq2m5pqdrcx5ccnubdl07qs\">为 Angular 组件指定模板 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtw8svb05u4v5yrndk0ri1wt3\">每个视图只能定义 \n<code>templateUrl</code> 或 \n<code>template</code> 之一。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"template\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">template?: string</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t1mn4k5a16gdq6rutrjbnnt9\">为 Angular 组件指定内联模板。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j102ydfrvorvhtcwg5csi6hp\">每个组件只能定义 \n<code>templateUrl</code> 或 \n<code>template</code> 之一。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"styleUrls\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">styleUrls?: string[]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vy9bv5dhw7oj31ilqyh8cicw\">为 Angular 组件指定样式表 URL。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"styles\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">styles?: string[]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"272iutehlpgxkjle6hpvh7b5u\">为 Angular 组件指定内联样式表。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"animations\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">animations?: any[]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wvxj8j2qy79p7zieoyuqm9w3\">动画通过类似于 DSL 的方式在组件上定义。这种描述动画的 DSL 方法提供了灵活性，既有利于开发人员，也有利于框架。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fkqsof8jdkyyhgiahs0lgbfx\">动画通过监听模板中元素发生的 state 变化来工作。当 state 变化发生时，Angular 就可以利用它来对中间的弧线进行动画处理。这与 CSS 过渡的工作方式类似，但是，通过使用编程 DSL，动画不限于特定于 DOM 的环境。（Angular 还可以幕后执行优化，使动画更具性能。）</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dnvuxbkwp9le7dnmox1fob9c\">为了使动画可用，动画 state 变化被放置在 \n<a href=\"api/animations/trigger\">动画触发器</a> 中，这些触发器位于 \n<code>animations</code> 注解元数据中。在一个触发器中，可以放置 \n<a href=\"api/animations/state\">state</a> 和 \n<a href=\"api/animations/transition\">transition</a> 条目。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'animation-cmp',\n  templateUrl: 'animation-cmp.html',\n  animations: [\n    // this here is our <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a> <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> that\n    // will contain our <a href=\"api/animations/state\" class=\"code-anchor\">state</a> change animations.\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('myTriggerName', [\n      // the styles defined for the `on` and `off`\n      // states declared below are persisted on the\n      // element once the <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a> completes.\n      <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('on', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1 }),\n      <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('off', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0 }),\n\n      // this here is our <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a> that kicks off when\n      // this <a href=\"api/animations/state\" class=\"code-anchor\">state</a> change jump is true\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('on =&gt; off', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(\"1s\")\n      ])\n    ])\n  ]\n})\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4x57tzcfj1469s92ntzpzzxfj\">如上面的代码所示，一组相关的动画 state 都包含在一个动画 \n<code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a></code> 中（上面的代码示例将触发器称为 \n<code>myTriggerName</code>）。当创建触发器时，它可以通过一个以 \n<code>@</code> 符号开头的属性绑定到组件模板中的元素上，该属性后面跟着触发器名称和一个表达式，该表达式用于确定该触发器的 state 值。</p>\n<code-example language=\"html\">\n&lt;!-- animation-cmp.html --&gt;\n&lt;div @myTriggerName=\"expression\"&gt;...&lt;/div&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a72e5zsuu0njwlvtp21r47sym\">为了执行 state 变化，\n<code>expression</code> 值必须从其现有值更改为我们已设置动画以对其进行动画处理的值（在上面的示例中，我们正在监听 \n<code>on</code> 和 \n<code>off</code> 之间的 state 变化）。附加到触发器的 \n<code>expression</code> 值必须是可以在模板/组件上下文中求值的东西。</p>\n<h3 id=\"dsl-animation-functions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9suae6rq34scoxoth0xmc0zpi\"><i class=\"material-icons\">link</i>DSL 动画函数</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvczvffp78c7yd0obbfv08a9d\">请访问下面列出的每个动画 DSL 函数，以更好地了解如何在 Angular 中使用它们以及使用它们的原因，从而创建动画：</p>\n<ul>\n<li>\n<a href=\"api/animations/trigger\">trigger()</a>\n</li>\n<li>\n<a href=\"api/animations/state\">state()</a>\n</li>\n<li>\n<a href=\"api/animations/transition\">transition()</a>\n</li>\n<li>\n<a href=\"api/animations/group\">group()</a>\n</li>\n<li>\n<a href=\"api/animations/sequence\">sequence()</a>\n</li>\n<li>\n<a href=\"api/animations/style\">style()</a>\n</li>\n<li>\n<a href=\"api/animations/animate\">animate()</a>\n</li>\n<li>\n<a href=\"api/animations/keyframes\">keyframes()</a>\n</li>\n</ul>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"encapsulation\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">encapsulation?: <a href=\"api/core/ViewEncapsulation\" class=\"code-anchor\">ViewEncapsulation</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brjylblpkw20iurzkgygpc243\">指定模板和样式的封装方式：</p>\n<ul>\n<li>\n<a href=\"api/core/ViewEncapsulation#Native\">`ViewEncapsulation.Native`</a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q5xt1l4wm8y3pn98ufthlbct\">使用影子 DOM — 仅在平台原生支持时有效，</p>\n</li>\n<li>\n<a href=\"api/core/ViewEncapsulation#Emulated\">`ViewEncapsulation.Emulated`</a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cit8k6ysmem80e3zfjbbx21dp\">使用模拟原生行为的垫片 CSS，</p>\n</li>\n<li>\n<a href=\"api/core/ViewEncapsulation#None\">`ViewEncapsulation.None`</a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76ptsq17r8qxkz4ubnepi6hvf\">使用全局 CSS，不进行任何封装。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38ve0waop3df4ivfzzmz88dgy\">如果组件未定义 \n<code>encapsulation</code>，则使用来自 \n<a href=\"api/core/CompilerOptions\"><code>CompilerOptions</code></a> 的默认值。默认值为 \n<code><a href=\"api/core/ViewEncapsulation#Emulated\" class=\"code-anchor\">ViewEncapsulation.Emulated</a></code>。提供新的 \n<code><a href=\"api/core/CompilerOptions\" class=\"code-anchor\">CompilerOptions</a></code> 来覆盖此值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"es17vu807goc0iml59jmnt3hk\">如果将封装设置为 \n<code><a href=\"api/core/ViewEncapsulation#Emulated\" class=\"code-anchor\">ViewEncapsulation.Emulated</a></code> 且组件没有 \n<code>styles</code> 或 \n<code>styleUrls</code>，则封装将自动切换到 \n<code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code>。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"interpolation\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">interpolation?: [string, string]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27pstq1mf6wohw2y7gnn95j5f\">覆盖默认的封装开始和结束分隔符（分别为 \n<code>{{</code> 和 \n<code>}}</code>）。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"entryComponents\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">entryComponents?: Array&lt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt; | any[]&gt;</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"570znww9rgyaqyzro88ot3fje\">定义在定义此组件时应一起编译的组件。对于此处列出的每个组件，Angular 将创建一个 \n<a href=\"api/core/ComponentFactory\"><code>ComponentFactory</code></a> 并将其存储在 \n<a href=\"api/core/ComponentFactoryResolver\"><code>ComponentFactoryResolver</code></a> 中。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"preserveWhitespaces\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">preserveWhitespaces?: boolean</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pnaebaxtj1c8eghfywor2rp3\">如果将 \n<a href=\"api/core/Component#preserveWhitespaces\">Component.preserveWhitespaces</a> 设置为 \n<code>false</code>，则会从编译后的模板中删除可能多余的空白字符（与 JavaScript 正则表达式中的 \n<code>\\s</code> 字符类匹配的字符）。这可以大大减少 AOT 生成的代码大小，并加快视图创建速度。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"577esxcs7so4x14rbxudy2zst\">当前实现根据以下规则工作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg6h9ef02bkhm8g1amsznokvw\">删除模板开头和结尾的所有空白字符（修剪）；</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkws1qwsl68gs4pneslua8nje\">删除仅包含空白字符的文本节点（例如：\n<code>&lt;button&gt;Action 1&lt;/button&gt; &lt;button&gt;Action 2&lt;/button&gt;</code> 将转换为 \n<code>&lt;button&gt;Action 1&lt;/button&gt;&lt;button&gt;Action 2&lt;/button&gt;</code>（按钮之间没有空白字符）；</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg7a1w3yzldn4upjonjr08pn4\">将文本节点中的空白字符序列替换为一个空格（例如：\n<code>&lt;span&gt;\\n some text\\n&lt;/span&gt;</code> 将转换为 \n<code>&lt;span&gt; some text &lt;/span&gt;</code>）；</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"561eu9y3nx4m0u54l5lh8x2au\">在空白字符有意义的 HTML 标签（例如 \n<code>&lt;pre&gt;</code>、\n<code>&lt;<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a>&gt;</code>）中，文本节点保持原样。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o9v7djucxry47vtls3xn5x2u\">所述转换可能会影响 DOM 节点的布局，因此 \n<code>preserveWhitespaces</code> 选项默认情况下为 \n<code>true</code>（不删除空白字符）。在 Angular 5 中，你需要选择加入空白字符删除（但我们可能会在 Angular 6 或更高版本中重新审视默认设置）。如果你想更改应用程序中所有组件的默认设置，可以使用 AOT 编译器的 \n<code>preserveWhitespaces</code> 选项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1dc5ps54bxo76h246t7plft1\">即使你决定选择加入空白字符删除，也有一些方法可以保留模板中某些片段的空白字符。你可以使用 \n<code>ngPreserveWhitespaces</code> 属性来排除整个 DOM 子树，例如：</p>\n<code-example language=\"html\">\n&lt;div ngPreserveWhitespaces&gt;\n    whitespaces are preserved here\n    &lt;span&gt;    and here &lt;/span&gt;\n&lt;/div&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d67r7s8zilxl0ttzebc7d9jqy\">或者，你可以使用 \n<code>&amp;ngsp;</code> 伪实体来强制保留文本节点中的空格。\n<code>&amp;ngsp;</code> 将被 Angular 的模板编译器替换为空格字符，例如：</p>\n<code-example language=\"html\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;Spaces&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;&amp;ngsp;&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;between&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;&amp;ngsp;&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;links.&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93vwubeg4d53j7zo7m4v6hmip\">将编译为等效的：</p>\n<code-example language=\"html\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;Spaces&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt; &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;between&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt; &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;links.&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cjh90vtpljuks6inbq6ch4nc\">请注意，当 \n<code>preserveWhitespaces</code> 选项设置为 \n<code>false</code> 时，\n<code>&amp;ngsp;</code> 的序列仍然会折叠为一个空格字符。例如：</p>\n<code-example language=\"html\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;before&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;&amp;ngsp;&amp;ngsp;&amp;ngsp;&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;after&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wmdoj4ytqob34ce5p4ojnh8s\">将等效于：</p>\n<code-example language=\"html\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;before&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt; &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;after&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qfmm72ww1guxnx3lfc979kdk\"><code>&amp;ngsp;</code> 伪实体对于强制存在一个空格很有用（具有 \n<code>&amp;ngsp;</code> 伪实体的文本节点永远不会被删除），但它并不意味着标记空白字符序列。前面描述的 \n<code>ngPreserveWhitespaces</code> 属性对于保留空白字符序列更有用。</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/group\n - api/animations/keyframes\n - api/animations/query\n - api/animations/sequence\n - api/animations/stagger\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/APP_BASE_HREF\n - api/common/AsyncPipe\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/DeprecatedCurrencyPipe\n - api/common/DeprecatedDatePipe\n - api/common/DeprecatedDecimalPipe\n - api/common/DeprecatedPercentPipe\n - api/common/HashLocationStrategy\n - api/common/I18nPluralPipe\n - api/common/I18nSelectPipe\n - api/common/JsonPipe\n - api/common/Location\n - api/common/LowerCasePipe\n - api/common/NgComponentOutlet\n - api/common/NgIf\n - api/common/NgTemplateOutlet\n - api/common/PathLocationStrategy\n - api/common/PercentPipe\n - api/common/SlicePipe\n - api/core\n - api/core/AfterContentChecked\n - api/core/AfterContentInit\n - api/core/AfterViewChecked\n - api/core/AfterViewInit\n - api/core/ApplicationRef\n - api/core/ChangeDetectorRef\n - api/core/ComponentDecorator\n - api/core/ContentChild\n - api/core/ContentChildDecorator\n - api/core/ContentChildren\n - api/core/ContentChildrenDecorator\n - api/core/Directive\n - api/core/DoCheck\n - api/core/EventEmitter\n - api/core/Host\n - api/core/HostDecorator\n - api/core/IterableDiffers\n - api/core/KeyValueDiffers\n - api/core/NgZone\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/QueryList\n - api/core/ViewChild\n - api/core/ViewChildDecorator\n - api/core/ViewChildren\n - api/core/ViewChildrenDecorator\n - api/core/ViewContainerRef\n - api/core/ViewEncapsulation\n - api/core/testing/TestBed\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/forms/RadioControlValueAccessor\n - api/forms/SelectControlValueAccessor\n - api/http/Http\n - api/http/XHRBackend\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/NavigationExtras\n - api/router/RouterState\n - api/router/RouterStateSnapshot\n - api/router/UrlSegment\n - api/router/UrlTree\n - api/router/testing/SpyNgModuleFactoryLoader\n - api/upgrade/UpgradeAdapter\n - api/upgrade/static/downgradeComponent\n - guide/ajs-quick-reference\n - guide/animations\n - guide/aot-compiler\n - guide/architecture\n - guide/architecture-components\n - guide/architecture-modules\n - guide/architecture-services\n - guide/attribute-directives\n - guide/change-log\n - guide/cheatsheet\n - guide/component-interaction\n - guide/component-styles\n - guide/dependency-injection\n - guide/dependency-injection-in-action\n - guide/displaying-data\n - guide/docs-style-guide\n - guide/dynamic-component-loader\n - guide/dynamic-form\n - guide/forms\n - guide/glossary\n - guide/hierarchical-dependency-injection\n - guide/i18n\n - guide/lifecycle-hooks\n - guide/ngmodule-faq\n - guide/npm-packages\n - guide/observables-in-angular\n - guide/pipes\n - guide/providers\n - guide/reactive-forms\n - guide/router\n - guide/rx-library\n - guide/set-document-title\n - guide/setup\n - guide/setup-systemjs-anatomy\n - guide/structural-directives\n - guide/styleguide\n - guide/template-syntax\n - guide/testing\n - guide/upgrade\n - guide/user-input\n - guide/webpack\n - tutorial/toh-pt0\n - tutorial/toh-pt1\n - tutorial/toh-pt2\n - tutorial/toh-pt3\n - tutorial/toh-pt4\n - tutorial/toh-pt5\n - tutorial/toh-pt6\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/animation\n - api/animations/group\n - api/animations/keyframes\n - api/animations/sequence\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/core\n - api/core/ChangeDetectionStrategy\n - api/core/CompilerOptions\n - api/core/Component#animations\n - api/core/Component#changeDetection\n - api/core/Component#component\n - api/core/Component#description\n - api/core/Component#dsl-animation-functions\n - api/core/Component#encapsulation\n - api/core/Component#entryComponents\n - api/core/Component#example\n - api/core/Component#how-to-use\n - api/core/Component#interpolation\n - api/core/Component#metadata-overview\n - api/core/Component#metadata-properties\n - api/core/Component#moduleId\n - api/core/Component#preserveWhitespaces\n - api/core/Component#simple-example\n - api/core/Component#simple-example-1\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/core/Component#template\n - api/core/Component#templateUrl\n - api/core/Component#viewProviders\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/Directive\n - api/core/Directive#exportAs\n - api/core/Directive#host\n - api/core/Directive#inputs\n - api/core/Directive#outputs\n - api/core/Directive#providers\n - api/core/Directive#queries\n - api/core/Directive#selector\n - api/core/Provider\n - api/core/Type\n - api/core/ViewEncapsulation\n - api/core/ViewEncapsulation#Emulated\n - api/core/ViewEncapsulation#Native\n - api/core/ViewEncapsulation#None\n - api/forms/DefaultValueAccessor\n - api/router/RouterLinkWithHref\n - https://github.com/angular/angular/tree/5.2.11/packages/core/src/metadata/directives.ts#L756-L757\n - https://www.npmjs.com/package/@angular/core\n-->"
}