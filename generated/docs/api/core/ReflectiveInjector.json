{
  "id": "api/core/ReflectiveInjector",
  "title": "ReflectiveInjector",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"reflectiveinjector\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#reflectiveinjector\"><i class=\"material-icons\">link</i></a>ReflectiveInjector</h1>\n    <label class=\"api-type-label class\">class</label>\n    <label class=\"api-status-label deprecated\">deprecated</label>\n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a> } from <a href=\"api/core\">'@angular/core'</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/core/src/di/reflective_injector.ts#L18-L279\">core/src/di/reflective_injector.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n<section class=\"deprecated\">\n  <h2 id=\"deprecation-notes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#deprecation-notes\"><i class=\"material-icons\">link</i></a>Deprecation Notes</h2>\n  <p>from v5 - slow and brings in a lot of code, Use <code>Injector.create</code> instead.</p>\n\n</section>\n\n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a> implements <a class=\"code-anchor\" href=\"api/core/Injector\">Injector</a> {\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#resolve\">static resolve(providers: Provider[]): ResolvedReflectiveProvider[]</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#resolveAndCreate\">static resolveAndCreate(providers: Provider[], parent?: Injector): ReflectiveInjector</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#fromResolvedProviders\">static fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector): ReflectiveInjector</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#parent\">get parent: Injector | null</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#resolveAndCreateChild\">resolveAndCreateChild(providers: Provider[]): ReflectiveInjector</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#createChildFromResolved\">createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#resolveAndInstantiate\">resolveAndInstantiate(provider: Provider): any</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#instantiateResolved\">instantiateResolved(provider: ResolvedReflectiveProvider): any</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#get\">get(token: any, notFoundValue?: any): any</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>A ReflectiveDependency injection container used for instantiating objects and resolving\ndependencies.</p>\n<p>An <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> is a replacement for a <code>new</code> operator, which can automatically resolve the\nconstructor dependencies.</p>\n<p>In typical use, application code asks for the dependencies in the constructor and they are\nresolved by the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>.</p>\n<h3 id=\"example-live-demo\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#example-live-demo\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/jzjec0?p=preview\">live demo</a>)</h3>\n<p>The following example creates an <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> configured to create <code>Engine</code> and <code>Car</code>.</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\nvar car = injector.get(Car);\nexpect(car instanceof Car).toBe(true);\nexpect(car.engine instanceof Engine).toBe(true);\n</code-example>\n<p>Notice, we don't use the <code>new</code> operator because we explicitly want to have the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>\nresolve all of the object's dependencies automatically.</p>\n\n</section>\n\n\n  \n  \n\n\n\n<section class=\"static-members\">\n  <h2 id=\"static-members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#static-members\"><i class=\"material-icons\">link</i></a>Static Members</h2>\n  \n    <div class=\"static-member\">\n  <a id=\"resolve\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> resolve(providers: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a>[]): <a href=\"api/core/ResolvedReflectiveProvider\" class=\"code-anchor\">ResolvedReflectiveProvider</a>[]</code-example>\n  <p>Turns an array of provider definitions into an array of resolved providers.</p>\n<p>A resolution is a process of flattening multiple nested arrays and converting individual\nproviders into an array of <a href=\"api/core/ResolvedReflectiveProvider\"><code>ResolvedReflectiveProvider</code></a>s.</p>\n<h3 id=\"example-live-demo-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#example-live-demo-1\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/AiXTHi?p=preview\">live demo</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n\nexpect(providers.length).toEqual(2);\n\nexpect(providers[0] instanceof <a href=\"api/core/ResolvedReflectiveProvider\" class=\"code-anchor\">ResolvedReflectiveProvider</a>).toBe(true);\nexpect(providers[0].key.displayName).toBe(\"Car\");\nexpect(providers[0].dependencies.length).toEqual(1);\nexpect(providers[0].factory).toBeDefined();\n\nexpect(providers[1].key.displayName).toBe(\"Engine\");\n});\n</code-example>\n<p>See <a href=\"api/core/ReflectiveInjector#fromResolvedProviders\">fromResolvedProviders</a> for more info.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"static-member\">\n  <a id=\"resolveAndCreate\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> resolveAndCreate(providers: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a>[], parent?: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>): <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a></code-example>\n  <p>Resolves an array of providers and creates an injector from those providers.</p>\n<p>The passed-in providers can be an array of <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code>, <a href=\"api/core/Provider\"><code>Provider</code></a>,\nor a recursive array of more providers.</p>\n<h3 id=\"example-live-demo-2\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#example-live-demo-2\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/ePOccA?p=preview\">live demo</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\nexpect(injector.get(Car) instanceof Car).toBe(true);\n</code-example>\n<p>This function is slower than the corresponding <code>fromResolvedProviders</code>\nbecause it needs to resolve the passed-in providers first.\nSee <a href=\"api/core/ReflectiveInjector#resolve\">resolve</a> and\n<a href=\"api/core/ReflectiveInjector#fromResolvedProviders\">fromResolvedProviders</a>.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"static-member\">\n  <a id=\"fromResolvedProviders\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fromResolvedProviders(providers: <a href=\"api/core/ResolvedReflectiveProvider\" class=\"code-anchor\">ResolvedReflectiveProvider</a>[], parent?: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>): <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a></code-example>\n  <p>Creates an injector from previously resolved providers.</p>\n<p>This API is the recommended way to construct injectors in performance-sensitive parts.</p>\n<h3 id=\"example-live-demo-3\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#example-live-demo-3\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/KrSMci?p=preview\">live demo</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar providers = ReflectiveInjector.resolve([Car, Engine]);\nvar injector = ReflectiveInjector.fromResolvedProviders(providers);\nexpect(injector.get(Car) instanceof Car).toBe(true);\n</code-example>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"parent\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get parent: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a> | null</code-example>\n  <p>Parent of this injector.</p>\n<!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n-->\n<h3 id=\"example-live-demo-4\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#example-live-demo-4\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/eosMGo?p=preview\">live demo</a>)</h3>\n<code-example language=\"typescript\">\nvar parent = ReflectiveInjector.resolveAndCreate([]);\nvar child = parent.resolveAndCreateChild([]);\nexpect(child.parent).toBe(parent);\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"resolveAndCreateChild\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">resolveAndCreateChild(providers: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a>[]): <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a></code-example>\n  <p>Resolves an array of providers and creates a child injector from those providers.</p>\n<!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n-->\n<p>The passed-in providers can be an array of <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code>, <a href=\"api/core/Provider\"><code>Provider</code></a>,\nor a recursive array of more providers.</p>\n<h3 id=\"example-live-demo-5\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#example-live-demo-5\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/opB3T4?p=preview\">live demo</a>)</h3>\n<code-example language=\"typescript\">\nclass ParentProvider {}\nclass ChildProvider {}\n\nvar parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\nvar child = parent.resolveAndCreateChild([ChildProvider]);\n\nexpect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\nexpect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\nexpect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n</code-example>\n<p>This function is slower than the corresponding <code>createChildFromResolved</code>\nbecause it needs to resolve the passed-in providers first.\nSee <a href=\"api/core/ReflectiveInjector#resolve\">resolve</a> and\n<a href=\"api/core/ReflectiveInjector#createChildFromResolved\">createChildFromResolved</a>.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"createChildFromResolved\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">createChildFromResolved(providers: <a href=\"api/core/ResolvedReflectiveProvider\" class=\"code-anchor\">ResolvedReflectiveProvider</a>[]): <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a></code-example>\n  <p>Creates a child injector from previously resolved providers.</p>\n<!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n-->\n<p>This API is the recommended way to construct injectors in performance-sensitive parts.</p>\n<h3 id=\"example-live-demo-6\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#example-live-demo-6\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/VhyfjN?p=preview\">live demo</a>)</h3>\n<code-example language=\"typescript\">\nclass ParentProvider {}\nclass ChildProvider {}\n\nvar parentProviders = ReflectiveInjector.resolve([ParentProvider]);\nvar childProviders = ReflectiveInjector.resolve([ChildProvider]);\n\nvar parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\nvar child = parent.createChildFromResolved(childProviders);\n\nexpect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\nexpect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\nexpect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"resolveAndInstantiate\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">resolveAndInstantiate(provider: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a>): any</code-example>\n  <p>Resolves a provider and instantiates an object in the context of the injector.</p>\n<p>The created object does not get cached by the injector.</p>\n<h3 id=\"example-live-demo-7\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#example-live-demo-7\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/yvVXoB?p=preview\">live demo</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\nvar car = injector.resolveAndInstantiate(Car);\nexpect(car.engine).toBe(injector.get(Engine));\nexpect(car).not.toBe(injector.resolveAndInstantiate(Car));\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"instantiateResolved\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">instantiateResolved(provider: <a href=\"api/core/ResolvedReflectiveProvider\" class=\"code-anchor\">ResolvedReflectiveProvider</a>): any</code-example>\n  <p>Instantiates an object using a resolved provider in the context of the injector.</p>\n<p>The created object does not get cached by the injector.</p>\n<h3 id=\"example-live-demo-8\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ReflectiveInjector#example-live-demo-8\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/ptCImQ?p=preview\">live demo</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Engine]);\nvar carProvider = ReflectiveInjector.resolve([Car])[0];\nvar car = injector.instantiateResolved(carProvider);\nexpect(car.engine).toBe(injector.get(Engine));\nexpect(car).not.toBe(injector.instantiateResolved(carProvider));\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"get\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get(token: any, notFoundValue?: any): any</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/core\n - api/core/Injector\n - api/core/ReflectiveKey\n-->\n<!-- links from this doc:\n - api/core\n - api/core/Injectable\n - api/core/Injector\n - api/core/Provider\n - api/core/ReflectiveInjector#createChildFromResolved\n - api/core/ReflectiveInjector#deprecation-notes\n - api/core/ReflectiveInjector#description\n - api/core/ReflectiveInjector#example-live-demo\n - api/core/ReflectiveInjector#example-live-demo-1\n - api/core/ReflectiveInjector#example-live-demo-2\n - api/core/ReflectiveInjector#example-live-demo-3\n - api/core/ReflectiveInjector#example-live-demo-4\n - api/core/ReflectiveInjector#example-live-demo-5\n - api/core/ReflectiveInjector#example-live-demo-6\n - api/core/ReflectiveInjector#example-live-demo-7\n - api/core/ReflectiveInjector#example-live-demo-8\n - api/core/ReflectiveInjector#fromResolvedProviders\n - api/core/ReflectiveInjector#get\n - api/core/ReflectiveInjector#instantiateResolved\n - api/core/ReflectiveInjector#members\n - api/core/ReflectiveInjector#overview\n - api/core/ReflectiveInjector#parent\n - api/core/ReflectiveInjector#reflectiveinjector\n - api/core/ReflectiveInjector#resolve\n - api/core/ReflectiveInjector#resolveAndCreate\n - api/core/ReflectiveInjector#resolveAndCreateChild\n - api/core/ReflectiveInjector#resolveAndInstantiate\n - api/core/ReflectiveInjector#static-members\n - api/core/ResolvedReflectiveProvider\n - api/core/Type\n - api/upgrade/static\n - http://plnkr.co/edit/AiXTHi?p=preview\n - http://plnkr.co/edit/KrSMci?p=preview\n - http://plnkr.co/edit/VhyfjN?p=preview\n - http://plnkr.co/edit/ePOccA?p=preview\n - http://plnkr.co/edit/eosMGo?p=preview\n - http://plnkr.co/edit/jzjec0?p=preview\n - http://plnkr.co/edit/opB3T4?p=preview\n - http://plnkr.co/edit/ptCImQ?p=preview\n - http://plnkr.co/edit/yvVXoB?p=preview\n - https://github.com/angular/angular/tree/5.2.11/packages/core/src/di/reflective_injector.ts#L18-L279\n - https://www.npmjs.com/package/@angular/core\n-->"
}