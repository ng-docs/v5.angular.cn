{
  "id" : "api/core/ReflectiveInjector",
  "title" : "ReflectiveInjector",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"reflectiveinjector\">ReflectiveInjector</h1>\n    <label class=\"api-type-label class\">class</label>\n    <label class=\"api-status-label deprecated\">deprecated</label>\n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a> } from <a href=\"api/core\">'@angular/core'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/core/src/di/reflective_injector.ts#L18-L279\">core/src/di/reflective_injector.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n<section class=\"deprecated\">\n  <h2 id=\"deprecation-notes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxhln38nrp36303qqb6hgjwp9\"><i class=\"material-icons\">link</i>弃用说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djpf08aymtciqwbw58fyqkly2\">从 v5 开始 - 速度慢且引入大量代码，请改用 \n<code>Injector.create</code>。</p>\n\n</section>\n\n  <section class=\"class-overview\">\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a> implements <a class=\"code-anchor\" href=\"api/core/Injector\">Injector</a> {\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#resolve\">static resolve(providers: Provider[]): ResolvedReflectiveProvider[]</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#resolveAndCreate\">static resolveAndCreate(providers: Provider[], parent?: Injector): ReflectiveInjector</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#fromResolvedProviders\">static fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector): ReflectiveInjector</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#parent\">get parent: Injector | null</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#resolveAndCreateChild\">resolveAndCreateChild(providers: Provider[]): ReflectiveInjector</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#createChildFromResolved\">createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#resolveAndInstantiate\">resolveAndInstantiate(provider: Provider): any</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#instantiateResolved\">instantiateResolved(provider: ResolvedReflectiveProvider): any</a>\n  <a class=\"code-anchor\" href=\"api/core/ReflectiveInjector#get\">get(token: any, notFoundValue?: any): any</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2erzqyx7q7pm5zl6lpyv9u66t\">用于实例化对象和解析依赖项的反射依赖注入容器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ardr778vcwpgcwa96uy281vpl\"><code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 是 \n<code>new</code> 运算符的替代品，它可以自动解析构造函数依赖项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"itnwj4bm0swhms0qmqerbjb4\">在典型使用中，应用程序代码在构造函数中请求依赖项，它们由 \n<code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 解析。</p>\n<h3 id=\"example-live-demo\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24kgu8tk2ftdoyginr5hdtqby\"><i class=\"material-icons\">link</i>示例 (\n<a href=\"http://plnkr.co/edit/jzjec0?p=preview\">动态示例</a>)</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8euo1psy1szpf1rlo6r45bo3j\">以下示例创建了一个配置为创建 \n<code>Engine</code> 和 \n<code>Car</code> 的 \n<code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\nvar car = injector.get(Car);\nexpect(car instanceof Car).toBe(true);\nexpect(car.engine instanceof Engine).toBe(true);\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwj28pes7xhy0pnkxqh3kuw6r\">注意，我们没有使用 \n<code>new</code> 运算符，因为我们明确希望 \n<code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 自动解析所有对象的依赖项。</p>\n\n</section>\n\n\n  \n  \n\n\n\n<section class=\"static-members\">\n  <h2 id=\"static-members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ixh78z2dfifcy2khe8k014ge\"><i class=\"material-icons\">link</i>静态成员</h2>\n  \n    <div class=\"static-member\">\n  <a id=\"resolve\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> resolve(providers: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a>[]): <a href=\"api/core/ResolvedReflectiveProvider\" class=\"code-anchor\">ResolvedReflectiveProvider</a>[]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6id2fdcsgu5gebikby90wrtxw\">将提供者定义数组转换为已解析提供者数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jvhmaujjffb28ka1ygd98og8\">解析是将多个嵌套数组扁平化并转换单个提供者为 \n<a href=\"api/core/ResolvedReflectiveProvider\"><code>ResolvedReflectiveProvider</code></a> 数组的过程。</p>\n<h3 id=\"example-live-demo-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cglyj7ycnnn20lpav55zyr9nd\"><i class=\"material-icons\">link</i>范例 (\n<a href=\"http://plnkr.co/edit/AiXTHi?p=preview\">动态示例</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n\nexpect(providers.length).toEqual(2);\n\nexpect(providers[0] instanceof <a href=\"api/core/ResolvedReflectiveProvider\" class=\"code-anchor\">ResolvedReflectiveProvider</a>).toBe(true);\nexpect(providers[0].key.displayName).toBe(\"Car\");\nexpect(providers[0].dependencies.length).toEqual(1);\nexpect(providers[0].factory).toBeDefined();\n\nexpect(providers[1].key.displayName).toBe(\"Engine\");\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tbgfscq39s3cvh5qdmwh0pi9\">查看 \n<a href=\"api/core/ReflectiveInjector#fromResolvedProviders\">fromResolvedProviders</a> 获取更多信息。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"static-member\">\n  <a id=\"resolveAndCreate\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> resolveAndCreate(providers: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a>[], parent?: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>): <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8syoe6uo4v5wzh0koq72dmsdp\">求解一组提供者，并根据这些提供者创建一个注入器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hnz2l9cfi84frbae3wvhr1px\">传入的提供者可以是 \n<code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code>、\n<a href=\"api/core/Provider\"><code>Provider</code></a> 数组， 或者更多提供者的递归数组。</p>\n<h3 id=\"example-live-demo-2\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n0znl9ctakbljrn9prevs3iw\"><i class=\"material-icons\">link</i>范例 (\n<a href=\"http://plnkr.co/edit/ePOccA?p=preview\">动态示例</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\nexpect(injector.get(Car) instanceof Car).toBe(true);\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"esyy9glimo0oybbs2uxjwj307\">此函数比相应的 \n<code>fromResolvedProviders</code> 速度慢，因为它需要先求解传入的提供者。 查看 \n<a href=\"api/core/ReflectiveInjector#resolve\">resolve</a> 和 \n<a href=\"api/core/ReflectiveInjector#fromResolvedProviders\">fromResolvedProviders</a>。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"static-member\">\n  <a id=\"fromResolvedProviders\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fromResolvedProviders(providers: <a href=\"api/core/ResolvedReflectiveProvider\" class=\"code-anchor\">ResolvedReflectiveProvider</a>[], parent?: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>): <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89oh8nnbqnp8fj1nat5zouy3b\">根据先前求解的提供者创建一个注入器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj6i0qnzm0cs6l7e0egpig577\">此 API 是在性能敏感部分构建注入器的推荐方法。</p>\n<h3 id=\"example-live-demo-3\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lq22xlcze0xbtsife3kq7v83\"><i class=\"material-icons\">link</i>范例 (\n<a href=\"http://plnkr.co/edit/KrSMci?p=preview\">动态示例</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar providers = ReflectiveInjector.resolve([Car, Engine]);\nvar injector = ReflectiveInjector.fromResolvedProviders(providers);\nexpect(injector.get(Car) instanceof Car).toBe(true);\n</code-example>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"parent\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get parent: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a> | null</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7n2ai2iu2skwxfd0tl1qalq71\">此注入器的父级。</p>\n<!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n-->\n<h3 id=\"example-live-demo-4\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axou4ibwnwa693nlut0qekbno\"><i class=\"material-icons\">link</i>范例 (\n<a href=\"http://plnkr.co/edit/eosMGo?p=preview\">动态示例</a>)</h3>\n<code-example language=\"typescript\">\nvar parent = ReflectiveInjector.resolveAndCreate([]);\nvar child = parent.resolveAndCreateChild([]);\nexpect(child.parent).toBe(parent);\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"resolveAndCreateChild\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">resolveAndCreateChild(providers: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a>[]): <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asmyrnxata7smrq1iil0q6qt6\">求解一组提供者，并根据这些提供者创建一个子注入器。</p>\n<!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n-->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hnz2l9cfi84frbae3wvhr1px\">传入的提供者可以是 \n<code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code>、\n<a href=\"api/core/Provider\"><code>Provider</code></a> 数组， 或者更多提供者的递归数组。</p>\n<h3 id=\"example-live-demo-5\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5y2ezgk5qvo2n0qbydzkkti77\"><i class=\"material-icons\">link</i>范例 (\n<a href=\"http://plnkr.co/edit/opB3T4?p=preview\">动态示例</a>)</h3>\n<code-example language=\"typescript\">\nclass ParentProvider {}\nclass ChildProvider {}\n\nvar parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\nvar child = parent.resolveAndCreateChild([ChildProvider]);\n\nexpect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\nexpect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\nexpect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j9ywclq2rarbvvurdsxm4w4i\">此函数比相应的 \n<code>createChildFromResolved</code> 速度慢，因为它需要先求解传入的提供者。 查看 \n<a href=\"api/core/ReflectiveInjector#resolve\">resolve</a> 和 \n<a href=\"api/core/ReflectiveInjector#createChildFromResolved\">createChildFromResolved</a>。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"createChildFromResolved\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">createChildFromResolved(providers: <a href=\"api/core/ResolvedReflectiveProvider\" class=\"code-anchor\">ResolvedReflectiveProvider</a>[]): <a href=\"api/core/ReflectiveInjector\" class=\"code-anchor\">ReflectiveInjector</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40273l8jg5fiifmpt01720k16\">根据先前求解的提供者创建一个子注入器。</p>\n<!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n-->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj6i0qnzm0cs6l7e0egpig577\">此 API 是在性能敏感部分构建注入器的推荐方法。</p>\n<h3 id=\"example-live-demo-6\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jzxexgxy6s869w0ehyrjiin2\"><i class=\"material-icons\">link</i>范例 (\n<a href=\"http://plnkr.co/edit/VhyfjN?p=preview\">动态示例</a>)</h3>\n<code-example language=\"typescript\">\nclass ParentProvider {}\nclass ChildProvider {}\n\nvar parentProviders = ReflectiveInjector.resolve([ParentProvider]);\nvar childProviders = ReflectiveInjector.resolve([ChildProvider]);\n\nvar parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\nvar child = parent.createChildFromResolved(childProviders);\n\nexpect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\nexpect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\nexpect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"resolveAndInstantiate\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">resolveAndInstantiate(provider: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a>): any</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apbc9gny013eu3d1lxvkav2c4\">求解一个提供者，并在注入器的上下文中实例化一个对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f25zks0hrc4tqb6528mix4alz\">创建的对象不会被注入器缓存。</p>\n<h3 id=\"example-live-demo-7\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qhm8u9sofksu0vlwe1ygov4q\"><i class=\"material-icons\">link</i>范例 (\n<a href=\"http://plnkr.co/edit/yvVXoB?p=preview\">动态示例</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\nvar car = injector.resolveAndInstantiate(Car);\nexpect(car.engine).toBe(injector.get(Engine));\nexpect(car).not.toBe(injector.resolveAndInstantiate(Car));\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"instantiateResolved\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">instantiateResolved(provider: <a href=\"api/core/ResolvedReflectiveProvider\" class=\"code-anchor\">ResolvedReflectiveProvider</a>): any</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emtqcctapre5hkzduxbfyn98c\">在注入器的上下文中，使用求解的提供者实例化一个对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f25zks0hrc4tqb6528mix4alz\">创建的对象不会被注入器缓存。</p>\n<h3 id=\"example-live-demo-8\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ibjwhpohfflcfgdwx9lf9l5c\"><i class=\"material-icons\">link</i>范例 (\n<a href=\"http://plnkr.co/edit/ptCImQ?p=preview\">动态示例</a>)</h3>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Engine {\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Engine]);\nvar carProvider = ReflectiveInjector.resolve([Car])[0];\nvar car = injector.instantiateResolved(carProvider);\nexpect(car.engine).toBe(injector.get(Engine));\nexpect(car).not.toBe(injector.instantiateResolved(carProvider));\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"get\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get(token: any, notFoundValue?: any): any</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/core\n - api/core/Injector\n - api/core/ReflectiveKey\n-->\n<!-- links from this doc:\n - api/core\n - api/core/Injectable\n - api/core/Injector\n - api/core/Provider\n - api/core/ReflectiveInjector#createChildFromResolved\n - api/core/ReflectiveInjector#deprecation-notes\n - api/core/ReflectiveInjector#description\n - api/core/ReflectiveInjector#example-live-demo\n - api/core/ReflectiveInjector#example-live-demo-1\n - api/core/ReflectiveInjector#example-live-demo-2\n - api/core/ReflectiveInjector#example-live-demo-3\n - api/core/ReflectiveInjector#example-live-demo-4\n - api/core/ReflectiveInjector#example-live-demo-5\n - api/core/ReflectiveInjector#example-live-demo-6\n - api/core/ReflectiveInjector#example-live-demo-7\n - api/core/ReflectiveInjector#example-live-demo-8\n - api/core/ReflectiveInjector#fromResolvedProviders\n - api/core/ReflectiveInjector#get\n - api/core/ReflectiveInjector#instantiateResolved\n - api/core/ReflectiveInjector#members\n - api/core/ReflectiveInjector#overview\n - api/core/ReflectiveInjector#parent\n - api/core/ReflectiveInjector#reflectiveinjector\n - api/core/ReflectiveInjector#resolve\n - api/core/ReflectiveInjector#resolveAndCreate\n - api/core/ReflectiveInjector#resolveAndCreateChild\n - api/core/ReflectiveInjector#resolveAndInstantiate\n - api/core/ReflectiveInjector#static-members\n - api/core/ResolvedReflectiveProvider\n - api/core/Type\n - api/upgrade/static\n - http://plnkr.co/edit/AiXTHi?p=preview\n - http://plnkr.co/edit/KrSMci?p=preview\n - http://plnkr.co/edit/VhyfjN?p=preview\n - http://plnkr.co/edit/ePOccA?p=preview\n - http://plnkr.co/edit/eosMGo?p=preview\n - http://plnkr.co/edit/jzjec0?p=preview\n - http://plnkr.co/edit/opB3T4?p=preview\n - http://plnkr.co/edit/ptCImQ?p=preview\n - http://plnkr.co/edit/yvVXoB?p=preview\n - https://github.com/angular/angular/tree/5.2.11/packages/core/src/di/reflective_injector.ts#L18-L279\n - https://www.npmjs.com/package/@angular/core\n-->"
}