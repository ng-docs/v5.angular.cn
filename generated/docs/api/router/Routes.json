{
  "id" : "api/router/Routes",
  "title" : "路由",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"routes\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"anrnn4h61d6a969fjjxz5ep43\"><i class=\"material-icons\">link</i>路由</h1>\n    <label class=\"api-type-label type-alias\">type-alias</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/router\">@angular/router</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from <a href=\"api/router\">'@angular/router'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/router/src/config.ts#L13-L255\">router/src/config.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wg8zs19jyhixrruj4pdxj05o\">表示路由配置。</p>\n\n</div>\n\n  \n  \n  \n  <section class=\"type-alias-overview\">\n    <code-example language=\"ts\" hidecopy=\"true\">\n    type <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = <a href=\"api/router/Route\" class=\"code-anchor\">Route</a>[];\n    </code-example>\n  </section>\n\n  \n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6th158odt6a7un1f8slr41ojp\"><code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 是路由配置的数组。每个配置都有以下属性：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejqshv4tkub4mnsakmquloltu\"><code>path</code> 是使用路由匹配器 DSL 的字符串。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jldr19ofxbgziyzb97b1a0dm\"><code>pathMatch</code> 是指定匹配策略的字符串。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yubf03nj2f5y2a9rjctkqqc2\"><code>matcher</code> 定义了路径匹配的自定义策略，并优先于 \n<code>path</code> 和 \n<code>pathMatch</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1g5k5v7o6653z4hat9jo2vqd\"><code>component</code> 是组件类型。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"204i20au9jf3bwdehxdhlr34t\"><code>redirectTo</code> 是将替换当前匹配段的 URL 片段。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65choxqx2xg6y6c92vdd6kskn\"><code>outlet</code> 是应将组件放置到的出口的名称。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87i3zrmsue5ip8yrcz3237dm3\"><code>canActivate</code> 是用于查找 CanActivate 处理程序的 DI 令牌数组。有关更多信息，请参阅 \n<a href=\"api/router/CanActivate\"><code>CanActivate</code></a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9q3rx472t9nn6k6c3cf0n61kd\"><code>canActivateChild</code> 是用于查找 CanActivateChild 处理程序的 DI 令牌数组。有关更多信息，请参阅 \n<a href=\"api/router/CanActivateChild\"><code>CanActivateChild</code></a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yht4w16j0ntvatj427j3qthz\"><code>canDeactivate</code> 是用于查找 CanDeactivate 处理程序的 DI 令牌数组。有关更多信息，请参阅 \n<a href=\"api/router/CanDeactivate\"><code>CanDeactivate</code></a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvj7qqgrdopvkqlmirzerpqhs\"><code>canLoad</code> 是用于查找 CanLoad 处理程序的 DI 令牌数组。有关更多信息，请参阅 \n<a href=\"api/router/CanLoad\"><code>CanLoad</code></a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49723zv7ccrwssasoa2uaxnjh\"><code>data</code> 是通过 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 提供给组件的附加数据。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1smouka37vqldaxdta5n1ir7g\"><code>resolve</code> 是用于查找数据解析器的 DI 令牌映射表。有关更多信息，请参阅 \n<a href=\"api/router/Resolve\"><code>Resolve</code></a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ikgc5b29r45fnin4hyv8ccoi\"><code>runGuardsAndResolvers</code> 定义了何时运行守卫和解析器。默认情况下，它们仅在路由的矩阵参数发生更改时运行。当设置为 \n<code>paramsOrQueryParamsChange</code> 时，它们也会在查询参数发生更改时运行。当设置为 \n<code>always</code> 时，它们将在每次运行时运行。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csswhd4v77otjyk12wvtbfxsd\"><code>children</code> 是子路由定义的数组。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyt52e8pshji4m9lcd0iw1nu8\"><code>loadChildren</code> 是对惰性加载的子路由的引用。有关更多信息，请参阅 \n<a href=\"api/router/LoadChildren\"><code>LoadChildren</code></a>。</li>\n</ul>\n<h3 id=\"simple-configuration\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2197i0blgx8ry9g2slv4rhh2n\"><i class=\"material-icons\">link</i>简单配置</h3>\n<code-example>\n[{\n  path: 'team/:id',\n component: Team,\n  children: [{\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dee1j11g1ghd2pgdquyfnd1um\">导航到 \n<code>/team/11/user/bob</code> 时，路由器将创建包含用户组件的团队组件。</p>\n<h3 id=\"multiple-outlets\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"42vgx2y95lhfqzn08r2xugtb\"><i class=\"material-icons\">link</i>多重出口</h3>\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team\n}, {\n  path: 'chat/:user',\n  component: Chat\n  outlet: 'aux'\n}]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elm4prir5xz5fatpc11tj76qn\">导航到 \n<code>/team/11(aux:chat/jim)</code> 时，路由器将在聊天组件旁边创建团队组件。聊天组件将被放置到 aux 出口中。</p>\n<h3 id=\"wild-cards\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a401h6061ueb4ft7imr9drqrr\"><i class=\"material-icons\">link</i>通配符</h3>\n<code-example>\n[{\n  path: '**',\n  component: Sink\n}]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eicdcfrbo06x1u170pc1gwcos\">无论你导航到哪里，路由器都会实例化 sink 组件。</p>\n<h3 id=\"redirects\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"hvl8zxsrh2yzgejx0n6963xo\"><i class=\"material-icons\">link</i>重定向</h3>\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: 'legacy/user/:name',\n    redirectTo: 'user/:name'\n  }, {\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bg9hguybkc9su56n3116d23n\">导航到 '/team/11/legacy/user/jim' 时，路由器会将 URL 更改为 '/team/11/user/jim'，然后会实例化包含用户组件的团队组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5a8jr24f8fw7gm1t72c9intqv\">如果 \n<code>redirectTo</code> 值以 '/' 开头，则它是一个绝对重定向。例如，如果在上面的示例中我们将 \n<code>redirectTo</code> 更改为 \n<code>/user/:name</code>，则结果 URL 将为 '/user/jim'。</p>\n<h3 id=\"empty-path\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"aajlfv0qvuxr56o6fv8nell8p\"><i class=\"material-icons\">link</i>空路径</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6g0rln0dv2825cgsboyj0f4u7\">空路径路由配置可用于实例化不“消耗”任何 URL 段的组件。让我们看看以下配置：</p>\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: AllUsers\n  }, {\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xy0q8j3vf96hbvfrjb9zq4uq\">导航到 \n<code>/team/11</code> 时，路由器将实例化 AllUsers 组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"uspe70bq5ktw103isfm0o99w\">空路径路由可以有子路由。</p>\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: WrapperCmp,\n    children: [{\n      path: 'user/:name',\n      component: User\n    }]\n  }]\n}]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qhl1awv9vjkgwzagvpk5vq4h\">导航到 \n<code>/team/11/user/jim</code> 时，路由器将实例化包含用户组件的包装器组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crbzl3tfwkil99vchnvhb37bs\">空路径路由继承其父路由的参数和数据。这是因为它不能有自己的参数，因此它通常使用其父路由的参数和数据作为自己的参数和数据。</p>\n<h3 id=\"matching-strategy\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2f836ek0cvuqndi4qi2mpllfc\"><i class=\"material-icons\">link</i>匹配策略</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e78gl3u7klgds4wexezinj652\">默认情况下，路由器会查看 URL 中剩余的内容，并检查它是否以指定路径开头（例如，\n<code>/team/11/user</code> 以 \n<code>team/:id</code> 开头）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"798850p3fwucckv5fo8iqbzem\">我们可以更改匹配策略以确保路径覆盖整个未消耗的 URL，这类似于 \n<code>unconsumedUrl === path</code> 或 \n<code>$</code> 正则表达式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tbey97l5ckwd7t1y66lhpys8\">这在重定向空路径路由时尤其重要。</p>\n<code-example>\n[{\n  path: '',\n  pathMatch: 'prefix', //default\n  redirectTo: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13xb0s1m0bfycx72yll7twil4\">由于空路径是任何 URL 的前缀，即使导航到 '/main'，路由器仍然会应用重定向。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c220so62mq4s5bv4xc1ko15ug\">如果提供了 \n<code>pathMatch: full</code>，则路由器仅当导航到 '/' 时才会应用重定向。</p>\n<code-example>\n[{\n  path: '',\n  pathMatch: 'full',\n  redirectTo: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<h3 id=\"componentless-routes\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5g9jo11ohe40czope4un0a4zh\"><i class=\"material-icons\">link</i>无组件路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2item86s60mte0957ntullc1n\">有时需要能够在兄弟组件之间共享参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sn70ihthy8e9zxlzi900vkwv\">假设我们有两个组件——ChildCmp 和 AuxCmp——我们希望将它们并排放置，并且它们都需要一些 id 参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jhqm35lbdfo6l8n7lruwjykj\">一种方法是使用一个虚假的父组件，这样两个兄弟组件都可以从它那里获取 id 参数。这不是理想的选择。相反，你可以使用无组件路由。</p>\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: '<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>', component: MainChild },\n     { path: 'b', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5osagj0qal3ngxp162ej2eym7\">因此，当导航到 \n<code>parent/10/(<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>//aux:b)</code> 时，路由将实例化主子组件和辅助子组件，并将它们并排放置。在此示例中，应用程序组件必须定义主出口和辅助出口。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy7hmptru2x5vyy0ra95js2al\">路由器还会将无组件父组件的 \n<code>params</code>、\n<code>data</code> 和 \n<code>resolve</code> 合并到子组件的 \n<code>params</code>、\n<code>data</code> 和 \n<code>resolve</code> 中。这是因为没有组件可以注入无组件父组件的激活路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czxou44wmfc0d3solc91mzsa\">这在以下情况下尤其有用：</p>\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: '', component: MainChild },\n     { path: '', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y21h5b0g105z002ihx8cxkyd\">有了此配置，导航到 '/parent/10' 将创建主子组件和辅助子组件。</p>\n<h3 id=\"lazy-loading\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"alchbgipmlwh9jnz90njblswq\"><i class=\"material-icons\">link</i>惰性加载</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ciwybmh4jfy1nrchb25aui4jc\">惰性加载通过将应用程序拆分为多个捆绑包并在需要时加载它们来加快应用程序加载时间。路由器旨在使惰性加载变得简单易行。你无需提供 children 属性，而是可以提供 \n<code>loadChildren</code> 属性，如下所示：</p>\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  loadChildren: 'team'\n}]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31b16l77sqa11ekb7a7xsc1gj\">路由器将使用注册的 NgModuleFactoryLoader 来获取与 'team' 关联的 NgModule。然后，它将提取在该 NgModule 中定义的路由集，并将这些路由透明地添加到主配置中。</p>\n\n</section>\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/router\n - api/router/Data\n - api/router/LoadChildren\n - api/router/LoadChildrenCallback\n - api/router/ResolveData\n - api/router/Route\n - api/router/Router\n - api/router/RouterModule\n - api/router/RunGuardsAndResolvers\n - api/router/provideRoutes\n - api/router/testing/RouterTestingModule\n - guide/cheatsheet\n - guide/deployment\n - guide/entry-components\n - guide/lazy-loading-ngmodules\n - guide/ngmodule-faq\n - guide/router\n - guide/upgrade\n - guide/visual-studio-2015\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - api/router\n - api/router/ActivatedRoute\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/LoadChildren\n - api/router/Resolve\n - api/router/Route\n - api/router/RouterLinkWithHref\n - api/router/Routes#componentless-routes\n - api/router/Routes#description\n - api/router/Routes#empty-path\n - api/router/Routes#lazy-loading\n - api/router/Routes#matching-strategy\n - api/router/Routes#multiple-outlets\n - api/router/Routes#redirects\n - api/router/Routes#routes\n - api/router/Routes#simple-configuration\n - api/router/Routes#wild-cards\n - https://github.com/angular/angular/tree/5.2.11/packages/router/src/config.ts#L13-L255\n - https://www.npmjs.com/package/@angular/router\n-->"
}