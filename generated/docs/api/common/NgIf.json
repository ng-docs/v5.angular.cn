{
  "id" : "api/common/NgIf",
  "title" : "NgIf",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"ngif\">NgIf</h1>\n    <label class=\"api-type-label directive\">directive</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/common\">@angular/common</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a> } from <a href=\"api/common\">'@angular/common'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/common/src/directives/ng_if.ts#L10-L157\">common/src/directives/ng_if.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"directive-overview\">\n  <h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]' })\nclass <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a> {\n  <a class=\"code-anchor\" href=\"api/common/NgIf#ngIf\">set ngIf: any</a>\n  <a class=\"code-anchor\" href=\"api/common/NgIf#ngIfThen\">set ngIfThen: TemplateRef&lt;NgIfContext&gt; | null</a>\n  <a class=\"code-anchor\" href=\"api/common/NgIf#ngIfElse\">set ngIfElse: TemplateRef&lt;NgIfContext&gt; | null</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n<section class=\"selectors\">\n  <h2 id=\"selectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ukliajrgrqzf6qt0k49ld9w9\"><i class=\"material-icons\">link</i>选择器</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading selector\">\n  [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]\n  </code-example>\n</section>\n\n\n  \n<section class=\"inputs\">\n  <h2 id=\"inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e41z1ta8j4fn0xhay00whz365\"><i class=\"material-icons\">link</i>输入</h2>\n  \n  <div class=\"input\">\n    <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>&nbsp;bound to&nbsp;<code><a href=\"api/common/NgIf#ngIf\" class=\"code-anchor\">NgIf.ngIf</a></code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code>ngIfThen</code>&nbsp;bound to&nbsp;<code><a href=\"api/common/NgIf#ngIfThen\" class=\"code-anchor\">NgIf.ngIfThen</a></code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code>ngIfElse</code>&nbsp;bound to&nbsp;<code><a href=\"api/common/NgIf#ngIfElse\" class=\"code-anchor\">NgIf.ngIfElse</a></code>\n    \n  </div>\n  \n</section>\n\n  \n  \n\n\n\n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgug2ol7msp174a7jgrfae61s\">根据 \n<code>expression</code> 的值有条件地包含模板。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq0tva0e7i850kmvcsy3s2wcy\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 会评估 \n<code>expression</code>，然后在表达式为真值或假值时分别在其位置渲染 \n<code>then</code> 或 \n<code>else</code> 模板。通常：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4m1whc05ofra9mfq5eqnm4x19\"><code>then</code> 模板是 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的内联模板，除非绑定到不同的值。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9besf2yvd014rq1hfnpx6jvtk\"><code>else</code> 模板为空，除非它被绑定。</li>\n</ul>\n<h2 id=\"most-common-usage\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"omidexxw0nftqd081msu97rl\"><i class=\"material-icons\">link</i>最常见的用法</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jfsmf2yaokoz8slniundlleg\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令最常见的用法是根据条件显示内联模板，如以下示例所示： \n<code-example>\n  @\n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ selector: 'ng-if-simple', template: ` &lt;button (click)=\"show = !show\"&gt;{{show ? 'hide' : 'show'}}&lt;/button&gt; show = {{show}} &lt;br&gt; &lt;div *\n <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show\"&gt;Text to show&lt;/div&gt; ` }) class NgIfSimple { show: boolean = true; } \n</code-example></p>\n<h2 id=\"showing-an-alternative-template-using-else\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5sncnn5srqrzi7xn1rpzl8ntf\"><i class=\"material-icons\">link</i>使用 <code>else</code> 显示替代模板</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4x357oemdqxrc1ko95h31bvo9\">如果需要在 \n<code>expression</code> 为假值时显示模板，请使用 \n<code>else</code> 模板绑定，如所示。请注意，\n<code>else</code> 绑定指向标记为 \n<code>#elseBlock</code> 的 \n<code>&lt;ng-template&gt;</code>。模板可以在组件视图中的任何位置定义，但通常为了可读性，它会放在 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 之后。</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-else',\n  template: `\n    &lt;button (click)=\"show = !show\"&gt;{{show ? 'hide' : 'show'}}&lt;/button&gt;\n    show = {{show}}\n    &lt;br&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show; else elseBlock\"&gt;Text to show&lt;/div&gt;\n    &lt;ng-template #elseBlock&gt;Alternate text while primary text is hidden&lt;/ng-template&gt;\n`\n})\nclass NgIfElse {\n  show: boolean = true;\n}\n\n</code-example>\n<h2 id=\"using-non-inlined-then-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uqolua5u59e1b7uvx52otg4m\"><i class=\"material-icons\">link</i>使用非内联 \n<code>then</code> 模板</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6614u5hpuyadufxdke20k6thl\">通常，\n<code>then</code> 模板是 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的内联模板，但可以使用绑定（就像 \n<code>else</code> 一样）进行更改。由于 \n<code>then</code> 和 \n<code>else</code> 是绑定，因此模板引用可以在运行时更改，如以下示例所示。</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-then-else',\n  template: `\n    &lt;button (click)=\"show = !show\"&gt;{{show ? 'hide' : 'show'}}&lt;/button&gt;\n    &lt;button (click)=\"switchPrimary()\"&gt;Switch Primary&lt;/button&gt;\n    show = {{show}}\n    &lt;br&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show; then thenBlock; else elseBlock\"&gt;this is ignored&lt;/div&gt;\n    &lt;ng-template #primaryBlock&gt;Primary text to show&lt;/ng-template&gt;\n    &lt;ng-template #secondaryBlock&gt;Secondary text to show&lt;/ng-template&gt;\n    &lt;ng-template #elseBlock&gt;Alternate text while primary text is hidden&lt;/ng-template&gt;\n`\n})\nclass NgIfThenElse implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  thenBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;|null = null;\n  show: boolean = true;\n\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('primaryBlock')\n  primaryBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;|null = null;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('secondaryBlock')\n  secondaryBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;|null = null;\n\n  switchPrimary() {\n    this.thenBlock = this.thenBlock === this.primaryBlock ? this.secondaryBlock : this.primaryBlock;\n  }\n\n  ngOnInit() { this.thenBlock = this.primaryBlock; }\n}\n\n</code-example>\n<h2 id=\"storing-conditional-result-in-a-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mhuli87pc15ngegak5qdg0fo\"><i class=\"material-icons\">link</i>将条件结果存储在变量中</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"k56d9fvpzg0a6nkyf7xf9q32\">一种常见的模式是，我们需要显示来自同一对象的属性集。如果对象未定义，那么我们必须使用安全遍历运算符 \n<code>?.</code> 来防止对 \n<code>null</code> 值进行解引用。当等待异步数据时，尤其如此，例如使用 \n<code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道时，如以下示例所示：</p>\n<code-example>\nHello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2m583v6vvp0au51ecqn8qnya5\">以上示例中存在一些低效之处：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qcbg2zthqtxibascxh1nsu9d\">我们在 \n<code>userStream</code> 上创建了多个订阅。每个 \n<code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道一个，或者如上例所示，两个。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57s2h2k7cmg8yot5faa327967\">在等待数据异步到达时，我们无法显示备用屏幕。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2ptrs5rhvsn0v0f1hsp5jtz2\">我们必须使用安全遍历运算符 \n<code>?.</code> 来访问属性，这很麻烦。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c846gmq7ng1jdhoghtoo0o9c\">我们必须将 \n<code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道放在括号中。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ciikst8rq60dgjbue5oy8uejr\">更好的方法是使用 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 并将条件结果存储在局部变量中，如下例所示：</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-let',\n  template: `\n    &lt;button (click)=\"nextUser()\"&gt;Next User&lt;/button&gt;\n    &lt;br&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"userObservable | async as user; else loading\"&gt;\n      Hello {{user.last}}, {{user.first}}!\n    &lt;/div&gt;\n    &lt;ng-template #loading let-user&gt;Waiting... (user is {{user|<a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}})&lt;/ng-template&gt;\n`\n})\nclass NgIfAs {\n  userObservable = new Subject&lt;{first: string, last: string}&gt;();\n  first = ['John', 'Mike', 'Mary', 'Bob'];\n  firstIndex = 0;\n  last = ['Smith', 'Novotny', 'Angular'];\n  lastIndex = 0;\n\n  nextUser() {\n    let first = this.first[this.firstIndex++];\n    if (this.firstIndex &gt;= this.first.length) this.firstIndex = 0;\n    let last = this.last[this.lastIndex++];\n    if (this.lastIndex &gt;= this.last.length) this.lastIndex = 0;\n    this.userObservable.next({first, last});\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zc77x7nu2yfza3wvuchs1r2m\">注意：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bchwukidazznus453x6uns83\">我们只使用了一个 \n<code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道，因此只创建了一个订阅。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bxploee6yxitb3bionrfxjdq8\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 将 \n<code>userStream|async</code> 的结果存储在局部变量 \n<code>user</code> 中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74kstptafb9hnnulvq5pel1bg\">然后，局部变量 \n<code>user</code> 可以以更有效的方式重复绑定。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40in4ea76ppmvvlkvkwm6zsq5\">无需使用安全遍历运算符 \n<code>?.</code> 来访问属性，因为 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 只有在 \n<code>userStream</code> 返回值时才会显示数据。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9p8q8oxcvk07xshi7fj6b1n1h\">我们可以在等待数据时显示备用模板。</li>\n</ul>\n<h3 id=\"syntax\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8p44mx807exjp3s0k9dwbuxla\"><i class=\"material-icons\">link</i>语法</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73ysj5t8jzelohh34zbo3402s\">简单形式：</p>\n<ul>\n<li><code>&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition\"&gt;...&lt;/div&gt;</code></li>\n<li><code>&lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"condition\"&gt;&lt;div&gt;...&lt;/div&gt;&lt;/ng-template&gt;</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xcbecis6bhu10i4xxjb1djhi\">带有 else 块的形式：</p>\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; else elseBlock\"&gt;...&lt;/div&gt;\n&lt;ng-template #elseBlock&gt;...&lt;/ng-template&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm6x8gc6i0tdirl5uxchpa75x\">带有 \n<code>then</code> 和 \n<code>else</code> 块的形式：</p>\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; then thenBlock else elseBlock\"&gt;&lt;/div&gt;\n&lt;ng-template #thenBlock&gt;...&lt;/ng-template&gt;\n&lt;ng-template #elseBlock&gt;...&lt;/ng-template&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dfwp7lqebjv8fyj1fr0h7v90y\">本地存储值的形式：</p>\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition as value; else elseBlock\"&gt;{{value}}&lt;/div&gt;\n&lt;ng-template #elseBlock&gt;...&lt;/ng-template&gt;\n</code-example>\n\n</section>\n\n\n  \n  \n\n\n\n<section class=\"static-members\">\n  <h2 id=\"static-members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ixh78z2dfifcy2khe8k014ge\"><i class=\"material-icons\">link</i>静态成员</h2>\n  \n</section>\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64p310lbzdqiret0qyhhannvq\"><i class=\"material-icons\">link</i>构造函数</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor(_viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>, templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;<a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&gt;)</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"ngIf\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">set <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>: any</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngIfThen\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">set ngIfThen: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;<a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&gt; | null</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngIfElse\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">set ngIfElse: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;<a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&gt; | null</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/animations/state\n - api/common\n - api/common/CommonModule\n - api/common/NgForOf\n - api/common/NgIfContext\n - api/core/ContentChild\n - api/core/ContentChildDecorator\n - api/core/ContentChildren\n - api/core/ContentChildrenDecorator\n - api/core/NgZone\n - api/core/ViewChild\n - api/core/ViewChildDecorator\n - api/core/ViewChildren\n - api/core/ViewChildrenDecorator\n - api/forms/FormControlName\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/NgModelGroup\n - guide/ajs-quick-reference\n - guide/aot-compiler\n - guide/architecture-components\n - guide/dependency-injection-in-action\n - guide/displaying-data\n - guide/docs-style-guide\n - guide/dynamic-form\n - guide/feature-modules\n - guide/form-validation\n - guide/frequent-ngmodules\n - guide/glossary\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/reactive-forms\n - guide/router\n - guide/sharing-ngmodules\n - guide/structural-directives\n - guide/styleguide\n - guide/template-syntax\n - guide/testing\n - guide/upgrade\n - presskit\n - tutorial/toh-pt2\n - tutorial/toh-pt3\n - tutorial/toh-pt4\n - tutorial/toh-pt5\n - tutorial/toh-pt6\n-->\n<!-- links from this doc:\n - api/common\n - api/common/JsonPipe\n - api/common/NgIf#constructor\n - api/common/NgIf#description\n - api/common/NgIf#inputs\n - api/common/NgIf#members\n - api/common/NgIf#most-common-usage\n - api/common/NgIf#ngIf\n - api/common/NgIf#ngIfElse\n - api/common/NgIf#ngIfThen\n - api/common/NgIf#ngif\n - api/common/NgIf#overview\n - api/common/NgIf#selectors\n - api/common/NgIf#showing-an-alternative-template-using-else\n - api/common/NgIf#static-members\n - api/common/NgIf#storing-conditional-result-in-a-variable\n - api/common/NgIf#syntax\n - api/common/NgIf#using-non-inlined-then-template\n - api/common/NgIfContext\n - api/core/Component\n - api/core/Directive\n - api/core/OnInit\n - api/core/TemplateRef\n - api/core/ViewChild\n - api/core/ViewContainerRef\n - api/core/testing/async\n - https://github.com/angular/angular/tree/5.2.11/packages/common/src/directives/ng_if.ts#L10-L157\n - https://www.npmjs.com/package/@angular/common\n-->"
}