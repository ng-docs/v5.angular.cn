{
  "id" : "api/common/http/HttpInterceptor",
  "title" : "HttpInterceptor",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"httpinterceptor\">HttpInterceptor</h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/common\">@angular/common</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> } from <a href=\"api/common/http\">'@angular/common/http'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/common/http/src/interceptor.ts#L15-L45\">common/http/src/interceptor.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"interface-overview\">\n<h2 id=\"interface-overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15ffnfvjx5orhxzfayretyfy4\"><i class=\"material-icons\">link</i>接口概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> { \n  <a class=\"code-anchor\" href=\"api/common/http/HttpInterceptor#intercept\">intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt;</a>\n}\n</code-example>\n</section>\n  \n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gnalokhusawx7lobhfkoyysy\">拦截 \n<code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> 并处理它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sy3e0w5v6v32onzjhfb459ui\">大多数拦截器将在将传出请求传递给链中的下一个拦截器之前，通过调用 \n<code>next.handle(transformedReq)</code> 来转换传出请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ew5inxmqhy85lqb1x8323cr0\">在极少数情况下，拦截器可能希望自己完全处理请求，而不委托给链的其余部分。这种行为是允许的。</p>\n\n</section>\n\n  \n  \n  \n\n  \n  \n  \n\n  \n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"intercept\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&lt;any&gt;, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>): Observable&lt;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&lt;any&gt;&gt;</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czan9eilk4kwt437sw9f1wzib\">拦截传出的 \n<code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> 并选择性地转换它或响应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3a7tundgqxn3d50ci6rsk0j90\">通常，拦截器会在返回 \n<code>next.handle(transformedReq)</code> 之前转换传出请求。拦截器也可以选择转换响应事件流，方法是在 \n<code>next.handle()</code> 返回的流上应用额外的 Rx 操作符。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77a34rffrtedpinrmaicipayk\">更罕见的是，拦截器可以选择完全自己处理请求，并合成一个新的事件流，而不是调用 \n<code>next.handle()</code>。这是可以接受的行为，但请记住，将完全跳过进一步的拦截器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dctqto5mt7cs81zbhenf1g0w0\">另一种同样罕见但是有用的拦截器，会为单个请求在事件流上给出多个响应对象。</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/common/http\n - api/common/http/HTTP_INTERCEPTORS\n - api/common/http/HttpHandler\n - api/common/http/JsonpInterceptor\n - guide/http\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HttpEvent\n - api/common/http/HttpHandler\n - api/common/http/HttpInterceptor#description\n - api/common/http/HttpInterceptor#httpinterceptor\n - api/common/http/HttpInterceptor#intercept\n - api/common/http/HttpInterceptor#interface-overview\n - api/common/http/HttpInterceptor#members\n - api/common/http/HttpRequest\n - https://github.com/angular/angular/tree/5.2.11/packages/common/http/src/interceptor.ts#L15-L45\n - https://www.npmjs.com/package/@angular/common\n-->"
}