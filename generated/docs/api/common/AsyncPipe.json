{
  "id" : "api/common/AsyncPipe",
  "title" : "AsyncPipe",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"asyncpipe\">AsyncPipe</h1>\n    <label class=\"api-type-label pipe\">pipe</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/common\">@angular/common</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a> } from <a href=\"api/common\">'@angular/common'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/common/src/pipes/async_pipe.ts#L43-L145\">common/src/pipes/async_pipe.ts</a></td>\n</tr>\n\n<tr>\n  <th>NgModule</th>\n  <td><a href=\"api/common/CommonModule\"><code>CommonModule</code></a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2gnzkz5004n7mjtrqlurkg2fh\">从一个异步原语中解出一个值。</p>\n\n</div>\n\n  \n  \n  \n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cflu95twzi71qd095ghj9h0y7\"><i class=\"material-icons\">link</i>使用方法</h2>\n  <p><code>observable_or_promise_expression | async</code></p>\n\n</section>\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77t6ig99wbmny983sr0i6jo53\"><code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道订阅 \n<code>Observable</code> 或 \n<code>Promise</code>，并返回它发出的最新值。当发出新值时，\n<code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道将标记组件以检查更改。当组件被销毁时，\n<code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道会自动取消订阅，以避免潜在的内存泄漏。</p>\n<h2 id=\"examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4iecnoqh39op5dvxqr6b3gip\"><i class=\"material-icons\">link</i>示例</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xf3pwsxt5ovf2ia3vz0xw88r\">此示例将 \n<code>Promise</code> 绑定到视图。点击 \n<code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 按钮会求解此 Promise。</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'async-promise-pipe',\n  template: `&lt;div&gt;\n    &lt;code&gt;promise|async&lt;/code&gt;: \n    &lt;button (click)=\"clicked()\"&gt;{{ arrived ? 'Reset' : '<a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>' }}&lt;/button&gt;\n    &lt;span&gt;Wait for it... {{ greeting | async }}&lt;/span&gt;\n  &lt;/div&gt;`\n})\nexport class AsyncPromisePipeComponent {\n  greeting: Promise&lt;string&gt;|null = null;\n  arrived: boolean = false;\n\n  private resolve: Function|null = null;\n\n  constructor() { this.reset(); }\n\n  reset() {\n    this.arrived = false;\n    this.greeting = new Promise&lt;string&gt;((resolve, reject) =&gt; { this.resolve = resolve; });\n  }\n\n  clicked() {\n    if (this.arrived) {\n      this.reset();\n    } else {\n      this.resolve !('hi there!');\n      this.arrived = true;\n    }\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8828fm9ky89bgaccze6fb5px\">也可以将 \n<code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 与可观察者一起使用。以下示例将 \n<code>time</code> 可观察者绑定到视图。此可观察者会不断使用当前时间更新视图。</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'async-observable-pipe',\n  template: '&lt;div&gt;&lt;code&gt;observable|async&lt;/code&gt;: <a href=\"api/common/Time\" class=\"code-anchor\">Time</a>: {{ time | async }}&lt;/div&gt;'\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable&lt;string&gt;((observer: Subscriber&lt;string&gt;) =&gt; {\n    setInterval(() =&gt; observer.next(new Date().toString()), 1000);\n  });\n}\n\n</code-example>\n\n</section>\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/common\n - guide/http\n - guide/pipes\n - guide/router\n - guide/testing\n - tutorial/toh-pt6\n-->\n<!-- links from this doc:\n - api/common\n - api/common/AsyncPipe#asyncpipe\n - api/common/AsyncPipe#description\n - api/common/AsyncPipe#examples\n - api/common/AsyncPipe#how-to-use\n - api/common/CommonModule\n - api/common/Time\n - api/core/Component\n - api/core/testing/async\n - api/router/Resolve\n - https://github.com/angular/angular/tree/5.2.11/packages/common/src/pipes/async_pipe.ts#L43-L145\n - https://www.npmjs.com/package/@angular/common\n-->"
}