{
  "id" : "api/upgrade/static/UpgradeModule",
  "title" : "UpgradeModule",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"upgrademodule\">UpgradeModule</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/upgrade\">@angular/upgrade</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a> } from <a href=\"api/upgrade/static\">'@angular/upgrade/static'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/upgrade/src/static/upgrade_module.ts#L17-L276\">upgrade/src/static/upgrade_module.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p><em data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6h8vi9ml1v3wnidmcthwvbf10\">用于支持 AoT 编译的混合升级应用程序的 \n<a href=\"api?query=upgrade%2Fstatic\">upgrade/static</a> 库的一部分</em></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uxw5121s3nkmrzwq991um9wf\">允许 AngularJS 和 Angular 组件在支持 AoT 编译的混合升级应用程序中一起使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxktvt6620d5xgh4dj7bnxr5v\">具体来说，\n<code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code> 模块中的类和函数允许以下操作： 1. 创建一个 Angular 指令，它包装并公开 AngularJS 组件，以便它可以在 Angular 模板中使用。请参阅 \n<a href=\"api/upgrade/static/UpgradeComponent\"><code>UpgradeComponent</code></a>。 2. 创建一个 AngularJS 指令，它包装并公开 Angular 组件，以便它可以在 AngularJS 模板中使用。请参阅 \n<a href=\"api/upgrade/static/downgradeComponent\"><code>downgradeComponent</code></a>。 3. 创建一个 Angular 根注入器提供者，它包装并公开 AngularJS 服务，以便它可以注入到 Angular 上下文中。请参阅下面的 \n<a href=\"api/upgrade/static/UpgradeModule#upgrading-an-angular-1-service\">升级 AngularJS 服务</a>。 4. 创建一个 AngularJS 服务，它包装并公开 Angular 可注入对象，以便它可以注入到 AngularJS 上下文中。请参阅 \n<a href=\"api/upgrade/static/downgradeInjectable\"><code>downgradeInjectable</code></a>。 3. 启动一个混合 Angular 应用程序，其中包含两个框架在单个应用程序中共存。请参阅下面的 \n<a href=\"api/upgrade/static/UpgradeModule#example\">示例</a>。</p>\n<h2 id=\"mental-model\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6vtkv13e1pzp7s84dv6xy0vzc\"><i class=\"material-icons\">link</i>心理模型</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8ngenqmeaov43gu5hpg8syap4\">在推理混合应用程序的工作方式时，有一个心智模型会很有用，它可以描述正在发生的事情并在最低级别解释正在发生的事情。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"87im8nbyy8wpshz9p3hc6g0u5\">在单个应用程序中运行有两个独立的框架，每个框架都将另一个框架视为黑盒。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"cyhmb0xnpf0fx97at4zbxz0bb\">页面上的每个 DOM 元素都归一个框架所有。无论哪个框架实例化此元素，都是所有者。每个框架都只更新自己的 DOM 元素/交互，而忽略其他框架。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8tpzaara93zkwgmmcfxt8lqwp\">AngularJS 指令始终在 AngularJS 框架代码库中执行，无论它们在何处实例化。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dvexfdswmur1zzi385hd1jcot\">Angular 组件始终在 Angular 框架代码库中执行，无论它们在何处实例化。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dr0f0qgileu71vwksjvc4but\">AngularJS 组件可以“升级”到 Angular 组件。这是通过定义一个 Angular 指令来实现的，该指令在 DOM 中的其位置启动 AngularJS 组件。请参阅 \n<a href=\"api/upgrade/static/UpgradeComponent\"><code>UpgradeComponent</code></a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ezw1tvvl2dhk1cav59nspgep\">Angular 组件可以“降级”到 AngularJS 组件。这是通过定义一个 AngularJS 指令来实现的，该指令在 DOM 中的其位置启动 Angular 组件。请参阅 \n<a href=\"api/upgrade/static/downgradeComponent\"><code>downgradeComponent</code></a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eznl6c31dezfgahjzyw0oxk12\">每当实例化一个“升级”/“降级”组件时，宿主元素都由执行实例化的框架拥有。然后，另一个框架实例化并拥有该组件的视图。 a. 这意味着组件绑定将始终遵循实例化框架的语义。 b. DOM 属性由拥有当前模板的框架解析。因此，AngularJS 模板中的属性必须使用 kebab-case，而 AngularJS 模板必须使用 camelCase。 c. 但是，模板绑定语法将始终使用 Angular 样式，例如方括号 (\n<code>[...]</code>) 用于属性绑定。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ajazvou359qv1fsg1veplwm40\">Angular 首先被引导； AngularJS 是第二个引导程序。AngularJS 始终拥有应用程序的根组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeey6uj1ecwsmpciao6qlhy5r\">新应用程序在 Angular 区域中运行，因此它不再需要调用 \n<code>$apply()</code>。</li>\n</ol>\n\n</div>\n\n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a> {\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeModule#constructor()\">constructor(injector: Injector, ngZone: NgZone)</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeModule#%24injector\">$injector: any</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeModule#injector\">injector: Injector</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeModule#ngZone\">ngZone: NgZone</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeModule#bootstrap\">bootstrap(element: Element, modules: string[] = [], config?: any)</a>\n}\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cflu95twzi71qd095ghj9h0y7\"><i class=\"material-icons\">link</i>使用方法</h2>\n  <p><code>import {<a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>} from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';</code></p>\n<h2 id=\"example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7hca1cj4eask0n66x9nql18e\">将 \n<a href=\"api/upgrade/static/UpgradeModule\"><code>UpgradeModule</code></a> 导入到你的顶级 \n<a href=\"api/core/NgModule\">Angular `NgModule`</a> 中。</p>\n<code-example>\n// This <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> represents the Angular pieces of the application\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Ng2HeroesComponent, Ng1HeroComponentWrapper],\n  providers: [\n    HeroesService,\n    // Register an Angular provider whose value is the \"upgraded\" AngularJS service\n    {provide: 'titleCase', useFactory: (i: any) =&gt; i.get('titleCase'), deps: ['$injector']}\n  ],\n  // All components that are to be \"downgraded\" must be declared as `entryComponents`\n  entryComponents: [Ng2HeroesComponent],\n  // We must import `<a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>` to get access to the AngularJS core services\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>]\n})\nclass Ng2AppModule {\n  ngDoBootstrap() { /* this is <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> placeholder to stop the bootstrapper from complaining */\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dv3n675xhzq8jyhawin9vumh\">然后启动混合升级应用程序的模块，获取 \n<a href=\"api/upgrade/static/UpgradeModule\"><code>UpgradeModule</code></a> 实例，并使用它来启动顶级 \n<a href=\"https://docs.angularjs.org/api/ng/type/angular.Module\">AngularJS 模块</a>。</p>\n<code-example>\n// First we bootstrap the Angular HybridModule\n// (We are using the dynamic <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a> platform as this example has not been compiled AoT)\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(Ng2AppModule).then(ref =&gt; {\n  // Once Angular bootstrap is complete then we bootstrap the AngularJS module\n  const upgrade = ref.injector.get(<a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) as <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>;\n  upgrade.bootstrap(document.body, [ng1AppModule.name]);\n});\n\n</code-example>\n<a id=\"upgrading-an-angular-1-service\"></a>\n<h2 id=\"upgrading-an-angularjs-service\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"xutt3epiwx2304yjjl9n35xt\"><i class=\"material-icons\">link</i>升级 AngularJS 服务</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"1se4npg4xkoz96eoanyv9grce\">没有用于升级 AngularJS 服务的特定 API。相反，你应该遵循以下食谱：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7vcwcahuomg448e18e2egx30n\">假设你有一个 AngularJS 服务：</p>\n<code-example>\n// This AngularJS service will be \"upgraded\" to be used in Angular\nng1AppModule.factory(\n    'titleCase',\n    (() =&gt; (value: string) =&gt; value.replace(/((^|\\s)[a-z])/g, (_, c) =&gt; c.toUpperCase())) as any);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hqbsvksmhyb49klchdl1jjy3\">然后，你应该定义一个 Angular 提供者，并将其包含在你的 \n<a href=\"api/core/NgModule\"><code>NgModule</code></a> \n<code>providers</code> 属性中。</p>\n<code-example>\n// Register an Angular provider whose value is the \"upgraded\" AngularJS service\n{provide: 'titleCase', useFactory: (i: any) =&gt; i.get('titleCase'), deps: ['$injector']}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4273c99ss5cyudey6g8j2kzkx\">然后，你可以通过将“升级后的”AngularJS 服务注入到 Angular 组件或服务中来使用它。</p>\n<code-example>\nconstructor(@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>('titleCase') titleCase: (v: string) =&gt; string) {\n  // Change all the hero names to title case, using the \"upgraded\" AngularJS service\n  this.heroes.forEach((hero: Hero) =&gt; hero.name = titleCase(hero.name));\n}\n\n</code-example>\n\n</section>\n\n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ftp7d06nrufasabcs783uzl7\">此类是一个 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>，你导入它来提供 AngularJS 核心服务，并且它有一个用于引导混合升级应用程序的实例方法。</p>\n<h2 id=\"core-angularjs-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bokgjr3aq9npqdxanajuyy5u4\"><i class=\"material-icons\">link</i>AngularJS 核心服务</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ik29jxoyooyo0ym7yjud97bd\">导入此 \n<a href=\"api/core/NgModule\"><code>NgModule</code></a> 会将核心 \n<a href=\"https://docs.angularjs.org/api/ng/service\">AngularJS 服务</a> 的提供者添加到根注入器。</p>\n<h2 id=\"bootstrap\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62o8jtgtf2mdfz17vjpiduudt\"><i class=\"material-icons\">link</i>引导</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ixvqvgmhaytwvt6c4xxgx8bs\">此类的运行时实例包含一个 \n<a href=\"api/upgrade/static/UpgradeModule#bootstrap\">`bootstrap()`</a> 方法，你使用它将顶层 AngularJS 模块引导到混合升级应用程序的 DOM 中的某个元素上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arpjfc1v9b1hvn0gj8rsbspce\">它还包含用于访问 \n<a href=\"api/upgrade/static/UpgradeModule#injector\">根注入器</a>、引导 \n<a href=\"api/core/NgZone\"><code>NgZone</code></a> 和 \n<a href=\"https://docs.angularjs.org/api/auto/service/$injector\">AngularJS $injector</a> 的属性。</p>\n\n</section>\n\n\n  \n  \n\n\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64p310lbzdqiret0qyhhannvq\"><i class=\"material-icons\">link</i>构造函数</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor(injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>, ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>)</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"$injector\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">$injector: any</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"48ihpr67xx17qa7hcyct3xmh2\">升级应用程序的 AngularJS <code>$injector</code>。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"injector\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c70x7mtfo9oj8f7awuflsbcf\">Angular 注入器 *</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngZone\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41u23kaow13ia8kd48vezplal\">升级应用程序的引导区域</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"bootstrap\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">bootstrap(element: Element, modules: string[] = [], config?: any)</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9fl1t125u8s1rivrvz4rk60bq\">从此 NgModule 引导 AngularJS 应用程序</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n<section class=\"annotations\">\n  <h2 id=\"annotations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ptfpgifdyh5hp4kme5clquv2\"><i class=\"material-icons\">link</i>注解</h2>\n    <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ providers: [angular1Providers] })</code-example>\n    \n  \n</section>\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/router/upgrade/RouterUpgradeInitializer\n - api/router/upgrade/locationSyncBootstrapListener\n - api/router/upgrade/setUpLocationSync\n - api/upgrade/static\n - api/upgrade/static/downgradeInjectable\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/core/Inject\n - api/core/Injector\n - api/core/NgModule\n - api/core/NgZone\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - api/upgrade/static\n - api/upgrade/static/UpgradeComponent\n - api/upgrade/static/UpgradeModule#%24injector\n - api/upgrade/static/UpgradeModule#annotations\n - api/upgrade/static/UpgradeModule#bootstrap\n - api/upgrade/static/UpgradeModule#constructor\n - api/upgrade/static/UpgradeModule#constructor()\n - api/upgrade/static/UpgradeModule#core-angularjs-services\n - api/upgrade/static/UpgradeModule#description\n - api/upgrade/static/UpgradeModule#example\n - api/upgrade/static/UpgradeModule#how-to-use\n - api/upgrade/static/UpgradeModule#injector\n - api/upgrade/static/UpgradeModule#members\n - api/upgrade/static/UpgradeModule#mental-model\n - api/upgrade/static/UpgradeModule#ngZone\n - api/upgrade/static/UpgradeModule#overview\n - api/upgrade/static/UpgradeModule#upgrademodule\n - api/upgrade/static/UpgradeModule#upgrading-an-angular-1-service\n - api/upgrade/static/UpgradeModule#upgrading-an-angularjs-service\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - api?query=upgrade%2Fstatic\n - https://docs.angularjs.org/api/auto/service/$injector\n - https://docs.angularjs.org/api/ng/service\n - https://docs.angularjs.org/api/ng/type/angular.Module\n - https://github.com/angular/angular/tree/5.2.11/packages/upgrade/src/static/upgrade_module.ts#L17-L276\n - https://www.npmjs.com/package/@angular/upgrade\n-->"
}