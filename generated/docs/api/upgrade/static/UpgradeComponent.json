{
  "id": "api/upgrade/static/UpgradeComponent",
  "title": "UpgradeComponent",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"upgradecomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeComponent#upgradecomponent\"><i class=\"material-icons\">link</i></a>UpgradeComponent</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/upgrade\">@angular/upgrade</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> } from <a href=\"api/upgrade/static\">'@angular/upgrade/static'</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/upgrade/src/static/upgrade_component.ts#L28-L300\">upgrade/src/static/upgrade_component.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p><em>Part of the <a href=\"api?query=upgrade%2Fstatic\">upgrade/static</a>\nlibrary for hybrid upgrade apps that support AoT compilation</em></p>\n<p>Allows an AngularJS component to be used from Angular.</p>\n\n</div>\n\n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeComponent#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> implements <a class=\"code-anchor\" href=\"api/core/OnInit\">OnInit</a>, <a class=\"code-anchor\" href=\"api/core/OnChanges\">OnChanges</a>, <a class=\"code-anchor\" href=\"api/core/DoCheck\">DoCheck</a>, <a class=\"code-anchor\" href=\"api/core/OnDestroy\">OnDestroy</a> {\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeComponent#constructor()\">constructor(name: string, elementRef: ElementRef, injector: Injector)</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeComponent#ngOnInit\">ngOnInit()</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeComponent#ngOnChanges\">ngOnChanges(changes: SimpleChanges)</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeComponent#ngDoCheck\">ngDoCheck()</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeComponent#ngOnDestroy\">ngOnDestroy()</a>\n}\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeComponent#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <p>Let's assume that you have an AngularJS component called <code>ng1Hero</code> that needs\nto be made available in Angular templates.</p>\n<code-example>\n// This AngularJS component will be \"upgraded\" to be used in Angular\nng1AppModule.component('ng1Hero', {\n  bindings: {hero: '&#x3C;', onRemove: '&#x26;'},\n  transclude: true,\n  template: `&#x3C;div class=\"title\" ng-transclude>&#x3C;/div>\n             &#x3C;h2>{{ $ctrl.hero.name }}&#x3C;/h2>\n             &#x3C;p>{{ $ctrl.hero.description }}&#x3C;/p>\n             &#x3C;button ng-click=\"$ctrl.onRemove()\">Remove&#x3C;/button>`\n});\n\n</code-example>\n<p>We must create a <a href=\"api/core/Directive\"><code>Directive</code></a> that will make this AngularJS component\navailable inside Angular templates.</p>\n<code-example>\n// This Angular directive will act as an interface to the \"upgraded\" AngularJS component\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({selector: 'ng1-hero'})\nclass Ng1HeroComponentWrapper extends <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a>, <a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a>,\n    <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  // The names of the input and output properties here must match the names of the\n  // `&#x3C;` and `&#x26;` bindings in the AngularJS component that is being wrapped\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onRemove: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;void>;\n  constructor(@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) elementRef: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) {\n    // We must pass the name of the directive as used by AngularJS to the super\n    super('ng1Hero', elementRef, injector);\n  }\n\n  // For this class to work when compiled with AoT, we must implement these lifecycle hooks\n  // because the AoT compiler will not realise that the super class implements them\n  ngOnInit() { super.ngOnInit(); }\n\n  ngOnChanges(changes: <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a>) { super.ngOnChanges(changes); }\n\n  ngDoCheck() { super.ngDoCheck(); }\n\n  ngOnDestroy() { super.ngOnDestroy(); }\n}\n\n</code-example>\n<p>In this example you can see that we must derive from the <a href=\"api/upgrade/static/UpgradeComponent\"><code>UpgradeComponent</code></a>\nbase class but also provide an <a href=\"api/core/Directive\">`@Directive`</a> decorator. This is\nbecause the AoT compiler requires that this information is statically available at\ncompile time.</p>\n<p>Note that we must do the following:</p>\n<ul>\n<li>specify the directive's selector (<code>ng1-hero</code>)</li>\n<li>specify all inputs and outputs that the AngularJS component expects</li>\n<li>derive from <code><a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a></code></li>\n<li>\n<p>call the base class from the constructor, passing</p>\n<ul>\n<li>the AngularJS name of the component (<code>ng1Hero</code>)</li>\n<li>the <a href=\"api/core/ElementRef\"><code>ElementRef</code></a> and <a href=\"api/core/Injector\"><code>Injector</code></a> for the component wrapper</li>\n</ul>\n</li>\n</ul>\n\n</section>\n\n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeComponent#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>A helper class that should be used as a base class for creating Angular directives\nthat wrap AngularJS components that need to be \"upgraded\".</p>\n\n</section>\n\n\n  \n  \n\n\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeComponent#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor(name: string, elementRef: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>)</code-example>\n  <p>Create a new <code><a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a></code> instance. You should not normally need to do this.\nInstead you should derive a new class from this one and call the super constructor\nfrom the base class.</p>\n<code-example>\n// This Angular directive will act as an interface to the \"upgraded\" AngularJS component\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({selector: 'ng1-hero'})\nclass Ng1HeroComponentWrapper extends <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a>, <a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a>,\n    <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  // The names of the input and output properties here must match the names of the\n  // `&#x3C;` and `&#x26;` bindings in the AngularJS component that is being wrapped\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onRemove: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;void>;\n  constructor(@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) elementRef: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) {\n    // We must pass the name of the directive as used by AngularJS to the super\n    super('ng1Hero', elementRef, injector);\n  }\n\n  // For this class to work when compiled with AoT, we must implement these lifecycle hooks\n  // because the AoT compiler will not realise that the super class implements them\n  ngOnInit() { super.ngOnInit(); }\n\n  ngOnChanges(changes: <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a>) { super.ngOnChanges(changes); }\n\n  ngDoCheck() { super.ngDoCheck(); }\n\n  ngOnDestroy() { super.ngOnDestroy(); }\n}\n\n</code-example>\n<ul>\n<li>The <code>name</code> parameter should be the name of the AngularJS directive.</li>\n<li>The <code>elementRef</code> and <code>injector</code> parameters should be acquired from Angular by dependency\ninjection into the base class constructor.</li>\n</ul>\n<p>Note that we must manually implement lifecycle hooks that call through to the super class.\nThis is because, at the moment, the AoT compiler is not able to tell that the\n<code><a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a></code>\nalready implements them and so does not wire up calls to them at runtime.</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeComponent#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnInit\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngOnInit()</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnChanges\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngOnChanges(changes: <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a>)</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngDoCheck\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngDoCheck()</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnDestroy\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngOnDestroy()</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/core/DoCheck\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/upgrade/static\n - api/upgrade/static/UpgradeModule\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/core/Directive\n - api/core/DoCheck\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/Inject\n - api/core/Injector\n - api/core/Input\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Output\n - api/core/SimpleChanges\n - api/upgrade/static\n - api/upgrade/static/UpgradeComponent#constructor\n - api/upgrade/static/UpgradeComponent#constructor()\n - api/upgrade/static/UpgradeComponent#description\n - api/upgrade/static/UpgradeComponent#how-to-use\n - api/upgrade/static/UpgradeComponent#members\n - api/upgrade/static/UpgradeComponent#ngDoCheck\n - api/upgrade/static/UpgradeComponent#ngOnChanges\n - api/upgrade/static/UpgradeComponent#ngOnDestroy\n - api/upgrade/static/UpgradeComponent#ngOnInit\n - api/upgrade/static/UpgradeComponent#overview\n - api/upgrade/static/UpgradeComponent#upgradecomponent\n - api?query=upgrade%2Fstatic\n - https://github.com/angular/angular/tree/5.2.11/packages/upgrade/src/static/upgrade_component.ts#L28-L300\n - https://www.npmjs.com/package/@angular/upgrade\n-->"
}