{
  "id" : "api/upgrade/static/UpgradeComponent",
  "title" : "UpgradeComponent",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"upgradecomponent\">UpgradeComponent</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/upgrade\">@angular/upgrade</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> } from <a href=\"api/upgrade/static\">'@angular/upgrade/static'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/upgrade/src/static/upgrade_component.ts#L28-L300\">upgrade/src/static/upgrade_component.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p><em data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6h8vi9ml1v3wnidmcthwvbf10\">用于支持 AoT 编译的混合升级应用程序的 \n<a href=\"api?query=upgrade%2Fstatic\">upgrade/static</a> 库的一部分</em></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clebak9g3n647fnb4tup4lqcx\">允许从 Angular 使用 AngularJS 组件。</p>\n\n</div>\n\n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> implements <a class=\"code-anchor\" href=\"api/core/OnInit\">OnInit</a>, <a class=\"code-anchor\" href=\"api/core/OnChanges\">OnChanges</a>, <a class=\"code-anchor\" href=\"api/core/DoCheck\">DoCheck</a>, <a class=\"code-anchor\" href=\"api/core/OnDestroy\">OnDestroy</a> {\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeComponent#constructor()\">constructor(name: string, elementRef: ElementRef, injector: Injector)</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeComponent#ngOnInit\">ngOnInit()</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeComponent#ngOnChanges\">ngOnChanges(changes: SimpleChanges)</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeComponent#ngDoCheck\">ngDoCheck()</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeComponent#ngOnDestroy\">ngOnDestroy()</a>\n}\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cflu95twzi71qd095ghj9h0y7\"><i class=\"material-icons\">link</i>使用方法</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"cas1zj37vqx6tneffcpnaki2p\">假设你有一个名为 <code>ng1Hero</code> 的 AngularJS 组件，需要在 Angular 模板中使用。</p>\n<code-example>\n// This AngularJS component will be \"upgraded\" to be used in Angular\nng1AppModule.component('ng1Hero', {\n  bindings: {hero: '&lt;', onRemove: '&amp;'},\n  transclude: true,\n  template: `&lt;div class=\"title\" ng-transclude&gt;&lt;/div&gt;\n             &lt;h2&gt;{{ $ctrl.hero.name }}&lt;/h2&gt;\n             &lt;p&gt;{{ $ctrl.hero.description }}&lt;/p&gt;\n             &lt;button ng-click=\"$ctrl.onRemove()\"&gt;Remove&lt;/button&gt;`\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6b1om02lgzpfgk3ku4j459uvh\">我们必须创建一个 \n<a href=\"api/core/Directive\"><code>Directive</code></a>，它将使此 AngularJS 组件在 Angular 模板中可用。</p>\n<code-example>\n// This Angular directive will act as an interface to the \"upgraded\" AngularJS component\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({selector: 'ng1-hero'})\nclass Ng1HeroComponentWrapper extends <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a>, <a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a>,\n    <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  // The names of the input and output properties here must match the names of the\n  // `&lt;` and `&amp;` bindings in the AngularJS component that is being wrapped\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onRemove: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;void&gt;;\n  constructor(@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) elementRef: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) {\n    // We must pass the name of the directive as used by AngularJS to the super\n    super('ng1Hero', elementRef, injector);\n  }\n\n  // For this class to work when compiled with AoT, we must implement these lifecycle hooks\n  // because the AoT compiler will not realise that the super class implements them\n  ngOnInit() { super.ngOnInit(); }\n\n  ngOnChanges(changes: <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a>) { super.ngOnChanges(changes); }\n\n  ngDoCheck() { super.ngDoCheck(); }\n\n  ngOnDestroy() { super.ngOnDestroy(); }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3curcmje1ij5rb8dtfch60nkh\">在此示例中，你可以看到我们必须从 \n<a href=\"api/upgrade/static/UpgradeComponent\"><code>UpgradeComponent</code></a> 基类派生，但还必须提供一个 \n<a href=\"api/core/Directive\">`@Directive`</a> 装饰器。这是因为 AoT 编译器要求此信息在编译时静态可用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e24yruza7zy953i94hfs5lu61\">请注意，我们必须执行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"93nmue0a29yeir3q2r9luty9y\">指定指令的选择器 ( <code>ng1-hero</code> )</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"18gk8vt4unyffmao9pg5grknz\">指定 AngularJS 组件期望的所有输入和输出</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vzzwh4vkl25kk6czn16cvjba\">从 \n<code><a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a></code> 派生</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76y701ht571gobtamdtchjn3k\">从构造函数调用基类，传递</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"vbda6x1oyy5ndt3oxrmzwxzd\">组件的 AngularJS 名称 ( <code>ng1Hero</code> )</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3iv78fxypt500tkt6p55o4qen\">组件包装器的 \n<a href=\"api/core/ElementRef\"><code>ElementRef</code></a> 和 \n<a href=\"api/core/Injector\"><code>Injector</code></a></li>\n</ul>\n</li>\n</ul>\n\n</section>\n\n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbeylkvtuxnkyhk13mne56h4m\">一个辅助类，应作为创建 Angular 指令的基类使用，这些指令包装需要“升级”的 AngularJS 组件。</p>\n\n</section>\n\n\n  \n  \n\n\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64p310lbzdqiret0qyhhannvq\"><i class=\"material-icons\">link</i>构造函数</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor(name: string, elementRef: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>)</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgt7fnaxtg05lx7c5bkqa5nv1\">创建一个新的 \n<code><a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a></code> 实例。你通常不需要这样做。相反，你应该从此类派生一个新类，并从基类调用超类构造函数。</p>\n<code-example>\n// This Angular directive will act as an interface to the \"upgraded\" AngularJS component\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({selector: 'ng1-hero'})\nclass Ng1HeroComponentWrapper extends <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a>, <a href=\"api/core/DoCheck\" class=\"code-anchor\">DoCheck</a>,\n    <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  // The names of the input and output properties here must match the names of the\n  // `&lt;` and `&amp;` bindings in the AngularJS component that is being wrapped\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onRemove: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;void&gt;;\n  constructor(@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) elementRef: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) {\n    // We must pass the name of the directive as used by AngularJS to the super\n    super('ng1Hero', elementRef, injector);\n  }\n\n  // For this class to work when compiled with AoT, we must implement these lifecycle hooks\n  // because the AoT compiler will not realise that the super class implements them\n  ngOnInit() { super.ngOnInit(); }\n\n  ngOnChanges(changes: <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a>) { super.ngOnChanges(changes); }\n\n  ngDoCheck() { super.ngDoCheck(); }\n\n  ngOnDestroy() { super.ngOnDestroy(); }\n}\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bm3cyqkugag5hfwo5hieq6sql\"><code>name</code> 参数应该是 AngularJS 指令的名称。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jlind7kuby37wmjj7sr3pv6s\"><code>elementRef</code> 和 \n<code>injector</code> 参数应通过依赖注入到基类构造函数中从 Angular 获取。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9bdrg29e01jozk6fc8kp7bg9\">请注意，我们必须手动实现调用超类的生命周期钩子。这是因为，目前，AoT 编译器无法识别 \n<code><a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a></code> 已经实现了它们，因此不会在运行时连接对它们的调用。</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnInit\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngOnInit()</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnChanges\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngOnChanges(changes: <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a>)</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngDoCheck\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngDoCheck()</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnDestroy\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngOnDestroy()</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/core/DoCheck\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/upgrade/static\n - api/upgrade/static/UpgradeModule\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/core/Directive\n - api/core/DoCheck\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/Inject\n - api/core/Injector\n - api/core/Input\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Output\n - api/core/SimpleChanges\n - api/upgrade/static\n - api/upgrade/static/UpgradeComponent#constructor\n - api/upgrade/static/UpgradeComponent#constructor()\n - api/upgrade/static/UpgradeComponent#description\n - api/upgrade/static/UpgradeComponent#how-to-use\n - api/upgrade/static/UpgradeComponent#members\n - api/upgrade/static/UpgradeComponent#ngDoCheck\n - api/upgrade/static/UpgradeComponent#ngOnChanges\n - api/upgrade/static/UpgradeComponent#ngOnDestroy\n - api/upgrade/static/UpgradeComponent#ngOnInit\n - api/upgrade/static/UpgradeComponent#overview\n - api/upgrade/static/UpgradeComponent#upgradecomponent\n - api?query=upgrade%2Fstatic\n - https://github.com/angular/angular/tree/5.2.11/packages/upgrade/src/static/upgrade_component.ts#L28-L300\n - https://www.npmjs.com/package/@angular/upgrade\n-->"
}