{
  "id" : "api/upgrade/UpgradeAdapter",
  "title" : "UpgradeAdapter",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"upgradeadapter\">UpgradeAdapter</h1>\n    <label class=\"api-type-label class\">class</label>\n    <label class=\"api-status-label deprecated\">deprecated</label>\n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/upgrade\">@angular/upgrade</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a> } from <a href=\"api/upgrade\">'@angular/upgrade'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/upgrade/src/dynamic/upgrade_adapter.ts#L21-L604\">upgrade/src/dynamic/upgrade_adapter.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n<section class=\"deprecated\">\n  <h2 id=\"deprecation-notes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxhln38nrp36303qqb6hgjwp9\"><i class=\"material-icons\">link</i>弃用说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ixgzmgx99v50g0rafah2249j\">自 v5 版本起弃用。请改用 \n<code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code>，它也支持 \n<a href=\"guide/aot-compiler\">预先编译</a>。</p>\n\n</section>\n\n  <section class=\"class-overview\">\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a> {\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#constructor()\">constructor(ng2AppModule: Type&lt;any&gt;, compilerOptions?: CompilerOptions)</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#downgradeNg2Component\">downgradeNg2Component(component: Type&lt;any&gt;): Function</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#upgradeNg1Component\">upgradeNg1Component(name: string): Type&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#registerForNg1Tests\">registerForNg1Tests(modules?: string[]): UpgradeAdapterRef</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#bootstrap\">bootstrap(element: Element, modules?: any[], config?: angular.IAngularBootstrapConfig): UpgradeAdapterRef</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#upgradeNg1Provider\">upgradeNg1Provider(name: string, options?: {...})</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#downgradeNg2Provider\">downgradeNg2Provider(token: any): Function</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atcmfwbmegfahrz5zaueqcx87\">使用 \n<code><a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a></code> 允许 AngularJS 和 Angular 在同一个应用程序中共存。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34a809vx4ya3pzaub2mtrrkeu\"><code><a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a></code> 允许： 1. 从 AngularJS 组件指令创建 Angular 组件 （参见 [UpgradeAdapter#upgradeNg1Component()]) 2. 从 Angular 组件创建 AngularJS 指令。 （参见 [UpgradeAdapter#downgradeNg2Component()]) 3. 引导包含两个框架在同一个应用程序中共存的混合 Angular 应用程序。</p>\n<h2 id=\"mental-model\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6vtkv13e1pzp7s84dv6xy0vzc\"><i class=\"material-icons\">link</i>心理模型</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8ngenqmeaov43gu5hpg8syap4\">在推理混合应用程序的工作方式时，有一个心智模型会很有用，它可以描述正在发生的事情并在最低级别解释正在发生的事情。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"87im8nbyy8wpshz9p3hc6g0u5\">在单个应用程序中运行有两个独立的框架，每个框架都将另一个框架视为黑盒。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"cyhmb0xnpf0fx97at4zbxz0bb\">页面上的每个 DOM 元素都归一个框架所有。无论哪个框架实例化此元素，都是所有者。每个框架都只更新自己的 DOM 元素/交互，而忽略其他框架。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ew3daj7g3panwgqs0badvl780\">AngularJS 指令始终在 AngularJS 框架代码库中执行，无论它们是在哪里实例化的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3ujjhphefr6z567yvf2g9nvmj\">Angular 组件始终在 Angular 框架代码库中执行，无论它们在哪里实例化。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3bc9z6doq8gslc4ed13ch105u\">AngularJS 组件可以升级为 Angular 组件。这会创建一个 Angular 指令，它会引导该位置的 AngularJS 组件指令。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"f27mtimikjdonkp91sxxo522a\">Angular 组件可以降级为 AngularJS 组件指令。这会创建一个 AngularJS 指令，该指令会引导该位置的 Angular 组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"47tv0pp0qpegrunqu6tv0eupn\">每当实例化适配器组件时，宿主元素都归进行实例化的框架所有。然后，另一个框架会实例化并拥有该组件的视图。这意味着组件绑定将始终遵循实例化框架的语义。语法始终是 Angular 语法。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"39s62dj0qbbmrnit038gvnxp3\">AngularJS 始终首先引导并拥有最底部的视图。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"26upqrtaxk0d98w92y6x1ejjb\">新应用程序在 Angular 区域中运行，因此它不再需要调用 <code>$apply()</code>。</li>\n</ol>\n<h3 id=\"example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(<a href=\"api/core/forwardRef\" class=\"code-anchor\">forwardRef</a>(() =&gt; MyNg2Module), myCompilerOptions);\nconst module = angular.module('myExample', []);\nmodule.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n\nmodule.directive('ng1Hello', function() {\n  return {\n     scope: { title: '=' },\n     template: 'ng1[Hello {{title}}!](&lt;span ng-transclude&gt;&lt;/span&gt;)'\n  };\n});\n\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng2-comp',\n  inputs: ['name'],\n  template: 'ng2[&lt;ng1-hello [title]=\"name\"&gt;transclude&lt;/ng1-hello&gt;](&lt;ng-content&gt;&lt;/ng-content&gt;)',\n  directives:\n})\nclass Ng2Component {\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>]\n})\nclass MyNg2Module {}\n\n\ndocument.body.innerHTML = '&lt;ng2-comp name=\"World\"&gt;project&lt;/ng2-comp&gt;';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\n      \"ng2[ng1[Hello World!](transclude)](project)\");\n});\n</code-example>\n\n</section>\n\n\n  \n  \n\n\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64p310lbzdqiret0qyhhannvq\"><i class=\"material-icons\">link</i>构造函数</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor(ng2AppModule: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt;, compilerOptions?: <a href=\"api/core/CompilerOptions\" class=\"code-anchor\">CompilerOptions</a>)</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"downgradeNg2Component\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">downgradeNg2Component(component: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt;): Function</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3diaew6qli6j5il9mmmbtjkdt\">允许从 AngularJS 使用 Angular 组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7mcthqd8j897hwqyfevkh8db7\">使用 <code>downgradeNg2Component</code> 从 Angular 组件创建 AngularJS 指令定义工厂。适配器将从 AngularJS 模板中引导 Angular 组件。</p>\n<h2 id=\"mental-model-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6vtkv13e1pzp7s84dv6xy0vzc\"><i class=\"material-icons\">link</i>心理模型</h2>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6s95r7qfboydjgj4ru9gxn2uv\">该组件是通过在 AngularJS 模板中列出来实例化的。这意味着宿主元素由 AngularJS 控制，但组件的视图将由 Angular 控制。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"d22dw8ey342kthi3220aujazd\">即使组件是在 AngularJS 中实例化的，它也将使用 Angular 语法。必须这样做，因为我们必须遵循 Angular 组件，而不是声明应该如何解释属性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5s6bimkqybe579x14zdh7g7z9\"><code>ng-model</code> 由 AngularJS 控制，并通过 @angular/forms 中的 \n<code><a href=\"api/forms/ControlValueAccessor\" class=\"code-anchor\">ControlValueAccessor</a></code> 接口与降级的 Angular 组件进行通信。只有实现了此接口的组件才符合条件。</li>\n</ol>\n<h2 id=\"supported-features\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9mwjkhs8ndhd0buvslu47xp71\"><i class=\"material-icons\">link</i>支持的特性</h2>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ak84eytqxsiuaiubnyiagsxjf\">绑定：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5xcw79p3mdzmpmnoy5ms9fsae\">属性：<code>&lt;comp name=\"World\"&gt;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6yhtp7qz6xz3m131qv4bj8y8t\">插值：<code>&lt;comp greeting=\"Hello {{name}}!\"&gt;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"abwl1ow0nawt7f58pszuvoozm\">表达式：<code>&lt;comp [name]=\"username\"&gt;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"959uqzti792uaf2u24lt8r5ih\">事件：<code>&lt;comp (close)=\"doSomething()\"&gt;</code></li>\n<li>ng-model: <code>&lt;comp ng-model=\"name\"&gt;</code></li>\n</ul>\n</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bp6wahgzm6yjvisoecn0hd7q\">内容投影：是</li>\n</ul>\n<h3 id=\"example-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(<a href=\"api/core/forwardRef\" class=\"code-anchor\">forwardRef</a>(() =&gt; MyNg2Module));\nconst module = angular.module('myExample', []);\nmodule.directive('greet', adapter.downgradeNg2Component(Greeter));\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'greet',\n  template: '{{salutation}} {{name}}! - &lt;ng-content&gt;&lt;/ng-content&gt;'\n})\nclass Greeter {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() salutation: string;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() name: string;\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Greeter],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML =\n  'ng1 template: &lt;greet salutation=\"Hello\" [name]=\"world\"&gt;text&lt;/greet&gt;';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n});\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"upgradeNg1Component\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">upgradeNg1Component(name: string): <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt;</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4dk768m2lc8vh5a2gwwm40osn\">允许从 Angular 使用 AngularJS 组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"eyelzo2xi01w6fd3yro8t3f54\">使用 <code>upgradeNg1Component</code> 从 AngularJS Component 指令创建一个 Angular 组件。适配器将从 Angular 模板中引导 AngularJS 组件。</p>\n<h2 id=\"mental-model-2\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6vtkv13e1pzp7s84dv6xy0vzc\"><i class=\"material-icons\">link</i>心理模型</h2>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"49gitefybf2qnpirb006f4v8q\">该组件是通过在 Angular 模板中列出来实例化的。这意味着宿主元素由 Angular 控制，但组件的视图将由 AngularJS 控制。</li>\n</ol>\n<h2 id=\"supported-features-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9mwjkhs8ndhd0buvslu47xp71\"><i class=\"material-icons\">link</i>支持的特性</h2>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ak84eytqxsiuaiubnyiagsxjf\">绑定：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5xcw79p3mdzmpmnoy5ms9fsae\">属性：<code>&lt;comp name=\"World\"&gt;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6yhtp7qz6xz3m131qv4bj8y8t\">插值：<code>&lt;comp greeting=\"Hello {{name}}!\"&gt;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"abwl1ow0nawt7f58pszuvoozm\">表达式：<code>&lt;comp [name]=\"username\"&gt;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"959uqzti792uaf2u24lt8r5ih\">事件：<code>&lt;comp (close)=\"doSomething()\"&gt;</code></li>\n</ul>\n</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8k5akwj736frnoeisrja0nl38\">透传：是</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"buz3mrf5g4trhtjqcara9oq0b\">仅支持 \n<a href=\"https://docs.angularjs.org/api/ng/service/$compile\">指令定义对象</a> 的部分特性：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bofugfvww73p2uevu7altqgfm\"><code>compile</code>：不支持，因为宿主元素归 Angular 所有，它不允许在编译期间修改 DOM 结构。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"44iki1b7pm60dtftafaulxrqd\"><code>controller</code>：支持。（注意：不支持注入 <code>$attrs</code> 和 <code>$transclude</code>。）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"85mu6ooou32an1svmbducq06b\"><code>controllerAs</code>：支持。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"k8icabvt6yndcr9iap4p6bju\"><code>bindToController</code>：支持。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3jsvgowvxt5r7ulljghg5is69\"><code>link</code>：支持。（注意：仅支持预链接功能。）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"a83cpzj3riomltkdlpqrx8m5s\"><code>name</code>：支持。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4qawlpvnj2zg7jj9yweqfmrsy\"><code>priority</code>：忽略。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"22c9uo49b41lorch2rtwgg04w\"><code>replace</code>：不支持。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dib79jf36uzg3n09gtd9zahhd\"><code>require</code>：支持。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4i0506rwg8q2v6bnuw7c3x9pv\"><code>restrict</code>：必须设置为 'E'。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"euk2ldq80afqrbwlbcuxlh2y8\"><code>scope</code>：支持。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4jynm1294hcn9hu5ioswa0lrb\"><code>template</code>：支持。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5tssgvuee7xt0xtilvfg6im9y\"><code>templateUrl</code>：支持。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6rbmusf26zcprzemtiphwbzej\"><code>terminal</code>：被忽略。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"10ie89lcrg6el040htly3hmsq\"><code>transclude</code>：支持。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"example-2\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(<a href=\"api/core/forwardRef\" class=\"code-anchor\">forwardRef</a>(() =&gt; MyNg2Module));\nconst module = angular.module('myExample', []);\n\nmodule.directive('greet', function() {\n  return {\n    scope: {salutation: '=', name: '=' },\n    template: '{{salutation}} {{name}}! - &lt;span ng-transclude&gt;&lt;/span&gt;'\n  };\n});\n\nmodule.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng2',\n  template: 'ng2 template: &lt;greet salutation=\"Hello\" [name]=\"world\"&gt;text&lt;/greet&gt;'\n})\nclass Ng2Component {\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML = '&lt;ng2&gt;&lt;/ng2&gt;';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n});\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"registerForNg1Tests\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">registerForNg1Tests(modules?: string[]): <a href=\"api/upgrade/UpgradeAdapterRef\" class=\"code-anchor\">UpgradeAdapterRef</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4hks4gigf5ehb9voawoibevb0\">注册适配器的 AngularJS 升级模块以在 AngularJS 中进行单元测试。使用它而不是 <code>angular.mock.module()</code> 将升级模块加载到 AngularJS 测试注入器中。</p>\n<h3 id=\"example-3\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst upgradeAdapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(MyNg2Module);\n\n// configure the adapter with upgrade/downgrade components and services\nupgradeAdapter.downgradeNg2Component(MyComponent);\n\nlet upgradeAdapterRef: <a href=\"api/upgrade/UpgradeAdapterRef\" class=\"code-anchor\">UpgradeAdapterRef</a>;\nlet $compile, $rootScope;\n\n// We must register the adapter before any calls to `<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a>()`\nbeforeEach(() =&gt; {\n  upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n});\n\nbeforeEach(<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a>((_$compile_, _$rootScope_) =&gt; {\n  $compile = _$compile_;\n  $rootScope = _$rootScope_;\n}));\n\nit(\"says hello\", (done) =&gt; {\n  upgradeAdapterRef.ready(() =&gt; {\n    const element = $compile(\"&lt;my-component&gt;&lt;/my-component&gt;\")($rootScope);\n    $rootScope.$apply();\n    expect(element.html()).toContain(\"Hello World\");\n    done();\n  })\n});\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"bootstrap\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">bootstrap(element: Element, modules?: any[], config?: angular.IAngularBootstrapConfig): <a href=\"api/upgrade/UpgradeAdapterRef\" class=\"code-anchor\">UpgradeAdapterRef</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4b9kx58nkmzeish0878w6cmcz\">引导混合 AngularJS / Angular 应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"295ef8rspizz2gi6bxa6bag80\">此 <code>bootstrap</code> 方法是 AngularJS <a href=\"https://docs.angularjs.org/api/ng/function/angular.bootstrap\"><code>bootstrap</code></a>方法的直接替换（采用相同的参数）。与 AngularJS 不同，此引导程序是异步的。</p>\n<h3 id=\"example-4\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(MyNg2Module);\nconst module = angular.module('myExample', []);\nmodule.directive('ng2', adapter.downgradeNg2Component(Ng2));\n\nmodule.directive('ng1', function() {\n  return {\n     scope: { title: '=' },\n     template: 'ng1[Hello {{title}}!](&lt;span ng-transclude&gt;&lt;/span&gt;)'\n  };\n});\n\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng2',\n  inputs: ['name'],\n  template: 'ng2[&lt;ng1 [title]=\"name\"&gt;transclude&lt;/ng1&gt;](&lt;ng-content&gt;&lt;/ng-content&gt;)'\n})\nclass Ng2 {\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML = '&lt;ng2 name=\"World\"&gt;project&lt;/ng2&gt;';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\n      \"ng2[ng1[Hello World!](transclude)](project)\");\n});\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"upgradeNg1Provider\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">upgradeNg1Provider(name: string, options?: {\n    asToken: any;\n})</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e1ou80x7ru0tcyz5mheqn66pk\">允许从 Angular 访问 AngularJS 服务。</p>\n<h3 id=\"example-5\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nclass Login { ... }\nclass Server { ... }\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass Example {\n  constructor(@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>('server') server, login: Login) {\n    ...\n  }\n}\n\nconst module = angular.module('myExample', []);\nmodule.service('server', Server);\nmodule.service('login', Login);\n\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(MyNg2Module);\nadapter.upgradeNg1Provider('server');\nadapter.upgradeNg1Provider('login', {asToken: Login});\n\nadapter.bootstrap(document.body, ['myExample']).ready((ref) =&gt; {\n  const example: Example = ref.ng2Injector.get(Example);\n});\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"downgradeNg2Provider\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">downgradeNg2Provider(token: any): Function</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"a3qd3unz1l65dqqarhgbw88lr\">允许从 AngularJS 访问 Angular 服务。</p>\n<h3 id=\"example-6\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nclass Example {\n}\n\nconst adapter = new <a href=\"api/upgrade/UpgradeAdapter\" class=\"code-anchor\">UpgradeAdapter</a>(MyNg2Module);\n\nconst module = angular.module('myExample', []);\nmodule.factory('example', adapter.downgradeNg2Provider(Example));\n\nadapter.bootstrap(document.body, ['myExample']).ready((ref) =&gt; {\n  const example: Example = ref.ng1Injector.get('example');\n});\n</code-example>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/upgrade\n-->\n<!-- links from this doc:\n - api/core/CompilerOptions\n - api/core/Component\n - api/core/Inject\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/Type\n - api/core/forwardRef\n - api/core/testing/inject\n - api/forms/ControlValueAccessor\n - api/platform-browser/BrowserModule\n - api/upgrade\n - api/upgrade/UpgradeAdapter#bootstrap\n - api/upgrade/UpgradeAdapter#constructor\n - api/upgrade/UpgradeAdapter#constructor()\n - api/upgrade/UpgradeAdapter#deprecation-notes\n - api/upgrade/UpgradeAdapter#description\n - api/upgrade/UpgradeAdapter#downgradeNg2Component\n - api/upgrade/UpgradeAdapter#downgradeNg2Provider\n - api/upgrade/UpgradeAdapter#example\n - api/upgrade/UpgradeAdapter#example-1\n - api/upgrade/UpgradeAdapter#example-2\n - api/upgrade/UpgradeAdapter#example-3\n - api/upgrade/UpgradeAdapter#example-4\n - api/upgrade/UpgradeAdapter#example-5\n - api/upgrade/UpgradeAdapter#example-6\n - api/upgrade/UpgradeAdapter#members\n - api/upgrade/UpgradeAdapter#mental-model\n - api/upgrade/UpgradeAdapter#mental-model-1\n - api/upgrade/UpgradeAdapter#mental-model-2\n - api/upgrade/UpgradeAdapter#overview\n - api/upgrade/UpgradeAdapter#registerForNg1Tests\n - api/upgrade/UpgradeAdapter#supported-features\n - api/upgrade/UpgradeAdapter#supported-features-1\n - api/upgrade/UpgradeAdapter#upgradeNg1Component\n - api/upgrade/UpgradeAdapter#upgradeNg1Provider\n - api/upgrade/UpgradeAdapter#upgradeadapter\n - api/upgrade/UpgradeAdapterRef\n - api/upgrade/static\n - guide/aot-compiler\n - https://docs.angularjs.org/api/ng/function/angular.bootstrap\n - https://docs.angularjs.org/api/ng/service/$compile\n - https://github.com/angular/angular/tree/5.2.11/packages/upgrade/src/dynamic/upgrade_adapter.ts#L21-L604\n - https://www.npmjs.com/package/@angular/upgrade\n-->"
}