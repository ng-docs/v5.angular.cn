{
  "id" : "api/forms/FormGroup",
  "title" : "FormGroup",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"formgroup\">FormGroup</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/forms\">@angular/forms</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from <a href=\"api/forms\">'@angular/forms'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/forms/src/model.ts#L876-L1220\">forms/src/model.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cc2m7jsdx0u86ccqw4jmn3bx\">跟踪一组 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a> 实例的值和有效性状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5civlfcj6758wy3otkksusk8x\">一个 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 将每个子 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a> 的值聚合到一个对象中， 每个控件名称作为键。它通过减少其子项的状态来计算其状态。例如，如果组中的一个控件无效，则整个 组将变为无效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7elp1fil8mogcdpentowv94mh\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 是 Angular 中用于定义表单的三个基本构建块之一， 与 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a> 和 \n<a href=\"api/forms/FormArray\"><code>FormArray</code></a> 一样。</p>\n\n</div>\n\n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> extends <a class=\"code-anchor\" href=\"api/forms/AbstractControl\">AbstractControl</a> {\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#constructor()\">constructor(controls: {...}, validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null)</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#controls\">controls: {...}</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#registerControl\">registerControl(name: string, control: AbstractControl): AbstractControl</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#addControl\">addControl(name: string, control: AbstractControl): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#removeControl\">removeControl(name: string): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#setControl\">setControl(name: string, control: AbstractControl): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#contains\">contains(controlName: string): boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#setValue\">setValue(value: {...}, options: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#patchValue\">patchValue(value: {...}, options: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#reset\">reset(value: any = {}, options: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormGroup#getRawValue\">getRawValue(): any</a>\n  // inherited from <a class=\"code-anchor\" href=\"api/forms/AbstractControl\">forms/AbstractControl</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#value\">get value: any</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#validator\">validator: ValidatorFn | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#asyncValidator\">asyncValidator: AsyncValidatorFn | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#parent\">get parent: FormGroup | FormArray</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#status\">get status: string</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#valid\">get valid: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#invalid\">get invalid: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#pending\">get pending: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#disabled\">get disabled: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#enabled\">get enabled: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#errors\">get errors: ValidationErrors | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#pristine\">get pristine: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#dirty\">get dirty: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#touched\">get touched: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#untouched\">get untouched: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#valueChanges\">get valueChanges: Observable&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#statusChanges\">get statusChanges: Observable&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#updateOn\">get updateOn: FormHooks</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#setValidators\">setValidators(newValidator: ValidatorFn | ValidatorFn[] | null): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#setAsyncValidators\">setAsyncValidators(newValidator: AsyncValidatorFn | AsyncValidatorFn[] | null): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#clearValidators\">clearValidators(): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#clearAsyncValidators\">clearAsyncValidators(): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#markAsTouched\">markAsTouched(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#markAsUntouched\">markAsUntouched(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#markAsDirty\">markAsDirty(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#markAsPristine\">markAsPristine(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#markAsPending\">markAsPending(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#disable\">disable(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#enable\">enable(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#setParent\">setParent(parent: FormGroup | FormArray): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#setValue\">setValue(value: any, options?: Object): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#patchValue\">patchValue(value: any, options?: Object): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#reset\">reset(value?: any, options?: Object): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#updateValueAndValidity\">updateValueAndValidity(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#setErrors\">setErrors(errors: ValidationErrors | null, opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#get\">get(path: Array&lt;string | number&gt; | string): AbstractControl | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#getError\">getError(errorCode: string, path?: string[]): any</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#hasError\">hasError(errorCode: string, path?: string[]): boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#root\">get root: AbstractControl</a>\n}\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cflu95twzi71qd095ghj9h0y7\"><i class=\"material-icons\">link</i>使用方法</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q1075b5hj3br01k8sretsjfu\">在实例化 \n<a href=\"api/forms/FormGroup\"><code>FormGroup</code></a> 时，将子控件的集合作为第一个 参数传递。每个子项的键将是其注册的名称。</p>\n<h3 id=\"example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst form = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n  first: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Nancy', Validators.minLength(2)),\n  last: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Drew'),\n});\n\nconsole.log(form.value);   // {first: 'Nancy', last; 'Drew'}\nconsole.log(form.status);  // 'VALID'\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tqvyhvsr8cpwj7jonisxtrh6\">你也可以将组级验证器作为第二个参数，或将组级异步验证器作为第三个参数。当你想执行考虑多个子控件值的验证时，这些验证器非常有用。</p>\n<h3 id=\"example-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst form = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n  password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', Validators.minLength(2)),\n  passwordConfirm: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', Validators.minLength(2)),\n}, passwordMatchValidator);\n\n\nfunction passwordMatchValidator(g: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>) {\n   return g.get('password').value === g.get('passwordConfirm').value\n      ? null : {'mismatch': true};\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63k597yuc6gvbsbpqboxu1txn\">就像 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a> 实例一样，你也可以选择将验证器和异步验证器作为选项对象的一部分传入。</p>\n<code-example>\nconst form = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n  password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('')\n  passwordConfirm: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('')\n}, {validators: passwordMatchValidator, asyncValidators: otherValidator});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b79k3960l2onxx7e6mxsuata4\">选项对象也可以用来为每个子控件的 \n<code>updateOn</code> 属性设置默认值。如果你在组级别将 \n<code>updateOn</code> 设置为 \n<code>'blur'</code>，所有子控件将默认设置为 'blur'，除非子控件明确指定了不同的 \n<code>updateOn</code> 值。</p>\n<code-example language=\"ts\">\nconst c = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n   one: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()\n}, {updateOn: 'blur'});\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewchuuaugycx2hdjbsj13rs92\"><strong>npm 包</strong>：\n<code>@angular/forms</code></li>\n</ul>\n\n</section>\n\n\n  \n\n\n\n  \n  \n\n\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64p310lbzdqiret0qyhhannvq\"><i class=\"material-icons\">link</i>构造函数</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor(controls: {\n    [key: string]: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>;\n}, validatorOrOpts?: <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a> | <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a>[] | AbstractControlOptions | null, asyncValidator?: <a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a> | <a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a>[] | null)</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"controls\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">controls: {\n    [key: string]: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>;\n}</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"registerControl\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">registerControl(name: string, control: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>): <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jqnsvvgyqg2xbeejx68xcxav\">将控件注册到组的控件列表中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mx4xfnbwhoo9swjsui7hzzpl\">此方法不会更新控件的值或有效性，因此在大多数情况下，你将希望使用 \n<a href=\"api/forms/FormGroup#addControl\">addControl</a>。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"addControl\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">addControl(name: string, control: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7tnqxxwkz61dfy4t40yua61pq\">往组中添加一个控件。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"removeControl\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">removeControl(name: string): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7sgxx0rg82u548hmrnre40nd4\">从该组中移除一个控件。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"setControl\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">setControl(name: string, control: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5suyog202qmnla2ngpx4m1ru5\">替换现有的控件。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"contains\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">contains(controlName: string): boolean</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"214lz3pfmdlrj5byx5t5q2f5f\">检查组内是否有一个具有指定名字的已启用的控件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4alqobja5kbvc5n9go2ftnfwe\">对于禁用的控件，它将返回 false。如果你只想检查组中是否存在，请使用 \n<a href=\"api/forms/AbstractControl#get\">get</a>。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"setValue\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">setValue(value: {\n    [key: string]: any;\n}, options: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n} = {}): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u8v7y88bo90syqen5j5d5q5t\">设置 \n<a href=\"api/forms/FormGroup\"><code>FormGroup</code></a> 的值。它接受一个与组结构匹配的对象，其中控件名称作为键。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18406bbuf11nhwafnmuingo5c\">此方法执行严格检查，因此如果你尝试设置不存在的控件的值，或者排除了控件的值，它将抛出错误。</p>\n<h3 id=\"example-2\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst form = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n   first: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(),\n   last: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()\n});\nconsole.log(form.value);   // {first: null, last: null}\n\nform.setValue({first: 'Nancy', last: 'Drew'});\nconsole.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"patchValue\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">patchValue(value: {\n    [key: string]: any;\n}, options: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n} = {}): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rglq2u46dzevgvi2on8qrxj8\">修补 \n<a href=\"api/forms/FormGroup\"><code>FormGroup</code></a> 的值。它接受一个以控件名称为键的对象，并将尽力将值匹配到组中的正确控件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"cyy0qd80kd4k9sefpw5fdwb0q\">它能接受组的超集和子集，而不会抛出错误。</p>\n<h3 id=\"example-3\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst form = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n   first: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(),\n   last: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()\n});\nconsole.log(form.value);   // {first: null, last: null}\n\nform.patchValue({first: 'Nancy'});\nconsole.log(form.value);   // {first: 'Nancy', last: null}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"reset\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">reset(value: any = {}, options: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n} = {}): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kp5jnrf233aoa3rkyv705z79\">重置 \n<a href=\"api/forms/FormGroup\"><code>FormGroup</code></a>。默认情况下，这意味着：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i5artlbysdbtjpqwxiisedko\">该组及其所有后代都被标记为 \n<code>pristine</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42yxzahhoyjbjdtiynd09xix0\">该组及其所有后代都被标记为 \n<code>untouched</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dhh902qaf7zb6t6r54dvdbf0\">所有后代的值将为 null 或 null 映射</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ciw5fivy0kc20nbkm04dhmp5s\">你也可以通过传入一个与表单结构匹配的状态映射表来重置到特定表单状态，其中控件名称作为键。状态可以是独立值，也可以是包含值和禁用状态的表单状态对象。</p>\n<h3 id=\"example-4\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example language=\"ts\">\nthis.form.reset({first: 'name', last: 'last name'});\n\nconsole.log(this.form.value);  // {first: 'name', last: 'last name'}\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7u2rnik54mt4u584zm2uui0fv\">或者 -</li>\n</ul>\n<code-example>\nthis.form.reset({\n  first: {value: 'name', disabled: true},\n  last: 'last'\n});\n\nconsole.log(this.form.value);  // {first: 'name', last: 'last name'}\nconsole.log(this.form.get('first').status);  // 'DISABLED'\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"getRawValue\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">getRawValue(): any</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"iq7fqk93lqgqshkf62tzs4tk\"><a href=\"api/forms/FormGroup\"><code>FormGroup</code></a> 的聚合值，包括任何禁用的控件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1b45y125abt6m6ibqssnwyzw6\">如果你想包含所有值，无论禁用状态如何，请使用此方法。否则，\n<code>value</code> 属性是获取组值的最佳方法。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/forms\n - api/forms/AbstractControl\n - api/forms/AbstractControlDirective\n - api/forms/AbstractFormGroupDirective\n - api/forms/Form\n - api/forms/FormArray\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/NgForm\n - api/forms/NgModelGroup\n - api/forms/RadioControlValueAccessor\n - api/forms/SelectControlValueAccessor\n - guide/dynamic-form\n - guide/form-validation\n - guide/glossary\n - guide/observables-in-angular\n - guide/reactive-forms\n-->\n<!-- links from this doc:\n - api/forms\n - api/forms/AbstractControl\n - api/forms/AbstractControl#asyncValidator\n - api/forms/AbstractControl#clearAsyncValidators\n - api/forms/AbstractControl#clearValidators\n - api/forms/AbstractControl#dirty\n - api/forms/AbstractControl#disable\n - api/forms/AbstractControl#disabled\n - api/forms/AbstractControl#enable\n - api/forms/AbstractControl#enabled\n - api/forms/AbstractControl#errors\n - api/forms/AbstractControl#get\n - api/forms/AbstractControl#getError\n - api/forms/AbstractControl#hasError\n - api/forms/AbstractControl#invalid\n - api/forms/AbstractControl#markAsDirty\n - api/forms/AbstractControl#markAsPending\n - api/forms/AbstractControl#markAsPristine\n - api/forms/AbstractControl#markAsTouched\n - api/forms/AbstractControl#markAsUntouched\n - api/forms/AbstractControl#parent\n - api/forms/AbstractControl#patchValue\n - api/forms/AbstractControl#pending\n - api/forms/AbstractControl#pristine\n - api/forms/AbstractControl#reset\n - api/forms/AbstractControl#root\n - api/forms/AbstractControl#setAsyncValidators\n - api/forms/AbstractControl#setErrors\n - api/forms/AbstractControl#setParent\n - api/forms/AbstractControl#setValidators\n - api/forms/AbstractControl#setValue\n - api/forms/AbstractControl#status\n - api/forms/AbstractControl#statusChanges\n - api/forms/AbstractControl#touched\n - api/forms/AbstractControl#untouched\n - api/forms/AbstractControl#updateOn\n - api/forms/AbstractControl#updateValueAndValidity\n - api/forms/AbstractControl#valid\n - api/forms/AbstractControl#validator\n - api/forms/AbstractControl#value\n - api/forms/AbstractControl#valueChanges\n - api/forms/AsyncValidatorFn\n - api/forms/FormArray\n - api/forms/FormControl\n - api/forms/FormGroup#addControl\n - api/forms/FormGroup#constructor\n - api/forms/FormGroup#constructor()\n - api/forms/FormGroup#contains\n - api/forms/FormGroup#controls\n - api/forms/FormGroup#example\n - api/forms/FormGroup#example-1\n - api/forms/FormGroup#example-2\n - api/forms/FormGroup#example-3\n - api/forms/FormGroup#example-4\n - api/forms/FormGroup#formgroup\n - api/forms/FormGroup#getRawValue\n - api/forms/FormGroup#how-to-use\n - api/forms/FormGroup#members\n - api/forms/FormGroup#overview\n - api/forms/FormGroup#patchValue\n - api/forms/FormGroup#registerControl\n - api/forms/FormGroup#removeControl\n - api/forms/FormGroup#reset\n - api/forms/FormGroup#setControl\n - api/forms/FormGroup#setValue\n - api/forms/ValidatorFn\n - https://github.com/angular/angular/tree/5.2.11/packages/forms/src/model.ts#L876-L1220\n - https://www.npmjs.com/package/@angular/forms\n-->"
}