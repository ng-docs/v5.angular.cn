{
  "id" : "api/forms/ControlValueAccessor",
  "title" : "ControlValueAccessor",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"controlvalueaccessor\">ControlValueAccessor</h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/forms\">@angular/forms</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/forms/ControlValueAccessor\" class=\"code-anchor\">ControlValueAccessor</a> } from <a href=\"api/forms\">'@angular/forms'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/forms/src/directives/control_value_accessor.ts#L10-L110\">forms/src/directives/control_value_accessor.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"interface-overview\">\n<h2 id=\"interface-overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15ffnfvjx5orhxzfayretyfy4\"><i class=\"material-icons\">link</i>接口概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/forms/ControlValueAccessor\" class=\"code-anchor\">ControlValueAccessor</a> { \n  <a class=\"code-anchor\" href=\"api/forms/ControlValueAccessor#writeValue\">writeValue(obj: any): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/ControlValueAccessor#registerOnChange\">registerOnChange(fn: any): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/ControlValueAccessor#registerOnTouched\">registerOnTouched(fn: any): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/ControlValueAccessor#setDisabledState\">setDisabledState(isDisabled: boolean)?: void</a>\n}\n</code-example>\n</section>\n  \n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\"><i class=\"material-icons\">link</i>说明</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7ru9y57w4kow0ooahbnz6zqy\">一个 \n<code><a href=\"api/forms/ControlValueAccessor\" class=\"code-anchor\">ControlValueAccessor</a></code> 充当 Angular 表单 API 与 DOM 中的原生元素之间的桥梁。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f514kxsnanlt1ntdpwenos9hx\">如果你想创建一个与 Angular 表单集成的自定义表单控件指令，请实现此接口。</p>\n\n</section>\n\n  \n  \n  \n\n  \n  \n  \n\n  \n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"writeValue\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">writeValue(obj: any): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"755nioao7i2nu763wg9pl36vd\">将新值写入元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aoxfdzceojxykwf74eybc42zs\">此方法将由表单 API 调用，以便在请求程序化（模型 -&gt; 视图）更改时写入视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjd0uc6dhukvmcvccbbbg1b9f\"><code>writeValue</code> 的示例实现：</p>\n<code-example language=\"ts\">\nwriteValue(value: any): void {\n  this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"registerOnChange\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">registerOnChange(fn: any): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acs1rj43z8g0wvkdfr5bjm5s0\">注册一个回调函数，当控件的值在 UI 中发生更改时，应调用该函数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29qz2jeb707z2d3qim7etc82k\">这由表单 API 在初始化时调用，以便它可以在值从视图传播时（视图 -&gt; 模型）更新表单模型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bo6ynvftwqh86s0j42s1cv086\">如果你在自己的值访问器中实现 \n<code>registerOnChange</code>，你通常会想要保存给定的函数，以便你的类可以在适当的时候调用它。</p>\n<code-example language=\"ts\">\nregisterOnChange(fn: (_: any) =&gt; void): void {\n  this._onChange = fn;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4t40ufterjnxcaqx36t3lnbj\">当值在 UI 中发生更改时，你的类应该调用注册的函数，以允许表单 API 更新自身：</p>\n<code-example language=\"ts\">\nhost: {\n   (change): '_onChange($event.target.value)'\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"registerOnTouched\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">registerOnTouched(fn: any): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1h73ssaw5bwu7w4jli5gfy7c9\">注册一个回调函数，当控件接收到模糊事件时，应调用该函数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xeoslmnuk3oghp7lxt5tlum4\">这由表单 API 在初始化时调用，以便它可以在模糊时更新表单模型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86qx1je7px3zkqan5lrqjrhuq\">如果你在自己的值访问器中实现 \n<code>registerOnTouched</code>，你通常会想要保存给定的函数，以便你的类可以在控件应被视为模糊（也称为“已触碰”）时调用它。</p>\n<code-example language=\"ts\">\nregisterOnTouched(fn: any): void {\n  this._onTouched = fn;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4l9o1fqonskga0hr3bh2j1j4t\">在 blur（或等效事件）时，你的类应调用已注册的函数以允许表单 API 自行更新：</p>\n<code-example language=\"ts\">\nhost: {\n   '(blur)': '_onTouched()'\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"setDisabledState\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">setDisabledState(isDisabled: boolean)?: void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xndxt3g1iqubenlweymhufwj\">当控件状态更改为或从“禁用”状态更改时，此函数由表单 API 调用。根据值，它应该启用或禁用相应的 DOM 元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gf93pnqikfwpxn2i87eegypq\"><code>setDisabledState</code> 的示例实现：</p>\n<code-example language=\"ts\">\nsetDisabledState(isDisabled: boolean): void {\n  this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n}\n</code-example>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/forms\n - api/forms/CheckboxControlValueAccessor\n - api/forms/DefaultValueAccessor\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/NG_VALUE_ACCESSOR\n - api/forms/NgControl\n - api/forms/NgModel\n - api/forms/RadioControlValueAccessor\n - api/forms/SelectControlValueAccessor\n - api/forms/SelectMultipleControlValueAccessor\n - api/upgrade/UpgradeAdapter\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/forms\n - api/forms/ControlValueAccessor#controlvalueaccessor\n - api/forms/ControlValueAccessor#description\n - api/forms/ControlValueAccessor#interface-overview\n - api/forms/ControlValueAccessor#members\n - api/forms/ControlValueAccessor#registerOnChange\n - api/forms/ControlValueAccessor#registerOnTouched\n - api/forms/ControlValueAccessor#setDisabledState\n - api/forms/ControlValueAccessor#writeValue\n - https://github.com/angular/angular/tree/5.2.11/packages/forms/src/directives/control_value_accessor.ts#L10-L110\n - https://www.npmjs.com/package/@angular/forms\n-->"
}