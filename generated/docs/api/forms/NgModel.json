{
  "id" : "api/forms/NgModel",
  "title" : "NgModel",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"ngmodel\">NgModel</h1>\n    <label class=\"api-type-label directive\">directive</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/forms\">@angular/forms</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> } from <a href=\"api/forms\">'@angular/forms'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/forms/src/directives/ng_model.ts#L47-L273\">forms/src/directives/ng_model.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"m8rxvom6waetwicp30ysnna6\">从域模型创建一个 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a> 实例，并将其绑定到表单控件元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyv2e55xbhu6s4pu90uaybx1e\">该 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a> 实例将跟踪控件的值、用户交互和验证状态，并使视图与模型保持同步。如果在父表单中使用，该指令还会将自身注册到表单中作为子控件。</p>\n\n</div>\n\n  \n  \n  <section class=\"directive-overview\">\n  <h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n    selector: '[<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]:not([<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]):not([formControl])',\n    providers: [formControlBinding],\n    exportAs: '<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>'\n})\nclass <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> extends <a class=\"code-anchor\" href=\"api/forms/NgControl\">NgControl</a> implements <a class=\"code-anchor\" href=\"api/core/OnChanges\">OnChanges</a>, <a class=\"code-anchor\" href=\"api/core/OnDestroy\">OnDestroy</a> {\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#control\">get control: FormControl</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#viewModel\">viewModel: any</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#name\">name: string</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#isDisabled\">isDisabled: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#model\">model: any</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#options\">options: {...}</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#update\">update: new EventEmitter()</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#ngOnChanges\">ngOnChanges(changes: SimpleChanges)</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#ngOnDestroy\">ngOnDestroy(): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#path\">get path: string[]</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#formDirective\">get formDirective: any</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#validator\">get validator: ValidatorFn | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#asyncValidator\">get asyncValidator: AsyncValidatorFn | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#viewToModelUpdate\">viewToModelUpdate(newValue: any): void</a>\n  // inherited from <a class=\"code-anchor\" href=\"api/forms/NgControl\">forms/NgControl</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgControl#name\">name: string | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgControl#valueAccessor\">valueAccessor: ControlValueAccessor | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgControl#validator\">get validator: ValidatorFn | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgControl#asyncValidator\">get asyncValidator: AsyncValidatorFn | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgControl#viewToModelUpdate\">viewToModelUpdate(newValue: any): void</a>\n  // inherited from <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective\">forms/AbstractControlDirective</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#control\">get control: AbstractControl | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#value\">get value: any</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#valid\">get valid: boolean | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#invalid\">get invalid: boolean | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#pending\">get pending: boolean | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#disabled\">get disabled: boolean | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#enabled\">get enabled: boolean | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#errors\">get errors: ValidationErrors | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#pristine\">get pristine: boolean | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#dirty\">get dirty: boolean | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#touched\">get touched: boolean | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#status\">get status: string | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#untouched\">get untouched: boolean | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#statusChanges\">get statusChanges: Observable&lt;any&gt; | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#valueChanges\">get valueChanges: Observable&lt;any&gt; | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#path\">get path: string[] | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#reset\">reset(value: any = undefined): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#hasError\">hasError(errorCode: string, path?: string[]): boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#getError\">getError(errorCode: string, path?: string[]): any</a>\n}\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cflu95twzi71qd095ghj9h0y7\"><i class=\"material-icons\">link</i>使用方法</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50fmor6vmt5cf202cstvbfmxr\">此指令可以单独使用，也可以作为更大表单的一部分使用。你只需要 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 选择器来激活它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avhejc4e6yfmpyasz3nk6e7tm\">它接受一个域模型作为可选的 \n<a href=\"api/core/Input\"><code>Input</code></a>。如果你使用 \n<code>[]</code> 语法对 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 进行单向绑定，则更改组件类中域模型的值将设置视图中的值。如果你使用 \n<code>[()]</code> 语法（也称为“香蕉盒语法”）进行双向绑定，则 UI 中的值也将始终同步回类中的域模型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtewxaaizm2r0m7qbhgpyswm7\">如果你想检查关联的 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a> 的属性（如有效性状态），你也可以使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 作为键将指令导出到本地模板变量中（例如：\n<code>#myVar=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>）。然后，你可以使用指令的 \n<code>control</code> 属性访问控件，但你需要的多数属性（如 \n<code>valid</code> 和 \n<code>dirty</code>）会直接传递到控件，因此你可以直接访问它们。你可以在 \n<a href=\"api/forms/AbstractControlDirective\"><code>AbstractControlDirective</code></a> 中查看直接可用的所有属性列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oo03q9qpd6oc5w1r3xuhfvk7\">以下是一个使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的简单独立控件示例：</p>\n<code-example>\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'example-app',\n  template: `\n    &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\" #ctrl=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\" required&gt;\n\n    &lt;p&gt;Value: {{ name }}&lt;/p&gt;\n    &lt;p&gt;Valid: {{ ctrl.valid }}&lt;/p&gt;\n    \n    &lt;button (click)=\"setValue()\"&gt;Set value&lt;/button&gt;\n  `,\n})\nexport class SimpleNgModelComp {\n  name: string = '';\n\n  setValue() { this.name = 'Nancy'; }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uax4qek97gp3skeuc4vq1l9n\">在 \n<code>&lt;form&gt;</code> 标签内使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 时，你还需要提供一个 \n<code>name</code> 属性，以便控件可以在该名称下注册到父表单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cv7t6mklu6z537q3a6ogefofk\">值得注意的是，在父表单的上下文中，你通常可以跳过单向或双向绑定，因为父表单会为你同步值。你可以使用 \n<code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> 将其导出到本地模板变量中（例如：\n<code>#f=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"</code>）。然后，你可以在提交时将其传递到需要的地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anhnl85aq1wvuvt2r5qhke9gs\">如果你确实需要将初始值填充到表单中，只要你在提交时使用导出的表单值而不是域模型的值，使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的单向绑定就足够了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kkzakctaxjdm70eh6juclub6\">查看在表单中使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的示例：</p>\n<code-example>\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {<a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a>} from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'example-app',\n  template: `\n    &lt;form #f=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(f)\" novalidate&gt;\n      &lt;input name=\"first\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required #first=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n      &lt;input name=\"last\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>&gt;\n      &lt;button&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n    \n    &lt;p&gt;First name value: {{ first.value }}&lt;/p&gt;\n    &lt;p&gt;First name valid: {{ first.valid }}&lt;/p&gt;\n    &lt;p&gt;<a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> value: {{ f.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a> }}&lt;/p&gt;\n    &lt;p&gt;<a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> valid: {{ f.valid }}&lt;/p&gt;\n  `,\n})\nexport class SimpleFormComp {\n  onSubmit(f: <a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a>) {\n    console.log(f.value);  // { first: '', last: '' }\n    console.log(f.valid);  // false\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vbelwvrsy6apahx3cz6fj7l0\">要查看使用不同表单控件类型的 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 示例，请参阅：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9f2qfmycgk3l384xs6e4j4l6c\">单选按钮：\n<a href=\"api/forms/RadioControlValueAccessor\"><code>RadioControlValueAccessor</code></a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eiq0qgd3a2to1ncx1p8tf59ku\">选择：\n<a href=\"api/forms/SelectControlValueAccessor\"><code>SelectControlValueAccessor</code></a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewchuuaugycx2hdjbsj13rs92\"><strong>npm 包</strong>：\n<code>@angular/forms</code></p>\n<p><strong>NgModule</strong>: <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code></p>\n\n</section>\n\n\n  \n\n<section class=\"selectors\">\n  <h2 id=\"selectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ukliajrgrqzf6qt0k49ld9w9\"><i class=\"material-icons\">link</i>选择器</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading selector\">\n  [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]:not([<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]):not([formControl])\n  </code-example>\n</section>\n\n\n  \n<section class=\"inputs\">\n  <h2 id=\"inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e41z1ta8j4fn0xhay00whz365\"><i class=\"material-icons\">link</i>输入</h2>\n  \n  <div class=\"input\">\n    <code>name</code>&nbsp;bound to&nbsp;<code><a href=\"api/forms/NgModel#name\" class=\"code-anchor\">NgModel.name</a></code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code>disabled</code>&nbsp;bound to&nbsp;<code><a href=\"api/forms/NgModel#isDisabled\" class=\"code-anchor\">NgModel.isDisabled</a></code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>&nbsp;bound to&nbsp;<code><a href=\"api/forms/NgModel#model\" class=\"code-anchor\">NgModel.model</a></code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code>ngModelOptions</code>&nbsp;bound to&nbsp;<code><a href=\"api/forms/NgModel#options\" class=\"code-anchor\">NgModel.options</a></code>\n    \n  </div>\n  \n</section>\n\n  \n<section class=\"outputs\">\n  <h2 id=\"outputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbi241e8i5tgokdc67ew3rkcc\"><i class=\"material-icons\">link</i>输出</h2>\n  \n  <div class=\"output\">\n    <code>ngModelChange</code>&nbsp;bound to&nbsp;<code><a href=\"api/forms/NgModel#update\" class=\"code-anchor\">NgModel.update</a></code>\n    \n  </div>\n  \n</section>\n\n  \n<section class=\"export-as\">\n  <h2 id=\"exported-as\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cussd1rnvw3chdcwxo8016xy\"><i class=\"material-icons\">link</i>导出为</h2>\n  <div>\n    <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>\n  </div>\n</section>\n\n\n\n\n\n  \n  \n\n\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64p310lbzdqiret0qyhhannvq\"><i class=\"material-icons\">link</i>构造函数</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor(parent: <a href=\"api/forms/ControlContainer\" class=\"code-anchor\">ControlContainer</a>, validators: Array&lt;<a href=\"api/forms/Validator\" class=\"code-anchor\">Validator</a> | <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a>&gt;, asyncValidators: Array&lt;<a href=\"api/forms/AsyncValidator\" class=\"code-anchor\">AsyncValidator</a> | <a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a>&gt;, valueAccessors: <a href=\"api/forms/ControlValueAccessor\" class=\"code-anchor\">ControlValueAccessor</a>[])</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"control\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get control: <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"viewModel\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">viewModel: any</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"name\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">name: string</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"isDisabled\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">isDisabled: boolean</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"model\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">model: any</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"options\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">options: {\n    name?: string;\n    standalone?: boolean;\n    updateOn?: FormHooks;\n}</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5z6b8bll1841hlzylmut5s2px\">此 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 实例的选项对象。你可以配置以下属性：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66wxvdktmn048dqsmkwooybpd\"><strong>name</strong>：表单控件元素上设置 name 属性的替代方法。 有时，特别是对于自定义表单组件，name 属性可能用作 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 属性，用于其他目的。在这种情况下，你可以通过此选项配置 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的名称。</p>\n<code-example language=\"html\">\n&lt;form&gt;\n  &lt;my-person-control name=\"Nancy\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> [ngModelOptions]=\"{name: 'user'}\"&gt;\n  &lt;/my-person-control&gt;\n&lt;/form&gt;\n&lt;!-- form value: {user: ''} --&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qvfdeykqtkmgigy8gmjex4qu\"><strong>standalone</strong>：默认为 false。如果将其设置为 true，则 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 不会 将自身注册到其父表单，并将表现得好像不在表单中一样。如果你有表单元控件（即嵌套在 \n<code>&lt;form&gt;</code> 标签中的表单元素，用于控制表单的显示，但不包含表单数据），这会很方便。</p>\n<code-example language=\"html\">\n&lt;form&gt;\n  &lt;input name=\"login\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> placeholder=\"Login\"&gt;\n  &lt;input type=\"checkbox\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> [ngModelOptions]=\"{standalone: true}\"&gt; Show more options?\n&lt;/form&gt;\n&lt;!-- form value: {login: ''} --&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eojalewild1p4ffhi4xojron5\"><strong>updateOn</strong>：默认为 \n<code>'change'</code>。定义表单控件值和有效性将更新的事件。还接受 \n<code>'blur'</code> 和 \n<code>'submit'</code>。</p>\n<code-example language=\"html\">\n&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"firstName\" [ngModelOptions]=\"{updateOn: 'blur'}\"&gt;\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"update\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">update: new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>()</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnChanges\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngOnChanges(changes: <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a>)</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnDestroy\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">ngOnDestroy(): void</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"path\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get path: string[]</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"formDirective\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get formDirective: any</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"validator\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get validator: <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a> | null</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"asyncValidator\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get asyncValidator: <a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a> | null</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"viewToModelUpdate\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">viewToModelUpdate(newValue: any): void</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/core/ChangeDetectorRef\n - api/core/Directive\n - api/forms\n - api/forms/CheckboxControlValueAccessor\n - api/forms/CheckboxRequiredValidator\n - api/forms/DefaultValueAccessor\n - api/forms/EmailValidator\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/MaxLengthValidator\n - api/forms/MinLengthValidator\n - api/forms/NgControlStatus\n - api/forms/NgForm\n - api/forms/NgModelGroup\n - api/forms/PatternValidator\n - api/forms/RadioControlValueAccessor\n - api/forms/RequiredValidator\n - api/forms/SelectControlValueAccessor\n - api/forms/SelectMultipleControlValueAccessor\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/change-log\n - guide/dependency-injection-in-action\n - guide/docs-style-guide\n - guide/form-validation\n - guide/forms\n - guide/frequent-ngmodules\n - guide/glossary\n - guide/lifecycle-hooks\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/pipes\n - guide/reactive-forms\n - guide/router\n - guide/sharing-ngmodules\n - guide/structural-directives\n - guide/styleguide\n - guide/template-syntax\n - guide/testing\n - guide/upgrade\n - guide/user-input\n - tutorial/toh-pt1\n - tutorial/toh-pt2\n - tutorial/toh-pt3\n - tutorial/toh-pt5\n - tutorial/toh-pt6\n-->\n<!-- links from this doc:\n - api/common/JsonPipe\n - api/core/Component\n - api/core/Directive\n - api/core/EventEmitter\n - api/core/Input\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/SimpleChanges\n - api/forms\n - api/forms/AbstractControlDirective\n - api/forms/AbstractControlDirective#control\n - api/forms/AbstractControlDirective#dirty\n - api/forms/AbstractControlDirective#disabled\n - api/forms/AbstractControlDirective#enabled\n - api/forms/AbstractControlDirective#errors\n - api/forms/AbstractControlDirective#getError\n - api/forms/AbstractControlDirective#hasError\n - api/forms/AbstractControlDirective#invalid\n - api/forms/AbstractControlDirective#path\n - api/forms/AbstractControlDirective#pending\n - api/forms/AbstractControlDirective#pristine\n - api/forms/AbstractControlDirective#reset\n - api/forms/AbstractControlDirective#status\n - api/forms/AbstractControlDirective#statusChanges\n - api/forms/AbstractControlDirective#touched\n - api/forms/AbstractControlDirective#untouched\n - api/forms/AbstractControlDirective#valid\n - api/forms/AbstractControlDirective#value\n - api/forms/AbstractControlDirective#valueChanges\n - api/forms/AsyncValidator\n - api/forms/AsyncValidatorFn\n - api/forms/ControlContainer\n - api/forms/ControlValueAccessor\n - api/forms/Form\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormsModule\n - api/forms/NgControl\n - api/forms/NgControl#asyncValidator\n - api/forms/NgControl#name\n - api/forms/NgControl#validator\n - api/forms/NgControl#valueAccessor\n - api/forms/NgControl#viewToModelUpdate\n - api/forms/NgForm\n - api/forms/NgModel#asyncValidator\n - api/forms/NgModel#constructor\n - api/forms/NgModel#control\n - api/forms/NgModel#exported-as\n - api/forms/NgModel#formDirective\n - api/forms/NgModel#how-to-use\n - api/forms/NgModel#inputs\n - api/forms/NgModel#isDisabled\n - api/forms/NgModel#members\n - api/forms/NgModel#model\n - api/forms/NgModel#name\n - api/forms/NgModel#ngOnChanges\n - api/forms/NgModel#ngOnDestroy\n - api/forms/NgModel#ngmodel\n - api/forms/NgModel#options\n - api/forms/NgModel#outputs\n - api/forms/NgModel#overview\n - api/forms/NgModel#path\n - api/forms/NgModel#selectors\n - api/forms/NgModel#update\n - api/forms/NgModel#validator\n - api/forms/NgModel#viewModel\n - api/forms/NgModel#viewToModelUpdate\n - api/forms/RadioControlValueAccessor\n - api/forms/SelectControlValueAccessor\n - api/forms/Validator\n - api/forms/ValidatorFn\n - https://github.com/angular/angular/tree/5.2.11/packages/forms/src/directives/ng_model.ts#L47-L273\n - https://www.npmjs.com/package/@angular/forms\n-->"
}