{
  "id" : "api/forms/FormArray",
  "title" : "FormArray",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"formarray\">FormArray</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/forms\">@angular/forms</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a> } from <a href=\"api/forms\">'@angular/forms'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/forms/src/model.ts#L1221-L1528\">forms/src/model.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y3sp95j35kaaygsct68xc4mu\">跟踪一组 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a>、\n<a href=\"api/forms/FormGroup\"><code>FormGroup</code></a> 或 \n<a href=\"api/forms/FormArray\"><code>FormArray</code></a> 实例的值和有效性状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbzi5msd2ppxk8m4rvkw4jbf0\">一个 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 将每个子 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a> 的值聚合到一个数组中。它通过减少其子元素的状态来计算其状态。例如，如果 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 中的一个控件无效，则整个数组都将变为无效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev6ew2qeyxd362p16lq6pangw\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 是 Angular 中用于定义表单的三个基本构建块之一，另外两个是 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a> 和 \n<a href=\"api/forms/FormGroup\"><code>FormGroup</code></a>。</p>\n\n</div>\n\n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a> extends <a class=\"code-anchor\" href=\"api/forms/AbstractControl\">AbstractControl</a> {\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#constructor()\">constructor(controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null)</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#controls\">controls: AbstractControl[]</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#at\">at(index: number): AbstractControl</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#push\">push(control: AbstractControl): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#insert\">insert(index: number, control: AbstractControl): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#removeAt\">removeAt(index: number): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#setControl\">setControl(index: number, control: AbstractControl): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#length\">get length: number</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#setValue\">setValue(value: any[], options: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#patchValue\">patchValue(value: any[], options: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#reset\">reset(value: any = [], options: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#getRawValue\">getRawValue(): any[]</a>\n  // inherited from <a class=\"code-anchor\" href=\"api/forms/AbstractControl\">forms/AbstractControl</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#value\">get value: any</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#validator\">validator: ValidatorFn | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#asyncValidator\">asyncValidator: AsyncValidatorFn | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#parent\">get parent: FormGroup | FormArray</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#status\">get status: string</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#valid\">get valid: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#invalid\">get invalid: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#pending\">get pending: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#disabled\">get disabled: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#enabled\">get enabled: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#errors\">get errors: ValidationErrors | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#pristine\">get pristine: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#dirty\">get dirty: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#touched\">get touched: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#untouched\">get untouched: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#valueChanges\">get valueChanges: Observable&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#statusChanges\">get statusChanges: Observable&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#updateOn\">get updateOn: FormHooks</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#setValidators\">setValidators(newValidator: ValidatorFn | ValidatorFn[] | null): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#setAsyncValidators\">setAsyncValidators(newValidator: AsyncValidatorFn | AsyncValidatorFn[] | null): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#clearValidators\">clearValidators(): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#clearAsyncValidators\">clearAsyncValidators(): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#markAsTouched\">markAsTouched(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#markAsUntouched\">markAsUntouched(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#markAsDirty\">markAsDirty(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#markAsPristine\">markAsPristine(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#markAsPending\">markAsPending(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#disable\">disable(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#enable\">enable(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#setParent\">setParent(parent: FormGroup | FormArray): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#setValue\">setValue(value: any, options?: Object): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#patchValue\">patchValue(value: any, options?: Object): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#reset\">reset(value?: any, options?: Object): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#updateValueAndValidity\">updateValueAndValidity(opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#setErrors\">setErrors(errors: ValidationErrors | null, opts: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#get\">get(path: Array&lt;string | number&gt; | string): AbstractControl | null</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#getError\">getError(errorCode: string, path?: string[]): any</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#hasError\">hasError(errorCode: string, path?: string[]): boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/AbstractControl#root\">get root: AbstractControl</a>\n}\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cflu95twzi71qd095ghj9h0y7\"><i class=\"material-icons\">link</i>使用方法</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eb4uk1iemgsv0wwf68edvmug6\">实例化 \n<a href=\"api/forms/FormArray\"><code>FormArray</code></a> 时，将子控件数组作为第一个参数传入。</p>\n<h3 id=\"example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst arr = new <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>([\n  new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Nancy', Validators.minLength(2)),\n  new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Drew'),\n]);\n\nconsole.log(arr.value);   // ['Nancy', 'Drew']\nconsole.log(arr.status);  // 'VALID'\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"auzlg987abyv8912w04kfmzw2\">你也可以包含数组级别的验证器和异步验证器。当你想执行验证，而该验证需要考虑多个子控件的值时，这些验证器会非常有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9nrxvz1xrmj88ztyxbbqvlly\">这两种类型的验证器可以分别作为第二个和第三个参数传入，也可以作为选项对象的一部分一起传入。</p>\n<code-example>\nconst arr = new <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>([\n  new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Nancy'),\n  new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Drew')\n], {validators: myValidator, asyncValidators: myAsyncValidator});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec1blk77hky4qzelbm8yaod85\">选项对象还可以用来为每个子控件的 \n<code>updateOn</code> 属性设置默认值。如果你在数组级别将 \n<code>updateOn</code> 设置为 \n<code>'blur'</code>，则所有子控件都将默认为 'blur'，除非子控件明确指定了不同的 \n<code>updateOn</code> 值。</p>\n<code-example language=\"ts\">\nconst c = new <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>([\n   new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()\n], {updateOn: 'blur'});\n</code-example>\n<h3 id=\"adding-or-removing-controls\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wdpbwa3gbiod00ikf3ky7w93\"><i class=\"material-icons\">link</i>添加或删除控件</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r0364y0b6f83z56qbfzzm9oh\">要更改数组中的控件，请使用 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 本身的 \n<code>push</code>、\n<code>insert</code> 或 \n<code>removeAt</code> 方法。这些方法确保控件在表单层次结构中得到正确跟踪。不要直接修改用于实例化 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 的 \n<code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code> 数组，因为这会导致奇怪且意外的行为，例如更改检测失效。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewchuuaugycx2hdjbsj13rs92\"><strong>npm 包</strong>：\n<code>@angular/forms</code></li>\n</ul>\n\n</section>\n\n\n  \n\n\n\n  \n  \n\n\n\n\n\n\n<section class=\"constructors\">\n  <h2 id=\"constructor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64p310lbzdqiret0qyhhannvq\"><i class=\"material-icons\">link</i>构造函数</h2>\n  \n    <div class=\"constructor\">\n  <a id=\"constructor()\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor(controls: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>[], validatorOrOpts?: <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a> | <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a>[] | AbstractControlOptions | null, asyncValidator?: <a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a> | <a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a>[] | null)</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"controls\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">controls: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>[]</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"at\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">at(index: number): <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48hxdpgtsaanc54ojytm0cny6\">获取数组中给定 \n<code>index</code> 位置的 \n<a href=\"api/forms/AbstractControl\"><code>AbstractControl</code></a>。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"push\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">push(control: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etoqqckmncy808f38o3pbu3a6\">在数组末尾插入一个新的 \n<a href=\"api/forms/AbstractControl\"><code>AbstractControl</code></a>。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"insert\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">insert(index: number, control: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gjd9eccuyt5pv2tzgm688pyz\">在数组中给定 \n<code>index</code> 位置插入一个新的 \n<a href=\"api/forms/AbstractControl\"><code>AbstractControl</code></a>。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"removeAt\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">removeAt(index: number): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3uvbd80lt73murzynu0u9vg4w\">删除数组中给定 <code>index</code> 处的控件。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"setControl\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">setControl(index: number, control: <a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a>): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5suyog202qmnla2ngpx4m1ru5\">替换现有的控件。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"length\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">get length: number</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9ma884urp9945f4d6vu7nnciz\">控件数组的长度。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"setValue\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">setValue(value: any[], options: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n} = {}): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xget26l43f2u7c2qfitzctlx\">设置 \n<a href=\"api/forms/FormArray\"><code>FormArray</code></a> 的值。它接受一个与控件结构匹配的数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18406bbuf11nhwafnmuingo5c\">此方法执行严格检查，因此如果你尝试设置不存在的控件的值，或者排除了控件的值，它将抛出错误。</p>\n<h3 id=\"example-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst arr = new <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>([\n   new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(),\n   new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()\n]);\nconsole.log(arr.value);   // [null, null]\n\narr.setValue(['Nancy', 'Drew']);\nconsole.log(arr.value);   // ['Nancy', 'Drew']\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"patchValue\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">patchValue(value: any[], options: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n} = {}): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i2tvs9rvwlm4eah9sz1nav6v\">修补 \n<a href=\"api/forms/FormArray\"><code>FormArray</code></a> 的值。它接受一个与控件结构匹配的数组，并将尽力将值匹配到组中的正确控件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"52ewlw6kpvs8bxl2i7hdlqjlj\">它接受数组的超集和子集，而不会抛出错误。</p>\n<h3 id=\"example-2\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example>\nconst arr = new <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>([\n   new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(),\n   new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()\n]);\nconsole.log(arr.value);   // [null, null]\n\narr.patchValue(['Nancy']);\nconsole.log(arr.value);   // ['Nancy', null]\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"reset\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">reset(value: any = [], options: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n} = {}): void</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6id5wjcdpfld7vq7dryuzihzj\">重置 \n<a href=\"api/forms/FormArray\"><code>FormArray</code></a>。默认情况下，这意味着：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b78iuzy04pvrbrmxtvjxthmpu\">数组及其所有后代被标记为 \n<code>pristine</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w2h4d8b4w21f2uazawnbh7ld\">数组及其所有后代被标记为 \n<code>untouched</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dhh902qaf7zb6t6r54dvdbf0\">所有后代的值将为 null 或 null 映射</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e82ir4u36fiaqsugsv8imyx8z\">你也可以通过传入一个与控件结构匹配的状态数组来重置到特定表单状态。该状态可以是一个独立的值，也可以是一个包含值和禁用状态的表单状态对象。</p>\n<h3 id=\"example-3\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<code-example language=\"ts\">\nthis.arr.reset(['name', 'last name']);\n\nconsole.log(this.arr.value);  // ['name', 'last name']\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7u2rnik54mt4u584zm2uui0fv\">或者 -</li>\n</ul>\n<code-example>\nthis.arr.reset([\n  {value: 'name', disabled: true},\n  'last'\n]);\n\nconsole.log(this.arr.value);  // ['name', 'last name']\nconsole.log(this.arr.get(0).status);  // 'DISABLED'\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"getRawValue\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">getRawValue(): any[]</code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"eyey38bptuwcuu2tp4pl27hy1\">数组的聚合值，包括任何禁用的控件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c67tv6n8y7qla9ttquavlyi7e\">如果你想包含所有值，无论其禁用状态如何，请使用此方法。否则，\n<code>value</code> 属性是获取数组值的最佳方法。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/forms\n - api/forms/AbstractControl\n - api/forms/AbstractControlDirective\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormGroupDirective\n - guide/reactive-forms\n-->\n<!-- links from this doc:\n - api/forms\n - api/forms/AbstractControl\n - api/forms/AbstractControl#asyncValidator\n - api/forms/AbstractControl#clearAsyncValidators\n - api/forms/AbstractControl#clearValidators\n - api/forms/AbstractControl#dirty\n - api/forms/AbstractControl#disable\n - api/forms/AbstractControl#disabled\n - api/forms/AbstractControl#enable\n - api/forms/AbstractControl#enabled\n - api/forms/AbstractControl#errors\n - api/forms/AbstractControl#get\n - api/forms/AbstractControl#getError\n - api/forms/AbstractControl#hasError\n - api/forms/AbstractControl#invalid\n - api/forms/AbstractControl#markAsDirty\n - api/forms/AbstractControl#markAsPending\n - api/forms/AbstractControl#markAsPristine\n - api/forms/AbstractControl#markAsTouched\n - api/forms/AbstractControl#markAsUntouched\n - api/forms/AbstractControl#parent\n - api/forms/AbstractControl#patchValue\n - api/forms/AbstractControl#pending\n - api/forms/AbstractControl#pristine\n - api/forms/AbstractControl#reset\n - api/forms/AbstractControl#root\n - api/forms/AbstractControl#setAsyncValidators\n - api/forms/AbstractControl#setErrors\n - api/forms/AbstractControl#setParent\n - api/forms/AbstractControl#setValidators\n - api/forms/AbstractControl#setValue\n - api/forms/AbstractControl#status\n - api/forms/AbstractControl#statusChanges\n - api/forms/AbstractControl#touched\n - api/forms/AbstractControl#untouched\n - api/forms/AbstractControl#updateOn\n - api/forms/AbstractControl#updateValueAndValidity\n - api/forms/AbstractControl#valid\n - api/forms/AbstractControl#validator\n - api/forms/AbstractControl#value\n - api/forms/AbstractControl#valueChanges\n - api/forms/AsyncValidatorFn\n - api/forms/FormArray#adding-or-removing-controls\n - api/forms/FormArray#at\n - api/forms/FormArray#constructor\n - api/forms/FormArray#constructor()\n - api/forms/FormArray#controls\n - api/forms/FormArray#example\n - api/forms/FormArray#example-1\n - api/forms/FormArray#example-2\n - api/forms/FormArray#example-3\n - api/forms/FormArray#formarray\n - api/forms/FormArray#getRawValue\n - api/forms/FormArray#how-to-use\n - api/forms/FormArray#insert\n - api/forms/FormArray#length\n - api/forms/FormArray#members\n - api/forms/FormArray#overview\n - api/forms/FormArray#patchValue\n - api/forms/FormArray#push\n - api/forms/FormArray#removeAt\n - api/forms/FormArray#reset\n - api/forms/FormArray#setControl\n - api/forms/FormArray#setValue\n - api/forms/FormControl\n - api/forms/FormGroup\n - api/forms/ValidatorFn\n - https://github.com/angular/angular/tree/5.2.11/packages/forms/src/model.ts#L1221-L1528\n - https://www.npmjs.com/package/@angular/forms\n-->"
}