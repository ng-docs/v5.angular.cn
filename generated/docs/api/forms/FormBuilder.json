{
  "id" : "api/forms/FormBuilder",
  "title" : "FormBuilder",
  "contents" : "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"formbuilder\">FormBuilder</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wfc14obst93bim1zva6hqjl0\">npm 包</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/forms\">@angular/forms</a></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块</th>\n  <td><code>import { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from <a href=\"api/forms\">'@angular/forms'</a>;</code></td>\n</tr>\n<tr>\n  <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ee4tba1a8v4m1low7rnv25o9l\">源码</th>\n  <td><a href=\"https://github.com/angular/angular/tree/5.2.11/packages/forms/src/form_builder.ts#L13-L98\">forms/src/form_builder.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hdrf0hn7pmiuzazh91xso2or\">从用户指定的配置创建 \n<a href=\"api/forms/AbstractControl\"><code>AbstractControl</code></a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9i1r0k1n2r7aoayf9t5q165h3\">它本质上是语法糖，它缩短了 \n<code>new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>()</code>、\n<code>new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()</code> 和 \n<code>new <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>()</code> 的样板代码，这些样板代码可能会在更大的表单中累积。</p>\n\n</div>\n\n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> {\n  <a class=\"code-anchor\" href=\"api/forms/FormBuilder#group\">group(controlsConfig: {...}, extra: {...}): FormGroup</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormBuilder#control\">control(formState: any, validator?: ValidatorFn | ValidatorFn[] | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null): FormControl</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormBuilder#array\">array(controlsConfig: any[], validator?: ValidatorFn | null, asyncValidator?: AsyncValidatorFn | null): FormArray</a>\n}\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cflu95twzi71qd095ghj9h0y7\"><i class=\"material-icons\">link</i>使用方法</h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cclvcy02d2g0k57q5v71r7j7c\">要使用它，请将 \n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 注入到你的组件类中。然后你可以直接调用它的方法。</p>\n<code-example>\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>} from '@angular/core';\nimport {<a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a>} from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'example-app',\n  template: `\n    &lt;form [formGroup]=\"form\"&gt;\n      &lt;div <a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>=\"name\"&gt;\n        &lt;input <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"first\" placeholder=\"First\"&gt;\n        &lt;input <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"last\" placeholder=\"Last\"&gt;\n      &lt;/div&gt;\n      &lt;input <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>\" placeholder=\"Email\"&gt;\n      &lt;button&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n    \n    &lt;p&gt;Value: {{ form.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a> }}&lt;/p&gt;\n    &lt;p&gt;Validation status: {{ form.status }}&lt;/p&gt;\n  `\n})\nexport class FormBuilderComp {\n  form: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n\n  constructor(@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {\n    this.form = fb.group({\n      name: fb.group({\n        first: ['Nancy', Validators.minLength(2)],\n        last: 'Drew',\n      }),\n      <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: '',\n    });\n  }\n}\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewchuuaugycx2hdjbsj13rs92\"><strong>npm 包</strong>：\n<code>@angular/forms</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aoqjt0dkucvn32a56shjck4a9\"><strong>NgModule</strong>：\n<a href=\"api/forms/ReactiveFormsModule\"><code>ReactiveFormsModule</code></a></p>\n</li>\n</ul>\n\n</section>\n\n\n  \n\n\n\n  \n  \n\n\n\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e62kgm2ztk7rgk6auybfiv91o\"><i class=\"material-icons\">link</i>成员</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"group\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/animations/group\" class=\"code-anchor\">group</a>(controlsConfig: {\n    [key: string]: any;\n}, extra: {\n    [key: string]: any;\n} | null = null): <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a5kwww7xwaln3ls1d7jl8g9u\">使用给定的配置映射表构造一个新的 \n<a href=\"api/forms/FormGroup\"><code>FormGroup</code></a>。 \n<code>extra</code> 参数映射表的有效键是 \n<code>validator</code> 和 \n<code>asyncValidator</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54koxcgpaclcdvrvzipp83jlm\">有关更多详细信息，请参阅 \n<a href=\"api/forms/FormGroup\"><code>FormGroup</code></a> 构造函数。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"control\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">control(formState: any, validator?: <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a> | <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a>[] | null, asyncValidator?: <a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a> | <a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a>[] | null): <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6q1xh5ddqj2q87307b4vh39n\">使用给定的 \n<code>formState</code>、\n<code>validator</code> 和 \n<code>asyncValidator</code> 构造一个新的 \n<a href=\"api/forms/FormControl\"><code>FormControl</code></a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cwnpv0nnj0mqef7zvvulufaa\"><code>formState</code> 可以是表单控件的独立值，也可以是包含值和禁用状态的两个属性的对象。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"array\"></a>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">array(controlsConfig: any[], validator?: <a href=\"api/forms/ValidatorFn\" class=\"code-anchor\">ValidatorFn</a> | null, asyncValidator?: <a href=\"api/forms/AsyncValidatorFn\" class=\"code-anchor\">AsyncValidatorFn</a> | null): <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code-example>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gw48j1w1i2mbxwbxf3k0tgt0\">使用给定的 \n<code>controlsConfig</code> 配置数组（以及可选的 \n<code>validator</code> 和 \n<code>asyncValidator</code>）构造一个 \n<a href=\"api/forms/FormArray\"><code>FormArray</code></a>。</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n</section>\n\n\n\n<section class=\"annotations\">\n  <h2 id=\"annotations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ptfpgifdyh5hp4kme5clquv2\"><i class=\"material-icons\">link</i>注解</h2>\n    <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code-example>\n    \n  \n</section>\n\n\n\n\n\n\n</section></article>\n<!-- links to this doc:\n - api/forms\n - api/forms/ReactiveFormsModule\n - guide/glossary\n - guide/reactive-forms\n-->\n<!-- links from this doc:\n - api/animations/group\n - api/common/JsonPipe\n - api/core/Component\n - api/core/Inject\n - api/core/Injectable\n - api/forms\n - api/forms/AbstractControl\n - api/forms/AsyncValidatorFn\n - api/forms/EmailValidator\n - api/forms/FormArray\n - api/forms/FormBuilder#annotations\n - api/forms/FormBuilder#array\n - api/forms/FormBuilder#control\n - api/forms/FormBuilder#formbuilder\n - api/forms/FormBuilder#group\n - api/forms/FormBuilder#how-to-use\n - api/forms/FormBuilder#members\n - api/forms/FormBuilder#overview\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormGroupName\n - api/forms/ReactiveFormsModule\n - api/forms/ValidatorFn\n - api/forms/Validators\n - https://github.com/angular/angular/tree/5.2.11/packages/forms/src/form_builder.ts#L13-L98\n - https://www.npmjs.com/package/@angular/forms\n-->"
}