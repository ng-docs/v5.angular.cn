{
  "id" : "guide/providers",
  "title" : "提供者",
  "contents" : "<div class=\"content\">\n<h1 id=\"providers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dycvc6pm27ridqfrosy8bqn88\"><i class=\"material-icons\">link</i>提供者</h1>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvushkv2hv9s5ejwrr6i4rhvb\"><i class=\"material-icons\">link</i>先决条件：</h4>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aizpbk74mi09a722ys7yun79v\">对 \n<a href=\"guide/bootstrapping\">引导</a> 的基本了解。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u7xg9lx0kfnc6aevp54l4ip2\">熟悉 \n<a href=\"guide/frequent-ngmodules\">常用模块</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evwtefhayk3am2qa2ix57315b\">有关使用此页面中描述的提供者的最终示例应用程序，请参阅 \n<live-example></live-example>。</p>\n<hr>\n<h2 id=\"create-a-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"987pq3ntjn9l0o8fmne4uejg2\"><i class=\"material-icons\">link</i>创建服务</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bt519lzxzw1uol0inhz916ep5\">你可以通过在 NgModule 中使用 \n<code>providers</code> 数组来为你的应用程序提供服务。 考虑 CLI 生成的默认应用程序。为了向其中添加用户服务， 你可以在终端窗口中输入以下命令来生成一个：</p>\n<code-example language=\"sh\">\nng generate service User\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tc5fqq4l6e9jyvw6zmwr3fjc\">这将创建一个名为 \n<code>UserService</code> 的服务。现在你需要在你的 应用程序的注入器中使该服务可用。通过在文件顶部使用其他导入语句导入它，并将它添加到 \n<code>providers</code> 数组中，来更新 \n<code>app.module.ts</code>：</p>\n<code-example path=\"providers/src/app/app.module.ts\" title=\"src/app/app.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { UserService } from './user.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  providers:    [ UserService ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<h2 id=\"provider-scope\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"1v52y51wo5zeaxywqzof5ft6k\"><i class=\"material-icons\">link</i>提供者的作用域</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o1urzi4nol84e5l4kjsmf5x1\">当你将服务提供者添加到根模块的 \n<code>providers</code> 数组中时，它在整个应用程序中都可用。此外，当你导入具有提供者的模块时，这些提供者也对应用程序中的所有类可用，只要它们具有查找令牌。例如，如果你将 \n<code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 导入到你的 \n<code>AppModule</code> 中，那么它的提供者将对整个应用程序可用，你可以在应用程序中的任何位置发出 HTTP 请求。</p>\n<h2 id=\"limiting-provider-scope-by-lazy-loading-modules\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"zrrzcu38os8yr0jqt35u4jhc\"><i class=\"material-icons\">link</i>使用惰性加载模块限制提供者的作用域</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kwqjn5k3ja2u232e4jxownti\">在基本的 CLI 生成的应用程序中，模块是急性加载的，这意味着它们在应用程序启动时全部加载。Angular 使用注入器系统来使模块之间的事物可用。在急性加载的应用程序中，根应用程序注入器使所有模块中的所有提供者在整个应用程序中都可用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xrdtdp3y9n1kgu6gjqt6y088\">当你使用惰性加载时，这种行为必然会发生变化。惰性加载是指你只在需要时加载模块；例如，在路由时。它们不像急性加载的模块那样立即加载。这意味着它们提供者数组中列出的任何服务都不可用，因为根注入器不知道这些模块。</p>\n<!-- KW--Make diagram here -->\n<!-- KW--per Misko: not clear if the lazy modules are siblings or grand-children. They are both depending on router structure. -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ftfxa4t28bglqr4pof6tqkin\">当 Angular 路由器惰性加载模块时，它会创建一个新的注入器。此注入器是根应用程序注入器的子注入器。想象一下注入器树；有一个根注入器，然后每个惰性加载的模块都有一个子注入器。路由器将根注入器中的所有提供者添加到子注入器中。当路由器在惰性加载的上下文中创建组件时，Angular 优先使用从这些提供者创建的服务实例，而不是应用程序根注入器的服务实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpd0j3sdt7i1cizyugqj7fslq\">在惰性加载的模块上下文中创建的任何组件（例如，通过路由器导航创建的组件）都会获得服务的本地实例，而不是应用程序根注入器中的实例。外部模块中的组件将继续接收为应用程序根创建的实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8meziz7rl0cqkberojeony2l7\">虽然你可以通过惰性加载模块来提供服务，但并非所有服务都可以惰性加载。例如，某些模块只在根模块中工作，例如路由器。路由器与浏览器中的全局位置对象一起工作。</p>\n<h2 id=\"limiting-provider-scope-with-components\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9i9pygcxdrpwxn9o8ym477mv3\"><i class=\"material-icons\">link</i>使用组件限定服务提供者的作用域</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f0fji2dd7sjlt6vt2thiz15a\">限制提供者范围的另一种方法是将你想要限制的服务添加到组件的 \n<code>providers</code> 数组中。组件提供者和 NgModule 提供者是相互独立的。当你想急性加载一个需要服务的模块时，这种方法很有用。在组件中提供服务会将服务限制在该组件中（同一模块中的其他组件无法访问它）。</p>\n<code-example path=\"providers/src/app/app.component.ts\" region=\"component-providers\" title=\"src/app/app.component.ts\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n/* . . . */\n  providers: [UserService]\n})\n\n</code-example>\n<h2 id=\"providing-services-in-modules-vs-components\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"at1tsh98fkinvtxow6vmegwwz\"><i class=\"material-icons\">link</i>在模块中提供服务还是在组件中？</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63kqsl0dyodx6aat81njrkcq5\">通常，在根模块中提供整个应用程序需要的服务，并在惰性加载的模块中提供服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rigolvj6hawc0z6nflap1b1g\">路由器在根级别工作，因此如果你将提供者放在组件中，即使是 \n<code>AppComponent</code>，依赖于路由器的惰性加载的模块也无法看到它们。</p>\n<!-- KW--Make a diagram here -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gqnstix40jnd08dbht53xfcb\">当你必须将服务实例限制在组件及其组件树（即其子组件）中时，请使用组件注册提供者。例如，一个用户编辑组件 \n<code>UserEditorComponent</code>，它需要一个缓存 \n<code>UserService</code> 的私有副本，应该使用 \n<code>UserEditorComponent</code> 注册 \n<code>UserService</code>。然后，每个新的 \n<code>UserEditorComponent</code> 实例都会获得自己的缓存服务实例。</p>\n<hr>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\"><i class=\"material-icons\">link</i>关于 NgModules 的更多信息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ho2p43rev7e4non44xvp10gw\">你可能还会对以下内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f6c3627d5jay58iavhpeib6x\"><a href=\"guide/singleton-services\">单例服务</a>，它详细阐述了此页面上介绍的概念。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f30wia94vx6kxdwffucf239vf\"><a href=\"guide/lazy-loading-ngmodules\">惰性加载模块</a>.</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2en5q93gvb8jstpcmn3xn0gdc\"><a href=\"guide/ngmodule-faq\">NgModule 常见问题解答</a>.</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/entry-components\n - guide/feature-modules\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-api\n - guide/ngmodule-vs-jsmodule\n - guide/ngmodules\n - guide/sharing-ngmodules\n - guide/singleton-services\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/http/HttpClientModule\n - api/core/Component\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/lazy-loading-ngmodules\n - guide/ngmodule-faq\n - guide/providers#create-a-service\n - guide/providers#limiting-provider-scope-by-lazy-loading-modules\n - guide/providers#limiting-provider-scope-with-components\n - guide/providers#more-on-ngmodules\n - guide/providers#prerequisites\n - guide/providers#provider-scope\n - guide/providers#providers\n - guide/providers#providing-services-in-modules-vs-components\n - guide/singleton-services\n-->"
}