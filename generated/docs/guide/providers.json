{
  "id": "guide/providers",
  "title": "Providers",
  "contents": "\n<div class=\"content\">\n<h1 id=\"providers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#providers\"><i class=\"material-icons\">link</i></a>Providers</h1>\n<h4 id=\"prerequisites\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#prerequisites\"><i class=\"material-icons\">link</i></a>Prerequisites:</h4>\n<ul>\n<li>A basic understanding of <a href=\"guide/bootstrapping\">Bootstrapping</a>.</li>\n<li>Familiarity with <a href=\"guide/frequent-ngmodules\">Frequently Used Modules</a>.</li>\n</ul>\n<p>For the final sample app using the provider that this page describes,\nsee the <live-example></live-example>.</p>\n<hr>\n<h2 id=\"create-a-service\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#create-a-service\"><i class=\"material-icons\">link</i></a>Create a service</h2>\n<p>You can provide services to your app by using the <code>providers</code> array in an NgModule.\nConsider the default app generated by the CLI. In order to add a user service to it,\nyou can generate one by entering the following command in the terminal window:</p>\n<code-example language=\"sh\">\nng generate service User\n</code-example>\n<p>This creates a service called <code>UserService</code>. You now need to make the service available in your\napp's injector. Update <code>app.module.ts</code> by importing it with your other import statements at the top\nof the file and adding it to the <code>providers</code> array:</p>\n<code-example path=\"providers/src/app/app.module.ts\" title=\"src/app/app.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { UserService } from './user.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  providers:    [ UserService ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<h2 id=\"provider-scope\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#provider-scope\"><i class=\"material-icons\">link</i></a>Provider scope</h2>\n<p>When you add a service provider to the <code>providers</code> array of the root module, it’s available throughout the app. Additionally, when you import a module that has providers, those providers are also available to all the classes in the app as long they have the lookup token. For example, if you import the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> into your <code>AppModule</code>, its providers are then available to the entire app and you can make HTTP requests from anywhere in your app.</p>\n<h2 id=\"limiting-provider-scope-by-lazy-loading-modules\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#limiting-provider-scope-by-lazy-loading-modules\"><i class=\"material-icons\">link</i></a>Limiting provider scope by lazy loading modules</h2>\n<p>In the basic CLI generated app, modules are eagerly loaded which means that they are all loaded when the app launches. Angular uses an injector system to make things available between modules. In an eagerly loaded app, the root application injector makes all of the providers in all of the modules available throughout the app.</p>\n<p>This behavior necessarily changes when you use lazy loading. Lazy loading is when you load modules only when you need them; for example, when routing. They aren’t loaded right away like with eagerly loaded modules. This means that any services listed in their provider arrays aren’t available because the root injector doesn’t know about these modules.</p>\n<!-- KW--Make diagram here -->\n<!-- KW--per Misko: not clear if the lazy modules are siblings or grand-children. They are both depending on router structure. -->\n<p>When the Angular router lazy-loads a module, it creates a new injector. This injector is a child of the root application injector. Imagine a tree of injectors; there is a single root injector and then a child injector for each lazy loaded module. The router adds all of the providers from the root injector to the child injector. When the router creates a component within the lazy-loaded context, Angular prefers service instances created from these providers to the service instances of the application root injector.</p>\n<p>Any component created within a lazy loaded module’s context, such as by router navigation, gets the local instance of the service, not the instance in the root application injector. Components in external modules continue to receive the instance created for the application root.</p>\n<p>Though you can provide services by lazy loading modules, not all services can be lazy loaded. For instance, some modules only work in the root module, such as the Router. The Router works with the global location object in the browser.</p>\n<h2 id=\"limiting-provider-scope-with-components\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#limiting-provider-scope-with-components\"><i class=\"material-icons\">link</i></a>Limiting provider scope with components</h2>\n<p>Another way to limit provider scope is by adding the service you want to limit to the component’s\n<code>providers</code> array. Component providers and NgModule providers are independent of each other. This\nmethod is helpful for when you want to eagerly load a module that needs a service all to itself.\nProviding a service in the component limits the service only to that component (other components in\nthe same module can’t access it.)</p>\n<code-example path=\"providers/src/app/app.component.ts\" region=\"component-providers\" title=\"src/app/app.component.ts\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n/* . . . */\n  providers: [UserService]\n})\n\n</code-example>\n<h2 id=\"providing-services-in-modules-vs-components\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#providing-services-in-modules-vs-components\"><i class=\"material-icons\">link</i></a>Providing services in modules vs. components</h2>\n<p>Generally, provide services the whole app needs in the root module and scope services by providing them in lazy loaded modules.</p>\n<p>The router works at the root level so if you put providers in a component, even <code>AppComponent</code>, lazy loaded modules, which rely on the router, can’t see them.</p>\n<!-- KW--Make a diagram here -->\n<p>Register a provider with a component when you must limit a service instance to a component and its component tree, that is, its child components. For example, a user editing component, <code>UserEditorComponent</code>, that needs a private copy of a caching <code>UserService</code> should register the <code>UserService</code> with the <code>UserEditorComponent</code>. Then each new instance of the <code>UserEditorComponent</code> gets its own cached service instance.</p>\n<hr>\n<h2 id=\"more-on-ngmodules\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#more-on-ngmodules\"><i class=\"material-icons\">link</i></a>More on NgModules</h2>\n<p>You may also be interested in:</p>\n<ul>\n<li><a href=\"guide/singleton-services\">Singleton Services</a>, which elaborates on the concepts covered on this page.</li>\n<li><a href=\"guide/lazy-loading-ngmodules\">Lazy Loading Modules</a>.</li>\n<li><a href=\"guide/ngmodule-faq\">NgModule FAQ</a>.</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/entry-components\n - guide/feature-modules\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-api\n - guide/ngmodule-vs-jsmodule\n - guide/ngmodules\n - guide/sharing-ngmodules\n - guide/singleton-services\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/http/HttpClientModule\n - api/core/Component\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/lazy-loading-ngmodules\n - guide/ngmodule-faq\n - guide/providers#create-a-service\n - guide/providers#limiting-provider-scope-by-lazy-loading-modules\n - guide/providers#limiting-provider-scope-with-components\n - guide/providers#more-on-ngmodules\n - guide/providers#prerequisites\n - guide/providers#provider-scope\n - guide/providers#providers\n - guide/providers#providing-services-in-modules-vs-components\n - guide/singleton-services\n-->"
}