{
  "id" : "guide/structural-directives",
  "title" : "结构型指令",
  "contents" : "<div class=\"content\">\n<h1 id=\"structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4tqmaa9erzhna8poqylp51a6p\"><i class=\"material-icons\">link</i>结构型指令</h1>\n<style>\n  h4 {font-size: 17px !important; text-transform: none !important;}\n  .syntax { font-family: Consolas, 'Lucida Sans', Courier, sans-serif; color: black; font-size: 85%; }\n\n</style>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c7w62gf2wyt98qvwkt5glk8p\">本指南介绍了 Angular 如何使用\n<strong>结构型指令</strong>操作 DOM，以及如何编写自己的结构型指令来执行相同操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4w10r0225jg8vpmpvo9l7v4wj\">尝试 \n<live-example></live-example>。</p>\n<a id=\"definition\"></a>\n<h2 id=\"what-are-structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75mq2u4ix2vqebqcr6ifwu7b1\"><i class=\"material-icons\">link</i>什么是结构型指令？</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9e24edsrflpr1zixfb0txopvn\">结构型指令负责 HTML 布局。 它们塑造或重塑 DOM 的\n<em>结构</em>，通常是通过添加、删除或操作元素来实现的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gidqo74rccc6jh0ozs8gfpck\">与其他指令一样，你将结构型指令应用于\n<em>宿主元素</em>。 然后，指令会对该宿主元素及其后代执行它应该执行的操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69d3ato8xisygr1maclvl6ie4\">结构型指令很容易识别。 一个星号 (*) 位于指令属性名称之前，例如本例所示。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (ngif)\" region=\"ngif\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2di27290raw4si2pcfilexo8h\">没有方括号。没有圆括号。只有 \n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 设置为字符串。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yni4n4j59av8p0a65qu2c04r\">你将在本指南中了解到，\n<a href=\"guide/structural-directives#asterisk\">星号 (*) 是一个方便的表示法</a>， 而字符串是一个\n<a href=\"guide/structural-directives#microsyntax\"><em>微语法</em></a>，而不是通常的 \n<a href=\"guide/template-syntax#template-expressions\">模板表达式</a>。 Angular 将此表示法转换为一个标记化的 \n<code>&lt;ng-template&gt;</code>，它围绕着宿主元素及其后代。 每个结构型指令对该模板执行不同的操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"113bvpf3odvriyyemqvbz37om\">三个常见的内置结构型指令——\n<a href=\"guide/template-syntax#ngIf\">NgIf</a>、 \n<a href=\"guide/template-syntax#ngFor\">NgFor</a> 和 \n<a href=\"guide/template-syntax#ngSwitch\">NgSwitch...</a>——在 \n<a href=\"guide/template-syntax\"><em>模板语法</em></a> 指南中进行了描述，并在整个 Angular 文档中的示例中可以看到。 以下是在模板中使用它们的示例：</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (built-in)\" region=\"built-in\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;{{hero.name}}&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"hero?.emotion\"&gt;\n  &lt;app-happy-hero    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'happy'\"    [hero]=\"hero\"&gt;&lt;/app-happy-hero&gt;\n  &lt;app-sad-hero      *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'sad'\"      [hero]=\"hero\"&gt;&lt;/app-sad-hero&gt;\n  &lt;app-confused-hero *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'app-confused'\" [hero]=\"hero\"&gt;&lt;/app-confused-hero&gt;\n  &lt;app-unknown-hero  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [hero]=\"hero\"&gt;&lt;/app-unknown-hero&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s759djpbuz7klaxoy572nyei\">本指南不会重复如何\n<em>使用</em>它们。但它确实解释了它们的\n<em>工作原理</em>，以及如何\n<a href=\"guide/structural-directives#unless\">编写自己的</a> 结构型指令。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a5buwqdjma67nyom3avyhudl\">指令拼写</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8a11x9j8z0w68gion23uwpldm\">在本指南中，你将看到指令以\n<em>UpperCamelCase</em> 和 \n<em>lowerCamelCase</em> 两种方式拼写。 你已经看到了 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>。 这是有原因的。\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 指的是指令\n<em>类</em>； \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指的是指令的\n<em>属性名称</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6a78oe4ohfgibj4tnd5q9alfy\">指令\n<em>类</em>以\n<em>UpperCamelCase</em> 拼写（\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>）。 指令的\n<em>属性名称</em>以\n<em>lowerCamelCase</em> 拼写（\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>）。 本指南在谈论指令的属性及其功能时，指的是指令\n<em>类</em>。 本指南在描述如何在 HTML 模板中将指令应用于元素时，指的是\n<em>属性名称</em>。</p>\n</div>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wpnr3nogbqoe4crmspqptr2p\">还有两种其他类型的 Angular 指令，在其他地方进行了详细描述： (1)&nbsp;组件和 (2)&nbsp;属性型指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ozptnf7eyu3w8j0dvo092cq8\"><em>组件</em>以原生 HTML 元素的方式管理 HTML 的某个区域。 从技术上讲，它是一个带有模板的指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yfnn8ens79fi87qtmnj5rehl\">一个\n<a href=\"guide/attribute-directives\"><em>属性</em>型指令</a> 会改变元素、组件或其他指令的外观或行为。 例如，内置的 \n<a href=\"guide/template-syntax#ngStyle\"><code>NgStyle</code></a> 指令 会同时更改多个元素的样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6135vily3cid5y2b72qagsjo4\">你可以将多个\n<em>属性</em>型指令应用于一个宿主元素。 你只能\n<a href=\"guide/structural-directives#one-per-element\">将一个</a>\n<em>结构型</em>指令应用于一个宿主元素。</p>\n</div>\n<a id=\"ngIf\"></a>\n<h2 id=\"ngif-case-study\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1gzufa4t38tiy3mxyvxrzkz9\"><i class=\"material-icons\">link</i>NgIf 案例研究</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egudfulx9qvbuscnd6vgc6uba\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 是最简单的结构型指令，也是最容易理解的。 它接受一个布尔表达式，并使 DOM 的整个块出现或消失。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (ngif-true)\" region=\"ngif-true\">\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\"&gt;\n  Expression is true and <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a> is true.\n  This paragraph is in the DOM.\n&lt;/p&gt;\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"false\"&gt;\n  Expression is false and <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a> is false.\n  This paragraph is not in the DOM.\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dofbotspruuv1qcerhadx9tp\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令不会使用 CSS 隐藏元素。它会将元素从 DOM 中物理添加和删除。 使用浏览器开发者工具检查 DOM 以确认这一事实。</p>\n<figure>\n  <img src=\"generated/images/guide/structural-directives/element-not-in-dom.png\" alt=\"ngIf=false element not in DOM\" width=\"322\" height=\"114\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"n9uvupw4h64bpwb533qsx7xn\">顶部的段落位于 DOM 中。底部的未使用段落不在； 在它的地方是一个关于“绑定”的注释（稍后将详细介绍\n<a href=\"guide/structural-directives#asterisk\">这些内容</a>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3kvds43bje8oyl3mt62u5a49a\">当条件为假时，\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 会将它的宿主元素从 DOM 中删除， 从 DOM 事件中分离它（它所做的附件）， 从 Angular 更改检测中分离组件，并销毁它。 组件和 DOM 节点可以被垃圾回收，并释放内存。</p>\n<h3 id=\"why-remove-rather-than-hide\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3nzgrtr3boknkobzakhz5ka3\"><i class=\"material-icons\">link</i>为什么是\n<em>删除</em>而不是\n<em>隐藏</em>？</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ctucg3ynfvefymbtlojppv92\">指令可以通过将不需要的段落的 \n<code>display</code> 样式设置为 \n<code>none</code> 来隐藏它。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (display-none)\" region=\"display-none\">\n&lt;p [style.display]=\"'block'\"&gt;\n  Expression sets display to \"block\".\n  This paragraph is visible.\n&lt;/p&gt;\n&lt;p [style.display]=\"'none'\"&gt;\n  Expression sets display to \"none\".\n  This paragraph is hidden but still in the DOM.\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p0qi1z8pa8tn99vwd7vumjny\">虽然不可见，但元素仍然存在于 DOM 中。</p>\n<figure>\n  <img src=\"generated/images/guide/structural-directives/element-display-in-dom.png\" alt=\"hidden element still in DOM\" width=\"415\" height=\"185\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed7998woqwp82uzune0v1bxew\">对于一个简单的段落来说，隐藏和删除之间的区别并不重要。 当宿主元素附加到一个资源密集型组件时，它就变得重要了。 即使隐藏了，此类组件的行为也会继续。 组件仍然附加到它的 DOM 元素。它继续监听事件。 Angular 继续检查可能影响数据绑定的更改。 无论组件在做什么，它都会继续做。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5n72d8in8hzcj3pvtx7h67vby\">虽然不可见，但组件及其所有后代组件都会占用资源。 性能和内存负担可能很大，响应能力可能会下降，用户什么也看不到。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c67hrj6apu6rwe60hbeejehfp\">从好的方面来说，再次显示元素速度很快。 组件的先前状态被保留并准备显示。 组件不会重新初始化——这可能是一个昂贵的操作。 因此，隐藏和显示有时是正确的做法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7am152ajz8xayedz77xdg8xex\">但在没有充分理由保留它们的情况下， 你应该优先考虑删除用户看不到的 DOM 元素，并使用像 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 这样的结构型指令来回收未使用的资源。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k19cg4yvh3smnltt5bt5m55b\"><strong>这些相同的考虑因素适用于所有结构型指令，无论是内置的还是自定义的。</strong> 在应用结构型指令之前，你可能需要停下来思考一下，添加和删除元素以及创建和销毁组件的后果。</p>\n<a id=\"asterisk\"></a>\n<h2 id=\"the-asterisk--prefix\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bznm6j4xhz2086sydfj6f7w6d\"><i class=\"material-icons\">link</i>星号 (*) 前缀</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cw85zksue3eqkq9uhs5gck02s\">你一定注意到了指令名称前面的星号 (*) 前缀， 并想知道为什么它有必要以及它做了什么。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cd4thtkff9b7bytgdawfoe0dy\">以下是 \n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 在 \n<code>hero</code> 存在时显示英雄名称的情况。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (asterisk)\" region=\"asterisk\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5zufkyybbsebmhzye9fh4ve0\">星号是“语法糖”，用于表示更复杂的东西。 在内部，Angular 将 \n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> \n<em>属性</em>转换为一个 \n<code>&lt;ng-template&gt;</code> \n<em>元素</em>，并将其包装在宿主元素周围，如下所示。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (ngif-template)\" region=\"ngif-template\">\n&lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"hero\"&gt;\n  &lt;div class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n&lt;/ng-template&gt;\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"v69w6x7n0522bwfpog3kdpgb\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令被移动到 \n<code>&lt;ng-template&gt;</code> 元素中，在那里它变成了一个属性绑定，\n<code>[<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7d35ps38suf092lupymb48hl1\">其余的 \n<code>&lt;div&gt;</code>，包括它的类属性，都被移动到 \n<code>&lt;ng-template&gt;</code> 元素中。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92dmz0oeg88ylfy98r3ruz770\">第一种形式实际上并没有被渲染，只有最终的产品最终出现在 DOM 中。</p>\n<figure>\n  <img src=\"generated/images/guide/structural-directives/hero-div-in-dom.png\" alt=\"hero div in DOM\" width=\"330\" height=\"67\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0eppwyqezb2afnu8ckk65u2p\">Angular 在实际渲染过程中消耗了 \n<code>&lt;ng-template&gt;</code> 的内容，并 用一个诊断注释替换了 \n<code>&lt;ng-template&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94mfwekax0uv9shklccmu79g0\"><a href=\"guide/structural-directives#ngFor\"><code>NgFor</code></a> 和 \n<a href=\"guide/structural-directives#ngSwitch\"><code>NgSwitch...</code></a> 指令遵循相同的模式。</p>\n<a id=\"ngFor\"></a>\n<h2 id=\"inside-ngfor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wv4uet61lx2ekbfn1fg61aar\"><i class=\"material-icons\">link</i>在 \n<em>*ngFor</em> 内部</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a09u5a8lljaibcag053ugli1i\">Angular 以类似的方式将 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 从星号 (*) 语法转换为 \n<code>&lt;ng-template&gt;</code> \n<em>元素</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42k8zxt11xrvn1sa7dkj4ruz8\">以下是用两种方式编写的 \n<code>NgFor</code> 的完整功能应用程序：</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (inside-ngfor)\" region=\"inside-ngfor\">\n&lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\"&gt;\n  ({{i}}) {{hero.name}}\n&lt;/div&gt;\n\n&lt;ng-template <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\" let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\"&gt;\n  &lt;div [class.odd]=\"odd\"&gt;({{i}}) {{hero.name}}&lt;/div&gt;\n&lt;/ng-template&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rte40gv0daae7hdng5t3jwrj\">这明显比本指南中显示的 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 更复杂，这是有道理的。 \n<code>NgFor</code> 指令比本指南中显示的 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 具有更多功能，包括必需功能和可选功能。 至少 \n<code>NgFor</code> 需要一个循环变量（\n<code>let hero</code>）和一个列表（\n<code>heroes</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xl0qv4n2d30w6zrwgug0sswf\">你可以在分配给 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的字符串中启用这些功能，你可以在 Angular 的 \n<a href=\"guide/structural-directives#microsyntax\">微语法</a> 中编写该字符串。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ad4gg6ik51o9vury707t01riy\"><code>&lt;<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>&gt;</code> 字符串\n<em>外部</em>的所有内容都将与宿主元素（\n<code>&lt;div&gt;</code>）保持一致，因为它会移动到 \n<code>&lt;ng-template&gt;</code> 内部。 在此示例中，\n<code>[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"odd\"</code> 保留在 \n<code>&lt;div&gt;</code> 上。</p>\n</div>\n<a id=\"microsyntax\"></a>\n<h3 id=\"microsyntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46r0sot15lkyy8i6kre5v40yf\"><i class=\"material-icons\">link</i>微语法</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zpsncr27p6wb793zgsow662r\">Angular 微语法允许你以简洁友好的字符串形式配置指令。 微语法解析器会将该字符串转换为 \n<code>&lt;ng-template&gt;</code> 上的属性：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b90thait1qgb6as4tmoqrli1g\"><code>let</code> 关键字声明了一个 \n<a href=\"guide/structural-directives#template-input-variable\"><em>模板输入变量</em></a>，你可以在模板中引用它。此示例中的输入变量是 \n<code>hero</code>、\n<code>i</code> 和 \n<code>odd</code>。 解析器会将 \n<code>let hero</code>、\n<code>let i</code> 和 \n<code>let odd</code> 转换为名为 \n<code>let-hero</code>、\n<code>let-i</code> 和 \n<code>let-odd</code> 的变量。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dx6wqqpfomzdzaj7h607z9hti\">微语法解析器会获取 \n<code>of</code> 和 \n<code>trackBy</code>，将它们转换为标题大小写（\n<code>of</code> -&gt; \n<code>Of</code>，\n<code>trackBy</code> -&gt; \n<code>TrackBy</code>）， 并在其前面加上指令的属性名称（\n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>），从而生成名称 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a></code> 和 \n<code>ngForTrackBy</code>。 它们是两个 \n<code>NgFor</code> \n<em>输入属性</em> 的名称。 这就是指令如何得知列表是 \n<code>heroes</code> 以及跟踪函数是 \n<code>trackById</code> 的方式。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96nwb5inq88g4lsuta4wdvieh\">当 \n<code>NgFor</code> 指令遍历列表时，它会设置和重置其自身\n<em>上下文</em>对象的属性。 这些属性包括 \n<code>index</code> 和 \n<code>odd</code>，以及一个名为 \n<code>$implicit</code> 的特殊属性。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ugxxh64yeo2dmhiepmy4q206\"><code>let-i</code> 和 \n<code>let-odd</code> 变量被定义为 \n<code>let i=index</code> 和 \n<code>let odd=odd</code>。 Angular 会将它们设置为上下文 \n<code>index</code> 和 \n<code>odd</code> 属性的当前值。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xps1yn3l25w2u7rb2nhrd3on\"><code>let-hero</code> 的上下文属性未指定。 它的预期来源是隐式的。 Angular 会将 \n<code>let-hero</code> 设置为上下文 \n<code>$implicit</code> 属性的值， 该属性由 \n<code>NgFor</code> 初始化为当前迭代的英雄。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqj9ud46h28ymc31t9mmaet7e\">有关其他 \n<code>NgFor</code> 指令属性和上下文属性的说明，请参阅 \n<a href=\"api/common/NgForOf\" title=\"API: NgFor\">API 指南</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fkjgllwyw4pao7l6u1n9a0a3\"><code>NgFor</code> 由 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 指令实现。有关其他 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 指令属性和上下文属性的更多信息，请参阅 \n<a href=\"api/common/NgForOf\">NgForOf API 参考</a>。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erdy3xmpf7n0ocnrmyplv5sdn\">当你编写自己的结构型指令时，这些微语法机制对你来说是可用的。 学习 \n<a href=\"https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\" title=\"Source: NgIf\"><code>NgIf</code> 的源代码</a> 和 \n<a href=\"https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts\" title=\"Source: NgForOf\"><code>NgForOf</code></a> 是学习更多知识的好方法。</p>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h3 id=\"template-input-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5a2gy97h1l50s2vnxa0okxfh\"><i class=\"material-icons\">link</i>模板输入变量</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dw7vqwhzcmp6qs5fy428ui7vr\"><em>模板输入变量</em> 是一个变量，你可以\n<em>在</em>模板的单个实例\n<em>内</em>引用它的值。 此示例中包含多个此类变量：\n<code>hero</code>、\n<code>i</code> 和 \n<code>odd</code>。 它们都以关键字 \n<code>let</code> 开头。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rc4sn9po5m576j38rcm9hfic\"><em>模板输入变量</em> \n<strong><em>不</em></strong> 等同于 \n<a href=\"guide/template-syntax#ref-vars\">模板<em>引用</em>变量</a>， 无论是\n<em>语义</em> 上还是\n<em>语法</em> 上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1nl3352qsfo2oms5v6q6vbiqw\">你使用 \n<code>let</code> 关键字（\n<code>let hero</code>）声明模板\n<em>输入</em>变量。 该变量的作用域仅限于重复模板的\n<em>单个实例</em>。 你可以在其他结构型指令的定义中再次使用相同的变量名。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ujuoamltdk9qnhflfn10opax\">你通过在变量名前面加上 \n<code>#</code>（\n<code>#var</code>）来声明模板\n<em>引用</em>变量。 \n<em>引用</em>变量引用其附加的元素、组件或指令。 它可以在\n<em>整个模板</em> 的\n<em>任何地方</em> 访问。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ra46m4talk4g3vto2bndxcpt\">模板\n<em>输入</em>和\n<em>引用</em>变量名有自己的命名空间。\n<code>let hero</code> 中的 \n<code>hero</code> 永远不会与声明为 \n<code>#hero</code> 的 \n<code>hero</code> 相同。</p>\n<a id=\"one-per-element\"></a>\n<h3 id=\"one-structural-directive-per-host-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8iyjhkw36nql2u3asborc5e6o\"><i class=\"material-icons\">link</i>每个宿主元素只有一个结构型指令</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7z9xhfvhlgb7p9ii3nxt9docw\">总有一天，你会想要重复一段 HTML 代码，但前提是某个特定条件为真。 你会\n<em>尝试</em>在同一个宿主元素上同时放置 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 和 \n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>。 Angular 不会让你这样做。你只能对一个元素应用一个\n<em>结构型</em> 指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e267hbuayxpd2aj0nd198xcn\">原因很简单。结构型指令可以对宿主元素及其后代执行复杂的操作。 当两个指令都声称拥有同一个宿主元素时，哪个指令优先？ 哪个应该先执行，\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 还是 \n<code>NgFor</code>？\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 可以取消 \n<code>NgFor</code> 的效果吗？ 如果是这样（而且看起来应该是这样），Angular 应该如何将取消功能推广到其他结构型指令？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efhybnshbe1hotd7cz1kp14dr\">这些问题没有简单的答案。禁止使用多个结构型指令可以使这些问题变得无关紧要。 对于这种情况，有一个简单的解决方案：将 \n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放置在一个容器元素上，该容器元素包装 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 元素。 一个或两个元素都可以是 \n<a href=\"guide/structural-directives#ngcontainer\"><code>ng-container</code></a>，这样你就不必引入额外的 HTML 层级。</p>\n<a id=\"ngSwitch\"></a>\n<h2 id=\"inside-ngswitch-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nlf0kq8bkfjnwt4ed7ov3k32\"><i class=\"material-icons\">link</i>在 \n<em>NgSwitch</em> 指令内部</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dov5hbm9g3izhi1g9un1i6fs\">Angular \n<em>NgSwitch</em> 实际上是一组协同工作的指令：\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>、\n<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 和 \n<code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4ajef73qyt1bkljve2d4van4\">以下是一个示例。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (ngswitch)\" region=\"ngswitch\">\n&lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"hero?.emotion\"&gt;\n  &lt;app-happy-hero    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'happy'\"    [hero]=\"hero\"&gt;&lt;/app-happy-hero&gt;\n  &lt;app-sad-hero      *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'sad'\"      [hero]=\"hero\"&gt;&lt;/app-sad-hero&gt;\n  &lt;app-confused-hero *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'app-confused'\" [hero]=\"hero\"&gt;&lt;/app-confused-hero&gt;\n  &lt;app-unknown-hero  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [hero]=\"hero\"&gt;&lt;/app-unknown-hero&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cirt0u9uqsro8fnc4dnomb2jc\">分配给 \n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 的开关值（\n<code>hero.emotion</code>）决定了显示哪些（如果有）开关情况。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q4hxw9xn356lmmuk2stqq5i0\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 本身不是结构型指令。 它是一个\n<em>属性</em> 指令，用于控制其他两个开关指令的行为。 这就是为什么你写 \n<code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code>，而不是 \n<code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 的原因。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nqxaq505cr66ruw3uuytzuv0\"><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 和 \n<code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> \n<em>是</em> 结构型指令。 你使用星号 (*) 前缀表示法将它们附加到元素。 当 \n<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 的值与开关值匹配时，它会显示其宿主元素。 当没有兄弟 \n<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 与开关值匹配时，\n<code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> 会显示其宿主元素。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d02blk4z057ws5oeac2to124m\">你应用指令的元素是它的\n<em>宿主</em> 元素。 \n<code>&lt;happy-hero&gt;</code> 是快乐的 \n<code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 的宿主元素。 \n<code>&lt;unknown-hero&gt;</code> 是 \n<code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> 的宿主元素。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o59lc6624hslquv8txub58jg\">与其他结构型指令一样，\n<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 和 \n<code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> 可以反糖化为 \n<code>&lt;ng-template&gt;</code> 元素形式。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (ngswitch-template)\" region=\"ngswitch-template\">\n&lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"hero?.emotion\"&gt;\n  &lt;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'happy'\"&gt;\n    &lt;app-happy-hero [hero]=\"hero\"&gt;&lt;/app-happy-hero&gt;\n  &lt;/ng-template&gt;\n  &lt;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'sad'\"&gt;\n    &lt;app-sad-hero [hero]=\"hero\"&gt;&lt;/app-sad-hero&gt;\n  &lt;/ng-template&gt;\n  &lt;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'confused'\"&gt;\n    &lt;app-confused-hero [hero]=\"hero\"&gt;&lt;/app-confused-hero&gt;\n  &lt;/ng-template &gt;\n  &lt;ng-template <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>&gt;\n    &lt;app-unknown-hero [hero]=\"hero\"&gt;&lt;/app-unknown-hero&gt;\n  &lt;/ng-template&gt;\n&lt;/div&gt;\n\n</code-example>\n<a id=\"prefer-asterisk\"></a>\n<h2 id=\"prefer-the-asterisk--syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbnhx0dph29x6uf246b5775ci\"><i class=\"material-icons\">link</i>优先使用星号 (*) 语法。</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7mhmhbjh0myjxlf09bbkrmkc\">星号 (*) 语法比反糖化形式更清晰。 当没有单个元素可以作为指令的宿主时，请使用 \n<a href=\"guide/structural-directives#ng-container\">&lt;ng-container&gt;</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7icfjdyjanonesta45uufjoah\">虽然很少有充分的理由以模板\n<em>属性</em> 或\n<em>元素</em> 形式应用结构型指令， 但了解 Angular 如何创建 \n<code>&lt;ng-template&gt;</code> 以及它的工作原理仍然很重要。 当你 \n<a href=\"guide/structural-directives#unless\">编写自己的结构型指令</a> 时，你会引用 \n<code>&lt;ng-template&gt;</code>。</p>\n<a id=\"template\"></a>\n<h2 id=\"the-ng-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24wggc3nml093t369i6omkb5f\"><i class=\"material-icons\">link</i><em>&lt;ng-template&gt;</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euqfqo81859t1ml6h1bpn34cl\">&lt;ng-template&gt; 是 Angular 用于渲染 HTML 的元素。 它永远不会直接显示。 事实上，在渲染视图之前，Angular 会\n<em>用</em>注释\n<em>替换</em> \n<code>&lt;ng-template&gt;</code> 及其内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t756po9czbvoe2d4o4629xqp\">如果没有结构型指令，你只是将一些元素包装在 \n<code>&lt;ng-template&gt;</code> 中， 那么这些元素就会消失。 这就是短语 \"Hip! Hip! Hooray!\" 中间 \"Hip!\" 的命运。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (template-tag)\" region=\"template-tag\">\n&lt;p&gt;Hip!&lt;/p&gt;\n&lt;ng-template&gt;\n  &lt;p&gt;Hip!&lt;/p&gt;\n&lt;/ng-template&gt;\n&lt;p&gt;Hooray!&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z62jumw6a2ykvh7hagy0h84v\">Angular 会删除中间的 \"Hip!\"，使欢呼声不那么热烈。</p>\n<figure>\n  <img src=\"generated/images/guide/structural-directives/template-rendering.png\" alt=\"template tag rendering\" width=\"520\" height=\"94\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co13zo5ha6rzqs2hqkh7d0tlr\">结构型指令会使 \n<code>&lt;ng-template&gt;</code> 发挥作用， 正如你将在 \n<a href=\"guide/structural-directives#unless\">编写自己的结构型指令</a> 时看到的那样。</p>\n<a id=\"ngcontainer\"></a>\n<a id=\"ng-container\"></a>\n<h2 id=\"group-sibling-elements-with-ng-container\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pmgumyd3qy7toyatr1drxi0y\"><i class=\"material-icons\">link</i>使用 &lt;ng-container&gt; 对兄弟元素进行分组</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ctgun926zltqw06jax6g91tk\">通常有一个\n<em>根</em> 元素可以并且应该作为结构型指令的宿主。 列表元素（\n<code>&lt;li&gt;</code>）是 \n<code>NgFor</code> 重复器的典型宿主元素。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (ngfor-li)\" region=\"ngfor-li\">\n&lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;{{hero.name}}&lt;/li&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80z13qbfz2eu99qnopfh9hrhj\">如果没有宿主元素，你通常可以将内容包装在一个本机 HTML 容器元素中， 例如 \n<code>&lt;div&gt;</code>，并将指令附加到该包装器。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (ngif)\" region=\"ngif\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmqooe0lybymh1ba3clugbqf9\">引入另一个容器元素（通常是 \n<code>&lt;span&gt;</code> 或 \n<code>&lt;div&gt;</code>）来 将元素分组到单个\n<em>根</em> 下通常是无害的。 \n<em>通常</em> ... 但并非\n<em>总是</em> 如此。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etthn3a256vde97lk6fjtp1h\">分组元素可能会破坏模板的外观，因为 CSS 样式 既不期望也不适应新的布局。 例如，假设你具有以下段落布局。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (ngif-span)\" region=\"ngif-span\">\n&lt;p&gt;\n  I turned the corner\n  &lt;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/span&gt;\n  and continued on my way.\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"425gk14pnrcyp97mff0z4rmcv\">你还有一个 CSS 样式规则，它恰好适用于 \n<code>&lt;p&gt;</code> 段落内的 \n<code>&lt;span&gt;</code>。</p>\n<code-example path=\"structural-directives/src/app/app.component.css\" linenums=\"false\" title=\"src/app/app.component.css (p-span)\" region=\"p-span\">\np span { color: red; font-size: 70%; }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56ybtkmec28t3bkaovfmkiqhj\">构造的段落渲染得很奇怪。</p>\n<figure>\n  <img src=\"generated/images/guide/structural-directives/bad-paragraph.png\" alt=\"spanned paragraph with bad style\" width=\"452\" height=\"15\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2szmdvzijgkhz108yzar1qmn\"><code>p span</code> 样式原本打算用于其他地方，但在这里被意外地应用了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z5t9mjois30qb0bad1kwfaxz\">另一个问题：某些 HTML 元素要求所有直接子元素都必须是特定类型。 例如，\n<code>&lt;select&gt;</code> 元素要求 \n<code>&lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;</code> 子元素。 你不能将\n<em>选项</em> 包装在条件 \n<code>&lt;div&gt;</code> 或 \n<code>&lt;span&gt;</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cblw760prcs2svn9fm759eb1o\">当你尝试这样做时，</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (select-span)\" region=\"select-span\">\n&lt;div&gt;\n  Pick your favorite hero\n  (&lt;label&gt;&lt;input type=\"checkbox\" checked (change)=\"showSad = !showSad\"&gt;show sad&lt;/label&gt;)\n&lt;/div&gt;\n&lt;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\"&gt;\n  &lt;span *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\"&gt;\n    &lt;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\"&gt;\n      &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> [ngValue]=\"h\"&gt;{{h.name}} ({{h.emotion}})&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;\n&lt;/select&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4e44yh1oz3m9jvuxli7veqkat\">下拉菜单为空。</p>\n<figure>\n  <img src=\"generated/images/guide/structural-directives/bad-select.png\" alt=\"spanned options don't work\" width=\"290\" height=\"36\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o2vqg12pa9sfrr6t1lr6kbam\">浏览器不会在 \n<code>&lt;span&gt;</code> 内显示 \n<code>&lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;</code>。</p>\n<h3 id=\"ng-container-to-the-rescue\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnufislab0s6mj0xgrzlb3ft6\"><i class=\"material-icons\">link</i>&lt;ng-container&gt; 来拯救</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34fhudm9hlki9dhxop4b74fee\">Angular 的 \n<code>&lt;ng-container&gt;</code> 是一个分组元素，它不会干扰样式或布局，因为 Angular \n<em>不会将其放入 DOM</em> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"be8e0w1l1u213qnwr0qy7d7pb\">这是使用 \n<code>&lt;ng-container&gt;</code> 的条件段落。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (ngif-ngcontainer)\" region=\"ngif-ngcontainer\">\n&lt;p&gt;\n  I turned the corner\n  &lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/ng-container&gt;\n  and continued on my way.\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5selimhn0xkyhz3a1gntau257\">它正常渲染。</p>\n<figure>\n  <img src=\"generated/images/guide/structural-directives/good-paragraph.png\" alt=\"ngcontainer paragraph with proper style\" width=\"509\" height=\"15\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1i7osclvmilrd7eqmem4d2r1o\">现在使用 \n<code>&lt;ng-container&gt;</code> 有条件地排除 \n<em>select</em> \n<code>&lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;</code>。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (select-ngcontainer)\" region=\"select-ngcontainer\">\n&lt;div&gt;\n  Pick your favorite hero\n  (&lt;label&gt;&lt;input type=\"checkbox\" checked (change)=\"showSad = !showSad\"&gt;show sad&lt;/label&gt;)\n&lt;/div&gt;\n&lt;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\"&gt;\n  &lt;ng-container *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\"&gt;\n    &lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\"&gt;\n      &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> [ngValue]=\"h\"&gt;{{h.name}} ({{h.emotion}})&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n    &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/select&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ar73xdpwmo32epxvn9adcrpxe\">下拉菜单正常工作。</p>\n<figure>\n  <img src=\"generated/images/guide/structural-directives/select-ngcontainer-anim.gif\" alt=\"ngcontainer options work properly\" width=\"312\" height=\"100\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9a4r5vpuekakja7g8md1sxid\"><code>&lt;ng-container&gt;</code> 是 Angular 解析器识别的语法元素。它不是指令、组件、类或接口。它更像是 JavaScript \n<code>if</code> 块中的花括号：</p>\n<code-example language=\"javascript\">\n  if (someCondition) {\n    statement1;\n    statement2;\n    statement3;\n  }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cri0gyxg6dampkdwrd77gm9d\">如果没有这些花括号，JavaScript 只能执行第一个语句，而你希望将所有语句作为一个块有条件地执行。\n<code>&lt;ng-container&gt;</code> 在 Angular 模板中满足了类似的需求。</p>\n<a id=\"unless\"></a>\n<h2 id=\"write-a-structural-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baa0qmpghdjqwng643132h30t\"><i class=\"material-icons\">link</i>编写结构型指令</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s6qmu86sebez04y8dzpwhx0u\">在本节中，你将编写一个 \n<code>UnlessDirective</code> 结构型指令，它与 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 相反。\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 在条件为 \n<code>true</code> 时显示模板内容。\n<code>UnlessDirective</code> 在条件为 \n<strong><em>false</em></strong> 时显示内容。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (appUnless-1)\" region=\"appUnless-1\">\n&lt;p *appUnless=\"condition\"&gt;Show this sentence unless the condition is true.&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lzf2567gafiokoowz57hf0cn\">创建指令类似于创建组件。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47zg4zsi8dkvhaglqc9xkz2ty\">导入 \n<code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器（而不是 \n<code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器）。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nwroxuto02krzvhqerowz33j\">导入 \n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>、\n<code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 和 \n<code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 符号；你将需要它们用于 \n<em>任何</em> 结构型指令。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlxcjh7basn8ysrjhbuc6z7mg\">将装饰器应用于指令类。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axiakfmkuw9f1gtilsb7nfac2\">设置 CSS \n<em>属性选择器</em>，它在模板中应用于元素时标识指令。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"da4q5eqg8viglvvicwrfbxfs3\">以下是你可以开始的方式：</p>\n<code-example path=\"structural-directives/src/app/unless.directive.ts\" linenums=\"false\" title=\"src/app/unless.directive.ts (skeleton)\" region=\"skeleton\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[appUnless]'})\nexport class UnlessDirective {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejvxcc2ai94u4ik05xtofo133\">指令的 \n<em>选择器</em> 通常是指令的 \n<strong>属性名称</strong>，用方括号括起来，\n<code>[appUnless]</code>。方括号定义了 CSS \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\" title=\"MDN: Attribute selectors\">属性选择器</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bclhbpfdjbr0l2ezdqkatc5tr\">指令的 \n<em>属性名称</em> 应该用 \n<em>lowerCamelCase</em> 拼写，并以一个前缀开头。不要使用 \n<code>ng</code>。该前缀属于 Angular。选择一个适合你或你公司的简短名称。在本例中，前缀为 \n<code>app</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ervto9pqbwf2qntlfddeecar4\">根据 \n<a href=\"guide/styleguide#02-03\" title=\"Angular Style Guide\">样式指南</a>，指令的 \n<em>类</em> 名以 \n<code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 结尾。Angular 自身的指令没有。</p>\n<h3 id=\"templateref-and-viewcontainerref\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cicrwlybfyg4ppxbx90b60v52\"><i class=\"material-icons\">link</i><em>TemplateRef</em> 和 \n<em>ViewContainerRef</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ani27fwmrlthlcolffjzj25f1\">像这样的简单结构型指令会从 Angular 生成的 \n<code>&lt;ng-template&gt;</code> 中创建一个 \n<a href=\"api/core/EmbeddedViewRef\" title=\"API: EmbeddedViewRef\"><em>嵌入视图</em></a> ，并将该视图插入到 \n<a href=\"api/core/ViewContainerRef\" title=\"API: ViewContainerRef\"><em>视图容器</em></a> 中，该容器位于指令的原始 \n<code>&lt;p&gt;</code> 宿主元素旁边。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chp4ih6au0fgmv7a8p1h4ejyi\">你将使用 \n<a href=\"api/core/TemplateRef\" title=\"API: TemplateRef\"><code>TemplateRef</code></a> 获取 \n<code>&lt;ng-template&gt;</code> 的内容，并通过 \n<a href=\"api/core/ViewContainerRef\" title=\"API: ViewContainerRef\"><code>ViewContainerRef</code></a> 访问 \n<em>视图容器</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"g93ln1p85w3ph6v489e5jw9d\">你将两者都注入到指令构造函数中，作为类的私有变量。</p>\n<code-example path=\"structural-directives/src/app/unless.directive.ts\" linenums=\"false\" title=\"src/app/unless.directive.ts (ctor)\" region=\"ctor\">\nconstructor(\n  private templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;,\n  private viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) { }\n\n</code-example>\n<h3 id=\"the-appunless-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beta6dp4vpcpe6aahxl62b9as\"><i class=\"material-icons\">link</i><em>appUnless</em> 属性</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axz866e89z2s4urkogm1dc1u5\">指令使用者希望将真/假条件绑定到 \n<code>[appUnless]</code>。这意味着指令需要一个 \n<code>appUnless</code> 属性，并用 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fojlhbjhyllsto7v1j7o3bw5\">在 \n<a href=\"guide/template-syntax#inputs-outputs\"><em>模板语法</em></a> 指南中了解 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p>\n</div>\n<code-example path=\"structural-directives/src/app/unless.directive.ts\" linenums=\"false\" title=\"src/app/unless.directive.ts (set)\" region=\"set\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() set appUnless(condition: boolean) {\n  if (!condition &amp;&amp; !this.hasView) {\n    this.viewContainer.createEmbeddedView(this.templateRef);\n    this.hasView = true;\n  } else if (condition &amp;&amp; this.hasView) {\n    this.viewContainer.clear();\n    this.hasView = false;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epr8dxr6y1xnrja87j8q4m3jk\">每当条件的值发生变化时，Angular 都会设置 \n<code>appUnless</code> 属性。由于 \n<code>appUnless</code> 属性确实有效，因此它需要一个 setter。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61ukchhcl1hh2ao2yt1drfjv4\">如果条件为假值，并且视图之前没有创建，则告诉 \n<em>视图容器</em> 从模板创建 \n<em>嵌入视图</em>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5n78yovbmn6jsyusuvw689guk\">如果条件为真值，并且视图当前正在显示，则清除容器，这也将销毁视图。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnj5xnwtcabbhwui066iaybwk\">没有人读取 \n<code>appUnless</code> 属性，因此它不需要 getter。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euxz7y6miudu66kck5o9jhytr\">完成的指令代码如下所示：</p>\n<code-example path=\"structural-directives/src/app/unless.directive.ts\" linenums=\"false\" title=\"src/app/unless.directive.ts (excerpt)\" region=\"no-docs\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a> } from '@angular/core';\n\n/**\n * Add the template content to the DOM unless the condition is true.\n */\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[appUnless]'})\nexport class UnlessDirective {\n  private hasView = false;\n\n  constructor(\n    private templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;,\n    private viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() set appUnless(condition: boolean) {\n    if (!condition &amp;&amp; !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (condition &amp;&amp; this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2uhqo0mn96ecf1e6of9dwq3n\">将此指令添加到 AppModule 的 \n<code>declarations</code> 数组中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2me9h4har5bkqotdwfc58hoal\">然后创建一些 HTML 来尝试它。</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (appUnless)\" region=\"appUnless\">\n&lt;p *appUnless=\"condition\" class=\"unless <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>\"&gt;\n  (A) This paragraph is displayed because the condition is false.\n&lt;/p&gt;\n\n&lt;p *appUnless=\"!condition\" class=\"unless b\"&gt;\n  (B) Although the condition is true,\n  this paragraph is displayed because appUnless is set to false.\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7xzjqj3bvs5m2t4y3a6xk1mx\">当 \n<code>condition</code> 为假值时，顶部 (A) 段落出现，底部 (B) 段落消失。当 \n<code>condition</code> 为真值时，顶部 (A) 段落被移除，底部 (B) 段落出现。</p>\n<figure>\n  <img src=\"generated/images/guide/structural-directives/unless-anim.gif\" alt=\"UnlessDirective in action\" width=\"524\" height=\"100\">\n</figure>\n<a id=\"summary\"></a>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5uij2atbsot4ckhvbpj85um2w\">你可以在 \n<live-example></live-example> 中尝试和下载此指南的源代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jugmk9tnnvs7jetfon5ktzz7\">以下是 \n<code>src/app/</code> 文件夹中的源代码。</p>\n<code-tabs>\n\n  <code-pane title=\"app.component.ts\" path=\"structural-directives/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero, heroes } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: [ './app.component.css' ]\n})\nexport class AppComponent {\n  heroes = heroes;\n  hero = this.heroes[0];\n\n  condition = false;\n  logs: string[] = [];\n  showSad = true;\n  status = 'ready';\n\n  trackById(index: number, hero: Hero): number { return hero.id; }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app.component.html\" path=\"structural-directives/src/app/app.component.html\">\n&lt;h1&gt;Structural Directives&lt;/h1&gt;\n\n&lt;p&gt;Conditional display of hero&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;List of heroes&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;{{hero.name}}&lt;/li&gt;\n&lt;/ul&gt;\n\n\n&lt;hr&gt;\n\n&lt;h2 id=\"<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>\"&gt;<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>&lt;/h2&gt;\n\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\"&gt;\n  Expression is true and <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a> is true.\n  This paragraph is in the DOM.\n&lt;/p&gt;\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"false\"&gt;\n  Expression is false and <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a> is false.\n  This paragraph is not in the DOM.\n&lt;/p&gt;\n\n&lt;p [style.display]=\"'block'\"&gt;\n  Expression sets display to \"block\".\n  This paragraph is visible.\n&lt;/p&gt;\n&lt;p [style.display]=\"'none'\"&gt;\n  Expression sets display to \"none\".\n  This paragraph is hidden but still in the DOM.\n&lt;/p&gt;\n\n&lt;h4&gt;<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a> with template&lt;/h4&gt;\n&lt;p&gt;&amp;lt;ng-template&amp;gt; element&lt;/p&gt;\n&lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"hero\"&gt;\n  &lt;div class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n&lt;/ng-template&gt;\n\n&lt;hr&gt;\n\n&lt;h2 id=\"ng-container\"&gt;&amp;lt;ng-container&amp;gt;&lt;/h2&gt;\n\n&lt;h4&gt;*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a> with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> &amp;lt;ng-container&amp;gt;&lt;/h4&gt;\n\n&lt;button (click)=\"hero = hero ? null : heroes[0]\"&gt;Toggle hero&lt;/button&gt;\n\n&lt;p&gt;\n  I turned the corner\n  &lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/ng-container&gt;\n  and continued on my way.\n&lt;/p&gt;\n&lt;p&gt;\n  I turned the corner\n  &lt;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/span&gt;\n  and continued on my way.\n&lt;/p&gt;\n\n&lt;p&gt;&lt;i&gt;&amp;lt;select&amp;gt; with &amp;lt;span&amp;gt;&lt;/i&gt;&lt;/p&gt;\n&lt;div&gt;\n  Pick your favorite hero\n  (&lt;label&gt;&lt;input type=\"checkbox\" checked (change)=\"showSad = !showSad\"&gt;show sad&lt;/label&gt;)\n&lt;/div&gt;\n&lt;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\"&gt;\n  &lt;span *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\"&gt;\n    &lt;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\"&gt;\n      &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> [ngValue]=\"h\"&gt;{{h.name}} ({{h.emotion}})&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n    &lt;/span&gt;\n  &lt;/span&gt;\n&lt;/select&gt;\n\n&lt;p&gt;&lt;i&gt;&amp;lt;select&amp;gt; with &amp;lt;ng-container&amp;gt;&lt;/i&gt;&lt;/p&gt;\n&lt;div&gt;\n  Pick your favorite hero\n  (&lt;label&gt;&lt;input type=\"checkbox\" checked (change)=\"showSad = !showSad\"&gt;show sad&lt;/label&gt;)\n&lt;/div&gt;\n&lt;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\"&gt;\n  &lt;ng-container *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\"&gt;\n    &lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\"&gt;\n      &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> [ngValue]=\"h\"&gt;{{h.name}} ({{h.emotion}})&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n    &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/select&gt;\n&lt;br&gt;&lt;br&gt;\n\n&lt;hr&gt;\n\n&lt;h2 id=\"<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>\"&gt;NgFor&lt;/h2&gt;\n\n&lt;div class=\"box\"&gt;\n\n&lt;p class=\"code\"&gt;&amp;lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\"&amp;gt;&lt;/p&gt;\n&lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\"&gt;\n  ({{i}}) {{hero.name}}\n&lt;/div&gt;\n\n&lt;p class=\"code\"&gt;&amp;lt;ng-template <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\" let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\"/&amp;gt;&lt;/p&gt;\n&lt;ng-template <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\" let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\"&gt;\n  &lt;div [class.odd]=\"odd\"&gt;({{i}}) {{hero.name}}&lt;/div&gt;\n&lt;/ng-template&gt;\n\n&lt;/div&gt;\n&lt;hr&gt;\n\n&lt;h2 id=\"<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>\"&gt;<a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a>&lt;/h2&gt;\n\n&lt;div&gt;Pick your favorite hero&lt;/div&gt;\n&lt;p&gt;\n  &lt;label *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\"&gt;\n    &lt;input type=\"radio\" name=\"heroes\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\" [value]=\"h\"&gt;{{h.name}}\n  &lt;/label&gt;\n  &lt;label&gt;&lt;input type=\"radio\" name=\"heroes\" (click)=\"hero = null\"&gt;None of the above&lt;/label&gt;\n&lt;/p&gt;\n\n&lt;h4&gt;<a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a>&lt;/h4&gt;\n\n&lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"hero?.emotion\"&gt;\n  &lt;app-happy-hero    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'happy'\"    [hero]=\"hero\"&gt;&lt;/app-happy-hero&gt;\n  &lt;app-sad-hero      *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'sad'\"      [hero]=\"hero\"&gt;&lt;/app-sad-hero&gt;\n  &lt;app-confused-hero *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'app-confused'\" [hero]=\"hero\"&gt;&lt;/app-confused-hero&gt;\n  &lt;app-unknown-hero  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [hero]=\"hero\"&gt;&lt;/app-unknown-hero&gt;\n&lt;/div&gt;\n\n&lt;h4&gt;<a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a> with &amp;lt;ng-template&amp;gt;&lt;/h4&gt;\n&lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"hero?.emotion\"&gt;\n  &lt;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'happy'\"&gt;\n    &lt;app-happy-hero [hero]=\"hero\"&gt;&lt;/app-happy-hero&gt;\n  &lt;/ng-template&gt;\n  &lt;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'sad'\"&gt;\n    &lt;app-sad-hero [hero]=\"hero\"&gt;&lt;/app-sad-hero&gt;\n  &lt;/ng-template&gt;\n  &lt;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"'confused'\"&gt;\n    &lt;app-confused-hero [hero]=\"hero\"&gt;&lt;/app-confused-hero&gt;\n  &lt;/ng-template &gt;\n  &lt;ng-template <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>&gt;\n    &lt;app-unknown-hero [hero]=\"hero\"&gt;&lt;/app-unknown-hero&gt;\n  &lt;/ng-template&gt;\n&lt;/div&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;&amp;lt;ng-template&amp;gt;&lt;/h2&gt;\n&lt;p&gt;Hip!&lt;/p&gt;\n&lt;ng-template&gt;\n  &lt;p&gt;Hip!&lt;/p&gt;\n&lt;/ng-template&gt;\n&lt;p&gt;Hooray!&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2 id=\"appUnless\"&gt;UnlessDirective&lt;/h2&gt;\n&lt;p&gt;\n  The condition is currently\n  &lt;span [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{ '<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>': !condition, 'b': condition, 'unless': true }\"&gt;{{condition}}&lt;/span&gt;.\n  &lt;button\n    (click)=\"condition = !condition\"\n    [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] = \"{ '<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>': condition, 'b': !condition }\" &gt;\n    Toggle condition to {{condition ? 'false' : 'true'}}\n  &lt;/button&gt;\n&lt;/p&gt;\n&lt;p *appUnless=\"condition\" class=\"unless <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>\"&gt;\n  (A) This paragraph is displayed because the condition is false.\n&lt;/p&gt;\n\n&lt;p *appUnless=\"!condition\" class=\"unless b\"&gt;\n  (B) Although the condition is true,\n  this paragraph is displayed because appUnless is set to false.\n&lt;/p&gt;\n\n\n&lt;h4&gt;UnlessDirective with template&lt;/h4&gt;\n\n&lt;p *appUnless=\"condition\"&gt;Show this sentence unless the condition is true.&lt;/p&gt;\n\n&lt;p *appUnless=\"condition\" class=\"code unless\"&gt;\n  (A) &amp;lt;p *appUnless=\"condition\" class=\"code unless\"&amp;gt;\n&lt;/p&gt;\n\n&lt;ng-template [appUnless]=\"condition\"&gt;\n  &lt;p class=\"code unless\"&gt;\n    (A) &amp;lt;ng-template [appUnless]=\"condition\"&amp;gt;\n  &lt;/p&gt;\n&lt;/ng-template&gt;\n\n\n\n</code-pane>\n\n  <code-pane title=\"app.component.css\" path=\"structural-directives/src/app/app.component.css\">\nbutton {\n  min-width: 100px;\n  font-size: 100%;\n}\n\n.box {\n  border: 1px solid gray;\n  max-width: 600px;\n  padding: 4px;\n}\n.choices {\n  font-style: italic;\n}\n\ncode, .code {\n  background-color: #eee;\n  color: black;\n  font-family: Courier, sans-serif;\n  font-size: 85%;\n}\n\ndiv.code {\n  width: 400px;\n}\n\n.heroic {\n  font-size: 150%;\n  font-weight: bold;\n}\n\nhr {\n  margin: 40px 0\n}\n\n.odd {\n  background-color:  palegoldenrod;\n}\n\ntd, th {\n  text-align: left;\n  vertical-align: top;\n}\n\np span { color: red; font-size: 70%; }\n\n.unless {\n  border: 2px solid;\n  padding: 6px;\n}\n\np.unless {\n  width: 500px;\n}\n\nbutton.a, span.a, .unless.a {\n  color: red;\n  border-color: gold;\n  background-color: yellow;\n  font-size: 100%;\n}\n\nbutton.b, span.b, .unless.b {\n  color: black;\n  border-color: green;\n  background-color: lightgreen;\n  font-size: 100%;\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app.module.ts\" path=\"structural-directives/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent }         from './app.component';\nimport { heroSwitchComponents } from './hero-switch.components';\nimport { UnlessDirective }    from './unless.directive';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> ],\n  declarations: [\n    AppComponent,\n    heroSwitchComponents,\n    UnlessDirective\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"hero.ts\" path=\"structural-directives/src/app/hero.ts\">\nexport class Hero {\n  id: number;\n  name: string;\n  emotion?: string;\n}\n\nexport const heroes: Hero[] = [\n  { id: 1, name: 'Mr. Nice',  emotion: 'happy'},\n  { id: 2, name: 'Narco',     emotion: 'sad' },\n  { id: 3, name: 'Windstorm', emotion: 'confused' },\n  { id: 4, name: 'Magneta'}\n];\n\n\n</code-pane>\n\n  <code-pane title=\"hero-switch.components.ts\" path=\"structural-directives/src/app/hero-switch.components.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-happy-hero',\n  template: `Wow. You like {{hero.name}}. What <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> happy hero ... just like you.`\n})\nexport class HappyHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-sad-hero',\n  template: `You like {{hero.name}}? Such <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> sad hero. Are you sad too?`\n})\nexport class SadHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-confused-hero',\n  template: `Are you as confused as {{hero.name}}?`\n})\nexport class ConfusedHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-unknown-hero',\n  template: `{{message}}`\n})\nexport class UnknownHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  get message() {\n    return this.hero &amp;&amp; this.hero.name ?\n      `${this.hero.name} is strange and mysterious.` :\n      'Are you feeling indecisive?';\n  }\n}\n\nexport const heroSwitchComponents =\n  [ HappyHeroComponent, SadHeroComponent, ConfusedHeroComponent, UnknownHeroComponent ];\n\n\n</code-pane>\n\n  <code-pane title=\"unless.directive.ts\" path=\"structural-directives/src/app/unless.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a> } from '@angular/core';\n\n/**\n * Add the template content to the DOM unless the condition is true.\n *\n * If the expression assigned to `appUnless` evaluates to <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> truthy value\n * then the templated elements are removed removed from the DOM,\n * the templated elements are (re)inserted into the DOM.\n *\n * &lt;div *ngUnless=\"errorCount\" class=\"success\"&gt;\n *   Congrats! Everything is great!\n * &lt;/div&gt;\n *\n * ### Syntax\n *\n * - `&lt;div *appUnless=\"condition\"&gt;...&lt;/div&gt;`\n * - `&lt;ng-template [appUnless]=\"condition\"&gt;&lt;div&gt;...&lt;/div&gt;&lt;/ng-template&gt;`\n *\n */\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[appUnless]'})\nexport class UnlessDirective {\n  private hasView = false;\n\n  constructor(\n    private templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;,\n    private viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() set appUnless(condition: boolean) {\n    if (!condition &amp;&amp; !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (condition &amp;&amp; this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8k2n1sccgp3exxtl4xtpxew86\">你学到了</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddowyf55gi11yvq4h98te6veb\">结构型指令会操纵 HTML 布局。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kjm71or0knp4ieqipoq6twez\">在没有合适的宿主元素时，使用 \n<a href=\"guide/structural-directives#ngcontainer\"><code>&lt;ng-container&gt;</code></a> 作为分组元素。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bl8wvi7fyo0bc8kml0xv5pdmf\">Angular 会将 \n<a href=\"guide/structural-directives#asterisk\">星号 (*) 语法</a> 转换为 \n<code>&lt;ng-template&gt;</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2bnlpl86isu9ws4opktmn4as\">这对于 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>、\n<code>NgFor</code> 和 \n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 内置指令是如何工作的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"950p8enoeqa30npwtg7soaqfu\">关于扩展为 \n<a href=\"guide/structural-directives#template\"><code>&lt;ng-template&gt;</code></a> 的 \n<a href=\"guide/structural-directives#microsyntax\"><em>微语法</em></a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qqpcdy2zmrnrilzslegjlxar\">编写一个 \n<a href=\"guide/structural-directives#unless\">自定义结构型指令</a>，\n<code>UnlessDirective</code>。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/attribute-directives\n - guide/bootstrapping\n - guide/change-log\n - guide/glossary\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/Component\n - api/core/Directive\n - api/core/EmbeddedViewRef\n - api/core/Input\n - api/core/NgModule\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/forms/NgSelectOption\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - guide/attribute-directives\n - guide/structural-directives#asterisk\n - guide/structural-directives#group-sibling-elements-with-ng-container\n - guide/structural-directives#inside-ngfor\n - guide/structural-directives#inside-ngswitch-directives\n - guide/structural-directives#microsyntax\n - guide/structural-directives#ng-container\n - guide/structural-directives#ng-container-to-the-rescue\n - guide/structural-directives#ngFor\n - guide/structural-directives#ngSwitch\n - guide/structural-directives#ngcontainer\n - guide/structural-directives#ngif-case-study\n - guide/structural-directives#one-per-element\n - guide/structural-directives#one-structural-directive-per-host-element\n - guide/structural-directives#prefer-the-asterisk--syntax\n - guide/structural-directives#structural-directives\n - guide/structural-directives#summary\n - guide/structural-directives#template\n - guide/structural-directives#template-input-variable\n - guide/structural-directives#templateref-and-viewcontainerref\n - guide/structural-directives#the-appunless-property\n - guide/structural-directives#the-asterisk--prefix\n - guide/structural-directives#the-ng-template\n - guide/structural-directives#unless\n - guide/structural-directives#what-are-structural-directives\n - guide/structural-directives#why-remove-rather-than-hide\n - guide/structural-directives#write-a-structural-directive\n - guide/styleguide#02-03\n - guide/template-syntax\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#ngFor\n - guide/template-syntax#ngIf\n - guide/template-syntax#ngStyle\n - guide/template-syntax#ngSwitch\n - guide/template-syntax#ref-vars\n - guide/template-syntax#template-expressions\n - https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\n - https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts\n - https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n-->"
}