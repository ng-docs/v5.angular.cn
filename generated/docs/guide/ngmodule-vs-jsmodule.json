{
  "id" : "guide/ngmodule-vs-jsmodule",
  "title" : "JavaScript 模块与 NgModules",
  "contents" : "<div class=\"content\">\n<h1 id=\"javascript-modules-vs-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fk0gftzyg54rv6dann3jhalu\"><i class=\"material-icons\">link</i>JavaScript 模块与 NgModules</h1>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\"><i class=\"material-icons\">link</i>先决条件</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fkd3lz1a3bf7bfou0k5z4z58\">对 \n<a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\">JavaScript/ECMAScript 模块</a> 的基本了解。</p>\n<hr>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am3ck7o48yyqifkzj4x5fzfan\">JavaScript 和 Angular 使用模块来组织代码，尽管它们组织方式不同，但 Angular 应用依赖于两者。</p>\n<h2 id=\"javascript-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayn54n3u8ssx21ojpb6a3qh0b\"><i class=\"material-icons\">link</i>JavaScript 模块</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5i6ajt799jm2bhkguga8dzhbh\">在 JavaScript 中，模块是包含 JavaScript 代码的单个文件。要使它们的内容可用，你需要编写一个 export 语句，通常在相关代码之后，如下所示：</p>\n<code-example language=\"typescript\">\nexport class AppComponent { ... }\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4n6jvwucslzgztg17y92wk91j\">然后，当你在另一个文件中需要该文件代码时，你像这样导入它：</p>\n<code-example language=\"typescript\">\nimport { AppComponent } from './app.component';\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqik4rhywsrrtkuq72m6d5a7c\">JavaScript 模块帮助你进行命名空间，防止意外的全局变量。</p>\n<h2 id=\"ngmodules\">NgModules</h2>\n<!-- KW-- perMisko: let's discuss. This does not answer the question why it is different. Also, last sentence is confusing.-->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qb5pqzx9t0ya25ltrav684w8\">NgModules 是用 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰的类。\n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器的 \n<code>imports</code> 数组告诉 Angular 当前模块需要哪些其他 NgModules。\n<code>imports</code> 数组中的模块与 JavaScript 模块不同，因为它们是 NgModules 而不是普通的 JavaScript 模块。带有 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器的类通常保存在它们自己的文件中，但使它们成为 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的不是它们在自己的文件中，而是 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的存在及其元数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fk2drqdu9rf1co8nd1sf7g3z\">由 Angular CLI 生成的 \n<code>AppModule</code> 演示了两种模块的实际应用。</p>\n<code-example language=\"typescript\">\n/* These are JavaScript import statements. Angular doesn’t know anything about these. */\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n/* The @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> decorator lets Angular know that this is an NgModule. */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [     /* These are <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> imports. */\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agzq06gejgmbbeupt20vr3065\">NgModule 类与 JavaScript 模块在以下关键方面有所不同：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdf4n4vcur9p8gomlyv36r2cq\">NgModule 仅绑定 \n<a href=\"guide/ngmodule-faq#q-declarable\">可声明类</a>。 可声明类是 \n<a href=\"guide/ngmodule-faq#q-angular-compiler\">Angular 编译器</a> 唯一关心的类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zirh07vpmj56tjbx03bplrk3\">与在 JavaScript 模块中将所有成员类定义在一个大型文件中不同， 你可以在 \n<code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 列表中列出模块的类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ilx4fqvp5e40g5v7zcmjs95i\">NgModule 只能导出它拥有或从其他模块导入的 \n<a href=\"guide/ngmodule-faq#q-declarable\">可声明类</a>。 它不会声明或导出任何其他类型的类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yys4mrswv0kvmbfj3f884m5q\">与 JavaScript 模块不同，NgModule 可以通过将提供者添加到 \n<code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> 列表中， 来扩展\n<em>整个</em>应用程序的服务。</li>\n</ul>\n<hr>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\"><i class=\"material-icons\">link</i>关于 NgModules 的更多信息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40xfmueyhu7owuhz19bl5v5yc\">有关 NgModule 的更多信息，请参阅：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t22zgv8ykbwmu1loddo1606h\"><a href=\"guide/bootstrapping\">引导</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4g90tx1wvyawvbp6as60fp0qn\"><a href=\"guide/frequent-ngmodules\">常用模块</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg213zznp5hwjyrbbmmmf2q3n\"><a href=\"guide/providers\">提供者</a>。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/feature-modules\n - guide/frequent-ngmodules\n - guide/glossary\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodules\n - guide/sharing-ngmodules\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/core/NgModule#providers\n - api/platform-browser/BrowserModule\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/ngmodule-faq#q-angular-compiler\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-vs-jsmodule#javascript-modules\n - guide/ngmodule-vs-jsmodule#javascript-modules-vs-ngmodules\n - guide/ngmodule-vs-jsmodule#more-on-ngmodules\n - guide/ngmodule-vs-jsmodule#ngmodules\n - guide/ngmodule-vs-jsmodule#prerequisites\n - guide/providers\n - https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\n-->"
}