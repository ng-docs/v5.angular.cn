{
  "id" : "guide/security",
  "title" : "安全",
  "contents" : "<div class=\"content\">\n<h1 id=\"security\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2tmchdk1ct294f2gw8klyefyd\"><i class=\"material-icons\">link</i>安全</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alo636hs1gk8m89ysa56s5uep\">此页面描述了 Angular 内置的针对常见 Web 应用程序漏洞和攻击（如跨站点脚本攻击）的保护措施。它不涵盖应用程序级安全性，例如身份验证（\n<em>此用户是谁？</em>）和授权（\n<em>此用户可以做什么？</em>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"em3amwiw7mcomue9duchoo2x5\">有关下面描述的攻击和缓解措施的更多信息，请参阅 \n<a href=\"https://www.owasp.org/index.php/Category:OWASP_Guide_Project\">OWASP 指南项目</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fliytthw8ajl1jed0jtyvesz\">你可以在 Stackblitz 中运行 \n<live-example></live-example> 并从那里下载代码。</p>\n<h2 id=\"report-issues\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"eguyl33mrbvgwmp6rkw1d1bxj\"><i class=\"material-icons\">link</i>举报漏洞</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecic2y3u9vsimge8o7yi3ntwd\">要报告 Angular 本身的漏洞，请发送电子邮件至 \n<a href=\"mailto:security@angular.io\">security@angular.io</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93mkasmtfwtx66rciodkbklo6\">有关 Google 如何处理安全问题的更多信息，请参阅 \n<a href=\"https://www.google.com/about/appsecurity/\">Google 的安全理念</a>。</p>\n<h2 id=\"best-practices\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2on7efpb9jjtgslhx5yxp4x69\"><i class=\"material-icons\">link</i>最佳实践</h2>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e1w3px0snng06v63whlgqyva\"><strong>使用最新的 Angular 库版本。</strong> 我们定期更新 Angular 库，这些更新可能会修复在先前版本中发现的安全缺陷。查看 Angular 的 \n<a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">更改日志</a>，了解与安全相关的更新。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xgjbaq4uq29gvnr4tok1a907\"><strong>不要修改你的 Angular 副本。</strong> 私有的、定制的 Angular 版本往往落后于当前版本，可能不包含重要的安全修复和增强功能。相反，请与社区分享你的 Angular 改进，并提交拉取请求。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88wbpmdjennrkqsffxvs59qg5\"><strong>避免文档中标记为“<em>安全风险</em>”的 Angular API。</strong> 有关更多信息，请参阅此页面的 \n<a href=\"guide/security#bypass-security-apis\">信任安全值</a> 部分。</p>\n</li>\n</ul>\n<h2 id=\"xss\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0zvhtyn9fz7rey0i0genchub\"><i class=\"material-icons\">link</i>防止跨站点脚本 (XSS)</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9igxuk3y5avxsonl7m0fwpukr\"><a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">跨站点脚本 (XSS)</a> 使攻击者能够将恶意代码注入网页。此类代码随后可以（例如）窃取用户数据（特别是登录数据）或执行操作以冒充用户。这是 Web 上最常见的攻击之一。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee8nnw7c2ehavh4qbool7f7ma\">要阻止 XSS 攻击，你必须阻止恶意代码进入 DOM（文档对象模型）。例如，如果攻击者可以诱使你将 \n<code>&lt;script&gt;</code> 标签插入 DOM，他们就可以在你的网站上运行任意代码。攻击并不局限于 \n<code>&lt;script&gt;</code> 标签——DOM 中的许多元素和属性都允许代码执行，例如 \n<code>&lt;img onerror=\"...\"&gt;</code> 和 \n<code>&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> href=\"javascript:...\"&gt;</code>。如果攻击者控制的数据进入 DOM，则预计会出现安全漏洞。</p>\n<h3 id=\"angulars-cross-site-scripting-security-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erloijj6gir0bjxsqkutb8wdc\"><i class=\"material-icons\">link</i>Angular 的跨站点脚本安全模型</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjsc20xprxgvdn4rixb7w5pls\">为了系统地阻止 XSS 错误，Angular 默认将所有值视为不可信。当一个值从模板插入 DOM 时，通过属性、属性、样式、类绑定或插值，Angular 会对不可信的值进行清理和转义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bimzh2e3gsnbga8g69065llpo\"><em>Angular 模板与可执行代码相同</em>：模板中的 HTML、属性和绑定表达式（但不包括绑定的值）被认为是安全的。这意味着应用程序必须阻止攻击者可以控制的值进入模板的源代码。切勿通过连接用户输入和模板来生成模板源代码。为了防止这些漏洞，请使用 \n<a href=\"guide/security#offline-template-compiler\">离线模板编译器</a>，也称为\n<em>模板注入</em>。</p>\n<h3 id=\"sanitization-and-security-contexts\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xlut81nemd9ym9zi0vi9pub9\"><i class=\"material-icons\">link</i>清理和安全上下文</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a46her7aphtrbxb8v4pco58t2\"><em>清理</em>是对不可信值的检查，将其转换为可以安全插入 DOM 的值。在许多情况下，清理根本不会改变值。清理取决于上下文：在 CSS 中无害的值在 URL 中可能很危险。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6ls64ghadjsvvmujq56vt3wsq\">Angular 定义了四个安全环境：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7il26a5oe4um42m992ytm0gjh\"><strong>HTML</strong> 用于将值解释为 HTML，例如，当绑定到 \n<code>innerHtml</code> 时。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t7puob8uqpt2y71ng3kbm4f7\"><strong>Style</strong> 用于将 CSS 绑定到 \n<code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 属性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rjdotobjd0q5g35xb4q9zbnx\"><strong>URL</strong> 用于 URL 属性，例如 \n<code>&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> href&gt;</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctefc4o2f6vjygi6zon4ef4hr\"><strong>资源 URL</strong> 是一个将被加载并作为代码执行的 URL，例如，在 \n<code>&lt;script src&gt;</code> 中。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afl9xnfh28bmtnkbbn20rx61l\">Angular 会对不可信的 HTML、样式和 URL 值进行清理；清理资源 URL 是不可能的，因为它们包含任意代码。在开发模式下，Angular 会在清理过程中必须更改值时打印一个控制台警告。</p>\n<h3 id=\"sanitization-example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"365xxywjscduuegy2qfv6pr0d\"><i class=\"material-icons\">link</i>无害化范例</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxzcis9b6i3i1qksw9okhljhz\">以下模板绑定 \n<code>htmlSnippet</code> 的值，一次通过将其插值到元素的内容中，一次通过将其绑定到元素的 \n<code>innerHTML</code> 属性：</p>\n<code-example path=\"security/src/app/inner-html-binding.component.html\" title=\"src/app/inner-html-binding.component.html\">\n&lt;h3&gt;Binding innerHTML&lt;/h3&gt;\n&lt;p&gt;Bound value:&lt;/p&gt;\n&lt;p class=\"e2e-inner-html-interpolated\"&gt;{{htmlSnippet}}&lt;/p&gt;\n&lt;p&gt;Result of binding to innerHTML:&lt;/p&gt;\n&lt;p class=\"e2e-inner-html-bound\" [innerHTML]=\"htmlSnippet\"&gt;&lt;/p&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1l908lhndesm9islzeq851s8\">插值内容始终会被转义，HTML 不会被解释，浏览器会显示元素文本内容中的尖括号。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwe8a70oczfff4zw3iw8hdu4o\">要解释 HTML，请将其绑定到 HTML 属性，例如 \n<code>innerHTML</code>。但是，将攻击者可能控制的值绑定到 \n<code>innerHTML</code> 通常会导致 XSS 漏洞。例如，\n<code>&lt;script&gt;</code> 标签中包含的代码会被执行：</p>\n<code-example path=\"security/src/app/inner-html-binding.component.ts\" linenums=\"false\" title=\"src/app/inner-html-binding.component.ts (class)\" region=\"class\">\nexport class InnerHtmlBindingComponent {\n  // For example, <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> user/attacker-controlled value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> URL.\n  htmlSnippet = 'Template &lt;script&gt;alert(\"0wned\")&lt;/script&gt; &lt;b&gt;Syntax&lt;/b&gt;';\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"h1jv510dv90cp72o8zn5ryfb\">Angular 会识别该值不安全，并自动对其进行无害化处理，这会删除 \n<code>&lt;script&gt;</code> 标签，但会保留安全内容，例如 \n<code>&lt;script&gt;</code> 标签的文本内容和 \n<code>&lt;b&gt;</code> 元素。</p>\n<figure>\n  <img src=\"generated/images/guide/security/binding-inner-html.png\" alt=\"A screenshot showing interpolated and bound HTML values\" width=\"228\" height=\"17\">\n</figure>\n<h3 id=\"avoid-direct-use-of-the-dom-apis\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"esm4cohv9hbw9iizln0l2r08q\"><i class=\"material-icons\">link</i>避免直接使用 DOM API</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c9hrgi1p8axgv4b8b8tuuat\">内置的浏览器 DOM API 不会自动保护你免受安全漏洞。例如，\n<code>document</code>、通过 \n<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 可用的节点以及许多第三方 API 包含不安全的方法。避免直接与 DOM 交互，而应尽可能使用 Angular 模板。</p>\n<h3 id=\"content-security-policy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1eltfz13cnddsz51bg1ybj0gh\"><i class=\"material-icons\">link</i>内容安全策略</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gnnli5pxfqosinxl0ddcfxkf\">内容安全策略 (CSP) 是一种纵深防御技术，用于防止 XSS。要启用 CSP，请配置你的 Web 服务器以返回适当的 \n<code>Content-Security-Policy</code> HTTP 标头。有关内容安全策略的更多信息，请参阅 HTML5Rocks 网站上的 \n<a href=\"http://www.html5rocks.com/en/tutorials/security/content-security-policy/\">内容安全策略简介</a>。</p>\n<a id=\"offline-template-compiler\"></a>\n<h3 id=\"use-the-offline-template-compiler\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xefiyl4y71ypcshm5du9sqve\"><i class=\"material-icons\">link</i>使用离线模板编译器</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3o7h773fnrp0p3g8oz2651q0j\">离线模板编译器可以防止一类称为模板注入的漏洞，并极大地提高应用程序性能。在生产部署中使用离线模板编译器；不要动态生成模板。Angular 信任模板代码，因此生成模板（尤其是包含用户数据的模板）会绕过 Angular 的内置保护措施。有关以安全方式动态构建表单的信息，请参阅 \n<a href=\"guide/dynamic-form\">动态表单</a> 指南页面。</p>\n<h3 id=\"server-side-xss-protection\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"cvlz4wdz4hqceh72uob76jm40\"><i class=\"material-icons\">link</i>服务端 XSS 保护</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ux8jn9hdk4qg6zvl2cqvdtw4\">在服务器上构建的 HTML 容易受到注入攻击。将模板代码注入 Angular 应用程序与将可执行代码注入应用程序相同：它使攻击者能够完全控制应用程序。为了防止这种情况，请使用一种模板语言，该语言会自动转义值以防止服务器上的 XSS 漏洞。不要使用模板语言在服务器端生成 Angular 模板；这样做会带来引入模板注入漏洞的高风险。</p>\n<h2 id=\"bypass-security-apis\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2apvmmvwwj986klstnpi7rbdh\"><i class=\"material-icons\">link</i>信任安全值</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63dsdzjguo3l4pfcn4ja9hfhn\">有时应用程序确实需要包含可执行代码、从某个 URL 显示 \n<code>&lt;iframe&gt;</code> 或构建可能存在危险的 URL。为了防止在任何这些情况下自动进行无害化处理，你可以告诉 Angular 你已经检查过某个值、检查了它的生成方式，并确保它始终安全。但\n<em>请谨慎</em>。如果你信任可能存在恶意行为的值，你就是在将安全漏洞引入你的应用程序。如有疑问，请咨询专业的安全审阅人员。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dwo8kyzwvn889c6mlz1k8zi4\">要将某个值标记为可信，请注入 \n<code><a href=\"api/platform-browser/DomSanitizer\" class=\"code-anchor\">DomSanitizer</a></code> 并调用以下方法之一：</p>\n<ul>\n<li><code>bypassSecurityTrustHtml</code></li>\n<li><code>bypassSecurityTrustScript</code></li>\n<li><code>bypassSecurityTrustStyle</code></li>\n<li><code>bypassSecurityTrustUrl</code></li>\n<li><code>bypassSecurityTrustResourceUrl</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91yrcdkt2yrvxh4m9tw5qlwzz\">请记住，某个值是否安全取决于上下文，因此请为你的预期用途选择正确的上下文。假设以下模板需要将 URL 绑定到 \n<code>javascript:alert(...)</code> 调用：</p>\n<code-example path=\"security/src/app/bypass-security.component.html\" linenums=\"false\" title=\"src/app/bypass-security.component.html (URL)\" region=\"URL\">\n&lt;h4&gt;An untrusted URL:&lt;/h4&gt;\n&lt;p&gt;&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> class=\"e2e-dangerous-url\" [href]=\"dangerousUrl\"&gt;Click me&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;&lt;/p&gt;\n&lt;h4&gt;A trusted URL:&lt;/h4&gt;\n&lt;p&gt;&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> class=\"e2e-trusted-url\" [href]=\"trustedUrl\"&gt;Click me&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahzwh17afbktz9azd96blktwt\">通常，Angular 会自动对 URL 进行无害化处理，禁用危险代码，并在开发模式下将此操作记录到控制台。为了防止这种情况，请使用 \n<code>bypassSecurityTrustUrl</code> 调用将 URL 值标记为可信 URL：</p>\n<code-example path=\"security/src/app/bypass-security.component.ts\" linenums=\"false\" title=\"src/app/bypass-security.component.ts (trust-url)\" region=\"trust-url\">\nconstructor(private sanitizer: <a href=\"api/platform-browser/DomSanitizer\" class=\"code-anchor\">DomSanitizer</a>) {\n  // javascript: URLs are dangerous if attacker controlled.\n  // Angular sanitizes them in data binding, but you can\n  // explicitly tell Angular to trust this value:\n  this.dangerousUrl = 'javascript:alert(\"Hi there\")';\n  this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);\n\n</code-example>\n<figure>\n  <img src=\"generated/images/guide/security/bypass-security-component.png\" alt=\"A screenshot showing an alert box created from a trusted URL\" width=\"454\" height=\"175\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eylmkkakft0gqxk78nvgyklv2\">如果你需要将用户输入转换为可信值，请使用控制器方法。以下模板允许用户输入 YouTube 视频 ID 并加载相应的视频到 \n<code>&lt;iframe&gt;</code> 中。\n<code>&lt;iframe src&gt;</code> 属性是一个资源 URL 安全上下文，因为不受信任的来源可以（例如）偷偷地插入文件下载，而毫无戒心的用户可能会执行这些文件下载。因此，请在控制器上调用一个方法来构建一个可信的视频 URL，这会导致 Angular 允许绑定到 \n<code>&lt;iframe src&gt;</code>：</p>\n<code-example path=\"security/src/app/bypass-security.component.html\" linenums=\"false\" title=\"src/app/bypass-security.component.html (iframe)\" region=\"iframe\">\n&lt;h4&gt;Resource URL:&lt;/h4&gt;\n&lt;p&gt;Showing: {{dangerousVideoUrl}}&lt;/p&gt;\n&lt;p&gt;Trusted:&lt;/p&gt;\n&lt;iframe class=\"e2e-iframe-trusted-src\" width=\"640\" height=\"390\" [src]=\"videoUrl\"&gt;&lt;/iframe&gt;\n&lt;p&gt;Untrusted:&lt;/p&gt;\n&lt;iframe class=\"e2e-iframe-untrusted-src\" width=\"640\" height=\"390\" [src]=\"dangerousVideoUrl\"&gt;&lt;/iframe&gt;\n\n\n</code-example>\n<code-example path=\"security/src/app/bypass-security.component.ts\" linenums=\"false\" title=\"src/app/bypass-security.component.ts (trust-video-url)\" region=\"trust-video-url\">\nupdateVideoUrl(id: string) {\n  // Appending an ID to <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> YouTube URL is safe.\n  // Always make sure to construct <a href=\"api/platform-browser/SafeValue\" class=\"code-anchor\">SafeValue</a> objects as\n  // close as possible to the input data so\n  // that it's easier to check if the value is safe.\n  this.dangerousVideoUrl = 'https://www.youtube.com/embed/' + id;\n  this.videoUrl =\n      this.sanitizer.bypassSecurityTrustResourceUrl(this.dangerousVideoUrl);\n}\n\n</code-example>\n<h2 id=\"http\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"f18kzd5j0e8rg26mguso854rd\"><i class=\"material-icons\">link</i>HTTP 级漏洞</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96sio1d4b01dk3hcghchlnzbs\">Angular 内置支持，有助于防止两种常见的 HTTP 漏洞，即跨站点请求伪造 (CSRF 或 XSRF) 和跨站点脚本包含 (XSSI)。这两种漏洞都必须主要在服务器端进行缓解，但 Angular 提供了帮助程序，使客户端集成更容易。</p>\n<h3 id=\"xsrf\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6lj5v5vacknb1mhc8lapeexsg\"><i class=\"material-icons\">link</i>跨站请求伪造</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nsgxh5mxte2pv0arw6x9aw1t\">在跨站点请求伪造 (CSRF 或 XSRF) 中，攻击者会诱骗用户访问另一个网页（例如 \n<code>evil.com</code>），该网页包含恶意代码，会秘密向应用程序的 Web 服务器（例如 \n<code>example-bank.com</code>）发送恶意请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"1fm8l7ohox31w3mjsn2ojbvx6\">假设用户已经在 <code>example-bank.com</code> 登录。用户打开一个邮件，点击里面的链接，在新页面中打开 <code>evil.com</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ge8p3dnyqizjsb9n857nk1ww\"><code>evil.com</code> 页面会立即向 \n<code>example-bank.com</code> 发送恶意请求。它可能是将资金从用户的帐户转到攻击者帐户的请求。浏览器会自动将 \n<code>example-bank.com</code> 的 cookie（包括身份验证 cookie）与该请求一起发送。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30zkwjam1s1nxxtquoa9tb82a\">如果 \n<code>example-bank.com</code> 服务器缺乏 XSRF 保护，它无法区分来自应用程序的合法请求和来自 \n<code>evil.com</code> 的伪造请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"894iun90buntdcijp25em5dtk\">为了防止这种情况，应用程序必须确保用户请求来自真正的应用程序，而不是来自其他网站。服务器和客户端必须协同工作才能阻止这种攻击。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1h03599vr00kgblj1kxb041ev\">在一种常见的反 XSRF 技术中，应用程序服务器会在 cookie 中发送一个随机生成的认证令牌。客户端代码会读取 cookie，并在所有后续请求中添加一个包含该令牌的自定义请求标头。服务器会将接收到的 cookie 值与请求标头值进行比较，如果值缺失或不匹配，则会拒绝该请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xi66mi7zszo04b4fne8xt7tn\">这种技术之所以有效，是因为所有浏览器都实现了\n<em>同源策略</em>。只有设置 cookie 的网站上的代码才能读取该网站的 cookie，并在对该网站的请求中设置自定义标头。这意味着只有你的应用程序才能读取此 cookie 令牌并设置自定义标头。\n<code>evil.com</code> 上的恶意代码无法做到这一点。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11bg8m11v4xlwprytco1c5gsj\">Angular 的 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 内置支持此技术的客户端部分。有关更多信息，请参阅 \n<a href=\"/guide/http\">HttpClient 指南</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ea13wd9c084uqdfikzv1t5af\">有关 Open Web Application Security Project (OWASP) 中的 CSRF 信息，请参阅 \n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">跨站点请求伪造 (CSRF)</a> 和 \n<a href=\"https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet\">跨站点请求伪造 (CSRF) 防御秘籍</a>。斯坦福大学的论文 \n<a href=\"https://seclab.stanford.edu/websec/csrf/csrf.pdf\">跨站点请求伪造的稳健防御</a> 提供了丰富的详细信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cnq7xhb3kq8mt05jtlma1l6d\">另请参阅 Dave Smith 在 AngularConnect 2016 上关于 XSRF 的易于理解的 \n<a href=\"https://www.youtube.com/watch?v=9inczw6qtpY\" title=\"Cross Site Request Funkery Securing Your Angular Apps From Evil Doers\">演讲</a>。</p>\n<h3 id=\"xssi\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51a5mxsozwzkhnnxfsq1okzar\"><i class=\"material-icons\">link</i>跨站点脚本包含 (XSSI)</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yjdv7pyixjwy0suikplfps7w\">跨站点脚本包含（也称为 JSON 漏洞）可以允许攻击者的网站读取 JSON API 中的数据。这种攻击在旧版浏览器上有效，方法是覆盖本机 JavaScript 对象构造函数，然后使用 \n<code>&lt;script&gt;</code> 标签包含 API URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7j0zv5ov1c9eb28ng162rcqvm\">这种攻击只有在返回的 JSON 可以作为 JavaScript 执行时才会成功。服务器可以通过在所有 JSON 响应之前添加前缀来防止攻击，使其不可执行，按照惯例，使用众所周知的字符串 \n<code>\")]}',\\n\"</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er4lo86atazon6dywdzg8dsjh\">Angular 的 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 库会识别此约定，并在进一步解析之前自动从所有响应中剥离字符串 \n<code>\")]}',\\n\"</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8llt655ho7fcx4fiwgprq92wb\">有关更多信息，请参阅此 \n<a href=\"https://security.googleblog.com/2011/05/website-security-for-webmasters.html\">Google 网站安全博客文章</a> 中的 XSSI 部分。</p>\n<h2 id=\"code-review\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"75qkrrlpij45p2vvd6mwi8nd2\"><i class=\"material-icons\">link</i>审计 Angular 应用</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9eti05chco1grjoxclcq9ti1e\">Angular 应用程序必须遵循与普通 Web 应用程序相同的安全原则，并且必须像这样进行审核。文档中标记为安全敏感的 Angular 特定 API（例如 \n<a href=\"guide/security#bypass-security-apis\"><em>bypassSecurityTrust</em></a> 方法）应该在安全审阅中进行审核。</p>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - /guide/http\n - api/animations/style\n - api/common/http/HttpClient\n - api/core/ElementRef\n - api/platform-browser/DomSanitizer\n - api/platform-browser/SafeValue\n - api/router/RouterLinkWithHref\n - guide/dynamic-form\n - guide/security#angulars-cross-site-scripting-security-model\n - guide/security#avoid-direct-use-of-the-dom-apis\n - guide/security#best-practices\n - guide/security#bypass-security-apis\n - guide/security#code-review\n - guide/security#content-security-policy\n - guide/security#http\n - guide/security#offline-template-compiler\n - guide/security#report-issues\n - guide/security#sanitization-and-security-contexts\n - guide/security#sanitization-example\n - guide/security#security\n - guide/security#server-side-xss-protection\n - guide/security#use-the-offline-template-compiler\n - guide/security#xsrf\n - guide/security#xss\n - guide/security#xssi\n - http://www.html5rocks.com/en/tutorials/security/content-security-policy/\n - https://en.wikipedia.org/wiki/Cross-site_scripting\n - https://github.com/angular/angular/blob/master/CHANGELOG.md\n - https://seclab.stanford.edu/websec/csrf/csrf.pdf\n - https://security.googleblog.com/2011/05/website-security-for-webmasters.html\n - https://www.google.com/about/appsecurity/\n - https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet\n - https://www.owasp.org/index.php/Category:OWASP_Guide_Project\n - https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\n - https://www.youtube.com/watch?v=9inczw6qtpY\n - mailto:security@angular.io\n-->"
}