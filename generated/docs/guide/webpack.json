{
  "id" : "guide/webpack",
  "title" : "Webpack：简介",
  "contents" : "<div class=\"content\">\n<h1 id=\"webpack-an-introduction\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30xjwahq1lrbs4cg9ve5w5vsy\"><i class=\"material-icons\">link</i>Webpack：简介</h1>\n<style>\n  h4 {font-size: 17px !important; text-transform: none !important;}\n  .syntax { font-family: Consolas, 'Lucida Sans', Courier, sans-serif; color: black; font-size: 85%; }\n\n</style>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckhhuwmy973hu2dk2pd95hs7m\"><a href=\"https://webpack.github.io/\"><strong>Webpack</strong></a> 是一个流行的模块捆绑器， 它是一种将应用程序源代码捆绑到方便的\n<em>块</em>中的工具， 以及将该代码从服务器加载到浏览器中的工具。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdenqxypsy5robyvjnitylsol\">它是文档中其他地方使用的\n<em>SystemJS</em>方法的绝佳替代方案。 本指南提供了一些 Webpack 的示例，并解释了如何在 Angular 应用程序中使用它。</p>\n<a id=\"top\"></a>\n<!--\n\n\n# Contents\n\n* [What is Webpack?](guide/webpack#what-is-webpack)\n\n  * [Entries and outputs](guide/webpack#entries-outputs)\n  * [Multiple bundles](guide/webpack#multiple-bundles)\n  * [Loaders](guide/webpack#loaders)\n  * [Plugins](guide/webpack#plugins)\n\n* [Configuring Webpack](guide/webpack#configure-webpack)\n\n  * [Polyfills](guide/webpack#polyfills)\n  * [Common configuration](guide/webpack#common-configuration)\n  * [Inside `webpack.common.js`](guide/webpack#inside-webpack-commonjs)\n\n    * [entry](guide/webpack#common-entries)\n    * [resolve extension-less imports](guide/webpack#common-resolves)\n    * [`module.rules`](guide/webpack#common-rules)\n    * [Plugins](guide/webpack#plugins)\n    * [`CommonsChunkPlugin`](guide/webpack#commons-chunk-plugin)\n    * [`HtmlWebpackPlugin`](guide/webpack#html-webpack-plugin)\n\n  * [Environment specific configuration](guide/webpack#environment-configuration)\n  * [Development configuration](guide/webpack#development-configuration)\n  * [Production configuration](guide/webpack#production-configuration)\n  * [Test configuration](guide/webpack#test-configuration)\n\n* [Trying it out](guide/webpack#try)\n* [Highlights](guide/webpack#highlights)\n* [Conclusion](guide/webpack#conclusion)\n\n-->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pzd31957974hqcxvtkgyeb8l\">你也可以 \n<a href=\"generated/zips/webpack/webpack.zip\" target=\"_blank\">下载最终结果。</a></p>\n<a id=\"what-is-webpack\"></a>\n<h2 id=\"what-is-webpack\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8d88vywdn2hxrrehbi69j720g\"><i class=\"material-icons\">link</i>什么是 Webpack？</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38mmy92nqpkxfv3qdcc3v4t7q\">Webpack 是一个功能强大的模块捆绑器。 \n<em>捆绑包</em> 是一个 JavaScript 文件，它包含了\n<em>属于</em>一起的\n<em>资产</em>， 并且应该在响应单个文件请求时提供给客户端。 捆绑包可以包含 JavaScript、CSS 样式、HTML 以及几乎任何其他类型的文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0kd6o5q2cykuo3thl6tge6kf\">Webpack 会遍历你的应用程序源代码， 查找 \n<code>import</code> 语句，构建依赖关系图，并输出一个或多个\n<em>捆绑包</em>。 借助插件和规则，Webpack 可以预处理和最小化不同的非 JavaScript 文件，例如 TypeScript、SASS 和 LESS 文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ef3t9j3109nrqmsr21a59qlk4\">你可以使用一个 JavaScript 配置文件 \n<code>webpack.config.js</code> 来确定 Webpack 的行为和方式。</p>\n<a id=\"entries-outputs\"></a>\n<h3 id=\"entries-and-outputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n0uzrb3repv2my5w1g3t2eqz\"><i class=\"material-icons\">link</i>入口和输出</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"201nkx7uy9h8bcr7f4disr2bf\">你可以向 Webpack 提供一个或多个\n<em>入口</em>文件，并让它找到并合并从这些入口辐射出的依赖项。 此示例中的一个入口点文件是应用程序的根文件 \n<code>src/main.ts</code>：</p>\n<code-example path=\"webpack/config/webpack.common.js\" region=\"one-entry\" title=\"webpack.config.js (single entry)\" linenums=\"false\">\nentry: {\n  'app': './src/main.ts'\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbweuljzidsoki1q0lgnpii08\">Webpack 会检查该文件并递归地遍历其 \n<code>import</code> 依赖项。</p>\n<code-example path=\"webpack/src/app/app.component.ts\" region=\"component\" title=\"src/main.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1c751bggfpy5q4odjzugmeww0\">它会看到你正在导入 \n<code>@angular/core</code>，因此它会将其添加到其依赖项列表中，以便将其包含在捆绑包中。 它会打开 \n<code>@angular/core</code> 文件并跟踪\n<em>其</em> \n<code>import</code> 语句网络，直到它从 \n<code>main.ts</code> 向下构建了完整的依赖关系图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y0aw9seb5aisxhy56qnpw9eu\">然后它会将这些文件\n<strong>输出</strong>到配置中指定的 \n<code>app.js</code> \n<em>捆绑包文件</em>中：</p>\n<code-example name=\"webpack.config.js (single output)\" language=\"javascript\">\n  output: {\n    filename: 'app.js'\n  }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bq3swv0uzuwmusmytyi7tscw\">此 \n<code>app.js</code> 输出捆绑包是一个包含应用程序源代码及其依赖项的单个 JavaScript 文件。 你将在 \n<code>index.html</code> 中使用 \n<code>&lt;script&gt;</code> 标签加载它。</p>\n<a id=\"multiple-bundles\"></a>\n<h4 id=\"multiple-bundles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b9rib56kuwg5gxsslkq3tri4\"><i class=\"material-icons\">link</i>多个捆绑包</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90i9t9sizs2xxflu51zfgrrnr\">你可能不希望有一个包含所有内容的巨大捆绑包。 最好将易变的应用程序代码与相对稳定的供应商代码模块分开。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sza2hhgjx8701nl2hjgstijf\">更改配置，使其具有两个入口点，\n<code>main.ts</code> 和 \n<code>vendor.ts</code>：</p>\n<code-example language=\"javascript\">\n  entry: {\n    app: 'src/app.ts',\n    vendor: 'src/vendor.ts'\n  },\n\n  output: {\n    filename: '[name].js'\n  }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2l6j1msh7xbdf8am8owvcxbjd\">Webpack 会构建两个独立的依赖关系图， 并输出\n<em>两个</em>捆绑包文件，一个名为 \n<code>app.js</code>，其中只包含应用程序代码， 另一个名为 \n<code>vendor.js</code>，其中包含所有供应商依赖项。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qchucx1h7z5e726ziwbmeezr\">输出名称中的 \n<code>[name]</code> 是一个\n<em>占位符</em>，Webpack 插件会用入口名称 \n<code>app</code> 和 \n<code>vendor</code> 替换它。插件将在指南的\n<a href=\"guide/webpack#commons-chunk-plugin\">后面</a>介绍。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3avqpdemxk3f370kfrq8tvhuj\">要告诉 Webpack 哪些内容属于供应商捆绑包， 请添加一个 \n<code>vendor.ts</code> 文件，该文件只导入应用程序的第三方模块：</p>\n<code-example path=\"webpack/src/vendor.ts\" title=\"src/vendor.ts\" linenums=\"false\">\n// Angular\nimport '@angular/platform-browser';\nimport '@angular/platform-browser-dynamic';\nimport '@angular/core';\nimport '@angular/common';\nimport '@angular/http';\nimport '@angular/router';\n\n// RxJS\nimport 'rxjs';\n\n// Other vendors for example jQuery, Lodash or Bootstrap\n// You can import js, ts, css, sass, ...\n\n</code-example>\n<a id=\"loaders\"></a>\n<h3 id=\"loaders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c06wjx0l0rdyta4focftkyp0w\"><i class=\"material-icons\">link</i>加载器</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ly2bthguk0ncyo4oob1zre3a\">Webpack 可以捆绑任何类型的文件：JavaScript、TypeScript、CSS、SASS、LESS、图像、HTML、字体，等等。 Webpack\n<em>本身</em>只理解 JavaScript 文件。 使用\n<em>加载器</em>来教它将非 JavaScript 文件转换为其 JavaScript 等效项。 如下配置 TypeScript 和 CSS 的加载器。</p>\n<code-example language=\"javascript\">\n  rules: [\n    {\n      test: /\\.ts$/,\n      loader: 'awesome-typescript-loader'\n    },\n    {\n      test: /\\.css$/,\n      loaders: 'style-loader!css-loader'\n    }\n  ]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79wefejxqausytr6re8o1v113\">当 Webpack 遇到以下 \n<code>import</code> 语句时， 它会应用 \n<code>test</code> 正则表达式模式。</p>\n<code-example language=\"typescript\">\n  import { AppComponent } from './app.component.ts';\n\n  import 'uiframework/dist/uiframework.css';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j55q2sumaq631lhcovczpsqz\">当模式与文件名匹配时，Webpack 会使用关联的加载器处理该文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tld4oi92zwct2rw8uox5w5oi\">第一个 \n<code>import</code> 文件与 \n<code>.ts</code> 模式匹配，因此 Webpack 会使用 \n<code>awesome-typescript-loader</code> 处理它。 导入的文件与第二个模式不匹配，因此其加载器被忽略。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0ezoy1unz70o0sxhixf4p011\">第二个 \n<code>import</code> 与第二个 \n<code>.css</code> 模式匹配，你为此模式\n<em>链接</em>了两个加载器，它们由 (!) 字符分隔。 Webpack 会\n<em>从右到左</em>应用链接的加载器。因此，它会先应用 \n<code>css</code> 加载器来扁平化 CSS \n<code>@import</code> 和 \n<code>url(...)</code> 语句。 然后，它会应用 \n<code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 加载器，将 css 附加到页面上的 \n<code>&lt;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;</code> 元素中。</p>\n<a id=\"plugins\"></a>\n<h3 id=\"plugins\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b30mbc20qxqf8p3ruq8sdxxjb\"><i class=\"material-icons\">link</i>插件</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ah998ed47d6j9oqjoza8enq1m\">Webpack 具有一个具有明确定义阶段的构建管道。 使用插件（例如 \n<code>uglify</code> 最小化插件）来利用该管道：</p>\n<code-example language=\"javascript\">\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin()\n  ]\n\n</code-example>\n<a id=\"configure-webpack\"></a>\n<h2 id=\"configuring-webpack\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aygaulu7qlgg1vxmtxqmz6lb7\"><i class=\"material-icons\">link</i>配置 Webpack</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c2vffuznwckalab1lyvova97\">在简要介绍之后，你就可以为 Angular 应用程序构建自己的 Webpack 配置了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anm1yw39m4hnf9hu95rh6vbxn\">首先设置开发环境。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78ekbix9n57m9o60nku6a5r93\">创建一个新的项目文件夹。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  mkdir angular-webpack\n  cd    angular-webpack\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9upq4gx1k9g8aur6x1dct1fic\">添加以下文件：</p>\n<code-tabs>\n\n  <code-pane title=\"package.json\" path=\"webpack/package.webpack.json\">\n{\n  \"name\": \"angular2-webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A webpack starter for Angular\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --progress --port 8080\",\n    \"test\": \"karma start\",\n    \"build\": \"rimraf dist &amp;&amp; webpack --config config/webpack.prod.js --progress --profile --bail\"\n  },\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@angular/common\": \"~4.2.0\",\n    \"@angular/compiler\": \"~4.2.0\",\n    \"@angular/core\": \"~4.2.0\",\n    \"@angular/forms\": \"~4.2.0\",\n    \"@angular/http\": \"~4.2.0\",\n    \"@angular/platform-browser\": \"~4.2.0\",\n    \"@angular/platform-browser-dynamic\": \"~4.2.0\",\n    \"@angular/router\": \"~4.2.0\",\n    \"core-js\": \"^2.4.1\",\n    \"rxjs\": \"5.0.1\",\n    \"zone.js\": \"^0.8.4\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^6.0.45\",\n    \"@types/jasmine\": \"2.5.36\",\n    \"angular2-template-loader\": \"^0.6.0\",\n    \"awesome-typescript-loader\": \"^3.0.4\",\n    \"css-loader\": \"^0.26.1\",\n    \"extract-text-webpack-plugin\": \"2.0.0-beta.5\",\n    \"file-loader\": \"^0.9.0\",\n    \"html-loader\": \"^0.4.3\",\n    \"html-webpack-plugin\": \"^2.16.1\",\n    \"jasmine-core\": \"^2.4.1\",\n    \"karma\": \"^1.2.0\",\n    \"karma-chrome-launcher\": \"^2.0.0\",\n    \"karma-jasmine\": \"^1.0.2\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-webpack\": \"^2.0.1\",\n    \"null-loader\": \"^0.1.1\",\n    \"raw-loader\": \"^0.5.1\",\n    \"rimraf\": \"^2.5.2\",\n    \"style-loader\": \"^0.13.1\",\n    \"typescript\": \"~2.3.1\",\n    \"webpack\": \"2.2.1\",\n    \"webpack-dev-server\": \"2.4.1\",\n    \"webpack-merge\": \"^3.0.0\"\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/tsconfig.json\" path=\"webpack/src/tsconfig.1.json\">\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [\"es2015\", \"dom\"],\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true\n  }\n}\n\n</code-pane>\n\n  <code-pane title=\"webpack.config.js\" path=\"webpack/webpack.config.js\">\nmodule.exports = require('./config/webpack.dev.js');\n\n</code-pane>\n\n  <code-pane title=\"karma.conf.js\" path=\"webpack/karma.webpack.conf.js\">\nmodule.exports = require('./config/karma.conf.js');\n\n\n</code-pane>\n\n  <code-pane title=\"config/helpers.js\" path=\"webpack/config/helpers.js\">\nvar path = require('path');\n\nvar _root = path.resolve(__dirname, '..');\n\nfunction root(args) {\n  args = Array.prototype.slice.call(arguments, 0);\n  return path.join.apply(path, [_root].concat(args));\n}\n\nexports.root = root;\n\n</code-pane>\n\n</code-tabs>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9chc2zvz9ocrd0iuwa9i4nkji\">其中许多文件应该来自其他 Angular 文档指南， 尤其是\n<a href=\"guide/typescript-configuration\">Typescript 配置</a>和 \n<a href=\"guide/npm-packages\">npm 包</a>指南。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6x4qn37k0jzvzs18yctw3hfy2\">Webpack、插件和加载器也作为包安装。 它们列在更新后的 \n<code>packages.json</code> 中。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpzoxz4nojero8iudiubfy23j\">打开一个终端窗口并安装 npm 包。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm install\n\n</code-example>\n<a id=\"polyfills\"></a>\n<h3 id=\"polyfills\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"94rv7a89hq733vz1np8fg9i2b\"><i class=\"material-icons\">link</i>腻子脚本（polyfill）</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"x8vi96ya03196e87jl072svk\">正如\n<a href=\"guide/browser-support\">浏览器支持</a>指南中所述，你需要腻子脚本才能在大多数浏览器中运行 Angular 应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d486fzkxrcv9534md3ii1qrx\">腻子脚本应该与应用程序和供应商捆绑包分开捆绑。 在 \n<code>src/</code> 文件夹中添加一个类似于此的 \n<code>polyfills.ts</code> 文件。</p>\n<code-example path=\"webpack/src/polyfills.ts\" title=\"src/polyfills.ts\" linenums=\"false\">\nimport 'core-js/es6';\nimport 'core-js/es7/reflect';\nrequire('zone.js/dist/zone');\n\nif (process.env.ENV === 'production') {\n  // Production\n} else {\n  // Development and test\n  Error['stackTraceLimit'] = Infinity;\n  require('zone.js/dist/long-stack-trace-zone');\n}\n\n\n</code-example>\n<div class=\"callout is-critical\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jxo7xc7u0ddnpda3lvr0wbnp\">加载腻子脚本</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mmioyur070jiwnbn8lgnixhs\">在 \n<code>polyfills.ts</code> 中，在其他 ES6 和元数据 shim 之后立即加载 \n<code>zone.js</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40neuzzxljnqm0jqjd45zypob\">由于此捆绑包文件将首先加载，因此 \n<code>polyfills.ts</code> 也是配置生产或开发环境的浏览器环境的理想位置。</p>\n<a id=\"common-configuration\"></a>\n<h3 id=\"common-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wgd7ou7qr0ppb2iutqp246y6\"><i class=\"material-icons\">link</i>通用配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9htz7nkiyltlob61683t7by0s\">开发人员通常为开发、生产和测试环境设置单独的配置。 这三种配置都有很多共同的配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj89h2ffcz6v4y1ju4xm0c6gg\">将通用配置收集到一个名为 \n<code>webpack.common.js</code> 的文件中。</p>\n<code-example path=\"webpack/config/webpack.common.js\" title=\"config/webpack.common.js\" linenums=\"false\">\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar helpers = require('./helpers');\n\nmodule.exports = {\n  entry: {\n    'polyfills': './src/polyfills.ts',\n    'vendor': './src/vendor.ts',\n    'app': './src/main.ts'\n  },\n\n  resolve: {\n    extensions: ['.ts', '.js']\n  },\n\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        loaders: [\n          {\n            loader: 'awesome-typescript-loader',\n            options: { configFileName: helpers.root('src', 'tsconfig.json') }\n          } , 'angular2-template-loader'\n        ]\n      },\n      {\n        test: /\\.html$/,\n        loader: 'html-loader'\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n        loader: 'file-loader?name=assets/[name].[hash].[ext]'\n      },\n      {\n        test: /\\.css$/,\n        exclude: helpers.root('src', 'app'),\n        loader: ExtractTextPlugin.extract({ fallbackLoader: 'style-loader', loader: 'css-loader?sourceMap' })\n      },\n      {\n        test: /\\.css$/,\n        include: helpers.root('src', 'app'),\n        loader: 'raw-loader'\n      }\n    ]\n  },\n\n  plugins: [\n    // Workaround for angular/angular#11580\n    new webpack.ContextReplacementPlugin(\n      // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\n      /angular(\\\\|\\/)core(\\\\|\\/)@angular/,\n      helpers.root('./src'), // location of your src\n      {} // <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> map of your routes\n    ),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: ['app', 'vendor', 'polyfills']\n    }),\n\n    new HtmlWebpackPlugin({\n      template: 'src/index.html'\n    })\n  ]\n};\n\n</code-example>\n<a id=\"inside-webpack-commonjs\"></a>\n<h3 id=\"inside-webpackcommonjs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9f76rbl9olp2j7f2obmp5tb56\"><i class=\"material-icons\">link</i>在\n<em>webpack.common.js</em> 中</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31ajt5qx7kssewwfysv96iltz\">Webpack 是一个基于 NodeJS 的工具，它从 JavaScript commonjs 模块文件中读取配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36dsuk2dwpl5875e3ndwxi1xi\">配置使用 \n<code>require</code> 语句导入依赖项， 并将几个对象作为 \n<code>module.exports</code> 对象的属性导出。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sc6qrbh9n41wiozjx8gb6g7\"><a href=\"guide/webpack#common-entries\"><code>entry</code></a>—定义捆绑包的入口点文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"561obx29r5ws0ksyjra88dvle\"><a href=\"guide/webpack#common-resolves\"><code>resolve</code></a>—当文件名缺少扩展名时如何解析文件名。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dql8p53k6mnj1tgoahq28jmp1\"><a href=\"guide/webpack#common-rules\"><code>module.rules</code></a>— \n<code>module</code> 是一个包含 \n<code>rules</code> 的对象，用于决定如何加载文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iy6itrer8h3rd5hxpulgvp39\"><a href=\"guide/webpack#common-plugins\"><code>plugins</code></a>—创建插件的实例。</li>\n</ul>\n<a id=\"common-entries\"></a>\n<h4 id=\"entry\"><em>entry</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mrzqiy4ngc427q63jaz4ylyz\">第一个导出是 \n<code>entry</code> 对象：</p>\n<code-example path=\"webpack/config/webpack.common.js\" region=\"entries\" title=\"config/webpack.common.js\" linenums=\"false\">\nentry: {\n  'polyfills': './src/polyfills.ts',\n  'vendor': './src/vendor.ts',\n  'app': './src/main.ts'\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el3fuj4dz86lst35maz29uppo\">此 \n<code>entry</code> 对象定义了三个捆绑包：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ksgue735m23ld5vvg2gicb9h\"><code>polyfills</code>—在大多数现代浏览器中运行 Angular 应用程序所需的腻子脚本。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sp385vfy5tu7r0l4o5bjlsnm\"><code>vendor</code> — 第三方依赖，例如 Angular、lodash 和 bootstrap.css。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bchd07oritfek50to8sfzadf\"><code>app</code> — 应用代码。</li>\n</ul>\n<a id=\"common-resolves\"></a>\n<h4 id=\"resolve-extension-less-imports\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3uq1ljvshyjhx1w2an5impqdl\"><i class=\"material-icons\">link</i><em>求解</em> 无扩展名导入</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tnmlfmx5si6e8ox9x3o11aj4\">应用将 \n<code>import</code> 数十甚至数百个 JavaScript 和 TypeScript 文件。 你可以像此示例一样，使用显式扩展名编写 \n<code>import</code> 语句：</p>\n<code-example language=\"typescript\">\n  import { AppComponent } from './app.component.ts';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p0esz56wuxo94qrrbkxhise1\">但大多数 \n<code>import</code> 语句根本不提及扩展名。 告诉 Webpack 通过查找具有 \n<code>.ts</code> 扩展名或 \n<code>.js</code> 扩展名（用于常规 JavaScript 文件和预编译的 TypeScript 文件）的匹配文件来求解无扩展名文件请求。</p>\n<code-example path=\"webpack/config/webpack.common.js\" region=\"resolve\" title=\"config/webpack.common.js\" linenums=\"false\">\nresolve: {\n  extensions: ['.ts', '.js']\n},\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5frc77c3spchy9w6uei59unm9\">如果 Webpack 应该为样式和 HTML 求解无扩展名文件， 请将 \n<code>.css</code> 和 \n<code>.html</code> 添加到列表中。</p>\n</div>\n<a id=\"common-rules\"></a>\n<h4 id=\"modulerules\"><em>module.rules</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b89kh5eig35v4s7hcjxbag1ax\">规则告诉 Webpack 为每个文件或模块使用哪些加载器：</p>\n<code-example path=\"webpack/config/webpack.common.js\" region=\"loaders\" title=\"config/webpack.common.js\" linenums=\"false\">\nmodule: {\n  rules: [\n    {\n      test: /\\.ts$/,\n      loaders: [\n        {\n          loader: 'awesome-typescript-loader',\n          options: { configFileName: helpers.root('src', 'tsconfig.json') }\n        } , 'angular2-template-loader'\n      ]\n    },\n    {\n      test: /\\.html$/,\n      loader: 'html-loader'\n    },\n    {\n      test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n      loader: 'file-loader?name=assets/[name].[hash].[ext]'\n    },\n    {\n      test: /\\.css$/,\n      exclude: helpers.root('src', 'app'),\n      loader: ExtractTextPlugin.extract({ fallbackLoader: 'style-loader', loader: 'css-loader?sourceMap' })\n    },\n    {\n      test: /\\.css$/,\n      include: helpers.root('src', 'app'),\n      loader: 'raw-loader'\n    }\n  ]\n},\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jp4egstfk7b61n0xg19gpgjv\"><code>awesome-typescript-loader</code> — 一个加载器，用于根据 \n<code>tsconfig.json</code> 文件将 TypeScript 代码转换为 ES5。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1usnpjlrrrey5bl2kjz74lkxp\"><code>angular2-template-loader</code> — 加载 Angular 组件的模板和样式。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qfkce1hqup46yc39g0p6epiw\"><code>html-loader</code> — 用于组件模板。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mhb3jzyn2p8nbhrngwev2nch\">images/fonts — 图像和字体也会被打包。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eim80yrxu17g2bgq0go5el53j\">CSS — 第一个模式匹配应用范围的样式；第二个模式处理组件范围的样式（在组件的 \n<code>styleUrls</code> 元数据属性中指定的样式）。</li>\n</ul>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2dhj318e4vfzxmgz5d767c5x\">第一个模式用于应用范围的样式。它排除了 \n<code>src/app</code> 目录（组件范围的样式所在位置）中的 \n<code>.css</code> 文件。\n<code>ExtractTextPlugin</code>（在下面描述）将 \n<code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 和 \n<code>css</code> 加载器应用于这些文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekuphyum0m3w2s69vmbgx4k0\">第二个模式过滤组件范围的样式，并通过 \n<code>raw-loader</code> 将它们加载为字符串，这就是 Angular 预期对在 \n<code>styleUrls</code> 元数据属性中指定的样式所做的操作。</p>\n</div>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ufwepceegu7vf5gsmu00nzac\">可以使用数组表示法将多个加载器链接起来。</p>\n</div>\n<a id=\"common-plugins\"></a>\n<h4 id=\"plugins-1\"><em>plugins</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oy3114iur0v3q4j9ucqyyli9\">最后，创建三个插件的实例：</p>\n<code-example path=\"webpack/config/webpack.common.js\" region=\"plugins\" title=\"config/webpack.common.js\" linenums=\"false\">\nplugins: [\n  // Workaround for angular/angular#11580\n  new webpack.ContextReplacementPlugin(\n    // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\n    /angular(\\\\|\\/)core(\\\\|\\/)@angular/,\n    helpers.root('./src'), // location of your src\n    {} // <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> map of your routes\n  ),\n\n  new webpack.optimize.CommonsChunkPlugin({\n    name: ['app', 'vendor', 'polyfills']\n  }),\n\n  new HtmlWebpackPlugin({\n    template: 'src/index.html'\n  })\n]\n\n</code-example>\n<a id=\"commons-chunk-plugin\"></a>\n<h4 id=\"commonschunkplugin\"><em>CommonsChunkPlugin</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfo2bb4zr0k59mldkgzu6wo0t\"><code>app.js</code> 捆绑包应该只包含应用代码。所有供应商代码都属于 \n<code>vendor.js</code> 捆绑包。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3uy2gugzzr4r1fj20cjwib0f\">当然，应用代码会导入供应商代码。 Webpack 本身不够智能，无法将供应商代码从 \n<code>app.js</code> 捆绑包中剔除。 \n<code>CommonsChunkPlugin</code> 承担了这项工作。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1iwofsklo1cn5fhh8xhwn5uqi\"><code>CommonsChunkPlugin</code> 识别三个\n<em>块</em>之间的层次结构：\n<code>app</code> -&gt; \n<code>vendor</code> -&gt; \n<code>polyfills</code>。 在 Webpack 发现 \n<code>app</code> 与 \n<code>vendor</code> 共享依赖项时，它会将这些依赖项从 \n<code>app</code> 中移除。 如果 \n<code>polyfills</code> 与 \n<code>vendor</code> 共享依赖项，它也会将 \n<code>polyfills</code> 从 \n<code>vendor</code> 中移除，但它们没有共享依赖项。</p>\n</div>\n<a id=\"html-webpack-plugin\"></a>\n<h4 id=\"htmlwebpackplugin\"><em>HtmlWebpackPlugin</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"smkbuek54sxks7k2qhwccgh7\">Webpack 生成许多 js 和 CSS 文件。 你可以\n<em>手动</em>将它们插入 \n<code>index.html</code> 中。这将很繁琐且容易出错。 Webpack 可以使用 \n<code>HtmlWebpackPlugin</code> 为你注入这些脚本和链接。</p>\n<a id=\"environment-configuration\"></a>\n<h3 id=\"environment-specific-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg6dr2oi10bqiw32izs6x8o83\"><i class=\"material-icons\">link</i>环境特定配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8a79aetrim00a5jmigtwv5qqa\"><code>webpack.common.js</code> 配置文件完成了大部分繁重工作。 创建单独的环境特定配置文件，这些文件通过将目标环境的特殊性合并到 \n<code>webpack.common</code> 中来构建它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"866i7lcrjnn72l4nk7shfyna8\">这些文件往往很短且简单。</p>\n<a id=\"development-configuration\"></a>\n<h3 id=\"development-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90ceqlf2lpmkkaptiz5pt882j\"><i class=\"material-icons\">link</i>开发配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13d5by6a2kwu6k4ym9m0w07ym\">这是 \n<code>webpack.dev.js</code> 开发配置文件。</p>\n<code-example path=\"webpack/config/webpack.dev.js\" title=\"config/webpack.dev.js\" linenums=\"false\">\nvar webpackMerge = require('webpack-merge');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar commonConfig = require('./webpack.common.js');\nvar helpers = require('./helpers');\n\nmodule.exports = webpackMerge(commonConfig, {\n  devtool: 'cheap-module-eval-source-map',\n\n  output: {\n    path: helpers.root('dist'),\n    publicPath: '/',\n    filename: '[name].js',\n    chunkFilename: '[id].chunk.js'\n  },\n\n  plugins: [\n    new ExtractTextPlugin('[name].css')\n  ],\n\n  devServer: {\n    historyApiFallback: true,\n    stats: 'minimal'\n  }\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85vkhihelhq2ckognh8zctzey\">开发构建依赖于 Webpack 开发服务器，该服务器在文件底部附近配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cne07js1shx7gdbtgv7mqeqf7\">虽然你告诉 Webpack 将输出捆绑包放在 \n<code>dist</code> 文件夹中， 但开发服务器将所有捆绑包保存在内存中；它不会将它们写入磁盘。 你不会在 \n<code>dist</code> 文件夹中找到任何文件，至少不会找到从\n<em>此开发构建</em>生成的任何文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qw6yncllxyy2zhenxt5q3liw\"><code>HtmlWebpackPlugin</code>（在 \n<code>webpack.common.js</code> 中添加）使用 \n<code>publicPath</code> 和 \n<code>filename</code> 设置将适当的 \n<code>&lt;script&gt;</code> 和 \n<code>&lt;link&gt;</code> 标签生成到 \n<code>index.html</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgg9wm2kdhk40x362xakwois2\">默认情况下，CSS 样式被埋藏在 Javascript 捆绑包中。\n<code>ExtractTextPlugin</code> 将它们提取到 外部 \n<code>.css</code> 文件中，\n<code>HtmlWebpackPlugin</code> 将这些文件作为 \n<code>&lt;link&gt;</code> 标签写入 \n<code>index.html</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7os6ois324hqyt9ruj0lsb0zv\">有关此文件中的这些和其他配置选项的详细信息，请参阅 \n<a href=\"https://webpack.github.io/docs/\">Webpack 文档</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e644e8s0tadzm3rp6a0936rxz\">获取本指南末尾的应用代码，然后尝试：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n\n</code-example>\n<a id=\"production-configuration\"></a>\n<h3 id=\"production-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ljgvi6n2tqtuykngs0qmxbp8\"><i class=\"material-icons\">link</i>生产配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45gpztvvto5ovo2lses2kpdq2\"><em>生产</em> 构建的配置类似于\n<em>开发</em>配置，但有一些关键的更改。</p>\n<code-example path=\"webpack/config/webpack.prod.js\" title=\"config/webpack.prod.js\" linenums=\"false\">\nvar webpack = require('webpack');\nvar webpackMerge = require('webpack-merge');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar commonConfig = require('./webpack.common.js');\nvar helpers = require('./helpers');\n\nconst ENV = process.env.NODE_ENV = process.env.ENV = 'production';\n\nmodule.exports = webpackMerge(commonConfig, {\n  devtool: 'source-map',\n\n  output: {\n    path: helpers.root('dist'),\n    publicPath: '/',\n    filename: '[name].[hash].js',\n    chunkFilename: '[id].[hash].chunk.js'\n  },\n\n  plugins: [\n    new webpack.NoEmitOnErrorsPlugin(),\n    new webpack.optimize.UglifyJsPlugin({ // https://github.com/angular/angular/issues/10618\n      mangle: {\n        keep_fnames: true\n      }\n    }),\n    new ExtractTextPlugin('[name].[hash].css'),\n    new webpack.DefinePlugin({\n      'process.env': {\n        'ENV': JSON.stringify(ENV)\n      }\n    }),\n    new webpack.LoaderOptionsPlugin({\n      htmlLoader: {\n        minimize: false // workaround for ng2\n      }\n    })\n  ]\n});\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7a5im3479gzyse67lpborvrgp\">你将把应用及其依赖项部署到真正的生产服务器。 你不会部署仅在开发中需要的工件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqclpnw0e602kr4qjixbrhvbt\">将生产输出捆绑包文件放在 \n<code>dist</code> 文件夹中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az6tww7q7vyg6h81qbyd87oxp\">Webpack 使用带缓存清除哈希的文件名生成文件。 由于 \n<code>HtmlWebpackPlugin</code>，当哈希发生变化时，你无需更新 \n<code>index.html</code> 文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7y7lym2idwr5b0phvehs6elj3\">还有一些额外的插件：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"720a3s5rh1ko6surfzc2z9035\">*\n<code>NoEmitOnErrorsPlugin</code> — 如果出现错误，则停止构建。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e70m4x86s06t36cs4l0drxzg6\">*\n<code>UglifyJsPlugin</code> — 最小化捆绑包。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53h9m4b1fua5e18txsgff7ulr\">*\n<code>ExtractTextPlugin</code> — 将嵌入式 css 提取为外部文件，并在文件名中添加缓存清除哈希。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b200lg2kbassn3smzurnttw6c\">*\n<code>DefinePlugin</code> — 用于定义可以在应用中引用的环境变量。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7zfawkzrxpdvbesme5xcj4x1o\">*\n<code>LoaderOptionsPlugins</code> — 用于覆盖某些加载器的选项。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3cblb7qgeqpurz9fpix3uy1ja\">由于 \n<code>DefinePlugin</code> 和在顶部定义的 \n<code>ENV</code> 变量，你可以像这样启用 Angular 生产模式：</p>\n<code-example path=\"webpack/src/main.ts\" region=\"enable-prod\" title=\"src/main.ts\" linenums=\"false\">\nif (process.env.ENV === 'production') {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e644e8s0tadzm3rp6a0936rxz\">获取本指南末尾的应用代码，然后尝试：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm run build\n\n</code-example>\n<a id=\"test-configuration\"></a>\n<h3 id=\"test-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30cxmdxzypoy8htqbj4gw6buc\"><i class=\"material-icons\">link</i>测试配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8h29zivbrejwvk10yldfgk6u4\">你不需要太多配置来运行单元测试。 你不需要为开发和生产构建声明的加载器和插件。 你可能不需要为单元测试加载和处理应用范围的样式文件，这样做会降低速度； 你将对这些 CSS 文件使用 \n<code>null</code> 加载器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alfaqsuo00uqde1fyb8xlnooj\">你可以将测试配置合并到 \n<code>webpack.common</code> 配置中，并覆盖你不想要或不需要的部分。 但从一个全新的配置开始可能更简单。</p>\n<code-example path=\"webpack/config/webpack.test.js\" title=\"config/webpack.test.js\" linenums=\"false\">\nvar webpack = require('webpack');\nvar helpers = require('./helpers');\n\nmodule.exports = {\n  devtool: 'inline-source-map',\n\n  resolve: {\n    extensions: ['.ts', '.js']\n  },\n\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        loaders: [\n          {\n            loader: 'awesome-typescript-loader',\n            options: { configFileName: helpers.root('src', 'tsconfig.json') }\n          } , 'angular2-template-loader'\n        ]\n      },\n      {\n        test: /\\.html$/,\n        loader: 'html-loader'\n\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n        loader: 'null-loader'\n      },\n      {\n        test: /\\.css$/,\n        exclude: helpers.root('src', 'app'),\n        loader: 'null-loader'\n      },\n      {\n        test: /\\.css$/,\n        include: helpers.root('src', 'app'),\n        loader: 'raw-loader'\n      }\n    ]\n  },\n\n  plugins: [\n    new webpack.ContextReplacementPlugin(\n      // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\n      /angular(\\\\|\\/)core(\\\\|\\/)@angular/,\n      helpers.root('./src'), // location of your src\n      {} // <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> map of your routes\n    )\n  ]\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emys64ncdt53t5wmk9pzgpidx\">重新配置 \n<a href=\"https://karma-runner.github.io/1.0/index.html\">Karma</a> 以使用 Webpack 运行测试：</p>\n<code-example path=\"webpack/config/karma.conf.js\" title=\"config/karma.conf.js\" linenums=\"false\">\nvar webpackConfig = require('./webpack.test');\n\nmodule.exports = function (config) {\n  var _config = {\n    basePath: '',\n\n    frameworks: ['jasmine'],\n\n    files: [\n      {<a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: './config/karma-test-shim.js', watched: false}\n    ],\n\n    preprocessors: {\n      './config/karma-test-shim.js': ['webpack', 'sourcemap']\n    },\n\n    webpack: webpackConfig,\n\n    webpackMiddleware: {\n      stats: 'errors-only'\n    },\n\n    webpackServer: {\n      noInfo: true\n    },\n\n    reporters: ['progress', 'kjhtml'],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: false,\n    browsers: ['Chrome'],\n    singleRun: true\n  };\n\n  config.set(_config);\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"be8auxiqdxbajibptqdmmtit5\">你不需要预编译 TypeScript；Webpack 会动态地、在内存中转译 TypeScript 文件，并将生成的 JS 直接提供给 Karma。 磁盘上没有临时文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vhea0ohaptr2gkm8bopx13fq\"><code>karma-test-shim</code> 会告诉 Karma 预加载哪些文件， 并为 Angular 测试框架提供每个应用都期望预加载的提供者的测试版本。</p>\n<code-example path=\"webpack/config/karma-test-shim.js\" title=\"config/karma-test-shim.js\" linenums=\"false\">\nError.stackTraceLimit = Infinity;\n\nrequire('core-js/es6');\nrequire('core-js/es7/reflect');\n\nrequire('zone.js/dist/zone');\nrequire('zone.js/dist/long-stack-trace-zone');\nrequire('zone.js/dist/proxy');\nrequire('zone.js/dist/sync-test');\nrequire('zone.js/dist/jasmine-patch');\nrequire('zone.js/dist/async-test');\nrequire('zone.js/dist/fake-async-test');\n\nvar appContext = require.context('../src', true, /\\.spec\\.ts/);\n\nappContext.keys().forEach(appContext);\n\nvar testing = require('@angular/core/testing');\nvar <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a> = require('@angular/platform-browser-dynamic/testing');\n\ntesting.TestBed.initTestEnvironment(browser.BrowserDynamicTestingModule, browser.platformBrowserDynamicTesting());\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpup9vzz8tgnbea74y9s5urwk\">注意，你\n<em>没有</em>显式加载应用程序代码。 你告诉 Webpack 查找并加载测试文件（以 \n<code>.spec.ts</code> 结尾的文件）。 每个 spec 文件都会导入它测试的所有（且仅限于）应用程序源代码。 Webpack 只加载\n<em>这些</em>特定的应用程序文件，并忽略你没有测试的其他文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e644e8s0tadzm3rp6a0936rxz\">获取本指南末尾的应用代码，然后尝试：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm test\n\n</code-example>\n<a id=\"try\"></a>\n<h2 id=\"trying-it-out\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5megojndw2r4tgecobmtnt581\"><i class=\"material-icons\">link</i>试一试</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pczabkonah1x462dno6u0kjf\">这是一个小型应用程序的源代码，它使用本指南中介绍的 Webpack 技术进行捆绑。</p>\n<code-tabs>\n\n  <code-pane title=\"src/index.html\" path=\"webpack/src/index.html\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;base href=\"/\"&gt;\n    &lt;title&gt;Angular With Webpack&lt;/title&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;my-app&gt;Loading...&lt;/my-app&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n</code-pane>\n\n  <code-pane title=\"src/main.ts\" path=\"webpack/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\n\nimport { AppModule } from './app/app.module';\n\nif (process.env.ENV === 'production') {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n</code-pane>\n\n  <code-pane title=\"src/assets/css/styles.css\" path=\"webpack/src/assets/css/styles.css\">\nbody {\n    background: #0147A7;\n    color: #fff;\n}\n\n</code-pane>\n\n</code-tabs>\n<code-tabs>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"webpack/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport '../assets/css/styles.css';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.html\" path=\"webpack/src/app/app.component.html\">\n&lt;main&gt;\n  &lt;h1&gt;Hello from Angular App with Webpack&lt;/h1&gt;\n\n  &lt;img src=\"../assets/images/angular.png\"&gt;\n&lt;/main&gt;\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.css\" path=\"webpack/src/app/app.component.css\">\nmain {\n  padding: 1em;\n  font-family: Arial, Helvetica, sans-serif;\n  text-align: center;\n  margin-top: 50px;\n  display: block;\n}\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.spec.ts\" path=\"webpack/src/app/app.component.spec.ts\">\nimport { <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\n\nimport { AppComponent } from './app.component';\n\ndescribe('App', () =&gt; {\n  beforeEach(() =&gt; {\n    TestBed.configureTestingModule({ declarations: [AppComponent]});\n  });\n\n  it ('should work', () =&gt; {\n    let fixture = TestBed.createComponent(AppComponent);\n    expect(fixture.componentInstance instanceof AppComponent).toBe(true, 'should create AppComponent');\n  });\n});\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"webpack/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abfjn2kkapjr6kmxw6irtq28o\"><code>app.component.html</code> 显示了这个可下载的 Angular 徽标 \n<a href=\"assets/images/logos/angular/angular.png\"> <img src=\"assets/images/logos/angular/angular.png\" height=\"40px\" title=\"download Angular logo\"></a>。 在项目的 \n<code>assets</code> 文件夹下创建一个名为 \n<code>images</code> 的文件夹，然后右键单击（在 Mac 上为 Cmd+单击） 该图像并将其下载到该文件夹。</p>\n<a id=\"bundle-ts\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7i8knm5mk91bubc04ydifrz9a\">以下是定义 \n<code>polyfills</code> 和 \n<code>vendor</code> 捆绑包的 TypeScript 入口点文件。</p>\n<code-tabs>\n\n  <code-pane title=\"src/polyfills.ts\" path=\"webpack/src/polyfills.ts\">\nimport 'core-js/es6';\nimport 'core-js/es7/reflect';\nrequire('zone.js/dist/zone');\n\nif (process.env.ENV === 'production') {\n  // Production\n} else {\n  // Development and test\n  Error['stackTraceLimit'] = Infinity;\n  require('zone.js/dist/long-stack-trace-zone');\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/vendor.ts\" path=\"webpack/src/vendor.ts\">\n// Angular\nimport '@angular/platform-browser';\nimport '@angular/platform-browser-dynamic';\nimport '@angular/core';\nimport '@angular/common';\nimport '@angular/http';\nimport '@angular/router';\n\n// RxJS\nimport 'rxjs';\n\n// Other vendors for example jQuery, Lodash or Bootstrap\n// You can import js, ts, css, sass, ...\n\n</code-pane>\n\n</code-tabs>\n<a id=\"highlights\"></a>\n<h3 class=\"no-toc\" id=\"highlights\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c60si770qcxrklnl7unnut74m\"><i class=\"material-icons\">link</i>重点</h3>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0tqr1k3kpg9ndgjgnbwni57m\"><code>index.html</code> 中没有 \n<code>&lt;script&gt;</code> 或 \n<code>&lt;link&gt;</code> 标签。 \n<code>HtmlWebpackPlugin</code> 会在运行时动态插入它们。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ocjwcl4jl1vct2x5ms2xghe7\"><code>app.component.ts</code> 中的 \n<code>AppComponent</code> 使用简单的 \n<code>import</code> 语句导入应用程序范围的 css。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7l7957v83qx0eb70z2sejytma\"><code>AppComponent</code> 本身有自己的 html 模板和 css 文件。Webpack 使用对 \n<code>require()</code> 的调用加载它们。 Webpack 也将这些组件范围的文件存储在 \n<code>app.js</code> 捆绑包中。 你在源代码中看不到这些调用； 它们是由 \n<code>angular2-template-loader</code> 插件在幕后添加的。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5uwygdeqxnvhugzk2taugqzv\"><code>vendor.ts</code> 由驱动 \n<code>vendor.js</code> 捆绑包的供应商依赖项 \n<code>import</code> 语句组成。 应用程序也会导入这些模块；如果 \n<code>CommonsChunkPlugin</code> 没有检测到重叠并将其从 \n<code>app.js</code> 中删除，它们将在 \n<code>app.js</code> 捆绑包中重复。 \n<a id=\"conclusion\"></a></p>\n</li>\n</ul>\n<h2 id=\"conclusion\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lqfbaztqpzx6egw25gt59ob7\"><i class=\"material-icons\">link</i>结论</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewynnsqpyh4rr60hdiai73dkc\">你已经学习了足够的 Webpack 来配置小型 Angular 应用程序的开发、测试和生产构建。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91wscfd5g7m6s7bebhtxazoqe\"><em>你总是可以做更多</em>。在网上搜索专家建议，扩展你的 Webpack 知识。</p>\n<p><a href=\"guide/webpack#top\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n\n</div>\n<!-- links to this doc:\n - guide/typescript-configuration\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/animations/style\n - api/core/Component\n - api/core/NgModule\n - api/core/enableProdMode\n - api/core/testing/TestBed\n - api/forms/PatternValidator\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - assets/images/logos/angular/angular.png\n - generated/zips/webpack/webpack.zip\n - guide/browser-support\n - guide/npm-packages\n - guide/typescript-configuration\n - guide/webpack#common-configuration\n - guide/webpack#common-entries\n - guide/webpack#common-plugins\n - guide/webpack#common-resolves\n - guide/webpack#common-rules\n - guide/webpack#commons-chunk-plugin\n - guide/webpack#commonschunkplugin\n - guide/webpack#conclusion\n - guide/webpack#configuring-webpack\n - guide/webpack#development-configuration\n - guide/webpack#entries-and-outputs\n - guide/webpack#entry\n - guide/webpack#environment-specific-configuration\n - guide/webpack#highlights\n - guide/webpack#htmlwebpackplugin\n - guide/webpack#inside-webpackcommonjs\n - guide/webpack#loaders\n - guide/webpack#modulerules\n - guide/webpack#multiple-bundles\n - guide/webpack#plugins\n - guide/webpack#plugins-1\n - guide/webpack#polyfills\n - guide/webpack#production-configuration\n - guide/webpack#resolve-extension-less-imports\n - guide/webpack#test-configuration\n - guide/webpack#top\n - guide/webpack#trying-it-out\n - guide/webpack#webpack-an-introduction\n - guide/webpack#what-is-webpack\n - https://karma-runner.github.io/1.0/index.html\n - https://webpack.github.io/\n - https://webpack.github.io/docs/\n-->"
}