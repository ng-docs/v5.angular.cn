{
  "id": "guide/http",
  "title": "HttpClient",
  "contents": "\n<div class=\"content\">\n<h1 id=\"httpclient\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#httpclient\"><i class=\"material-icons\">link</i></a>HttpClient</h1>\n<p>Most front-end applications communicate with backend services over the HTTP protocol. Modern browsers support two different APIs for making HTTP requests: the <code>XMLHttpRequest</code> interface and the <code>fetch()</code> API.</p>\n<p>The <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> in <code>@angular/common/http</code> offers a simplified client HTTP API for Angular applications\nthat rests on the <code>XMLHttpRequest</code> interface exposed by browsers.\nAdditional benefits of <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> include testability features, typed request and response objects, request and response interception, <code>Observable</code> apis, and streamlined error handling.</p>\n<p>You can run the <live-example></live-example> that accompanies this guide.</p>\n<div class=\"alert is-helpful\">\n<p>The sample app does not require a data server.\nIt relies on the\n<a href=\"https://github.com/angular/in-memory-web-api/blob/master/README.md\">Angular <em>in-memory-web-api</em></a>,\nwhich replaces the <em>HttpClient</em> module's <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code>.\nThe replacement service simulates the behavior of a REST-like backend.</p>\n<p>Look at the <code>AppModule</code> <em>imports</em> to see how it is configured.</p>\n</div>\n<h2 id=\"setup\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#setup\"><i class=\"material-icons\">link</i></a>Setup</h2>\n<p>Before you can use the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, you need to import the Angular <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>.\nMost apps do so in the root <code>AppModule</code>.</p>\n<code-example path=\"http/src/app/app.module.ts\" region=\"sketch\" title=\"app/app.module.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }         from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }    from '@angular/platform-browser';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/http';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    // import <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> after BrowserModule.\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {}\n\n</code-example>\n<p>Having imported <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> into the <code>AppModule</code>, you can inject the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>\ninto an application class as shown in the following <code>ConfigService</code> example.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"proto\" title=\"app/config/config.service.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/http';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class ConfigService {\n  constructor(private http: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n}\n\n</code-example>\n<h2 id=\"getting-json-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#getting-json-data\"><i class=\"material-icons\">link</i></a>Getting JSON data</h2>\n<p>Applications often request JSON data from the server.\nFor example, the app might need a configuration file on the server, <code>config.json</code>,\nthat specifies resource URLs.</p>\n<code-example path=\"http/src/assets/config.json\" title=\"assets/config.json\" linenums=\"false\">\n{\n  \"heroesUrl\": \"api/heroes\",\n  \"textfile\": \"assets/textfile.txt\"\n}\n\n\n</code-example>\n<p>The <code>ConfigService</code> fetches this file with a <code>get()</code> method on <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_1\" title=\"app/config/config.service.ts (getConfig v.1)\" linenums=\"false\">\nconfigUrl = 'assets/config.json';\n\ngetConfig() {\n  return this.http.get(this.configUrl);\n}\n\n</code-example>\n<p>A component, such as <code>ConfigComponent</code>, injects the <code>ConfigService</code> and calls\nthe <code>getConfig</code> service method.</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v1\" title=\"app/config/config.component.ts (showConfig v.1)\" linenums=\"false\">\nshowConfig() {\n  this.configService.getConfig()\n    .subscribe(data => this.config = {\n        heroesUrl: data['heroesUrl'],\n        textfile:  data['textfile']\n    });\n}\n\n</code-example>\n<p>Because the service method returns an <code>Observable</code> of configuration data,\nthe component <strong>subscribes</strong> to the method's return value.\nThe subscription callback copies the data fields into the component's <code>config</code> object,\nwhich is data-bound in the component template for display.</p>\n<h3 id=\"why-write-a-service\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#why-write-a-service\"><i class=\"material-icons\">link</i></a>Why write a service</h3>\n<p>This example is so simple that it is tempting to write the <code><a href=\"api/http/Http#get\" class=\"code-anchor\">Http.get()</a></code> inside the\ncomponent itself and skip the service.</p>\n<p>However, data access rarely stays this simple.\nYou typically post-process the data, add error handling, and maybe some retry logic to\ncope with intermittent connectivity.</p>\n<p>The component quickly becomes cluttered with data access minutia.\nThe component becomes harder to understand, harder to test, and the data access logic can't be re-used or standardized.</p>\n<p>That's why it is a best practice to separate presentation of data from data access by\nencapsulating data access in a separate service and delegating to that service in\nthe component, even in simple cases like this one.</p>\n<h3 id=\"type-checking-the-response\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#type-checking-the-response\"><i class=\"material-icons\">link</i></a>Type-checking the response</h3>\n<p>The subscribe callback above requires bracket notation to extract the data values.</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v1_callback\" linenums=\"false\">\n.subscribe(data => this.config = {\n    heroesUrl: data['heroesUrl'],\n    textfile:  data['textfile']\n});\n\n</code-example>\n<p>You can't write <code>data.heroesUrl</code> because TypeScript correctly complains that the <code>data</code> object from the service does not have a <code>heroesUrl</code> property. </p>\n<p>The <code><a href=\"\" class=\"code-anchor\">HttpClient.get()</a></code> method parsed the JSON server response into the anonymous <code>Object</code> type. It doesn't know what the shape of that object is.</p>\n<p>You can tell <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> the type of the response to make consuming the output easier and more obvious.</p>\n<p>First, define an interface with the correct shape:</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"config-interface\" linenums=\"false\">\nexport interface Config {\n  heroesUrl: string;\n  textfile: string;\n}\n\n</code-example>\n<p>Then, specify that interface as the <code><a href=\"\" class=\"code-anchor\">HttpClient.get()</a></code> call's type parameter in the service:</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_2\" title=\"app/config/config.service.ts (getConfig v.2)\" linenums=\"false\">\ngetConfig() {\n  // now returns an Observable of Config\n  return this.http.get&#x3C;Config>(this.configUrl);\n}\n\n</code-example>\n<p>The callback in the updated component method receives a typed data object, which is\neasier and safer to consume:</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v2\" title=\"app/config/config.component.ts (showConfig v.2)\" linenums=\"false\">\nconfig: Config;\n\nshowConfig() {\n  this.configService.getConfig()\n    // clone the data object, using its known Config shape\n    .subscribe(data => this.config = { ...data });\n}\n\n</code-example>\n<h3 id=\"reading-the-full-response\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#reading-the-full-response\"><i class=\"material-icons\">link</i></a>Reading the full response</h3>\n<p>The response body doesn't return all the data you may need. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow. </p>\n<p>Tell <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> that you want the full response with the <code>observe</code> option:</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfigResponse\" linenums=\"false\">\ngetConfigResponse(): Observable&#x3C;<a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;Config>> {\n  return this.http.get&#x3C;Config>(\n    this.configUrl, { observe: 'response' });\n}\n\n</code-example>\n<p>Now <code><a href=\"\" class=\"code-anchor\">HttpClient.get()</a></code> returns an <code>Observable</code> of typed <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> rather than just the JSON data.</p>\n<p>The component's <code>showConfigResponse()</code> method displays the response headers as well as the configuration:</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"showConfigResponse\" title=\"app/config/config.component.ts (showConfigResponse)\" linenums=\"false\">\nshowConfigResponse() {\n  this.configService.getConfigResponse()\n    // resp is of type `<a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;Config>`\n    .subscribe(resp => {\n      // display its headers\n      const keys = resp.headers.keys();\n      this.headers = keys.map(key =>\n        `${key}: ${resp.headers.get(key)}`);\n\n      // access the body directly, which is typed as `Config`.\n      this.config = { ... resp.body };\n    });\n}\n\n</code-example>\n<p>As you can see, the response object has a <code>body</code> property of the correct type.</p>\n<h2 id=\"error-handling\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#error-handling\"><i class=\"material-icons\">link</i></a>Error handling</h2>\n<p>What happens if the request fails on the server, or if a poor network connection prevents it from even reaching the server? <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> will return an <em>error</em> object instead of a successful response.</p>\n<p>You <em>could</em> handle in the component by adding a second callback to the <code>.subscribe()</code>:</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v3\" title=\"app/config/config.component.ts (showConfig v.3 with error handling)\" linenums=\"false\">\nshowConfig() {\n  this.configService.getConfig()\n    .subscribe(\n      data => this.config = { ...data }, // success path\n      error => this.error = error // error path\n    );\n}\n\n</code-example>\n<p>It's certainly a good idea to give the user some kind of feedback when data access fails.\nBut displaying the raw error object returned by <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> is far from the best way to do it.</p>\n<a id=\"error-details\"></a>\n<h3 id=\"getting-error-details\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#getting-error-details\"><i class=\"material-icons\">link</i></a>Getting error details</h3>\n<p>Detecting that an error occurred is one thing.\nInterpreting that error and composing a user-friendly response is a bit more involved.</p>\n<p>Two types of errors can occur. The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error <em>responses</em>.</p>\n<p>Or something could go wrong on the client-side such as a network error that prevents the request from completing successfully or an exception thrown in an RxJS operator. These errors produce JavaScript <code>ErrorEvent</code> objects.</p>\n<p>The <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> captures both kinds of errors in its <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code> and you can inspect that response to figure out what really happened.</p>\n<p>Error inspection, interpretation, and resolution is something you want to do in the <em>service</em>,\nnot in the <em>component</em>.  </p>\n<p>You might first devise an error handler like this one:</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"handleError\" title=\"app/config/config.service.ts (handleError)\" linenums=\"false\">\nprivate handleError(error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) {\n  if (error.error instanceof ErrorEvent) {\n    // A client-side or network error occurred. Handle it accordingly.\n    console.error('An error occurred:', error.error.message);\n  } else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong,\n    console.error(\n      `Backend returned code ${error.status}, ` +\n      `body was: ${error.error}`);\n  }\n  // return an ErrorObservable with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> user-facing error message\n  return new ErrorObservable(\n    'Something bad happened; please try again later.');\n};\n\n</code-example>\n<p>Notice that this handler returns an RxJS <a href=\"guide/http#rxjs\"><code>ErrorObservable</code></a> with a user-friendly error message.\nConsumers of the service expect service methods to return an <code>Observable</code> of some kind,\neven a \"bad\" one.</p>\n<p>Now you take the <code>Observables</code> returned by the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods\nand <em>pipe them through</em> to the error handler.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_3\" title=\"app/config/config.service.ts (getConfig v.3 with error handler)\" linenums=\"false\">\ngetConfig() {\n  return this.http.get&#x3C;Config>(this.configUrl)\n    .pipe(\n      catchError(this.handleError)\n    );\n}\n\n</code-example>\n<h3 id=\"retry\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#retry\"><i class=\"material-icons\">link</i></a><code>retry()</code></h3>\n<p>Sometimes the error is transient and will go away automatically if you try again.\nFor example, network interruptions are common in mobile scenarios, and trying again\nmay produce a successful result.</p>\n<p>The <a href=\"guide/http#rxjs\">RxJS library</a> offers several <em>retry</em> operators that are worth exploring.\nThe simplest is called <code>retry()</code> and it automatically re-subscribes to a failed <code>Observable</code> a specified number of times. <em>Re-subscribing</em> to the result of an <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method call has the effect of reissuing the HTTP request.</p>\n<p><em>Pipe</em> it onto the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method result just before the error handler.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig\" title=\"app/config/config.service.ts (getConfig with retry)\" linenums=\"false\">\ngetConfig() {\n  return this.http.get&#x3C;Config>(this.configUrl)\n    .pipe(\n      retry(3), // retry <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n    );\n}\n\n</code-example>\n<a id=\"rxjs\"></a>\n<h2 id=\"observables-and-operators\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#observables-and-operators\"><i class=\"material-icons\">link</i></a>Observables and operators</h2>\n<p>The previous sections of this guide referred to RxJS <code>Observables</code> and operators such as <code>catchError</code> and <code>retry</code>.\nYou will encounter more RxJS artifacts as you continue below.</p>\n<p><a href=\"http://reactivex.io/rxjs/\">RxJS</a> is a library for composing asynchronous and callback-based code\nin a <em>functional, reactive style</em>.\nMany Angular APIs, including <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, produce and consume RxJS <code>Observables</code>. </p>\n<p>RxJS itself is out-of-scope for this guide. You will find many learning resources on the web.\nWhile you can get by with a minimum of RxJS knowledge, you'll want to grow your RxJS skills over time in order to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> effectively.</p>\n<p>If you're following along with these code snippets, note that you must import the RxJS observable and operator symbols that appear in those snippets. These <code>ConfigService</code> imports are typical.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"rxjs-imports\" title=\"app/config/config.service.ts (RxJS imports)\" linenums=\"false\">\nimport { Observable } from 'rxjs/Observable';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { catchError, retry } from 'rxjs/operators';\n\n</code-example>\n<h2 id=\"requesting-non-json-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#requesting-non-json-data\"><i class=\"material-icons\">link</i></a>Requesting non-JSON data</h2>\n<p>Not all APIs return JSON data. In this next example,\na <code>DownloaderService</code> method reads a text file from the server\nand logs the file contents, before returning those contents to the caller\nas an <code>Observable&#x3C;string></code>. </p>\n<code-example path=\"http/src/app/downloader/downloader.service.ts\" region=\"getTextFile\" title=\"app/downloader/downloader.service.ts (getTextFile)\" linenums=\"false\">\ngetTextFile(filename: string) {\n  // The Observable returned by get() is of type Observable&#x3C;string>\n  // because <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> text response was specified.\n  // There's no need to pass <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> &#x3C;string> type parameter to get().\n  return this.http.get(filename, {responseType: 'text'})\n    .pipe(\n      tap( // Log the result or error\n        data => this.log(filename, data),\n        error => this.logError(filename, error)\n      )\n    );\n}\n\n</code-example>\n<p><code><a href=\"\" class=\"code-anchor\">HttpClient.get()</a></code> returns a string rather than the default JSON because of the <code>responseType</code> option.</p>\n<p>The RxJS <code>tap</code> operator (as in \"wiretap\") lets the code inspect good and error values passing through the observable without disturbing them. </p>\n<p>A <code>download()</code> method in the <code>DownloaderComponent</code> initiates the request by subscribing to the service method.</p>\n<code-example path=\"http/src/app/downloader/downloader.component.ts\" region=\"download\" title=\"app/downloader/downloader.component.ts (download)\" linenums=\"false\">\ndownload() {\n  this.downloaderService.getTextFile('assets/textfile.txt')\n    .subscribe(results => this.contents = results);\n}\n\n</code-example>\n<h2 id=\"sending-data-to-the-server\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#sending-data-to-the-server\"><i class=\"material-icons\">link</i></a>Sending data to the server</h2>\n<p>In addition to fetching data from the server, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> supports mutating requests, that is, sending data to the server with other HTTP methods such as PUT, POST, and DELETE.</p>\n<p>The sample app for this guide includes a simplified version of the \"Tour of Heroes\" example\nthat fetches heroes and enables users to add, delete, and update them.</p>\n<p>The following sections excerpt methods of the sample's <code>HeroesService</code>.</p>\n<h3 id=\"adding-headers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#adding-headers\"><i class=\"material-icons\">link</i></a>Adding headers</h3>\n<p>Many servers require extra headers for save operations.\nFor example, they may require a \"Content-Type\" header to explicitly declare\nthe MIME type of the request body.\nOr perhaps the server requires an authorization token.</p>\n<p>The <code>HeroesService</code> defines such headers in an <code>httpOptions</code> object that will be passed\nto every <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> save method.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"http-options\" title=\"app/heroes/heroes.service.ts (httpOptions)\" linenums=\"false\">\nimport { <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/http';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({\n    'Content-Type':  'application/json',\n    'Authorization': 'my-auth-token'\n  })\n};\n\n</code-example>\n<h3 id=\"making-a-post-request\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-post-request\"><i class=\"material-icons\">link</i></a>Making a POST request</h3>\n<p>Apps often POST data to a server. They POST when submitting a form.\nIn the following example, the <code>HeroService</code> posts when adding a hero to the database.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"addHero\" title=\"app/heroes/heroes.service.ts (addHero)\" linenums=\"false\">\n/** POST: add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new hero to the database */\naddHero (hero: Hero): Observable&#x3C;Hero> {\n  return this.http.post&#x3C;Hero>(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('addHero', hero))\n    );\n}\n\n</code-example>\n<p>The <code><a href=\"\" class=\"code-anchor\">HttpClient.post()</a></code> method is similar to <code>get()</code> in that it has a type parameter\n(you're expecting the server to return the new hero)\nand it takes a resource URL.</p>\n<p>It takes two more parameters:</p>\n<ol>\n<li><code>hero</code> - the data to POST in the body of the request.</li>\n<li><code>httpOptions</code> - the method options which, in this case, <a href=\"guide/http#adding-headers\">specify required headers</a>.</li>\n</ol>\n<p>Of course it catches errors in much the same manner <a href=\"guide/http#error-details\">described above</a>.\nIt also <em>taps</em> the returned observable in order to log the successful POST.</p>\n<p>The <code>HeroesComponent</code> initiates the actual POST operation by subscribing to\nthe <code>Observable</code> returned by this service method.</p>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"add-hero-subscribe\" title=\"app/heroes/heroes.component.ts (addHero)\" linenums=\"false\">\nthis.heroesService.addHero(newHero)\n  .subscribe(hero => this.heroes.push(hero));\n\n</code-example>\n<p>When the server responds successfully with the newly added hero, the component adds\nthat hero to the displayed <code>heroes</code> list.</p>\n<h3 id=\"making-a-delete-request\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-delete-request\"><i class=\"material-icons\">link</i></a>Making a DELETE request</h3>\n<p>This application deletes a hero with the <code>HttpClient.delete</code> method by passing the hero's id\nin the request URL.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"deleteHero\" title=\"app/heroes/heroes.service.ts (deleteHero)\" linenums=\"false\">\n/** DELETE: delete the hero from the server */\ndeleteHero (id: number): Observable&#x3C;{}> {\n  const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n  return this.http.delete(url, httpOptions)\n    .pipe(\n      catchError(this.handleError('deleteHero'))\n    );\n}\n\n</code-example>\n<p>The <code>HeroesComponent</code> initiates the actual DELETE operation by subscribing to\nthe <code>Observable</code> returned by this service method.</p>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-subscribe\" title=\"app/heroes/heroes.component.ts (deleteHero)\" linenums=\"false\">\nthis.heroesService.deleteHero(hero.id).subscribe();\n\n</code-example>\n<div class=\"alert is-important\">\n<p>You must call <em>subscribe()</em> or nothing happens!</p>\n</div>\n<p>The component isn't expecting a result from the delete operation and\nsubscribes without a callback.\nThe bare <code>.subscribe()</code> <em>seems</em> pointless.</p>\n<p>In fact, it is essential.\nMerely calling <code>HeroService.deleteHero()</code> <strong>does not initiate the DELETE request.</strong></p>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-no-subscribe\" linenums=\"false\">\n// oops ... subscribe() is missing so nothing happens\nthis.heroesService.deleteHero(hero.id);\n\n</code-example>\n<a id=\"always-subscribe\"></a>\n<h3 id=\"always-subscribe\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#always-subscribe\"><i class=\"material-icons\">link</i></a>Always <em>subscribe</em>!</h3>\n<p>An <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method does not begin its HTTP request until you call <code>subscribe()</code> on the observable returned by that method. This is true for <em>all</em> <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <em>methods</em>.</p>\n<div class=\"alert is-helpful\">\n<p>The <a href=\"api/common/AsyncPipe\"><code>AsyncPipe</code></a> subscribes (and unsubscribes) for you automatically.</p>\n</div>\n<p>All observables returned from <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods are <em>cold</em> by design.\nExecution of the HTTP request is <em>deferred</em>, allowing you to extend the\nobservable with additional operations such as  <code>tap</code> and <code>catchError</code>\nbefore anything actually happens.</p>\n<p>Calling <code>subscribe(...)</code> triggers execution of the observable and causes\n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to compose and send the HTTP request to the server.</p>\n<p>You can think of these observables as <em>blueprints</em> for actual HTTP requests.</p>\n<div class=\"alert is-helpful\">\n<p>In fact, each <code>subscribe()</code> initiates a separate, independent execution of the observable.\nSubscribing twice results in two HTTP requests.</p>\n<code-example language=\"javascript\">\nconst req = http.get&#x3C;Heroes>('/api/heroes');\n// 0 requests made - .subscribe() not called.\nreq.subscribe();\n// 1 request made.\nreq.subscribe();\n// 2 requests made.\n</code-example>\n</div>\n<h3 id=\"making-a-put-request\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#making-a-put-request\"><i class=\"material-icons\">link</i></a>Making a PUT request</h3>\n<p>An app will send a PUT request to completely replace a resource with updated data.\nThe following <code>HeroService</code> example is just like the POST example.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"updateHero\" title=\"app/heroes/heroes.service.ts (updateHero)\" linenums=\"false\">\n/** PUT: update the hero on the server. Returns the updated hero upon success. */\nupdateHero (hero: Hero): Observable&#x3C;Hero> {\n  return this.http.put&#x3C;Hero>(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('updateHero', hero))\n    );\n}\n\n</code-example>\n<p>For the reasons <a href=\"guide/http#always-subscribe\">explained above</a>, the caller (<code>HeroesComponent.update()</code> in this case) must <code>subscribe()</code> to the observable returned from the <code><a href=\"\" class=\"code-anchor\">HttpClient.put()</a></code>\nin order to initiate the request.</p>\n<h2 id=\"advanced-usage\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#advanced-usage\"><i class=\"material-icons\">link</i></a>Advanced usage</h2>\n<p>The above sections detail how to use the basic HTTP functionality in <code>@angular/common/http</code>, but sometimes you need to do more than make simple requests and get data back.</p>\n<h3 id=\"configuring-the-request\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#configuring-the-request\"><i class=\"material-icons\">link</i></a>Configuring the request</h3>\n<p>Other aspects of an outgoing request can be configured via the options object\npassed as the last argument to the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method.</p>\n<p>You <a href=\"guide/http#adding-headers\">saw earlier</a> that the <code>HeroService</code> sets the default headers by\npassing an options object (<code>httpOptions</code>) to its save methods.\nYou can do more.</p>\n<h4 id=\"update-headers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#update-headers\"><i class=\"material-icons\">link</i></a>Update headers</h4>\n<p>You can't directly modify the existing headers within the previous options\nobject because instances of the <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> class are immutable.</p>\n<p>Use the <code>set()</code> method instead.\nIt returns a clone of the current instance with the new changes applied.</p>\n<p>Here's how you might update the authorization header (after the old token expired)\nbefore making the next request.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"update-headers\" linenums=\"false\">\nhttpOptions.headers =\n  httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n</code-example>\n<h4 id=\"url-parameters\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#url-parameters\"><i class=\"material-icons\">link</i></a>URL Parameters</h4>\n<p>Adding URL search parameters works a similar way.\nHere is a <code>searchHeroes</code> method that queries for heroes whose names contain the search term.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"searchHeroes\" linenums=\"false\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&#x3C;Hero[]> {\n  term = term.trim();\n\n  // Add safe, URL encoded search parameter if there is <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> search term\n  const options = term ?\n   { params: new <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>().set('name', term) } : {};\n\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl, options)\n    .pipe(\n      catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n    );\n}\n\n</code-example>\n<p>If there is a search term, the code constructs an options object with an HTML URL encoded search parameter. If the term were \"foo\", the GET request URL would be <code>api/heroes/?name=foo</code>.</p>\n<p>The <code>HttpParms</code> are immutable so you'll have to use the <code>set()</code> method to update the options.</p>\n<h3 id=\"debouncing-requests\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#debouncing-requests\"><i class=\"material-icons\">link</i></a>Debouncing requests</h3>\n<p>The sample includes an <em>npm package search</em> feature.</p>\n<p>When the user enters a name in a search-box, the <code>PackageSearchComponent</code> sends\na search request for a package with that name to the NPM web api.</p>\n<p>Here's a pertinent excerpt from the template:</p>\n<code-example path=\"http/src/app/package-search/package-search.component.html\" region=\"search\" title=\"app/package-search/package-search.component.html (search)\">\n&#x3C;input (keyup)=\"search($event.target.value)\" id=\"name\" placeholder=\"Search\"/>\n\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let package of packages$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\">\n    &#x3C;b>{{package.name}} v.{{package.version}}&#x3C;/b> -\n    &#x3C;i>{{package.description}}&#x3C;/i>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>The <code>(keyup)</code> event binding sends every keystroke to the component's <code>search()</code> method.</p>\n<p>Sending a request for every keystroke could be expensive.\nIt's better to wait until the user stops typing and then send a request.\nThat's easy to implement with RxJS operators, as shown in this excerpt.</p>\n<code-example path=\"http/src/app/package-search/package-search.component.ts\" region=\"debounce\" title=\"app/package-search/package-search.component.ts (excerpt))\">\nwithRefresh = false;\npackages$: Observable&#x3C;NpmPackageInfo[]>;\nprivate searchText$ = new Subject&#x3C;string>();\n\nsearch(packageName: string) {\n  this.searchText$.next(packageName);\n}\n\nngOnInit() {\n  this.packages$ = this.searchText$.pipe(\n    debounceTime(500),\n    distinctUntilChanged(),\n    switchMap(packageName =>\n      this.searchService.search(packageName, this.withRefresh))\n  );\n}\n\nconstructor(private searchService: PackageSearchService) { }\n\n\n</code-example>\n<p>The <code>searchText$</code> is the sequence of search-box values coming from the user.\nIt's defined as an RxJS <code>Subject</code>, which means it is an <code>Observable</code>\nthat can also produce values for itself by calling <code>next(value)</code>,\nas happens in the <code>search()</code> method.</p>\n<p>Rather than forward every <code>searchText</code> value directly to the injected <code>PackageSearchService</code>,\nthe code in <code>ngOnInit()</code> <em>pipes</em> search values through three operators:</p>\n<ol>\n<li><code>debounceTime(500)</code> - wait for the user to stop typing (1/2 second in this case).</li>\n<li><code>distinctUntilChanged()</code> - wait until the search text changes.</li>\n<li><code>switchMap()</code> - send the search request to the service.</li>\n</ol>\n<p>The code sets <code>packages$</code> to this re-composed <code>Observable</code> of search results.\nThe template subscribes to <code>packages$</code> with the <a href=\"api/common/AsyncPipe\">AsyncPipe</a>\nand displays search results as they arrive.</p>\n<p>A search value reaches the service only if it's a new value and the user has stopped typing.</p>\n<div class=\"l-sub-section\">\n<p>The <code>withRefresh</code> option is explained <a href=\"guide/http#cache-refresh\">below</a>.</p>\n</div>\n<h4 id=\"switchmap\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#switchmap\"><i class=\"material-icons\">link</i></a><em>switchMap()</em></h4>\n<p>The <code>switchMap()</code> operator has three important characteristics.</p>\n<ol>\n<li>\n<p>It takes a function argument that returns an <code>Observable</code>.\n<code>PackageSearchService.search</code> returns an <code>Observable</code>, as other data service methods do.</p>\n</li>\n<li>\n<p>If a previous search request is still <em>in-flight</em> (as when the connection is poor),\nit cancels that request and sends a new one.</p>\n</li>\n<li>\n<p>It returns service responses in their original request order, even if the\nserver returns them out of order. </p>\n</li>\n</ol>\n<div class=\"l-sub-section\">\n<p>If you think you'll reuse this debouncing logic,\nconsider moving it to a utility function or into the <code>PackageSearchService</code> itself.</p>\n</div>\n<h3 id=\"intercepting-requests-and-responses\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#intercepting-requests-and-responses\"><i class=\"material-icons\">link</i></a>Intercepting requests and responses</h3>\n<p><em>HTTP Interception</em> is a major feature of <code>@angular/common/http</code>.\nWith interception, you declare <em>interceptors</em> that inspect and transform HTTP requests from your application to the server.\nThe same interceptors may also inspect and transform the server's responses on their way back to the application.\nMultiple interceptors form a <em>forward-and-backward</em> chain of request/response handlers.</p>\n<p>Interceptors can perform a variety of  <em>implicit</em> tasks, from authentication to logging, in a routine, standard way, for every HTTP request/response. </p>\n<p>Without interception, developers would have to implement these tasks <em>explicitly</em>\nfor each <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method call.</p>\n<h4 id=\"write-an-interceptor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#write-an-interceptor\"><i class=\"material-icons\">link</i></a>Write an interceptor</h4>\n<p>To implement an interceptor, declare a class that implements the <code>intercept()</code> method of the <code><a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a></code> interface.</p>\n<p> Here is a do-nothing <em>noop</em> interceptor that simply passes the request through without touching it:\n<code-example path=\"http/src/app/http-interceptors/noop-interceptor.ts\" title=\"app/http-interceptors/noop-interceptor.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport {\n  <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>, <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a>, <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>, <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\n\n/** Pass untouched request through to the next request handler. */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class NoopInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>):\n    Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n    return next.handle(req);\n  }\n}\n\n\n</code-example></p>\n<p>The <code>intercept</code> method transforms a request into an <code>Observable</code> that eventually returns the HTTP response.\nIn this sense, each interceptor is fully capable of handling the request entirely by itself.</p>\n<p>Most interceptors inspect the request on the way in and forward the (perhaps altered) request to the <code>handle()</code> method of the <code>next</code> object which implements the <a href=\"api/common/http/HttpHandler\"><code>HttpHandler</code></a> interface.</p>\n<code-example language=\"javascript\">\nexport abstract class <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a> {\n  abstract handle(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>>;\n}\n</code-example>\n<p>Like <code>intercept()</code>, the <code>handle()</code> method transforms an HTTP request into an <code>Observable</code> of <a href=\"guide/http#httpevents\"><code>HttpEvents</code></a> which ultimately include the server's response. The <code>intercept()</code> method could inspect that observable and alter it before returning it to the caller.</p>\n<p>This <em>no-op</em> interceptor simply calls <code>next.handle()</code> with the original request and returns the observable without doing a thing.</p>\n<h4 id=\"the-next-object\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#the-next-object\"><i class=\"material-icons\">link</i></a>The <em>next</em> object</h4>\n<p>The <code>next</code> object represents the next interceptor in the chain of interceptors.\nThe final <code>next</code> in the chain is the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> backend handler that sends the request to the server and receives the server's response.</p>\n<p>Most interceptors call <code>next.handle()</code> so that the request flows through to the next interceptor and, eventually, the backend handler.\nAn interceptor <em>could</em> skip calling <code>next.handle()</code>, short-circuit the chain, and <a href=\"guide/http#caching\">return its own <code>Observable</code></a> with an artificial server response. </p>\n<p>This is a common middleware pattern found in frameworks such as Express.js.</p>\n<h4 id=\"provide-the-interceptor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#provide-the-interceptor\"><i class=\"material-icons\">link</i></a>Provide the interceptor</h4>\n<p>The <code>NoopInterceptor</code> is a service managed by Angular's <a href=\"guide/dependency-injection\">dependency injection (DI)</a> system.\nLike other services, you must provide the interceptor class before the app can use it.</p>\n<p>Because interceptors are (optional) dependencies of the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service,\nyou must provide them in the same injector (or a parent of the injector) that provides <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.\nInterceptors provided <em>after</em> DI creates the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> are ignored.</p>\n<p>This app provides <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> in the app's root injector, as a side-effect of importing the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> in <code>AppModule</code>.\nYou should provide interceptors in <code>AppModule</code> as well.</p>\n<p>After importing the <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> injection token from <code>@angular/common/http</code>,\nwrite the <code>NoopInterceptor</code> provider like this:</p>\n<code-example path=\"http/src/app/http-interceptors/index.ts\" region=\"noop-provider\" linenums=\"false\">\n{ provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: NoopInterceptor, multi: true },\n\n</code-example>\n<p>Note the <code>multi: true</code> option.\nThis required setting tells Angular that <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> is a token for a <em>multiprovider</em>\nthat injects an array of values, rather than a single value.</p>\n<p>You <em>could</em> add this provider directly to the providers array of the <code>AppModule</code>.\nHowever, it's rather verbose and there's a good chance that\nyou'll create more interceptors and provide them in the same way.\nYou must also pay <a href=\"guide/http#interceptor-order\">close attention to the order</a>\nin which you provide these interceptors.</p>\n<p>Consider creating a \"barrel\" file that gathers all the interceptor providers into an <code>httpInterceptorProviders</code> array, starting with this first one, the <code>NoopInterceptor</code>.</p>\n<code-example path=\"http/src/app/http-interceptors/index.ts\" region=\"interceptor-providers\" title=\"app/http-interceptors/index.ts\" linenums=\"false\">\n/* \"Barrel\" of <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> Interceptors */\nimport { <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a> } from '@angular/common/http';\n\nimport { NoopInterceptor } from './noop-interceptor';\n\n/** <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> interceptor providers in outside-in order */\nexport const httpInterceptorProviders = [\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: NoopInterceptor, multi: true },\n];\n\n</code-example>\n<p>Then import and add it to the <code>AppModule</code> <em>providers array</em> like this:</p>\n<code-example path=\"http/src/app/app.module.ts\" region=\"interceptor-providers\" title=\"app/app.module.ts (interceptor providers)\" linenums=\"false\">\nproviders: [\n  httpInterceptorProviders\n],\n\n</code-example>\n<p>As you create new interceptors, add them to the <code>httpInterceptorProviders</code> array and\nyou won't have to revisit the <code>AppModule</code>.</p>\n<div class=\"l-sub-section\">\n<p>There are many more interceptors in the complete sample code.</p>\n</div>\n<h4 id=\"interceptor-order\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#interceptor-order\"><i class=\"material-icons\">link</i></a>Interceptor order</h4>\n<p>Angular applies interceptors in the order that you provide them.\nIf you provide interceptors <em>A</em>, then <em>B</em>, then <em>C</em>,  requests will flow in <em>A->B->C</em> and\nresponses will flow out <em>C->B->A</em>.</p>\n<p>You cannot change the order or remove interceptors later.\nIf you need to enable and disable an interceptor dynamically, you'll have to build that capability into the interceptor itself.</p>\n<h4 id=\"httpevents\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#httpevents\"><i class=\"material-icons\">link</i></a><em>HttpEvents</em></h4>\n<p>You may have expected the <code>intercept()</code> and <code>handle()</code> methods to return observables of <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;any></code> as most <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods do.</p>\n<p>Instead they return observables of <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any></code>.</p>\n<p>That's because interceptors work at a lower level than those <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods. A single HTTP request can generate multiple <em>events</em>, including upload and download progress events. The <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> class itself is actually an event, whose type is <code>HttpEventType.HttpResponseEvent</code>.</p>\n<p>Many interceptors are only concerned with the outgoing request and simply return the event stream from <code>next.handle()</code> without modifying it.</p>\n<p>But interceptors that examine and modify the response from <code>next.handle()</code>\nwill see all of these events.\nYour interceptor should return <em>every event untouched</em> unless it has a <em>compelling reason to do otherwise</em>.</p>\n<h4 id=\"immutability\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#immutability\"><i class=\"material-icons\">link</i></a>Immutability</h4>\n<p>Although interceptors are capable of mutating requests and responses,\nthe <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> and <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> instance properties are <code>readonly</code>,\nrendering them largely immutable.</p>\n<p>They are immutable for a good reason: the app may retry a request several times before it succeeds, which means that the interceptor chain may re-process the same request multiple times.\nIf an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</p>\n<p>TypeScript will prevent you from setting <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> readonly properties. </p>\n<code-example language=\"javascript\">\n  // Typescript disallows the following assignment because req.url is readonly\n  req.url = req.url.replace('http://', 'https://');\n</code-example>\n<p>To alter the request, clone it first and modify the clone before passing it to <code>next.handle()</code>.\nYou can clone and modify the request in a single step as in this example.</p>\n<code-example path=\"http/src/app/http-interceptors/ensure-https-interceptor.ts\" region=\"excerpt\" title=\"app/http-interceptors/ensure-https-interceptor.ts (excerpt)\" linenums=\"false\">\n// clone request and replace 'http://' with 'https://' at the same time\nconst secureReq = req.clone({\n  url: req.url.replace('http://', 'https://')\n});\n// send the cloned, \"secure\" request to the next handler.\nreturn next.handle(secureReq);\n\n</code-example>\n<p>The <code>clone()</code> method's hash argument allows you to mutate specific properties of the request while copying the others.</p>\n<h5 id=\"the-request-body\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#the-request-body\"><i class=\"material-icons\">link</i></a>The request body</h5>\n<p>The <code>readonly</code> assignment guard can't prevent deep updates and, in particular,\nit can't prevent you from modifying a property of a request body object.</p>\n<code-example language=\"javascript\">\n  req.body.name = req.body.name.trim(); // bad idea!\n</code-example>\n<p>If you must mutate the request body, copy it first, change the copy,\n<code>clone()</code> the request, and set the clone's body with the new body, as in the following example.</p>\n<code-example path=\"http/src/app/http-interceptors/trim-name-interceptor.ts\" region=\"excerpt\" title=\"app/http-interceptors/trim-name-interceptor.ts (excerpt)\" linenums=\"false\">\n// copy the body and trim whitespace from the name property\nconst newBody = { ...body, name: body.name.trim() };\n// clone request and set its body\nconst newReq = req.clone({ body: newBody });\n// send the cloned request to the next handler.\nreturn next.handle(newReq);\n\n</code-example>\n<h5 id=\"clearing-the-request-body\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#clearing-the-request-body\"><i class=\"material-icons\">link</i></a>Clearing the request body</h5>\n<p>Sometimes you need to clear the request body rather than replace it.\nIf you set the cloned request body to <code>undefined</code>, Angular assumes you intend to leave the body as is.\nThat is not what you want.\nIf you set the cloned request body to <code>null</code>, Angular knows you intend to clear the request body.</p>\n<code-example language=\"javascript\">\n  newReq = req.clone({ ... }); // body not mentioned => preserve original body\n  newReq = req.clone({ body: undefined }); // preserve original body\n  newReq = req.clone({ body: null }); // clear the body\n</code-example>\n<h4 id=\"set-default-headers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#set-default-headers\"><i class=\"material-icons\">link</i></a>Set default headers</h4>\n<p>Apps often use an interceptor to set default headers on outgoing requests. </p>\n<p>The sample app has an <code>AuthService</code> that produces an authorization token.\nHere is its <code>AuthInterceptor</code> that injects that service to get the token and\nadds an authorization header with that token to every outgoing request:</p>\n<code-example path=\"http/src/app/http-interceptors/auth-interceptor.ts\" title=\"app/http-interceptors/auth-interceptor.ts\">\nimport { AuthService } from '../auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class AuthInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n\n  constructor(private auth: AuthService) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    // Get the auth token from the service.\n    const authToken = this.auth.getAuthorizationToken();\n\n    // Clone the request and replace the original headers with\n    // cloned headers, updated with the authorization.\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', authToken)\n    });\n\n    // send cloned request with header to the next handler.\n    return next.handle(authReq);\n  }\n}\n\n</code-example>\n<p>The practice of cloning a request to set new headers is so common that\nthere's a <code>setHeaders</code> shortcut for it:</p>\n<code-example path=\"http/src/app/http-interceptors/auth-interceptor.ts\" region=\"set-header-shortcut\">\n// Clone the request and set the new header in one step.\nconst authReq = req.clone({ setHeaders: { Authorization: authToken } });\n\n</code-example>\n<p>An interceptor that alters headers can be used for a number of different operations, including:</p>\n<ul>\n<li>Authentication/authorization</li>\n<li>Caching behavior; for example, <code>If-Modified-Since</code></li>\n<li>XSRF protection</li>\n</ul>\n<h4 id=\"logging\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#logging\"><i class=\"material-icons\">link</i></a>Logging</h4>\n<p>Because interceptors can process the request and response <em>together</em>, they can do things like time and log\nan entire HTTP operation. </p>\n<p>Consider the following <code>LoggingInterceptor</code>, which captures the time of the request,\nthe time of the response, and logs the outcome with the elapsed time\nwith the injected <code>MessageService</code>.</p>\n<code-example path=\"http/src/app/http-interceptors/logging-interceptor.ts\" region=\"excerpt\" title=\"app/http-interceptors/logging-interceptor.ts)\">\nimport { finalize, tap } from 'rxjs/operators';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class LoggingInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  constructor(private messenger: MessageService) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    const started = Date.now();\n    let ok: string;\n\n    // extend server response observable with logging\n    return next.handle(req)\n      .pipe(\n        tap(\n          // Succeeds when there is <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> response; ignore other events\n          event => ok = event instanceof <a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a> ? 'succeeded' : '',\n          // Operation failed; error is an <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>\n          error => ok = 'failed'\n        ),\n        // Log when response observable either completes or errors\n        finalize(() => {\n          const elapsed = Date.now() - started;\n          const msg = `${req.method} \"${req.urlWithParams}\"\n             ${ok} in ${elapsed} ms.`;\n          this.messenger.add(msg);\n        })\n      );\n  }\n}\n\n</code-example>\n<p>The RxJS <code>tap</code> operator captures whether the request succeed or failed.\nThe RxJS <code>finalize</code> operator is called when the response observable either errors or completes (which it must),\nand reports the outcome to the <code>MessageService</code>.</p>\n<p>Neither <code>tap</code> nor <code>finalize</code> touch the values of the observable stream returned to the caller.</p>\n<h4 id=\"caching\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#caching\"><i class=\"material-icons\">link</i></a>Caching</h4>\n<p>Interceptors can handle requests by themselves, without forwarding to <code>next.handle()</code>.</p>\n<p>For example, you might decide to cache certain requests and responses to improve performance.\nYou can delegate caching to an interceptor without disturbing your existing data services. </p>\n<p>The <code>CachingInterceptor</code> demonstrates this approach.</p>\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"v1\" title=\"app/http-interceptors/caching-interceptor.ts)\" linenums=\"false\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CachingInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  constructor(private cache: RequestCache) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    // continue if not cachable.\n    if (!isCachable(req)) { return next.handle(req); }\n\n    const cachedResponse = this.cache.get(req);\n    return cachedResponse ?\n      of(cachedResponse) : sendRequest(req, next, this.cache);\n  }\n}\n\n</code-example>\n<p>The <code>isCachable()</code> function determines if the request is cachable.\nIn this sample, only GET requests to the npm package search api are cachable.</p>\n<p>If the request is not cachable, the interceptor simply forwards the request\nto the next handler in the chain.</p>\n<p>If a cachable request is found in the cache, the interceptor returns an <code>of()</code> <em>observable</em> with\nthe cached response, by-passing the <code>next</code> handler (and all other interceptors downstream).</p>\n<p>If a cachable request is not in cache, the code calls <code>sendRequest</code>.</p>\n<a id=\"send-request\"></a>\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"send-request\">\n/**\n * Get server response observable by sending request to `next()`.\n * Will add the response to the cache on the way out.\n */\nfunction sendRequest(\n  req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>,\n  next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>,\n  cache: RequestCache): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n\n  // No headers allowed in npm search request\n  const noHeaderReq = req.clone({ headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>() });\n\n  return next.handle(noHeaderReq).pipe(\n    tap(event => {\n      // There may be other events besides the response.\n      if (event instanceof <a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>) {\n        cache.put(req, event); // Update the cache.\n      }\n    })\n  );\n}\n\n</code-example>\n<p>The <code>sendRequest</code> function creates a <a href=\"guide/http#immutability\">request clone</a> without headers\nbecause the npm api forbids them.</p>\n<p>It forwards that request to <code>next.handle()</code> which ultimately calls the server and\nreturns the server's response.</p>\n<p>Note how <code>sendRequest</code> <em>intercepts the response</em> on its way back to the application.\nIt <em>pipes</em> the response through the <code>tap()</code> operator,\nwhose callback adds the response to the cache.</p>\n<p>The original response continues untouched back up through the chain of interceptors\nto the application caller. </p>\n<p>Data services, such as <code>PackageSearchService</code>, are unaware that\nsome of their <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> requests actually return cached responses.</p>\n<a id=\"cache-refresh\"></a>\n<h4 id=\"return-a-multi-valued-observable\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#return-a-multi-valued-observable\"><i class=\"material-icons\">link</i></a>Return a multi-valued <em>Observable</em></h4>\n<p>The <code><a href=\"\" class=\"code-anchor\">HttpClient.get()</a></code> method normally returns an <em>observable</em>\nthat either emits the data or an error.\nSome folks describe it as a \"<em>one and done</em>\" observable.</p>\n<p>But an interceptor can change this to an <em>observable</em> that emits more than once.</p>\n<p>A revised version of the <code>CachingInterceptor</code> optionally returns an <em>observable</em> that\nimmediately emits the cached response, sends the request to the npm web api anyway,\nand emits again later with the updated search results.</p>\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"intercept-refresh\">\n// cache-then-refresh\nif (req.headers.get('x-refresh')) {\n  const results$ = sendRequest(req, next, this.cache);\n  return cachedResponse ?\n    results$.pipe( startWith(cachedResponse) ) :\n    results$;\n}\n// cache-or-fetch\nreturn cachedResponse ?\n  of(cachedResponse) : sendRequest(req, next, this.cache);\n\n</code-example>\n<p>The <em>cache-then-refresh</em> option is triggered by the presence of a <strong>custom <code>x-refresh</code> header</strong>.</p>\n<div class=\"l-sub-section\">\n<p>A checkbox on the <code>PackageSearchComponent</code> toggles a <code>withRefresh</code> flag,\nwhich is one of the arguments to <code>PackageSearchService.search()</code>.\nThat <code>search()</code> method creates the custom <code>x-refresh</code> header\nand adds it to the request before calling <code><a href=\"\" class=\"code-anchor\">HttpClient.get()</a></code>.</p>\n</div>\n<p>The revised <code>CachingInterceptor</code> sets up a server request\nwhether there's a cached value or not,\nusing the same <code>sendRequest()</code> method described <a href=\"guide/http#send-request\">above</a>.\nThe <code>results$</code> observable will make the request when subscribed.</p>\n<p>If there's no cached value, the interceptor returns <code>results$</code>.</p>\n<p>If there is a cached value, the code <em>pipes</em> the cached response onto\n<code>results$</code>, producing a recomposed observable that emits twice,\nthe cached response first (and immediately), followed later\nby the response from the server.\nSubscribers see a sequence of <em>two</em> responses.</p>\n<h3 id=\"listening-to-progress-events\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#listening-to-progress-events\"><i class=\"material-icons\">link</i></a>Listening to progress events</h3>\n<p>Sometimes applications transfer large amounts of data and those transfers can take a long time.\nFile uploads are a typical example.\nGive the users a better experience by providing feedback on the progress of such transfers.</p>\n<p>To make a request with progress events enabled, you can create an instance of <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code>\nwith the <code>reportProgress</code> option set true to enable tracking of progress events.</p>\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-request\" title=\"app/uploader/uploader.service.ts (upload request)\">\nconst req = new <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>('POST', '/upload/file', file, {\n  reportProgress: true\n});\n\n</code-example>\n<div class=\"alert is-important\">\n<p>Every progress event triggers change detection, so only turn them on if you truly intend to report progress in the UI.</p>\n</div>\n<p>Next, pass this request object to the <code><a href=\"\" class=\"code-anchor\">HttpClient.request()</a></code> method, which\nreturns an <code>Observable</code> of <code>HttpEvents</code>, the same events processed by interceptors:</p>\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-body\" title=\"app/uploader/uploader.service.ts (upload body)\" linenums=\"false\">\n// The `HttpClient.request` API produces <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> raw event stream\n// which includes start (sent), progress, and response events.\nreturn this.http.request(req).pipe(\n  map(event => this.getEventMessage(event, file)),\n  tap(message => this.showProgress(message)),\n  last(), // return last (completed) message to caller\n  catchError(this.handleError(file))\n);\n\n</code-example>\n<p>The <code>getEventMessage</code> method interprets each type of <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a></code> in the event stream.</p>\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"getEventMessage\" title=\"app/uploader/uploader.service.ts (getEventMessage)\" linenums=\"false\">\n/** Return distinct message for sent, upload progress, &#x26; response events */\nprivate getEventMessage(event: <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>, file: File) {\n  switch (event.type) {\n    case <a href=\"api/common/http/HttpEventType#Sent\" class=\"code-anchor\">HttpEventType.Sent</a>:\n      return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n    case <a href=\"api/common/http/HttpEventType#UploadProgress\" class=\"code-anchor\">HttpEventType.UploadProgress</a>:\n      // Compute and show the % done:\n      const percentDone = Math.round(100 * event.loaded / event.total);\n      return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n    case <a href=\"api/common/http/HttpEventType#Response\" class=\"code-anchor\">HttpEventType.Response</a>:\n      return `File \"${file.name}\" was completely uploaded!`;\n\n    default:\n      return `File \"${file.name}\" surprising upload event: ${event.type}.`;\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The sample app for this guide doesn't have a server that accepts uploaded files.\nThe <code>UploadInterceptor</code> in <code>app/http-interceptors/upload-interceptor.ts</code>\nintercepts and short-circuits upload requests\nby returning an observable of simulated events.</p>\n</div>\n<h2 id=\"security-xsrf-protection\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#security-xsrf-protection\"><i class=\"material-icons\">link</i></a>Security: XSRF Protection</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">Cross-Site Request Forgery (XSRF)</a> is an attack technique by which the attacker can trick an authenticated user into unknowingly executing actions on your website. <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> supports a <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token\">common mechanism</a> used to prevent XSRF attacks. When performing HTTP requests, an interceptor reads a token from a cookie, by default <code>XSRF-TOKEN</code>, and sets it as an HTTP header, <code>X-XSRF-TOKEN</code>. Since only code that runs on your domain could read the cookie, the backend can be certain that the HTTP request came from your client application and not an attacker.</p>\n<p>By default, an interceptor sends this cookie on all mutating requests (POST, etc.)\nto relative URLs but not on GET/HEAD requests or\non requests with an absolute URL.</p>\n<p>To take advantage of this, your server needs to set a token in a JavaScript readable session cookie called <code>XSRF-TOKEN</code> on either the page load or the first GET request. On subsequent requests the server can verify that the cookie matches the <code>X-XSRF-TOKEN</code> HTTP header, and therefore be sure that only code running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server; this prevents the client from making up its own tokens. Set the token to a digest of your site's authentication\ncookie with a salt for added security.</p>\n<p>In order to prevent collisions in environments where multiple Angular apps share the same domain or subdomain, give each application a unique cookie name.</p>\n<div class=\"alert is-important\">\n<p><em>Note that <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> supports only the client half of the XSRF protection scheme.</em>\nYour backend service must be configured to set the cookie for your page, and to verify that\nthe header is present on all eligible requests.\nIf not, Angular's default protection will be ineffective.</p>\n</div>\n<h3 id=\"configuring-custom-cookieheader-names\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#configuring-custom-cookieheader-names\"><i class=\"material-icons\">link</i></a>Configuring custom cookie/header names</h3>\n<p>If your backend service uses different names for the XSRF token cookie or header,\nuse <code><a href=\"api/common/http/HttpClientXsrfModule#withOptions\" class=\"code-anchor\">HttpClientXsrfModule.withOptions()</a></code> to override the defaults.</p>\n<code-example path=\"http/src/app/app.module.ts\" region=\"xsrf\" linenums=\"false\">\nimports: [\n  <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  HttpClientXsrfModule.withOptions({\n    cookieName: 'My-Xsrf-Cookie',\n    headerName: 'My-Xsrf-Header',\n  }),\n],\n\n</code-example>\n<h2 id=\"testing-http-requests\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#testing-http-requests\"><i class=\"material-icons\">link</i></a>Testing HTTP requests</h2>\n<p>Like any external dependency, the HTTP backend needs to be mocked\nso your tests can simulate interaction with a remote server.\nThe <code>@angular/common/http/testing</code> library makes\nsetting up such mocking straightforward.</p>\n<h3 id=\"mocking-philosophy\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#mocking-philosophy\"><i class=\"material-icons\">link</i></a>Mocking philosophy</h3>\n<p>Angular's HTTP testing library is designed for a pattern of testing wherein\nthe the app executes code and makes requests first.</p>\n<p>Then a test expects that certain requests have or have not been made,\nperforms assertions against those requests,\nand finally provide responses by \"flushing\" each expected request.</p>\n<p>At the end, tests may verify that the app has made no unexpected requests.</p>\n<div class=\"alert is-helpful\">\n<p>You can run <live-example stackblitz=\"specs\">these sample tests</live-example>\nin a live coding environment.</p>\n<p>The tests described in this guide are in <code>src/testing/http-client.spec.ts</code>.\nThere are also tests of an application data service that call <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> in\n<code>src/app/heroes/heroes.service.spec.ts</code>.</p>\n</div>\n<h3 id=\"setup-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#setup-1\"><i class=\"material-icons\">link</i></a>Setup</h3>\n<p>To begin testing calls to <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>,\nimport the <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code> and the mocking controller, <code><a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a></code>,\nalong with the other symbols your tests require.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"imports\" title=\"app/testing/http-client.spec.ts (imports)\" linenums=\"false\">\n// <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> testing module and mocking controller\nimport { <a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a>, <a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a> } from '@angular/common/http/testing';\n\n// Other imports\nimport { <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a> } from '@angular/common/http';\n\n\n</code-example>\n<p>Then add the <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code> to the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> and continue with\nthe setup of the <em>service-under-test</em>.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"setup\" title=\"app/testing/http-client.spec.ts(setup)\" linenums=\"false\">\ndescribe('<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> testing', () => {\n  let httpClient: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>;\n  let httpTestingController: <a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [ <a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a> ]\n    });\n\n    // <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> the http service and test controller for each test\n    httpClient = TestBed.get(<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>);\n    httpTestingController = TestBed.get(<a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a>);\n  });\n  /// Tests begin ///\n});\n\n</code-example>\n<p>Now requests made in the course of your tests will hit the testing backend instead of the normal backend.</p>\n<p>This setup also calls <code>TestBed.get()</code> to inject the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service and the mocking controller\nso they can be referenced during the tests.</p>\n<h3 id=\"expecting-and-answering-requests\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#expecting-and-answering-requests\"><i class=\"material-icons\">link</i></a>Expecting and answering requests</h3>\n<p>Now you can write a test that expects a GET Request to occur and provides a mock response. </p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"get-test\" title=\"app/testing/http-client.spec.ts(httpClient.get)\" linenums=\"false\">\nit('can test HttpClient.get', () => {\n  const testData: <a href=\"api/router/Data\" class=\"code-anchor\">Data</a> = {name: 'Test <a href=\"api/router/Data\" class=\"code-anchor\">Data</a>'};\n\n  // Make an HTTP GET request\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>>(testUrl)\n    .subscribe(data =>\n      // When observable resolves, result should match test data\n      expect(data).toEqual(testData)\n    );\n\n  // The following `expectOne()` will match the request's URL.\n  // If no requests or <a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">multiple</a> requests matched that URL\n  // `expectOne()` would throw.\n  const req = httpTestingController.expectOne('/data');\n\n  // Assert that the request is <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> GET.\n  expect(req.request.method).toEqual('GET');\n\n  // Respond with mock data, causing Observable to resolve.\n  // Subscribe callback asserts that correct data was returned.\n  req.flush(testData);\n\n  // Finally, assert that there are no outstanding requests.\n  httpTestingController.verify();\n});\n\n</code-example>\n<p>The last step, verifying that no requests remain outstanding, is common enough for you to move it into an <code>afterEach()</code> step:</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"afterEach\" linenums=\"false\">\nafterEach(() => {\n  // After every test, assert that there are no more pending requests.\n  httpTestingController.verify();\n});\n\n</code-example>\n<h4 id=\"custom-request-expectations\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#custom-request-expectations\"><i class=\"material-icons\">link</i></a>Custom request expectations</h4>\n<p>If matching by URL isn't sufficient, it's possible to implement your own matching function.\nFor example, you could look for an outgoing request that has an authorization header:</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"predicate\" linenums=\"false\">\n// Expect one request with an authorization header\nconst req = httpTestingController.expectOne(\n  req => req.headers.has('Authorization')\n);\n\n</code-example>\n<p>As with the previous <code>expectOne()</code>,\nthe test will fail if 0 or 2+ requests satisfy this predicate.</p>\n<h4 id=\"handling-more-than-one-request\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#handling-more-than-one-request\"><i class=\"material-icons\">link</i></a>Handling more than one request</h4>\n<p>If you need to respond to duplicate requests in your test, use the <code>match()</code> API instead of <code>expectOne()</code>.\nIt takes the same arguments but returns an array of matching requests.\nOnce returned, these requests are removed from future matching and\nyou are responsible for flushing and verifying them.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"multi-request\" linenums=\"false\">\n// get all pending requests that match the given URL\nconst requests = httpTestingController.match(testUrl);\nexpect(requests.length).toEqual(3);\n\n// Respond to each request with different results\nrequests[0].flush([]);\nrequests[1].flush([testData[0]]);\nrequests[2].flush(testData);\n\n</code-example>\n<h3 id=\"testing-for-errors\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#testing-for-errors\"><i class=\"material-icons\">link</i></a>Testing for errors</h3>\n<p>You should test the app's defenses against HTTP requests that fail.</p>\n<p>Call <code>request.error()</code> with an <code>ErrorEvent</code> instead of <code>request.flush()</code>, as in this example.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"404\" linenums=\"false\">\nit('can test for 404 error', () => {\n  const emsg = 'deliberate 404 error';\n\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>[]>(testUrl).subscribe(\n    data => fail('should have failed with the 404 error'),\n    (error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) => {\n      expect(error.status).toEqual(404, 'status');\n      expect(error.error).toEqual(emsg, 'message');\n    }\n  );\n\n  const req = httpTestingController.expectOne(testUrl);\n\n  // Respond with mock error\n  req.flush(emsg, { status: 404, statusText: 'Not Found' });\n});\n\n</code-example>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/browser-support\n - guide/npm-packages\n - guide/pipes\n - guide/testing\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/NgForOf\n - api/common/http/HTTP_INTERCEPTORS\n - api/common/http/HttpBackend\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/common/http/HttpClientXsrfModule#withOptions\n - api/common/http/HttpErrorResponse\n - api/common/http/HttpEvent\n - api/common/http/HttpEventType#Response\n - api/common/http/HttpEventType#Sent\n - api/common/http/HttpEventType#UploadProgress\n - api/common/http/HttpHandler\n - api/common/http/HttpHeaders\n - api/common/http/HttpInterceptor\n - api/common/http/HttpParams\n - api/common/http/HttpRequest\n - api/common/http/HttpResponse\n - api/common/http/testing/HttpClientTestingModule\n - api/common/http/testing/HttpTestingController\n - api/core/Inject\n - api/core/Injectable\n - api/core/NgModule\n - api/core/testing/TestBed\n - api/core/testing/async\n - api/forms/SelectMultipleControlValueAccessor\n - api/http/Http\n - api/http/Http#get\n - api/platform-browser/BrowserModule\n - api/router/Data\n - api/router/RouterLinkWithHref\n - guide/dependency-injection\n - guide/http#adding-headers\n - guide/http#advanced-usage\n - guide/http#always-subscribe\n - guide/http#cache-refresh\n - guide/http#caching\n - guide/http#clearing-the-request-body\n - guide/http#configuring-custom-cookieheader-names\n - guide/http#configuring-the-request\n - guide/http#custom-request-expectations\n - guide/http#debouncing-requests\n - guide/http#error-details\n - guide/http#error-handling\n - guide/http#expecting-and-answering-requests\n - guide/http#getting-error-details\n - guide/http#getting-json-data\n - guide/http#handling-more-than-one-request\n - guide/http#httpclient\n - guide/http#httpevents\n - guide/http#immutability\n - guide/http#intercepting-requests-and-responses\n - guide/http#interceptor-order\n - guide/http#listening-to-progress-events\n - guide/http#logging\n - guide/http#making-a-delete-request\n - guide/http#making-a-post-request\n - guide/http#making-a-put-request\n - guide/http#mocking-philosophy\n - guide/http#observables-and-operators\n - guide/http#provide-the-interceptor\n - guide/http#reading-the-full-response\n - guide/http#requesting-non-json-data\n - guide/http#retry\n - guide/http#return-a-multi-valued-observable\n - guide/http#rxjs\n - guide/http#security-xsrf-protection\n - guide/http#send-request\n - guide/http#sending-data-to-the-server\n - guide/http#set-default-headers\n - guide/http#setup\n - guide/http#setup-1\n - guide/http#switchmap\n - guide/http#testing-for-errors\n - guide/http#testing-http-requests\n - guide/http#the-next-object\n - guide/http#the-request-body\n - guide/http#type-checking-the-response\n - guide/http#update-headers\n - guide/http#url-parameters\n - guide/http#why-write-a-service\n - guide/http#write-an-interceptor\n - http://reactivex.io/rxjs/\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token\n - https://github.com/angular/in-memory-web-api/blob/master/README.md\n-->"
}