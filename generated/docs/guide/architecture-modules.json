{
  "id" : "guide/architecture-modules",
  "title" : "模块简介",
  "contents" : "<div class=\"content\">\n<h1 id=\"introduction-to-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cirtfesipvhtxz9yhm6vsdfzp\"><i class=\"material-icons\">link</i>模块简介</h1>\n<img src=\"generated/images/guide/architecture/module.png\" alt=\"Module\" class=\"left\" width=\"240\" height=\"183\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z1a9kj4bwpyr2za35izk2rdt\">Angular 应用程序是模块化的，Angular 有自己的模块化系统，称为\n<em>NgModule</em>。NgModule 是一个容器，用于存放专门用于应用程序域、工作流或一组密切相关的功能的连贯代码块。它可以包含组件、服务提供者和其他代码文件，其范围由包含的 NgModule 定义。它可以导入从其他 NgModule 导出的功能，并导出选定的功能供其他 NgModule 使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2j8zpi4x4mbtk6tjr0ah28df\">每个 Angular 应用程序至少有一个 NgModule 类，即\n<a href=\"guide/bootstrapping\"><em>根模块</em></a>，它通常命名为 \n<code>AppModule</code>，并位于名为 \n<code>app.module.ts</code> 的文件中。你可以通过\n<em>引导</em>根 NgModule 来启动你的应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ay2rpjy9dsawiw9qhg2l4ggl\">虽然小型应用程序可能只有一个 NgModule，但大多数应用程序都有更多\n<em>功能模块</em>。应用程序的\n<em>根</em> NgModule 因此得名，因为它可以在任何深度的层次结构中包含子 NgModule。</p>\n<h2 id=\"ngmodule-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tnvaoxoyxihwyk8ybi4d7x5f\"><i class=\"material-icons\">link</i>NgModule 元数据</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwlyx7gqr7ve281p6n0j15z24\">NgModule 被定义为用 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰的类。\n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器是一个函数，它接受一个元数据对象，该对象的属性描述了模块。最重要的属性如下所示。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o2qcrku7d3eegbyjlpdavwvj\"><code>declarations</code>—属于此 NgModule 的\n<a href=\"guide/architecture-components\">组件</a>、\n<em>指令</em>和\n<em>管道</em>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"de2mmcvr4dkfibwhc9vp64q5v\"><code>exports</code>—应该在其他 NgModule 的\n<em>组件模板</em>中可见和可用的声明子集。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c91bi7xpgwo30nmhyjysyb6fo\"><code>imports</code>—其他模块，其导出的类在\n<em>此</em> NgModule 中声明的组件模板中需要。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arfe7lmsbkxpep45adu1wv5oz\"><code>providers</code>—此 NgModule 为全局服务集合贡献的\n<a href=\"guide/architecture-services\">服务</a>创建者；它们在应用程序的所有部分都可访问。（你也可以在组件级别指定提供者，这通常是首选。）</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5y0jxsc3v50wjxq50kx4anwf1\"><code>bootstrap</code>—主应用程序视图，称为\n<em>根组件</em>，它承载所有其他应用程序视图。只有\n<em>根 NgModule</em> 应该设置此 \n<code>bootstrap</code> 属性。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jxyrg9uzo3e1gknprh3o927c\">以下是一个简单的根 NgModule 定义：</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"module\" title=\"src/app/app.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  providers:    [ Logger ],\n  declarations: [ AppComponent ],\n  exports:      [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3erhum3lhusva7np2l5df98f\"><code>AppComponent</code> 的 \n<code>export</code> 只是为了展示如何导出；在本例中，它实际上不是必需的。根 NgModule 没有理由\n<em>导出</em>任何内容，因为其他模块不需要\n<em>导入</em>根 NgModule。</p>\n</div>\n<h2 id=\"ngmodules-and-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qgys2kvxw6w33xicr1x6ehk1\"><i class=\"material-icons\">link</i>NgModule 和组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwhs0b8a7512i4k7fjt9gowhy\">NgModule 为其组件提供\n<em>编译上下文</em>。根 NgModule 始终有一个根组件，该组件在引导期间创建，但任何 NgModule 都可以包含任意数量的附加组件，这些组件可以通过路由加载或通过模板创建。属于 NgModule 的组件共享一个编译上下文。</p>\n<figure>\n<img src=\"generated/images/guide/architecture/compilation-context.png\" alt=\"Component compilation context\" class=\"left\" width=\"600\" height=\"202\">\n</figure>\n<br class=\"clear\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6xrmsxc55cvhp8tthwyzr2tw\">组件及其模板共同定义了一个\n<em>视图</em>。组件可以包含一个\n<em>视图层次结构</em>，这使你能够定义屏幕上任意复杂的区域，这些区域可以作为一个单元进行创建、修改和销毁。视图层次结构可以混合来自不同 NgModule 的组件定义的视图。这很常见，尤其是在 UI 库中。</p>\n<figure>\n<img src=\"generated/images/guide/architecture/view-hierarchy.png\" alt=\"View hierarchy\" class=\"left\" width=\"600\" height=\"303\">\n</figure>\n<br class=\"clear\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15tytpucwwdktv1hq20bimj8i\">当你创建一个组件时，它会直接与一个称为\n<em>宿主视图</em>的单个视图相关联。宿主视图可以是视图层次结构的根，它可以包含\n<em>嵌入视图</em>，而嵌入视图又是其他组件的宿主视图。这些组件可以位于同一个 NgModule 中，也可以从其他 NgModule 导入。树中的视图可以嵌套到任意深度。</p>\n<div class=\"l-sub-section\">\n    The hierarchical structure of views is a key factor in the way Angular detects and responds to changes in the DOM and app data. \n</div>\n<h2 id=\"ngmodules-and-javascript-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kcbycbkq4aa5n01auhvc7ltj\"><i class=\"material-icons\">link</i>NgModule 和 JavaScript 模块</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajoia7nqoki0c8bvpzyi1cu5r\">NgModule 系统不同于 JavaScript (ES2015) 模块系统，也不与之相关，后者用于管理 JavaScript 对象的集合。这两个是不同的且\n<em>互补</em>的模块系统。你可以同时使用它们来编写你的应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96zg3ifegbgr71j33g60dqdr7\">在 JavaScript 中，每个\n<em>文件</em>都是一个模块，文件中定义的所有对象都属于该模块。 模块通过使用 \n<code>export</code> 关键字标记对象来声明某些对象为公共对象。 其他 JavaScript 模块使用\n<em>导入语句</em>来访问其他模块中的公共对象。</p>\n<code-example path=\"architecture/src/app/app.module.ts\" region=\"imports\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }     from '@angular/core';\nimport { AppComponent } from './app.component';\n\n</code-example>\n<code-example path=\"architecture/src/app/app.module.ts\" region=\"export\" linenums=\"false\">\nexport class AppModule { }\n\n</code-example>\n<div class=\"l-sub-section\">\n  <a href=\"http://exploringjs.com/es6/ch_modules.html\">Learn more about the JavaScript module system on the web.</a>\n</div>\n<h2 id=\"angular-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjgzfq5kpoyc4exr29wfib0nb\"><i class=\"material-icons\">link</i>Angular 库</h2>\n<img src=\"generated/images/guide/architecture/library-module.png\" alt=\"Component\" class=\"left\" width=\"240\" height=\"181\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ers0t1vxdrcya5as5ebfdvx8k\">Angular 作为 JavaScript 模块的集合发布。你可以将它们视为库模块。每个 Angular 库名称都以 \n<code>@angular</code> 前缀开头。使用 \n<code>npm</code> 包管理器安装它们，并使用 JavaScript \n<code>import</code> 语句导入它们的部分内容。</p>\n<br class=\"clear\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dwo3j3mpjt9xe6xwupjzgox9\">例如，从 \n<code>@angular/core</code> 库中导入 Angular 的 \n<code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器，如下所示：</p>\n<code-example path=\"architecture/src/app/app.component.ts\" region=\"import\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewzctfduhinneybnziye9flc0\">你还可以使用 JavaScript 导入语句从 Angular \n<em>库</em>中导入 NgModule：</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"import-browser-module\" linenums=\"false\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3utdaww475mtuk6hnw2a58o8o\">在上面的简单根模块示例中，应用程序模块需要来自 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 中的内容。要访问这些内容，请将其添加到 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据 \n<code>imports</code> 中，如下所示。</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"ngmodule-imports\" linenums=\"false\">\nimports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6w5imq9orxdvadgphitmh1s8\">通过这种方式，你\n<em>同时</em>使用 Angular 和 JavaScript 模块系统。虽然很容易混淆这两个系统，它们共享“导入”和“导出”的通用词汇，但你将熟悉它们在不同上下文中的使用方式。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kym08l611l8yoef1ov6die3p\">从 \n<a href=\"guide/ngmodules\">NgModules</a> 页面了解更多信息。</p>\n</div>\n<hr>\n\n</div>\n<!-- links to this doc:\n - guide/architecture\n - guide/architecture-services\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - guide/architecture-components\n - guide/architecture-modules#angular-libraries\n - guide/architecture-modules#introduction-to-modules\n - guide/architecture-modules#ngmodule-metadata\n - guide/architecture-modules#ngmodules-and-components\n - guide/architecture-modules#ngmodules-and-javascript-modules\n - guide/architecture-services\n - guide/bootstrapping\n - guide/ngmodules\n - http://exploringjs.com/es6/ch_modules.html\n-->"
}