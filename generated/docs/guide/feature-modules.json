{
  "id" : "guide/feature-modules",
  "title" : "特性模块",
  "contents" : "<div class=\"content\">\n<h1 id=\"feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6fljutr1i4kb9wann6aj1uskb\"><i class=\"material-icons\">link</i>特性模块</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2q3o5n5jj0h2k9p3vs59y9xl1\">特性模块是用于组织代码的 NgModules。</p>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\"><i class=\"material-icons\">link</i>先决条件</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xq8keqzpcinu80uje7xu3rbf\">对以下内容的基本了解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t22zgv8ykbwmu1loddo1606h\"><a href=\"guide/bootstrapping\">引导</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb4qsq6zvscyfkwgoajja4d9x\"><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 模块与 NgModules</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bxrfaho32aoh0mp74dmliy08r\"><a href=\"guide/frequent-ngmodules\">常用模块</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27yc1qd9hhx2j6xzfuen71rof\">有关此页面描述的包含特性模块的最终示例应用， 请参阅 \n<live-example></live-example>。</p>\n<hr>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41wal10f6giosrsjdug0n0jce\">随着应用的增长，你可以组织与特定特性相关的代码。 这有助于为特性应用明确的边界。使用特性模块， 你可以将与特定功能或特性相关的代码与其他代码分开。划分应用的区域有助于开发人员和团队之间的协作，分离 指令，以及管理根模块的大小。</p>\n<h2 id=\"feature-modules-vs-root-modules\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bqxwz5vg5splvi09jha5fyq81\"><i class=\"material-icons\">link</i>特性模块 vs. 根模块</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qf5eqiu9cdsuv34so49s0kgv\">特性模块是一种组织最佳实践，而不是核心 Angular API 的概念。特性模块提供一组连贯的功能，专注于 特定的应用需求，例如用户工作流、路由或表单。 虽然你可以在根模块中完成所有操作，但特性模块 可以帮助你将应用划分为专注的区域。特性模块 通过它提供的服务以及它共享的组件、指令和 管道与根模块和其他模块协作。</p>\n<h2 id=\"how-to-make-a-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jcazmx5d98oytp4pisxx0dip\"><i class=\"material-icons\">link</i>如何创建特性模块</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kbfk7oesx5dhs5aad629auma\">假设你已经有一个 CLI 生成的应用，可以使用 CLI 创建特性 模块，在根项目目录中输入以下命令。将 \n<code>CustomerDashboard</code> 替换为 你的模块名称。你可以省略名称中的 \"Module\" 后缀，因为 CLI 会将其追加：</p>\n<code-example language=\"sh\">\nng generate module CustomerDashboard\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"a0pyi66xi2ptfppcdku005sdx\">这会让 CLI 创建一个名叫 <code>customer-dashboard</code> 的文件夹，其中有一个名叫 <code>customer-dashboard.module.ts</code>，内容如下：</p>\n<code-example language=\"typescript\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: []\n})\nexport class CustomerDashboardModule { }\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gg6f9dnk691ok1e0ejp3iwbn\">无论 NgModule 是根模块还是特性模块，其结构都是相同的。在 CLI 生成的特性模块中，文件顶部有两个 JavaScript 导入语句：第一个导入 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>，它与根模块类似，允许你使用 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器；第二个导入 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，它提供了许多常见的指令，例如 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>。特性模块导入 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 而不是 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>，后者只在根模块中导入一次。\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 只包含一些常见指令的信息，例如 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>，这些指令在大多数模板中都需要，而 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 为浏览器配置 Angular 应用，这只需要做一次。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dadh3qjjfhhajg3hn03gee8tg\"><code>declarations</code> 数组可用于添加可声明对象，这些对象 是专门属于此特定模块的组件、指令和管道。要添加组件，在命令行中输入以下命令，其中 \n<code>customer-dashboard</code> 是 CLI 生成特性模块的目录，\n<code>CustomerDashboard</code> 是组件的名称：</p>\n<code-example language=\"sh\">\nng generate component customer-dashboard/CustomerDashboard\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27dsy440xsaiqmkfj6i9dkb0o\">这将在 customer-dashboard 文件夹中为新组件生成一个文件夹，并使用 \n<code>CustomerDashboardComponent</code> 信息更新特性模块：</p>\n<code-example path=\"feature-modules/src/app/customer-dashboard/customer-dashboard.module.ts\" region=\"customer-dashboard-component\" title=\"src/app/customer-dashboard/customer-dashboard.module.ts\" linenums=\"false\">\n// import the new component\nimport { CustomerDashboardComponent } from './customer-dashboard/customer-dashboard.component';\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: [\n    CustomerDashboardComponent\n  ],\n})\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"402xuabs06c1t6vo5h5eoh1j9\"><code>CustomerDashboardComponent</code> 出现在了顶部的 JavaScript 导入列表里，并且被添加到了 <code>declarations</code> 数组中，它会让 Angular 把新组件和这个特性模块联系起来。</p>\n<h2 id=\"importing-a-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e6dll9l77n9l9br0f3ny04x0k\"><i class=\"material-icons\">link</i>导入特性模块</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ef6ozc1gdxcyetqava253fmi0\">要将特性模块合并到你的应用中，你必须让根模块 \n<code>app.module.ts</code> 知道它。注意 \n<code>customer-dashboard.module.ts</code> 底部的 \n<code>CustomerDashboardModule</code> 导出。这会将其公开，以便其他模块可以访问它。要将其导入 \n<code>AppModule</code>，将其添加到 \n<code>app.module.ts</code> 中的导入中，并添加到 \n<code>imports</code> 数组中：</p>\n<code-example path=\"feature-modules/src/app/app.module.ts\" region=\"app-module\" title=\"src/app/app.module.ts\" linenums=\"false\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a> } from '@angular/http';\n\nimport { AppComponent } from './app.component';\n// import the feature module here so you can add it to the imports array below\nimport { CustomerDashboardModule } from './customer-dashboard/customer-dashboard.module';\n\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>,\n    CustomerDashboardModule // add the feature module here\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sq064u55p37yx8onp98eds5w\">现在 \n<code>AppModule</code> 知道特性模块了。如果你要向特性模块添加任何服务提供者，\n<code>AppModule</code> 也会知道它们，其他特性模块也会知道。但是，NgModules 不会公开它们的组件。</p>\n<h2 id=\"rendering-a-feature-modules-component-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"311116bnavocau4i5ys9fpg63\"><i class=\"material-icons\">link</i>渲染特性模块的组件模板</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dzpqysevg9iyz9xrb6durbi7u\">当 CLI 为这个特性模块生成 <code>CustomerDashboardComponent</code> 时，还包含一个模板 <code>customer-dashboard.component.html</code>，它带有如下页面脚本：</p>\n<code-example path=\"feature-modules/src/app/customer-dashboard/customer-dashboard/customer-dashboard.component.html\" region=\"feature-template\" title=\"src/app/customer-dashboard/customer-dashboard/customer-dashboard.component.html\" linenums=\"false\">\n&lt;p&gt;\n  customer-dashboard works!\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28wyeefyse9qbvkwb6sq80l3a\">要查看 \n<code>AppComponent</code> 中的此 HTML，你首先必须在 \n<code>CustomerDashboardModule</code> 中导出 \n<code>CustomerDashboardComponent</code>。在 \n<code>customer-dashboard.module.ts</code> 中，就在 \n<code>declarations</code> 数组下方，添加一个包含 \n<code>CustomerDashboardModule</code> 的 \n<code>exports</code> 数组：</p>\n<code-example path=\"feature-modules/src/app/customer-dashboard/customer-dashboard.module.ts\" region=\"component-exports\" title=\"src/app/customer-dashboard/customer-dashboard.module.ts\" linenums=\"false\">\nexports: [\n  CustomerDashboardComponent\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"douu83oy0rlym1gzquqmtikku\">然后，在 <code>AppComponent</code> 的 <code>app.component.html</code> 中，加入标签 <code>&lt;app-customer-dashboard&gt;</code>：</p>\n<code-example path=\"feature-modules/src/app/app.component.html\" region=\"app-component-template\" title=\"src/app/app.component.html\" linenums=\"false\">\n&lt;h1&gt;\n  {{title}}\n&lt;/h1&gt;\n\n&lt;!-- add the selector from the CustomerDashboardComponent --&gt;\n&lt;app-customer-dashboard&gt;&lt;/app-customer-dashboard&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7xldnueeqk2mmunvno4ns840c\">现在，除了默认渲染出的标题外，还渲染出了 <code>CustomerDashboardComponent</code> 的模板：</p>\n<figure>\n <img src=\"generated/images/guide/feature-modules/feature-module.png\" alt=\"feature module component\" width=\"594\" height=\"408\">\n</figure>\n<hr>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\"><i class=\"material-icons\">link</i>关于 NgModules 的更多信息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"320pd4quk21g01cifflgmc0pj\">你可能还会对以下内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4o11nawiki9kz1ug8z0lzy1ho\"><a href=\"guide/lazy-loading-ngmodules\">使用 Angular 路由器惰性加载模块</a>.</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg213zznp5hwjyrbbmmmf2q3n\"><a href=\"guide/providers\">提供者</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nnruzlsgv0xcfh59t3yuw9zb\"><a href=\"guide/module-types\">特性模块类型</a>。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodules\n - guide/sharing-ngmodules\n - guide/testing\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/NgModule\n - api/forms/FormsModule\n - api/http/HttpModule\n - api/platform-browser/BrowserModule\n - guide/bootstrapping\n - guide/feature-modules#feature-modules\n - guide/feature-modules#feature-modules-vs-root-modules\n - guide/feature-modules#how-to-make-a-feature-module\n - guide/feature-modules#importing-a-feature-module\n - guide/feature-modules#more-on-ngmodules\n - guide/feature-modules#prerequisites\n - guide/feature-modules#rendering-a-feature-modules-component-template\n - guide/frequent-ngmodules\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n - guide/providers\n-->"
}