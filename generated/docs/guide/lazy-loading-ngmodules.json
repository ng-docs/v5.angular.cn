{
  "id": "guide/lazy-loading-ngmodules",
  "title": "Lazy Loading Feature Modules",
  "contents": "\n<div class=\"content\">\n<h1 id=\"lazy-loading-feature-modules\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-feature-modules\"><i class=\"material-icons\">link</i></a>Lazy Loading Feature Modules</h1>\n<h4 id=\"prerequisites\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#prerequisites\"><i class=\"material-icons\">link</i></a>Prerequisites</h4>\n<p>A basic understanding of the following:</p>\n<ul>\n<li><a href=\"guide/feature-modules\">Feature Modules</a>.</li>\n<li><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript Modules vs. NgModules</a>.</li>\n<li><a href=\"guide/frequent-ngmodules\">Frequently Used Modules</a>.</li>\n<li><a href=\"guide/module-types\">Types of Feature Modules</a>.</li>\n<li><a href=\"guide/router\">Routing and Navigation</a>.</li>\n</ul>\n<p>For the final sample app with two lazy loaded modules that this page describes, see the\n<live-example></live-example>.</p>\n<hr>\n<h2 id=\"high-level-view\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#high-level-view\"><i class=\"material-icons\">link</i></a>High level view</h2>\n<p>There are three main steps to setting up a lazy loaded feature module:</p>\n<ol>\n<li>Create the feature module.</li>\n<li>Create the feature module’s routing module.</li>\n<li>Configure the routes.</li>\n</ol>\n<h2 id=\"set-up-an-app\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-an-app\"><i class=\"material-icons\">link</i></a>Set up an app</h2>\n<p>If you don’t already have an app, you can follow the steps below to\ncreate one with the CLI. If you do already have an app, skip to\n<a href=\"guide/lazy-loading-ngmodules#config-routes\">Configure the routes</a>. Enter the following command\nwhere <code>customer-app</code> is the name of your app:</p>\n<code-example language=\"sh\">\nng new customer-app --routing\n</code-example>\n<p>This creates an app called <code>customer-app</code> and the <code>--routing</code> flag\ngenerates a file called <code>app-routing.module.ts</code>, which is one of\nthe files you need for setting up lazy loading for your feature module.\nNavigate into the project by issuing the command <code>cd customer-app</code>.</p>\n<h2 id=\"create-a-feature-module-with-routing\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\"><i class=\"material-icons\">link</i></a>Create a feature module with routing</h2>\n<p>Next, you’ll need a feature module to route to. To make one, enter\nthe following command at the terminal window prompt where <code>customers</code> is the name of the module:</p>\n<code-example language=\"sh\">\nng generate module customers --routing\n</code-example>\n<p>This creates a customers folder with two files inside; <code>CustomersModule</code>\nand <code>CustomersRoutingModule</code>. <code>CustomersModule</code> will act as the gatekeeper\nfor anything that concerns customers. <code>CustomersRoutingModule</code> will handle\nany customer-related routing. This keeps the app’s structure organized as\nthe app grows and allows you to reuse this module while easily keeping its routing intact.</p>\n<p>The CLI imports the <code>CustomersRoutingModule</code> into the <code>CustomersModule</code> by\nadding a JavaScript import statement at the top of the file and adding\n<code>CustomersRoutingModule</code> to the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> <code>imports</code> array.</p>\n<h2 id=\"add-a-component-to-the-feature-module\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-a-component-to-the-feature-module\"><i class=\"material-icons\">link</i></a>Add a component to the feature module</h2>\n<p>In order to see the module being lazy loaded in the browser, create a component to render some HTML when the app loads <code>CustomersModule</code>. At the command line, enter the following:</p>\n<code-example language=\"sh\">\nng generate component customers/customer-list\n</code-example>\n<p>This creates a folder inside of <code>customers</code> called <code>customer-list</code>\nwith the four files that make up the component.</p>\n<!-- For more information\nabout components, see [Components](). -->\n<p>Just like with the routing module, the CLI imports the\n<code>CustomerListComponent</code> into the <code>CustomersModule</code>.</p>\n<h2 id=\"add-another-feature-module\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-another-feature-module\"><i class=\"material-icons\">link</i></a>Add another feature module</h2>\n<p>For another place to route to, create a second feature module with routing:</p>\n<code-example language=\"sh\">\nng generate module orders --routing\n</code-example>\n<p>This makes a new folder called <code>orders</code> containing an <code>OrdersModule</code> and an <code>OrdersRoutingModule</code>.</p>\n<p>Now, just like with the <code>CustomersModule</code>, give it some content:</p>\n<code-example language=\"sh\">\nng generate component orders/order-list\n</code-example>\n<h2 id=\"set-up-the-ui\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-the-ui\"><i class=\"material-icons\">link</i></a>Set up the UI</h2>\n<p>Though you can type the URL into the address bar, a nav\nis easier for the user and more common. Replace the default\nplaceholder markup in <code>app.component.html</code> with a custom nav\nso you can easily navigate to your modules in the browser:</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/app.component.html\" region=\"app-component-template\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h1>\n  {{title}}\n&#x3C;/h1>\n\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/customers\">Customers&#x3C;/button>\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/orders\">Orders&#x3C;/button>\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"\">Home&#x3C;/button>\n\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n\n</code-example>\n<p>To see your app in the browser so far, enter the following command in the terminal window:</p>\n<code-example language=\"sh\">\nng serve\n</code-example>\n<p>Then go to <code>localhost:4200</code> where you should see “app works!” and three buttons.</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/three-buttons.png\" width=\"300\" alt=\"three buttons in the browser\">\n</figure>\n<p>To make the buttons work, you need to configure the routing modules.</p>\n<a id=\"config-routes\"></a>\n<h2 id=\"configure-the-routes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#configure-the-routes\"><i class=\"material-icons\">link</i></a>Configure the routes</h2>\n<p>The two feature modules, <code>OrdersModule</code> and <code>CustomersModule</code>, have to be\nwired up to the <code>AppRoutingModule</code> so the router knows about them. The structure is as follows:</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/lazy-load-relationship.jpg\" width=\"400\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p>Each feature module acts as a doorway via the router. In the <code>AppRoutingModule</code>, you configure the routes to the feature modules, in this case <code>OrdersModule</code> and <code>CustomersModule</code>. This way, the router knows to go to the feature module. The feature module then connects the <code>AppRoutingModule</code> to the <code>CustomersRoutingModule</code> or the <code>OrdersRoutingModule</code>. Those routing modules tell the router where to go to load relevant components.</p>\n<h3 id=\"routes-at-the-app-level\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#routes-at-the-app-level\"><i class=\"material-icons\">link</i></a>Routes at the app level</h3>\n<p>In <code>AppRoutingModule</code>, update the <code>routes</code> array with the following:</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"const-routes\" title=\"src/app/app-routing.module.ts\" linenums=\"false\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: 'app/customers/customers.module#CustomersModule'\n  },\n  {\n    path: 'orders',\n    loadChildren: 'app/orders/orders.module#OrdersModule'\n  },\n  {\n    path: '',\n    redirectTo: '',\n    pathMatch: 'full'\n  }\n];\n\n</code-example>\n<p>The import statements stay the same. The first two paths are the routes to the <code>CustomersModule</code> and the <code>OrdersModule</code> respectively. Notice that the lazy loading syntax uses <code>loadChildren</code> followed by a string that is the path to the module, a hash mark or <code>#</code>, and the module’s class name.</p>\n<h3 id=\"inside-the-feature-module\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#inside-the-feature-module\"><i class=\"material-icons\">link</i></a>Inside the feature module</h3>\n<p>Next, take a look at <code>customers.module.ts</code>. If you’re using the CLI and following the steps outlined in this page, you don’t have to do anything here. The feature module is like a connector between the <code>AppRoutingModule</code> and the feature routing module. The <code>AppRoutingModule</code> imports the feature module, <code>CustomersModule</code>, and <code>CustomersModule</code> in turn imports the <code>CustomersRoutingModule</code>.</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/customers/customers.module.ts\" region=\"customers-module\" title=\"src/app/customers/customers.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomerListComponent } from './customer-list/customer-list.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    CustomersRoutingModule\n  ],\n  declarations: [CustomerListComponent]\n})\nexport class CustomersModule { }\n\n</code-example>\n<p>The <code>customers.module.ts</code> file imports the <code>CustomersRoutingModule</code> and <code>CustomerListComponent</code> so the <code>CustomersModule</code> class can have access to them. <code>CustomersRoutingModule</code> is then listed in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> <code>imports</code> array giving <code>CustomersModule</code> access to its own routing module, and <code>CustomerListComponent</code> is in the <code>declarations</code> array, which means <code>CustomerListComponent</code> belongs to the <code>CustomersModule</code>.</p>\n<h3 id=\"configure-the-feature-modules-routes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#configure-the-feature-modules-routes\"><i class=\"material-icons\">link</i></a>Configure the feature module’s routes</h3>\n<p>The next step is in <code>customers-routing.module.ts</code>. First, import the component at the top of the file with the other JavaScript import statements. Then, add the route to <code>CustomerListComponent</code>.</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/customers/customers-routing.module.ts\" region=\"customers-routing-module\" title=\"src/app/customers/customers-routing.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { CustomerListComponent } from './customer-list/customer-list.component';\n\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CustomerListComponent\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forChild(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class CustomersRoutingModule { }\n\n</code-example>\n<p>Notice that the <code>path</code> is set to an empty string. This is because the path in <code>AppRoutingModule</code> is already set to <code>customers</code>, so this route in the <code>CustomersRoutingModule</code>, is already within the <code>customers</code> context. Every route in this routing module is a child route.</p>\n<p>Repeat this last step of importing the <code>OrdersListComponent</code> and configuring the Routes array for the <code>orders-routing.module.ts</code>:</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/orders/orders-routing.module.ts\" region=\"orders-routing-module-detail\" title=\"src/app/orders/orders-routing.module.ts (excerpt)\" linenums=\"false\">\nimport { OrderListComponent } from './order-list/order-list.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: OrderListComponent\n  }\n];\n\n</code-example>\n<p>Now, if you view the app in the browser, the three buttons take you to each module.</p>\n<h2 id=\"confirm-its-working\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#confirm-its-working\"><i class=\"material-icons\">link</i></a>Confirm it’s working</h2>\n<p>You can check to see that a module is indeed being lazy loaded with the Chrome developer tools. In Chrome, open the dev tools by pressing <code>Cmd+Option+i</code> on a Mac or <code>Ctrl+Alt+i</code> on a PC and go to the Network Tab.</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/network-tab.png\" width=\"600\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p>Click on the Orders or Customers button. If you see a chunk appear, you’ve wired everything up properly and the feature module is being lazy loaded. A chunk should appear for Orders and for Customers but will only appear once for each.</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/chunk-arrow.png\" width=\"600\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p>To see it again, or to test after working in the project, clear everything out by clicking the circle with a line through it in the upper left of the Network Tab:</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/clear.gif\" width=\"200\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p>Then reload with <code>Cmd+r</code> or <code>Ctrl+r</code>, depending on your platform.</p>\n<h2 id=\"forroot-and-forchild\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#forroot-and-forchild\"><i class=\"material-icons\">link</i></a><code>forRoot()</code> and <code>forChild()</code></h2>\n<p>You might have noticed that the CLI adds <code>RouterModule.forRoot(routes)</code> to the <code>app-routing.module.ts</code> <code>imports</code> array. This lets Angular know that this module,\n<code>AppRoutingModule</code>, is a routing module and <code>forRoot()</code> specifies that this is the root\nrouting module. It configures all the\nroutes you pass to it, gives you access to the router directives, and registers the <code>RouterService</code>.\nUse <code>forRoot()</code> in the <code>AppRoutingModule</code>—that is, one time in the app at the root level.</p>\n<p>The CLI also adds <code>RouterModule.forChild(routes)</code> to feature routing modules. This way, Angular\nknows that the route list is only responsible for providing additional routes and is intended for feature modules. You can use <code>forChild()</code> in multiple modules.</p>\n<p><code>forRoot()</code> contains injector configuration which is global; such as configuring the Router. <code>forChild()</code> has no injector configuration, only directives such as <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> and <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>.</p>\n<hr>\n<h2 id=\"more-on-ngmodules-and-routing\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\"><i class=\"material-icons\">link</i></a>More on NgModules and routing</h2>\n<p>You may also be interested in the following:</p>\n<ul>\n<li><a href=\"guide/router\">Routing and Navigation</a>.</li>\n<li><a href=\"guide/providers\">Providers</a>.</li>\n<li><a href=\"guide/module-types\">Types of Feature Modules</a>.</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/dependency-injection\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/providers\n - guide/sharing-ngmodules\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/NgModule\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/feature-modules\n - guide/frequent-ngmodules\n - guide/lazy-loading-ngmodules#add-a-component-to-the-feature-module\n - guide/lazy-loading-ngmodules#add-another-feature-module\n - guide/lazy-loading-ngmodules#config-routes\n - guide/lazy-loading-ngmodules#configure-the-feature-modules-routes\n - guide/lazy-loading-ngmodules#configure-the-routes\n - guide/lazy-loading-ngmodules#confirm-its-working\n - guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\n - guide/lazy-loading-ngmodules#forroot-and-forchild\n - guide/lazy-loading-ngmodules#high-level-view\n - guide/lazy-loading-ngmodules#inside-the-feature-module\n - guide/lazy-loading-ngmodules#lazy-loading-feature-modules\n - guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\n - guide/lazy-loading-ngmodules#prerequisites\n - guide/lazy-loading-ngmodules#routes-at-the-app-level\n - guide/lazy-loading-ngmodules#set-up-an-app\n - guide/lazy-loading-ngmodules#set-up-the-ui\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n - guide/providers\n - guide/router\n-->"
}