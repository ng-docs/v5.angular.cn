{
  "id" : "guide/lazy-loading-ngmodules",
  "title" : "惰性加载特性模块",
  "contents" : "<div class=\"content\">\n<h1 id=\"lazy-loading-feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"shhtt45gvvrk1z659nlh18eo\"><i class=\"material-icons\">link</i>惰性加载特性模块</h1>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\"><i class=\"material-icons\">link</i>先决条件</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xq8keqzpcinu80uje7xu3rbf\">对以下内容的基本了解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy2an3vxrjhdg4mjgf59h805c\"><a href=\"guide/feature-modules\">特性模块</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb4qsq6zvscyfkwgoajja4d9x\"><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 模块与 NgModules</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bxrfaho32aoh0mp74dmliy08r\"><a href=\"guide/frequent-ngmodules\">常用模块</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nnruzlsgv0xcfh59t3yuw9zb\"><a href=\"guide/module-types\">特性模块类型</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"680phomzos08qdr6nvthhhtfk\"><a href=\"guide/router\">路由和导航</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cr4m1vnt6gk7ju521b61pepg\">有关本页面描述的具有两个惰性加载模块的最终示例应用，请参阅 \n<live-example></live-example>.</p>\n<hr>\n<h2 id=\"high-level-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wo9a4lu8yowmtcltyfh2zyev\"><i class=\"material-icons\">link</i>高级视图</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p3y90hrv3l3e8p8131hfv101\">设置惰性加载特性模块主要有三个步骤：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z86uwsh1lpt38cbjvi36h1aj\">创建特性模块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"uzisdhm7zt9yipw5qevin4lq\">创建特性模块的路由模块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5orue9zcrifdsfac6knx146lx\">配置相关路由。</li>\n</ol>\n<h2 id=\"set-up-an-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyb8p5t6ce5m2mv3fr15459f9\"><i class=\"material-icons\">link</i>设置应用</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4eq6nsqzcz1kswvyc3j8g8o6m\">如果你还没有应用，你可以按照以下步骤使用 CLI 创建一个应用。如果你已经有了应用，请跳过到 \n<a href=\"guide/lazy-loading-ngmodules#config-routes\">配置路由</a>。在终端窗口中输入以下命令，其中 \n<code>customer-app</code> 是你的应用名称：</p>\n<code-example language=\"sh\">\nng new customer-app --routing\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49b08wj4appzxi9lhroe00xie\">这将创建一个名为 \n<code>customer-app</code> 的应用，并且 \n<code>--routing</code> 标志会生成一个名为 \n<code>app-routing.module.ts</code> 的文件，这是为特性模块设置惰性加载所需的几个文件之一。通过发出命令 \n<code>cd customer-app</code> 进入项目。</p>\n<h2 id=\"create-a-feature-module-with-routing\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ehvdac0f6uf3osqkewp527vxz\"><i class=\"material-icons\">link</i>创建带有路由的特性模块</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mh96yi527r22wouotubp8ige\">接下来，你需要一个要路由到的特性模块。要创建一个，在终端窗口提示符处输入以下命令，其中 \n<code>customers</code> 是模块的名称：</p>\n<code-example language=\"sh\">\nng generate module customers --routing\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfutq7x4a0684gdywm151ppl6\">这将创建一个名为 \n<code>customers</code> 的文件夹，其中包含两个文件：\n<code>CustomersModule</code> 和 \n<code>CustomersRoutingModule</code>。\n<code>CustomersModule</code> 将充当与客户相关的任何事物的守门人。\n<code>CustomersRoutingModule</code> 将处理任何与客户相关的路由。这将使应用的结构在应用增长时保持井井有条，并允许你在轻松保持路由完整的情况下复用此模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l2qnsag80bely0cwcx1lkia3\">CLI 通过在文件顶部添加一个 JavaScript 导入语句并将 \n<code>CustomersRoutingModule</code> 添加到 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 \n<code>imports</code> 数组中，将 \n<code>CustomersRoutingModule</code> 导入到 \n<code>CustomersModule</code> 中。</p>\n<h2 id=\"add-a-component-to-the-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41bdr10kwjdf5dxc1znuxyg0a\"><i class=\"material-icons\">link</i>向特性模块添加组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91ah4yz008bnq384bumamph34\">为了在浏览器中看到模块被惰性加载，创建一个组件，以便在应用加载 \n<code>CustomersModule</code> 时渲染一些 HTML。在命令行中，输入以下内容：</p>\n<code-example language=\"sh\">\nng generate component customers/customer-list\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hvz90mg4oxe8x4tz67t3chff\">这将在 \n<code>customers</code> 内部创建一个名为 \n<code>customer-list</code> 的文件夹，其中包含构成组件的四个文件。</p>\n<!-- For more information\nabout components, see [Components](). -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6l5wr2314i0fbxc6pxu6kipxt\">就像路由模块一样，CLI 将 \n<code>CustomerListComponent</code> 导入到 \n<code>CustomersModule</code> 中。</p>\n<h2 id=\"add-another-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"a3p0a47xmo4c7t4gfxvxsn2yh\"><i class=\"material-icons\">link</i>添加另一个特性模块</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tt0ll86jtwsov79vwl5sxyl1\">为了创建另一个要路由到的位置，使用路由创建一个第二个特性模块：</p>\n<code-example language=\"sh\">\nng generate module orders --routing\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dy3xvkx547hvfm50n0pavriay\">这将创建一个名为 \n<code>orders</code> 的新文件夹，其中包含 \n<code>OrdersModule</code> 和 \n<code>OrdersRoutingModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9r2d4nxdli5fksgjczqj5co5x\">现在，就像 \n<code>CustomersModule</code> 一样，为它提供一些内容：</p>\n<code-example language=\"sh\">\nng generate component orders/order-list\n</code-example>\n<h2 id=\"set-up-the-ui\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lnczifhdupgnvrqxix5b2qzr\"><i class=\"material-icons\">link</i>设置 UI</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zosff9m9klnd4mw7khyn73u3\">虽然你可以在地址栏中输入 URL，但导航对用户来说更容易，也更常见。用自定义导航替换 \n<code>app.component.html</code> 中的默认占位符标记，以便你可以在浏览器中轻松导航到你的模块：</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/app.component.html\" region=\"app-component-template\" title=\"src/app/app.component.html\" linenums=\"false\">\n&lt;h1&gt;\n  {{title}}\n&lt;/h1&gt;\n\n&lt;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/customers\"&gt;Customers&lt;/button&gt;\n&lt;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/orders\"&gt;Orders&lt;/button&gt;\n&lt;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"\"&gt;Home&lt;/button&gt;\n\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54n0uqbcuea2a3i0nqydegqe0\">要查看到目前为止在浏览器中的应用，在终端窗口中输入以下命令：</p>\n<code-example language=\"sh\">\nng serve\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek4e9ivt46el1sjv419gd72qe\">然后转到 \n<code>localhost:4200</code>，你应该会看到“app works!”和三个按钮。</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/three-buttons.png\" width=\"300\" alt=\"three buttons in the browser\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9smmp8b17f9i46dssjubi4c5g\">要使按钮起作用，你需要配置路由模块。</p>\n<a id=\"config-routes\"></a>\n<h2 id=\"configure-the-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aogviwa0f7w9lmqlmga25y2ha\"><i class=\"material-icons\">link</i>配置路由</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ekfqwnxhv4ijc7exwmm4ppxm\">两个特性模块 \n<code>OrdersModule</code> 和 \n<code>CustomersModule</code> 必须连接到 \n<code>AppRoutingModule</code>，以便路由器知道它们。结构如下：</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/lazy-load-relationship.jpg\" width=\"400\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nrv1t4bw2kprkcejroopksvq\">每个特性模块都充当路由器通过的入口。在 \n<code>AppRoutingModule</code> 中，你配置了到特性模块的路由，在本例中是 \n<code>OrdersModule</code> 和 \n<code>CustomersModule</code>。这样，路由器就知道要转到特性模块。然后，特性模块将 \n<code>AppRoutingModule</code> 连接到 \n<code>CustomersRoutingModule</code> 或 \n<code>OrdersRoutingModule</code>。这些路由模块告诉路由器去哪里加载相关的组件。</p>\n<h3 id=\"routes-at-the-app-level\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crfex320rcpgc8bgr73osf55x\"><i class=\"material-icons\">link</i>应用级别的路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sqp042i3memrmv66ygdyz8un\">在 \n<code>AppRoutingModule</code> 中，使用以下内容更新 \n<code>routes</code> 数组：</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"const-routes\" title=\"src/app/app-routing.module.ts\" linenums=\"false\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: 'app/customers/customers.module#CustomersModule'\n  },\n  {\n    path: 'orders',\n    loadChildren: 'app/orders/orders.module#OrdersModule'\n  },\n  {\n    path: '',\n    redirectTo: '',\n    pathMatch: 'full'\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a52j8zmvanladgjpuo3qfisy8\">导入语句保持不变。前两个路径分别是到 \n<code>CustomersModule</code> 和 \n<code>OrdersModule</code> 的路由。请注意，惰性加载语法使用 \n<code>loadChildren</code>，后跟一个字符串，该字符串是模块的路径，一个井号或 \n<code>#</code>，以及模块的类名。</p>\n<h3 id=\"inside-the-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ber0iikaop1gq5iqtb21ntl6f\"><i class=\"material-icons\">link</i>在特性模块内部</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"972bxt4no72ecqn8k08shed1p\">接下来，看一下 \n<code>customers.module.ts</code>。如果你正在使用 CLI 并按照本页概述的步骤操作，则无需在此处执行任何操作。特性模块就像 \n<code>AppRoutingModule</code> 和特性路由模块之间的连接器。\n<code>AppRoutingModule</code> 导入特性模块 \n<code>CustomersModule</code>，而 \n<code>CustomersModule</code> 又反过来导入 \n<code>CustomersRoutingModule</code>。</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/customers/customers.module.ts\" region=\"customers-module\" title=\"src/app/customers/customers.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomerListComponent } from './customer-list/customer-list.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    CustomersRoutingModule\n  ],\n  declarations: [CustomerListComponent]\n})\nexport class CustomersModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t7502lxr41beppad47t0cg23\"><code>customers.module.ts</code> 文件导入 \n<code>CustomersRoutingModule</code> 和 \n<code>CustomerListComponent</code>，以便 \n<code>CustomersModule</code> 类可以访问它们。然后，\n<code>CustomersRoutingModule</code> 列在 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 \n<code>imports</code> 数组中，使 \n<code>CustomersModule</code> 可以访问它自己的路由模块，而 \n<code>CustomerListComponent</code> 位于 \n<code>declarations</code> 数组中，这意味着 \n<code>CustomerListComponent</code> 属于 \n<code>CustomersModule</code>。</p>\n<h3 id=\"configure-the-feature-modules-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wgezt9l0ctn5o46nnavycn9t\"><i class=\"material-icons\">link</i>配置特性模块的路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pf0fc1bm7zj8qrvn6cek83yq\">下一步是在 \n<code>customers-routing.module.ts</code> 中。首先，使用其他 JavaScript 导入语句在文件顶部导入组件。然后，将路由添加到 \n<code>CustomerListComponent</code>。</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/customers/customers-routing.module.ts\" region=\"customers-routing-module\" title=\"src/app/customers/customers-routing.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { CustomerListComponent } from './customer-list/customer-list.component';\n\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CustomerListComponent\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forChild(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class CustomersRoutingModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kl9id98bon9kejc020ytjg1f\">请注意，\n<code>path</code> 设置为空字符串。这是因为 \n<code>AppRoutingModule</code> 中的路径已设置为 \n<code>customers</code>，因此 \n<code>CustomersRoutingModule</code> 中的此路由已在 \n<code>customers</code> 上下文中。此路由模块中的每个路由都是子路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yhfd49305k2fjjh2zzshq42z\">重复最后一步，导入 \n<code>OrdersListComponent</code> 并为 \n<code>orders-routing.module.ts</code> 配置 Routes 数组：</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/orders/orders-routing.module.ts\" region=\"orders-routing-module-detail\" title=\"src/app/orders/orders-routing.module.ts (excerpt)\" linenums=\"false\">\nimport { OrderListComponent } from './order-list/order-list.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: OrderListComponent\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4olnxitxscnsll09gg5odbsyu\">现在，如果你在浏览器中查看应用，三个按钮会将你带到每个模块。</p>\n<h2 id=\"confirm-its-working\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2p5kscanfshkuj88cxpmlz5w5\"><i class=\"material-icons\">link</i>确认它是否正常工作</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56qc635yj6n14qbd5xk0e4bke\">你可以使用 Chrome 开发者工具检查模块是否确实被惰性加载。在 Chrome 中，通过在 Mac 上按 \n<code>Cmd+Option+i</code> 或在 PC 上按 \n<code>Ctrl+Alt+i</code> 打开开发者工具，然后转到 Network 选项卡。</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/network-tab.png\" width=\"600\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d79s87hl2x9f8crot9ljstm5w\">单击 Orders 或 Customers 按钮。如果你看到一个块出现，则说明你已正确连接了所有内容，并且特性模块正在被惰性加载。Orders 和 Customers 应该分别出现一个块，但每个块只出现一次。</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/chunk-arrow.png\" width=\"600\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ol4tqwpvf40ncdulu8nvg00b\">要再次查看它，或在项目中工作后进行测试，请单击 Network 选项卡左上角带有斜线的圆圈，清除所有内容：</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/clear.gif\" width=\"200\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j4asbgfk029mhsnacxvi975c\">然后使用 \n<code>Cmd+r</code> 或 \n<code>Ctrl+r</code>（取决于你的平台）重新加载。</p>\n<h2 id=\"forroot-and-forchild\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7g1lw84rxzgxzbl2u8g3cvqb5\"><i class=\"material-icons\">link</i><code>forRoot()</code> 与 <code>forChild()</code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xrg3dqe3amkkhdbo60mxcqcf\">你可能已经注意到，CLI 将 \n<code>RouterModule.forRoot(routes)</code> 添加到 \n<code>app-routing.module.ts</code> 的 \n<code>imports</code> 数组中。这使 Angular 知道此模块 \n<code>AppRoutingModule</code> 是一个路由模块，而 \n<code>forRoot()</code> 指定这是根路由模块。它配置你传递给它的所有路由，让你可以访问路由指令，并注册 \n<code>RouterService</code>。在 \n<code>AppRoutingModule</code> 中使用 \n<code>forRoot()</code>，即在应用的根级别使用一次。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3atgm8vcbg42bz1932jjwfnj\">CLI 还将 \n<code>RouterModule.forChild(routes)</code> 添加到特性路由模块。这样，Angular 就知道路由列表只负责提供额外的路由，并且是为特性模块设计的。你可以在多个模块中使用 \n<code>forChild()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nzvx7rp0sk31do7gb4c0w3l1\"><code>forRoot()</code> 包含注入器配置，它是全局的；例如配置路由器。\n<code>forChild()</code> 没有注入器配置，只有指令，例如 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 和 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>。</p>\n<hr>\n<h2 id=\"more-on-ngmodules-and-routing\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"er6oquwap1jwfax9ckc5fo67u\"><i class=\"material-icons\">link</i>更多关于 NgModule 和路由的知识</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"320pd4quk21g01cifflgmc0pj\">你可能还会对以下内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"680phomzos08qdr6nvthhhtfk\"><a href=\"guide/router\">路由和导航</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg213zznp5hwjyrbbmmmf2q3n\"><a href=\"guide/providers\">提供者</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nnruzlsgv0xcfh59t3yuw9zb\"><a href=\"guide/module-types\">特性模块类型</a>。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/dependency-injection\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/providers\n - guide/sharing-ngmodules\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/NgModule\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/feature-modules\n - guide/frequent-ngmodules\n - guide/lazy-loading-ngmodules#add-a-component-to-the-feature-module\n - guide/lazy-loading-ngmodules#add-another-feature-module\n - guide/lazy-loading-ngmodules#config-routes\n - guide/lazy-loading-ngmodules#configure-the-feature-modules-routes\n - guide/lazy-loading-ngmodules#configure-the-routes\n - guide/lazy-loading-ngmodules#confirm-its-working\n - guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\n - guide/lazy-loading-ngmodules#forroot-and-forchild\n - guide/lazy-loading-ngmodules#high-level-view\n - guide/lazy-loading-ngmodules#inside-the-feature-module\n - guide/lazy-loading-ngmodules#lazy-loading-feature-modules\n - guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\n - guide/lazy-loading-ngmodules#prerequisites\n - guide/lazy-loading-ngmodules#routes-at-the-app-level\n - guide/lazy-loading-ngmodules#set-up-an-app\n - guide/lazy-loading-ngmodules#set-up-the-ui\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n - guide/providers\n - guide/router\n-->"
}