{
  "id" : "guide/styleguide",
  "title" : "样式指南",
  "contents" : "<div class=\"content\">\n<h1 id=\"style-guide\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aci8il8qcdbvcwrbaztrvn9fe\"><i class=\"material-icons\">link</i>样式指南</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qarw1pva5ecr4cbl13xl9q4l\">正在寻找 Angular 语法、约定和应用程序结构的意见指南？请进！本样式指南介绍了首选约定，以及更重要的是，解释了原因。</p>\n<a id=\"toc\"></a>\n<h2 id=\"style-vocabulary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2b24t88z0fln9makp43wlb0s8\"><i class=\"material-icons\">link</i>风格指南的用词</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"a0ejjb8oe2nwsyl3txutokblx\">每个指导原则都会描述好的或者坏的做法，所有指导原则都用同样的风格描述。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"agorhzy4fntskczwxhr8fyby\">指导原则中使用的词汇用来表明推荐的程度。</p>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3eh4yajx7niui6j4jgr7u55dq\"><strong>坚持</strong>意味着总是应该遵循的约定。说<em>\"始终\"</em>可能显得有点绝对，应该\"始终\"遵循的指导原则非常之少，不过，只有遇到极不寻常的情况才能打破<em>坚持</em>的原则。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37tf042nz89cyd9l9mzrmvryg\"><strong>考虑</strong> 指南通常应该遵循。如果你完全理解指南背后的含义，并且有充分的理由偏离，那么就这样做。请努力保持一致。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5luu54sn1plytzgddk1r2jyaf\"><strong>避免</strong> 表示你几乎不应该做的事情。\n<em>避免</em> 的代码示例有一个明显的红色标题。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88iwa4uqot1k64x29rexzypku\"><strong>为什么？</strong> 给出了遵循先前建议的原因。</p>\n</div>\n<h2 id=\"file-structure-conventions\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4h49ucjuvweu5iplgwbpbv3c5\"><i class=\"material-icons\">link</i>文件结构约定</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7w2vsvbrhmsezsof1uzpmqk\">一些代码示例显示了一个文件，该文件有一个或多个同名伴侣文件。例如，\n<code>hero.component.ts</code> 和 \n<code>hero.component.html</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sebyvl2eowwfpv9lq5z64g28\">指南使用快捷方式 \n<code>hero.component.ts|html|css|spec</code> 来表示这些不同的文件。使用此快捷方式使本指南的文件结构更易于阅读，并且更简洁。</p>\n<a id=\"single-responsibility\"></a>\n<h2 id=\"single-responsibility\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94xyn6xpuo11uve5x3vem22k8\"><i class=\"material-icons\">link</i>单一职责</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80fp3a0xi1qvc1qapchu9ivjf\">将 \n<a href=\"https://wikipedia.org/wiki/Single_responsibility_principle\"><i>单一职责原则</i> (SRP)</a> 应用于所有组件、服务和其他符号。 这有助于使应用更简洁、更易于阅读和维护，并更易于测试。</p>\n<a id=\"01-01\"></a>\n<h3 id=\"rule-of-one\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7d9eytxyhsb8eiyz4pzqc5606\"><i class=\"material-icons\">link</i>单一原则</h3>\n<h4 id=\"style-01-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31b9bfte31oh3zr4zi45n827z\"><i class=\"material-icons\">link</i>样式 01-01</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2syssaf4i2fugtrttybhwzabm\"><strong>坚持</strong>每个文件只定义一样东西（比如服务或组件）。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ekv9fkra1ymgiqxre1bv3d8u2\"><strong>考虑</strong>把文件大小限制在 400 行代码以内。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fxmoygj1tma771o80qzdc01z\"><strong>原因：</strong>每个文件一个组件，使阅读、维护和避免源代码控制中与团队的冲突变得容易得多。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cczz0zr2apwt12p3ky6oqrk03\"><strong>原因：</strong>每个文件一个组件可以避免隐藏的错误，这些错误通常发生在将组件组合在一个文件中时，它们可能在文件中共享变量，创建不必要的闭包或与依赖项的不必要耦合。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"192hkwfg5jyrnzefz80ozczmc\"><strong>原因：</strong>单个组件可以是其文件的默认导出，这有助于使用路由器进行惰性加载。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajt52lqdye6njcaw6s6libfhu\">关键是使代码更可重用、更易于阅读，并减少错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3tqk75cacqg1budgyo9pzp6ko\">下面的<em>负面</em>例子定义了 <code>AppComponent</code>，它来引导应用程序，定义了 <code>Hero</code> 模型对象，并从服务器加载了英雄 ... 所有都在同一个文件。<em>不要这么做</em>。</p>\n<code-example path=\"styleguide/src/01-01/app/heroes/hero.component.avoid.ts\" title=\"app/heroes/hero.component.ts\">\n/* avoid */\n\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>, <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nclass Hero {\n  id: number;\n  name: string;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-app',\n  template: `\n      &lt;h1&gt;{{title}}&lt;/h1&gt;\n      &lt;pre&gt;{{heroes | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&lt;/pre&gt;\n    `,\n  styleUrls: ['app/app.component.css']\n})\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  title = 'Tour of Heroes';\n\n  heroes: Hero[] = [];\n\n  ngOnInit() {\n    getHeroes().then(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  exports: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\nconst HEROES: Hero[] = [\n  {id: 1, name: 'Bombasto'},\n  {id: 2, name: 'Tornado'},\n  {id: 3, name: 'Magneta'},\n];\n\nfunction getHeroes(): Promise&lt;Hero[]&gt; {\n  return Promise.resolve(HEROES); // TODO: get hero data from the server;\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ev47lw4xoirufw3396ridjxew\">最好将组件及其支撑部件重新分配到独立的文件。</p>\n<code-tabs>\n\n  <code-pane title=\"main.ts\" path=\"styleguide/src/01-01/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule }      from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n  <code-pane title=\"app/app.module.ts\" path=\"styleguide/src/01-01/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n\n  <code-pane title=\"app/app.component.ts\" path=\"styleguide/src/01-01/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { HeroService } from './heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-app',\n  template: `\n      &lt;toh-heroes&gt;&lt;/toh-heroes&gt;\n    `,\n  styleUrls: ['./app.component.css'],\n  providers: [ HeroService ]\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/01-01/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from './shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n      &lt;pre&gt;{{heroes | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&lt;/pre&gt;\n    `\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) {}\n\n  ngOnInit() {\n    this.heroService.getHeroes()\n      .then(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/heroes/shared/hero.service.ts\" path=\"styleguide/src/01-01/app/heroes/shared/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n  getHeroes() {\n    return Promise.resolve(HEROES);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/heroes/shared/hero.model.ts\" path=\"styleguide/src/01-01/app/heroes/shared/hero.model.ts\">\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/heroes/shared/mock-heroes.ts\" path=\"styleguide/src/01-01/app/heroes/shared/mock-heroes.ts\">\nimport { Hero } from './hero.model';\n\nexport const HEROES: Hero[] = [\n  {id: 1, name: 'Bombasto'},\n  {id: 2, name: 'Tornado'},\n  {id: 3, name: 'Magneta'},\n];\n\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbil2w5rylowyujqxc8l3bnfr\">随着应用的增长，此规则变得更加重要。 \n<a href=\"guide/styleguide#toc\">返回顶部</a></p>\n<a id=\"01-02\"></a>\n<h3 id=\"small-functions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2k2hrftutwcc5v7l8ewgjpke\"><i class=\"material-icons\">link</i>小型函数</h3>\n<h4 id=\"style-01-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3akt4073105sng1q7t1rbw478\"><i class=\"material-icons\">link</i>样式 01-02</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dmwm5ini1173gcineli7cy4v\"><strong>执行：</strong>定义小型函数</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5idqe4evomxfuvme26eyyh0qa\"><strong>考虑：</strong>限制为不超过 75 行。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dglu00z4uonb9bknj9u0ebm88\"><strong>原因：</strong>小型函数更容易测试，尤其是在它们只做一件事并服务于一个目的时。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzw0266y64htolt992i1mpzyk\"><strong>原因：</strong>小型函数促进重用。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alrdcrn0epi3cal4tvhai92g1\"><strong>原因：</strong>小型函数更容易阅读。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7aepkxgg98q3249eo6q7s0hvc\"><strong>原因：</strong>小型函数更容易维护。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ai35uim0lae4uz7cfg7hzxbur\"><strong>原因：</strong>小型函数有助于避免大型函数带来的隐藏错误，这些错误与外部范围共享变量、创建不必要的闭包或与依赖项的不必要耦合。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<h2 id=\"naming\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bw9rijmxkc9s0fx8psh0ebgeu\"><i class=\"material-icons\">link</i>命名</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5ihs9871fa8fm0g5199kz1h5\">命名约定对于可维护性和可读性至关重要。本指南建议对文件名和符号名使用命名约定。</p>\n<a id=\"02-01\"></a>\n<h3 id=\"general-naming-guidelines\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3g6tb3wxvv6zlp8j26hna6u1p\"><i class=\"material-icons\">link</i>通用命名指南</h3>\n<h4 id=\"style-02-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6w3g64oztprm7d4u3hkg725gf\"><i class=\"material-icons\">link</i>样式 02-01</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar7u9gn259nku7e4o2p48yp5p\"><strong>坚持</strong>所有符号使用一致的命名规则。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40ok0mzpjpzuocqoxw5wmwtfs\"><strong>执行：</strong>遵循描述符号的特性然后是其类型的模式。推荐的模式是 \n<code>feature.type.ts</code>。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fjmaf3oa3m29xk3tlrp989b6\"><strong>原因：</strong>命名约定有助于提供一种一致的方式，以便一目了然地找到内容。项目内部的一致性至关重要。与团队的一致性很重要。整个公司的一致性提供了巨大的效率。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18d7e6ioqwgno85o978dxudzg\"><strong>原因：</strong>命名约定应该简单地帮助更快地找到所需的代码，并使其更容易理解。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j9wrqqiq8g8oqoqd5ruukw72\"><strong>原因：</strong>文件夹和文件的名字应该清楚地传达它们的意图。例如，\n<code>app/heroes/hero-list.component.ts</code> 可能包含一个管理英雄列表的组件。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"02-02\"></a>\n<h3 id=\"separate-file-names-with-dots-and-dashes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bre81j13jqs96vxc27jwrmhf1\"><i class=\"material-icons\">link</i>用点和破折号分隔文件名</h3>\n<h4 id=\"style-02-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1syxw9ujh6cd1awlhzvt6uloh\"><i class=\"material-icons\">link</i>样式 02-02</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7i6lvzw34w54uqx4dnvahlpyg\"><strong>坚持</strong> 在描述性名字中，用横杠来分隔单词。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c96g4jkvohdy6y5z61849d4de\"><strong>坚持</strong>使用点来分隔描述性名字和类型。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"en8xyxviucu87dd1jhfrddf8c\"><strong>执行：</strong>对所有组件使用一致的类型名，遵循描述组件的特性然后是其类型的模式。推荐的模式是 \n<code>feature.type.ts</code>。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"1my6q8ctb2jf1iidxgbci24lb\"><strong>坚持</strong>使用惯用的后缀来描述类型，包括 <code>*.service</code>、<code>*.component</code>、<code>*.pipe</code>、<code>.module</code>、<code>.directive</code>。必要时可以创建更多类型名，但必须注意，不要创建太多。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oypo1n2sja883td3cvxo1keq\"><strong>原因：</strong>类型名提供了一种一致的方式，可以快速识别文件中包含的内容。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76n88j4gzqlfiqcrfgf9dg9a3\"><strong>原因：</strong>类型名使用编辑器或 IDE 的模糊搜索技术很容易找到特定类型的文件。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49tkizryw1aar3g5z0uafjkkp\"><strong>原因：</strong>未缩写的类型名，如 \n<code>.service</code>，具有描述性和明确性。 缩写，如 \n<code>.srv</code>、\n<code>.svc</code> 和 \n<code>.serv</code>，可能会造成混淆。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ddz4kp7kua4cxedeu5aqpx1n\"><strong>原因：</strong>类型名提供任何自动化任务的模式匹配。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"02-03\"></a>\n<h3 id=\"symbols-and-file-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sq373oo9ics75ns296wzxloz\"><i class=\"material-icons\">link</i>符号和文件名</h3>\n<h4 id=\"style-02-03\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"1zv5bu95qtgfoy0fo9pyvjxuc\"><i class=\"material-icons\">link</i>风格 02-03</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5hxd5zilhm56u356eykrhv444\"><strong>坚持</strong>为所有东西使用一致的命名约定，以它们所代表的东西命名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6bbfegarpzxq11ow8tog273ab\"><strong>坚持</strong>使用大写驼峰命名法来命名类。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8lz9ifcr6j39z1an5el623eg6\"><strong>坚持</strong>匹配符号名与它所在的文件名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cnz7onulq6aiibbe0t2uxonn\"><strong>执行：</strong>将符号名附加到传统的后缀（如 \n<code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>、 \n<code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>、\n<code>Module</code>、\n<code><a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code> 或 \n<code>Service</code>）以表示该类型的对象。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ew6z5gge04dqzbe1ue1mhjy9b\"><strong>执行：</strong>将文件名附加到传统的后缀（如 \n<code>.component.ts</code>、\n<code>.directive.ts</code>、 \n<code>.module.ts</code>、\n<code>.pipe.ts</code> 或 \n<code>.service.ts</code>）以表示该类型的文件。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4akppw0007ffu2sfa4rvl90fw\"><strong>原因：</strong>一致的约定使快速识别和引用不同类型的资产变得容易。</p>\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bphj6iea0eux79yxawoqua4il\">符号名</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41kfk3jb03kxjcs7tcmznspgw\">文件名</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\n        export class AppComponent { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"27j29v1s9ivfdp62o8crzwdwn\">app.component.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\n        export class HeroesComponent { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dk4sjptze1jpgnggydva5gfkf\">heroes.component.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\n        export class HeroListComponent { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4r8ni18ju09yf93k5p09ld8om\">hero-list.component.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\n        export class HeroDetailComponent { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"1p5ejrxiywksq3wxk9zgdtodi\">hero-detail.component.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ ... })\n        export class ValidationDirective { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"aeko3xn4uqgimohb0v6shp2ej\">validation.directive.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class AppModule\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"269nlbyfzdkciw9adeualrirx\">app.module.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' })\n        export class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dg6r99uhmkd6eg1ijsbkmnr5g\">init-caps.pipe.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\n        export class UserProfileService { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8z7pjvbwtmjmhg94d56veow8c\">user-profile.service.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"02-04\"></a>\n<h3 id=\"service-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egtllfu0xqypw2j9doqbhvxc2\"><i class=\"material-icons\">link</i>服务名</h3>\n<h4 id=\"style-02-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5v00l93a0ngoquq2dv7kohwc3\"><i class=\"material-icons\">link</i>样式 02-04</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2n8luh77rfewi6lx4ycu0i84u\"><strong>坚持</strong>使用一致的规则命名服务，以它们的特性来命名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acrez3oxppulvb338xhn32zp1\"><strong>执行：</strong>将服务类名附加到 \n<code>Service</code>。 例如，获取数据或英雄的东西应该被称为 \n<code>DataService</code> 或 \n<code>HeroService</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jxdi8zum4jnyuuxy060bhqhe\">一些术语是明确的服务。它们通常以“-er”结尾来表示代理。你可能更喜欢将记录消息的服务命名为 \n<code>Logger</code> 而不是 \n<code>LoggerService</code>。 决定此例外是否在你的项目中是可接受的。 始终追求一致性。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0tgiubtsu4wh1w1ub84bqgac\"><strong>原因：</strong>提供一种一致的方式来快速识别和引用服务。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axac7y2qgrwpgisdz0cu6wnml\"><strong>原因：</strong>清晰的服务名，如 \n<code>Logger</code>，不需要后缀。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tbizh1d5z1j9n6htxb9ygv0\"><strong>原因：</strong>服务名，如 \n<code>Credit</code>，是名词，需要后缀，并且在不明显是服务还是其他东西时，应该使用后缀命名。</p>\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bphj6iea0eux79yxawoqua4il\">符号名</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41kfk3jb03kxjcs7tcmznspgw\">文件名</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\n        export class HeroDataService { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"a24e8yjkq15pabgf7qjgrknmg\">hero-data.service.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\n        export class CreditService { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3w6pspvsml5gfl8j42rxj6mai\">credit.service.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\n        export class Logger { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6kklgnrm8kz6afwdglwhbl9y6\">logger.service.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"02-05\"></a>\n<h3 id=\"bootstrapping\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p29plvvbfir7eo01lmju80ab\"><i class=\"material-icons\">link</i>引导</h3>\n<h4 id=\"style-02-05\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e7nh80rakku37masb53jx90c\"><i class=\"material-icons\">link</i>样式 02-05</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6jvm4g8vlxizge8fv5m38guu\"><strong>执行：</strong>将应用的引导和平台逻辑放在名为 \n<code>main.ts</code> 的文件中。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ar8yx9jbhuxl2a2u6i07l6wic\"><strong>坚持</strong>在引导逻辑中包含错误处理代码。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"202sb3samz538medazlensvqk\"><strong>避免：</strong>将应用逻辑放在 \n<code>main.ts</code> 中。相反，考虑将其放在组件或服务中。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1r9bkatrm5bknh935rg9pnqcm\"><strong>原因：</strong>遵循应用启动逻辑的一致约定。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfsga7dhf1up897zkdx1rb9vz\"><strong>原因：</strong>遵循其他技术平台的熟悉约定。</p>\n</div>\n<code-example path=\"styleguide/src/02-05/main.ts\" title=\"main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule }              from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .then(success =&gt; console.log(`Bootstrap success`))\n  .catch(err =&gt; console.error(err));\n\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"02-06\"></a>\n<h3 id=\"directive-selectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dq5s2wjuptqiomfjdsc2ffvtm\"><i class=\"material-icons\">link</i>指令选择器</h3>\n<h4 id=\"style-02-06\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"517z2e7aogobdderyrq6s93c3\"><i class=\"material-icons\">link</i>样式 02-06</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4vwoh6lfx57ooq12zcdc9f1ty\"><strong>坚持</strong>使用小驼峰形式命名指令的选择器。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"591fdl35gck5e3ki4h17ypj0q\"><strong>原因：</strong>保持绑定到视图的指令中定义的属性名称与属性名称一致。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54d3kd28bm8qz28osdz7qqs93\"><strong>原因：</strong>Angular HTML 解析器区分大小写，并识别小驼峰命名法。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"02-07\"></a>\n<h3 id=\"custom-prefix-for-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hdk6ntjkt4z7zfrhsml72elf\"><i class=\"material-icons\">link</i>组件的自定义前缀</h3>\n<h4 id=\"style-02-07\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"agcwyqgcbyh9j54xs4sckznp\"><i class=\"material-icons\">link</i>风格 02-07</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87wqit0mtwpigds80xpcuqru5\"><strong>应该：</strong>使用带连字符的、小写元素选择器值（例如 \n<code>admin-users</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59rnud44cch33n9o641cqut5q\"><strong>应该：</strong>为组件选择器使用自定义前缀。 例如，前缀 \n<code>toh</code> 代表 \n<strong>T</strong>our \n<strong>o</strong>f \n<strong>H</strong>eroes，前缀 \n<code>admin</code> 代表管理功能区域。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbcj0pnayn6v3d777zjbyqhac\"><strong>应该：</strong>使用标识功能区域或应用程序本身的前缀。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83g74glun5uzgkg5kp4413k2q\"><strong>原因：</strong>防止元素名称与其他应用程序中的组件以及原生 HTML 元素发生冲突。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ift9ti9s1fncz6phc5sy9x9d\"><strong>原因：</strong>使在其他应用程序中推广和共享组件变得更容易。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f8zx8s5knrwz7o8nuep1zn5c\"><strong>原因：</strong>组件在 DOM 中易于识别。</p>\n</div>\n<code-example path=\"styleguide/src/02-07/app/heroes/hero.component.avoid.ts\" region=\"example\" title=\"app/heroes/hero.component.ts\">\n/* avoid */\n\n// HeroComponent is in the Tour of Heroes feature\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero'\n})\nexport class HeroComponent {}\n\n</code-example>\n<code-example path=\"styleguide/src/02-07/app/users/users.component.avoid.ts\" region=\"example\" title=\"app/users/users.component.ts\">\n/* avoid */\n\n// UsersComponent is in an Admin feature\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'users'\n})\nexport class UsersComponent {}\n\n</code-example>\n<code-example path=\"styleguide/src/02-07/app/heroes/hero.component.ts\" region=\"example\" title=\"app/heroes/hero.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero'\n})\nexport class HeroComponent {}\n\n</code-example>\n<code-example path=\"styleguide/src/02-07/app/users/users.component.ts\" region=\"example\" title=\"app/users/users.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'admin-users'\n})\nexport class UsersComponent {}\n\n</code-example>\n<a id=\"02-08\"></a>\n<h3 id=\"custom-prefix-for-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blrjs6ov370didsk6zggnktqc\"><i class=\"material-icons\">link</i>指令的自定义前缀</h3>\n<h4 id=\"style-02-08\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79koyo0ew2bgl3rr47b3vdy3x\"><i class=\"material-icons\">link</i>样式 02-08</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nl9vw6ha25g6wsp525gsgkmr\"><strong>应该：</strong>为指令的选择器使用自定义前缀（例如，来自 \n<strong>T</strong>our \n<strong>o</strong>f \n<strong>H</strong>eroes 的前缀 \n<code>toh</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9bay98a4iyb2yffvi8jqbhuvl\"><strong>坚持</strong>用小驼峰形式拼写非元素选择器，除非该选择器用于匹配原生 HTML 属性。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dx4ovmiz488ney9ulrjpw2fa\"><strong>原因：</strong>防止名称冲突。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yrnv0cyzrfmjvm3kidocpfl7\"><strong>原因：</strong>指令易于识别。</p>\n</div>\n<code-example path=\"styleguide/src/02-08/app/shared/validate.directive.avoid.ts\" region=\"example\" title=\"app/shared/validate.directive.ts\">\n/* avoid */\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[validate]'\n})\nexport class ValidateDirective {}\n\n</code-example>\n<code-example path=\"styleguide/src/02-08/app/shared/validate.directive.ts\" region=\"example\" title=\"app/shared/validate.directive.ts\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidate]'\n})\nexport class ValidateDirective {}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"02-09\"></a>\n<h3 id=\"pipe-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2opbzxd8goomybyqok3xpg07\"><i class=\"material-icons\">link</i>管道名称</h3>\n<h4 id=\"style-02-09\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dccx8wyl0ao2oh01itc2pk68z\"><i class=\"material-icons\">link</i>风格 02-09</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu74vuk9lzv10709mjjd92ve4\"><strong>应该：</strong>为所有管道使用一致的名称，以其功能命名。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23cu21i9xj6up287dyo5s3ikj\"><strong>原因：</strong>提供一种一致的方式来快速识别和引用管道。</p>\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bphj6iea0eux79yxawoqua4il\">符号名</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41kfk3jb03kxjcs7tcmznspgw\">文件名</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'ellipsis' })\n        export class EllipsisPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9stj85viryop8pz5at3czuiw4\">ellipsis.pipe.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' })\n        export class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dg6r99uhmkd6eg1ijsbkmnr5g\">init-caps.pipe.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"02-10\"></a>\n<h3 id=\"unit-test-file-names\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"69s6h7llsun3hlkbeniah9f9p\"><i class=\"material-icons\">link</i>单元测试文件名</h3>\n<h4 id=\"style-02-10\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"22aavcnen3xikj4hukikxv4bi\"><i class=\"material-icons\">link</i>风格 02-10</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e3mnxsyuga4ki9exari50m8qb\"><strong>坚持</strong>测试规格文件名与被测试组件文件名相同。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3vfiq1ncrywcxyeslaicj8isg\"><strong>坚持</strong>测试规格文件名添加 <code>.spec</code> 后缀。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q0o2kq2q82uo6i38akchbqbc\"><strong>原因：</strong>提供一种一致的方式来快速识别测试。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2b6fxy97vlug05nia1mr10bij\"><strong>原因：</strong>为 \n<a href=\"http://karma-runner.github.io/\">karma</a> 或其他测试运行器提供模式匹配。</p>\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gzfxk5hwywh1oc74t4nnzhvu\">测试类型</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpnf906dhue0anic8w3tegkaf\">文件名</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"69cveo19ymrqva8thkfgs8nd2\">组件</p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qtaxc7a0ewe2pv0zmyb1gm46\">heroes.component.spec.ts</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfq415mqf7lp0dt83iqp6m4mf\">hero-list.component.spec.ts</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3kr29e6y0kuc8svctwc8yro5\">hero-detail.component.spec.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8f4c1wfymp8j8r1yfa8pr7zkh\">服务</p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dn91dlsaw28f996mjz33veykw\">logger.service.spec.ts</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5c5qrghznmrhqmr6aomnywd5l\">hero.service.spec.ts</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cckav308gxfae9zuyuemhyzj9\">filter-text.service.spec.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"evdwytpbmn4911sybhx4x4x4s\">管道</p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16b68q3b7m2uxnpb3xuaim93b\">ellipsis.pipe.spec.ts</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"133hew2p6rzhk0ww07awcr4x9\">init-caps.pipe.spec.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"02-11\"></a>\n<h3 id=\"end-to-end-e2e-test-file-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9toioab8b5b2tgoh0aynacwgs\"><i class=\"material-icons\">link</i><em>端到端</em>（E2E）测试文件名</h3>\n<h4 id=\"style-02-11\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j0mzde87vak6tyr2paxo92fm\"><i class=\"material-icons\">link</i>样式 02-11</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hvxlerm474p93pkv8qujlve2\"><strong>应该：</strong>将端到端测试规范文件命名为它们测试的功能，并以 \n<code>.e2e-spec</code> 为后缀。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvzm6nhfi3ifsn0ma8bvsbkub\"><strong>原因：</strong>提供一种一致的方式来快速识别端到端测试。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vcmyqellnxadvvmpvtmjdfcy\"><strong>原因：</strong>为测试运行器和构建自动化提供模式匹配。</p>\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gzfxk5hwywh1oc74t4nnzhvu\">测试类型</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpnf906dhue0anic8w3tegkaf\">文件名</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69ox69lxd8m5umzef60bmkbk0\">端到端测试</p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0rubiinpp8e7q9aag9ojm41h\">app.e2e-spec.ts</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az477rrg7wanpix1lj1olpxpp\">heroes.e2e-spec.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"02-12\"></a>\n<h3 id=\"angular-ngmodule-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd9hyzxpd1ps9mpuhhzid3ay2\"><i class=\"material-icons\">link</i>Angular \n<em>NgModule</em> 名称</h3>\n<h4 id=\"style-02-12\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drqrwtz11qc7n52v48yc268i8\"><i class=\"material-icons\">link</i>样式 02-12</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dk2pd9ypydqufv2v8umadnb2\"><strong>应该：</strong>将符号名称附加 \n<code>Module</code> 后缀。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd27felhixkd3oj06yt0cekni\"><strong>应该：</strong>将文件名设置为 \n<code>.module.ts</code> 扩展名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93ump97hzzc0ksxqv4piuljcc\"><strong>应该：</strong>将模块命名为它所在的特性和文件夹。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"552wpbrzzt7e2zsjmu0lgxdr6\"><strong>原因：</strong>提供一种一致的方式来快速识别和引用模块。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dm3xfj8zzobdchrq48oy4jgm\"><strong>原因：</strong>大驼峰命名法是用于识别可以使用构造函数实例化的对象的约定。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2xz6iasueoqgexjqd0a4lxpo\"><strong>原因：</strong>轻松识别模块作为同名特性的根。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s1jijbthqwzi8kxu0nmglczq\"><strong>应该：</strong>将 \n<em>RoutingModule</em> 类名附加 \n<code>RoutingModule</code> 后缀。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7x8plf5kazcukwtas96030d4d\"><strong>应该：</strong>将 \n<em>RoutingModule</em> 的文件名以 \n<code>-routing.module.ts</code> 结尾。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4myi0xblsm67m2dcgazttl8zz\"><strong>原因：</strong>\n<code>RoutingModule</code> 是一个专门用于配置 Angular 路由器的模块。 一致的类和文件名约定使这些模块易于识别和验证。</p>\n</div>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bphj6iea0eux79yxawoqua4il\">符号名</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41kfk3jb03kxjcs7tcmznspgw\">文件名</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class AppModule { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"269nlbyfzdkciw9adeualrirx\">app.module.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class HeroesModule { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wdfi6f0ack09y39s1lryrp9a\">heroes.module.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class VillainsModule { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcv71girphc6otucksd3ditgz\">villains.module.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class AppRoutingModule { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lp7ydzue9h9js582lpb01lpk\">app-routing.module.ts</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n      <code-example hidecopy=\"\" class=\"no-box\">\n        @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ ... })\n        export class HeroesRoutingModule { }\n      </code-example>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nbqkw1gwv9yk96bk5pt478v7\">heroes-routing.module.ts</p>\n    </td>\n  </tr>\n</tbody></table>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<h2 id=\"coding-conventions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t2imevc3jx1o7rerrugra6c7\"><i class=\"material-icons\">link</i>编码规范</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1usm5smvvyiva6dqxeiu0ukdy\">有一套一致的编码、命名和空白规范。</p>\n<a id=\"03-01\"></a>\n<h3 id=\"classes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtpuzegyjmcbul5yz5jn1ham3\"><i class=\"material-icons\">link</i>类</h3>\n<h4 id=\"style-03-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy65x7b9pltbg18qrd0qmbsim\"><i class=\"material-icons\">link</i>样式 03-01</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69bihtqbyv6ocrqfxw17gdfw1\"><strong>请</strong>使用大驼峰命名法命名类。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9e1tdsz1pgit45cq83syoua2f\"><strong>原因：</strong>遵循类名的传统思维。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cog0vfi6tkbag4frp0r2nsr86\"><strong>原因：</strong>类可以被实例化并构造一个实例。 按照惯例，大驼峰命名法表示一个可构造的资产。</p>\n</div>\n<code-example path=\"styleguide/src/03-01/app/core/exception.service.avoid.ts\" region=\"example\" title=\"app/shared/exception.service.ts\">\n/* avoid */\n\nexport class exceptionService {\n  constructor() { }\n}\n\n</code-example>\n<code-example path=\"styleguide/src/03-01/app/core/exception.service.ts\" region=\"example\" title=\"app/shared/exception.service.ts\">\nexport class ExceptionService {\n  constructor() { }\n}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"03-02\"></a>\n<h3 id=\"constants\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ppkbhohhkbcp78e8bfv72ifq\"><i class=\"material-icons\">link</i>常量</h3>\n<h4 id=\"style-03-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pdk151qyh5j3vq1sunr4nilt\"><i class=\"material-icons\">link</i>样式 03-02</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayoct02vpj0btsm2ztcq5idit\"><strong>请</strong>使用 \n<code>const</code> 声明变量，如果它们的数值在应用生命周期内不应该改变。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bt2hrhsrcmc8qpcvvrpycu7m\"><strong>原因：</strong>向读者传达该数值是不变的。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az3t2lqvhslawgjmag996ex2e\"><strong>原因：</strong>TypeScript 通过要求立即初始化和防止后续重新赋值来帮助强制执行该意图。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jgcirvw4kzozybmr11sg7con\"><strong>考虑</strong>使用小驼峰命名法拼写 \n<code>const</code> 变量。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ms7s62u4kwm0bsm68fuea7lp\"><strong>原因：</strong>小驼峰命名法变量名（\n<code>heroRoutes</code>）比传统的 UPPER_SNAKE_CASE 命名（\n<code>HERO_ROUTES</code>）更容易阅读和理解。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8edfs9287w0muk1nmfxgiphx8\"><strong>原因：</strong>使用 UPPER_SNAKE_CASE 命名常量的传统反映了现代 IDE 出现之前的时代，现代 IDE 可以快速显示 \n<code>const</code> 声明。 TypeScript 阻止意外重新赋值。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avwaz06lomnzrqchn6gw49mw5\"><strong>请</strong>容忍\n<em>现有</em>的 \n<code>const</code> 变量，这些变量以 UPPER_SNAKE_CASE 拼写。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"430y8hzka6id16d2mvrkpcfav\"><strong>原因：</strong>UPPER_SNAKE_CASE 的传统仍然流行且普遍存在， 尤其是在第三方模块中。 更改它们通常不值得，因为这样做可能会破坏现有代码和文档。</p>\n</div>\n<code-example path=\"styleguide/src/03-02/app/core/data.service.ts\" title=\"app/shared/data.service.ts\">\nexport const mockHeroes   = ['Sam', 'Jill']; // prefer\nexport const heroesUrl    = 'api/heroes';    // prefer\nexport const VILLAINS_URL = 'api/villains';  // tolerate\n\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"03-03\"></a>\n<h3 id=\"interfaces\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6y7mlyv0tu55nnw6b3tuujibt\"><i class=\"material-icons\">link</i>接口</h3>\n<h4 id=\"style-03-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8opyq5jtx8qtiout3ew00my46\"><i class=\"material-icons\">link</i>样式 03-03</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dppxv6wkne2v457vz0gf60jwh\"><strong>请</strong>使用大驼峰命名法命名接口。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oquz2dm15abix1pgssp8xinc\"><strong>考虑</strong>命名接口时不使用 \n<code>I</code> 前缀。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90qcgwsmyfkraydl2vhnc2pyy\"><strong>考虑</strong>对服务和可声明对象（组件、指令和管道）使用类而不是接口。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1x8322d8az5794gzjic7q9lgv\"><strong>考虑</strong>对数据模型使用接口。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ez7gut5vp6beh2kaayhgmf28\"><strong>原因：</strong>\n<a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines\">TypeScript 指南</a> 不鼓励使用 \n<code>I</code> 前缀。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75uyks0u9p0botn7kpfv6j305\"><strong>原因：</strong>仅使用类比\n<em>类加接口</em>的代码更少。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brg2y40oksui1gpmy48jqolnh\"><strong>原因：</strong>类可以充当接口（使用 \n<code>implements</code> 而不是 \n<code>extends</code>）。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg5u8hrht3jio7r0yrn7pg7h2\"><strong>原因：</strong>接口类可以在 Angular 依赖注入中充当提供者查找令牌。</p>\n</div>\n<code-example path=\"styleguide/src/03-03/app/core/hero-collector.service.avoid.ts\" region=\"example\" title=\"app/shared/hero-collector.service.ts\">\n/* avoid */\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { IHero } from './hero.model.avoid';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroCollectorService {\n  hero: IHero;\n\n  constructor() { }\n}\n\n</code-example>\n<code-example path=\"styleguide/src/03-03/app/core/hero-collector.service.ts\" region=\"example\" title=\"app/shared/hero-collector.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Hero } from './hero.model';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroCollectorService {\n  hero: Hero;\n\n  constructor() { }\n}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"03-04\"></a>\n<h3 id=\"properties-and-methods\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43mmg8r9if665za4nv8utyx51\"><i class=\"material-icons\">link</i>属性和方法</h3>\n<h4 id=\"style-03-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezx97oanati7n66q4c49en5gu\"><i class=\"material-icons\">link</i>样式 03-04</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dob5vf3hqczrha5xj1jod7yp6\"><strong>请</strong>使用小驼峰命名法命名属性和方法。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72es7kwx2vjn1qgfhmy4uctoi\"><strong>避免</strong>在私有属性和方法前面加上下划线。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wdu6rkjb7loith4j21ml56cx\"><strong>原因：</strong>遵循属性和方法的传统思维。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rq09css7zpjx4wzp9acda2wu\"><strong>原因：</strong>JavaScript 缺乏真正的私有属性或方法。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dznirykr64k84kfrx21caf0in\"><strong>原因：</strong>TypeScript 工具可以轻松识别私有属性和方法与公共属性和方法。</p>\n</div>\n<code-example path=\"styleguide/src/03-04/app/core/toast.service.avoid.ts\" region=\"example\" title=\"app/shared/toast.service.ts\">\n/* avoid */\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class ToastService {\n  message: string;\n\n  private _toastCount: number;\n\n  hide() {\n    this._toastCount--;\n    this._log();\n  }\n\n  show() {\n    this._toastCount++;\n    this._log();\n  }\n\n  private _log() {\n    console.log(this.message);\n  }\n}\n\n</code-example>\n<code-example path=\"styleguide/src/03-04/app/core/toast.service.ts\" region=\"example\" title=\"app/shared/toast.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class ToastService {\n  message: string;\n\n  private toastCount: number;\n\n  hide() {\n    this.toastCount--;\n    this.log();\n  }\n\n  show() {\n    this.toastCount++;\n    this.log();\n  }\n\n  private log() {\n    console.log(this.message);\n  }\n}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"03-06\"></a>\n<h3 id=\"import-line-spacing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tmdf01nu00uprfzb05zs2whu\"><i class=\"material-icons\">link</i>导入行间距</h3>\n<h4 id=\"style-03-06\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z1jgub3zneri14bcmorpf1fu\"><i class=\"material-icons\">link</i>样式 03-06</h4>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3snglj098toqrgmlu3ad0k8k0\"><strong>考虑</strong>在第三方导入和应用程序导入之间留下一行空行。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4u9g82x3knxixlnk3a4fligd\"><strong>考虑</strong>按模块字母顺序排列导入行。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37n1pniss2btc18ar6lv3xyca\"><strong>考虑</strong>按字母顺序排列解构的导入符号。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fqqsm18wx76xoivmysitbr1b\"><strong>原因：</strong>空行将\n<em>你的</em>内容与\n<em>他们的</em>内容分开。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dib5hvzf65rmjjlrqkplfcebb\"><strong>原因：</strong>按字母顺序排列使符号更容易阅读和定位。</p>\n</div>\n<code-example path=\"styleguide/src/03-06/app/heroes/shared/hero.service.avoid.ts\" region=\"example\" title=\"app/heroes/shared/hero.service.ts\">\n/* avoid */\n\nimport { ExceptionService, SpinnerService, ToastService } from '../../core';\nimport { <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> } from '@angular/http';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Hero } from './hero.model';\n\n</code-example>\n<code-example path=\"styleguide/src/03-06/app/heroes/shared/hero.service.ts\" region=\"example\" title=\"app/heroes/shared/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> }       from '@angular/http';\n\nimport { Hero } from './hero.model';\nimport { ExceptionService, SpinnerService, ToastService } from '../../core';\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<h2 id=\"application-structure-and-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"di7jmh60xil3z5lrm8gqx1bph\"><i class=\"material-icons\">link</i>应用结构和 NgModules</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p3jkcrcyvfbvnzgbhq08i48e\">对实现有近期的看法，对愿景有长期的看法。从小处着手，但要牢记应用程序未来的发展方向。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ws9v7o0rjfkdiqi6c11tqswh\">应用程序的所有代码都放在名为 \n<code>src</code> 的文件夹中。 所有功能区域都在自己的文件夹中，并有自己的 NgModule。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxl6za4oux6va1an6gatyx27j\">所有内容都是每个文件一个资产。每个组件、服务和管道都在自己的文件中。 所有第三方供应商脚本都存储在另一个文件夹中，而不是 \n<code>src</code> 文件夹中。 你没有编写它们，你也不希望它们弄乱 \n<code>src</code>。 使用本指南中关于文件命名的约定。 \n<a href=\"guide/styleguide#toc\">返回顶部</a></p>\n<a id=\"04-01\"></a>\n<h3 id=\"lift\"><em>LIFT</em></h3>\n<h4 id=\"style-04-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"608wi946u4izacn11tv9c1eo9\"><i class=\"material-icons\">link</i>样式 04-01</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45csvtzjo2apqn9moue40qw7e\"><strong>要</strong>构建应用结构，以便你能够\n<strong>快速</strong>定位代码， \n<strong>一眼</strong>识别代码， 保持\n<strong>最扁平</strong>的结构，并 \n<strong>尽量</strong>保持 DRY 原则。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qwk552pnwggzqarj1gvctvdk\"><strong>要</strong>定义结构以遵循这四条基本准则，按重要性排序。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ag0c0jbrenf9tnivfi2ied3er\"><strong>为什么？</strong>LIFT 提供了一个一致的结构，可以很好地扩展，模块化，并通过快速查找代码来提高开发人员效率。 要确认你对特定结构的直觉，请询问： \n<em>我是否可以快速打开并开始处理此功能的所有相关文件？</em></p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-02\"></a>\n<h3 id=\"locate\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y2b4qhtqn1cdm9jtdy4d62qb\"><i class=\"material-icons\">link</i>定位</h3>\n<h4 id=\"style-04-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dh24lrrxtprsfgw2go2256op\"><i class=\"material-icons\">link</i>样式 04-02</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3x1wpvntpf603e5jrlx29l8eu\"><strong>要</strong>使代码定位直观、简单、快速。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1b75kv8f5k7phur2n2jsvuep\"><strong>为什么？</strong>为了高效工作，你必须能够快速找到文件， 尤其是在你不知道（或不记得）文件\n<em>名称</em>的情况下。 将相关文件保存在直观的、彼此靠近的位置可以节省时间。 描述性的文件夹结构对你和你之后的人来说意义重大。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-03\"></a>\n<h3 id=\"identify\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jv8hgm53bojfdk7mh5g1bzo4\"><i class=\"material-icons\">link</i>识别</h3>\n<h4 id=\"style-04-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87xr8bc0x3y6nwdcfio7rok1o\"><i class=\"material-icons\">link</i>样式 04-03</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpd6nbfkdym3qaj2lxwtazv4j\"><strong>要</strong>命名文件，以便你能够立即知道它包含什么以及它代表什么。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvujvimy3shfwwahbd7e5rj9v\"><strong>要</strong>使用描述性的文件名，并将文件的内容限制为一个组件。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iztmcjhavbgzksp6ldcz6lwy\"><strong>避免</strong>包含多个组件、多个服务或混合内容的文件。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cva4b5j0xj71h79dwmfmgo7od\"><strong>为什么？</strong>减少查找代码的时间，提高效率。 较长的文件名比\n<em>简短但模糊</em>的缩写名称要好得多。</p>\n</div>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5u7vvhryn1y3me4190yhnuw\">当你有几个小的、密切相关的功能，这些功能在一个文件中比在多个文件中更容易发现和理解时，偏离\n<em>每个文件一个内容</em>规则可能是有利的。要谨慎使用此漏洞。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-04\"></a>\n<h3 id=\"flat\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6w0i0bniswsnubfa0lszfq8fh\"><i class=\"material-icons\">link</i>扁平</h3>\n<h4 id=\"style-04-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4a1ncuqsbgi7v8c5fkykhrmy9\"><i class=\"material-icons\">link</i>样式 04-04</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e3z6scakrb9ta7vvwbrgv4eq\"><strong>要</strong>尽可能保持扁平的文件夹结构。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9stdg327nuhtd0hj3khs3lj8i\"><strong>考虑</strong>当文件夹达到七个或更多文件时创建子文件夹。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g61j0gslek0h3wyv394k5vva\"><strong>考虑</strong>配置 IDE 以隐藏令人分心的、不相关的文件，例如生成的 \n<code>.js</code> 和 \n<code>.js.map</code> 文件。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cllb4vmfvcumdnkcv1s0q8yce\"><strong>为什么？</strong>没有人愿意在七层文件夹中搜索文件。 扁平的结构易于扫描。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azwxijbwo7q71c7ogw8fiidk2\">另一方面， \n<a href=\"https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\">心理学家认为</a> 当相邻的有趣事物超过九个时，人类就会开始感到吃力。 因此，当文件夹有十个或更多文件时，可能需要创建子文件夹。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mvkyzhnfwg1zanzb2jvuxm8q\">根据你的舒适程度做出决定。 使用更扁平的结构，直到创建新文件夹有明显的价值。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-05\"></a>\n<h3 id=\"t-dry-try-to-be-dry\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee4vbavan2t5bcatcr3nl480o\"><i class=\"material-icons\">link</i><em>T-DRY</em>（尽量保持\n<em>DRY</em>）</h3>\n<h4 id=\"style-04-05\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pnzqez0bktocefm8jrb2t94v\"><i class=\"material-icons\">link</i>样式 04-05</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88m3n2vjjmopmno6l7em78n0b\"><strong>要</strong>保持 DRY（不要重复自己）原则。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5opmacd9cb1rqell9fae0qix4\"><strong>避免</strong>过于 DRY 以至于牺牲可读性。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80ahsfcybzjjr638pj51umze7\"><strong>为什么？</strong>保持 DRY 原则很重要，但如果它牺牲了 LIFT 的其他要素，则并不重要。 这就是为什么它被称为\n<em>T-DRY</em>。 例如，将模板命名为 \n<code>hero-view.component.html</code> 是多余的，因为 使用 \n<code>.html</code> 扩展名，很明显它是一个视图。 但如果某些内容不明显或偏离约定，则将其写出来。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-06\"></a>\n<h3 id=\"overall-structural-guidelines\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4oduef1tzuflmf5uuhh001pcd\"><i class=\"material-icons\">link</i>总体结构的指导原则</h3>\n<h4 id=\"style-04-06\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"aspx2kt2f1giw7faoo4km5vdz\"><i class=\"material-icons\">link</i>风格 04-06</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"704y3mbntgoccisw5g6u7uqdu\"><strong>要</strong>从小处着手，但要牢记应用未来的发展方向。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8yk3nz54fvr73xbuqgg8mchtt\"><strong>坚持</strong>有一个近期实施方案和一个长期的愿景。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deipdu8dbpv2eu98d9za8ia2y\"><strong>要</strong>将所有应用代码放在名为 \n<code>src</code> 的文件夹中。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8bxg68mbkhhwgypbwzphzywl\"><strong>考虑</strong>当组件有多个配套文件（\n<code>.ts</code>、\n<code>.html</code>、\n<code>.css</code> 和 \n<code>.spec</code>）时，为组件创建一个文件夹。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sxghg3l1p6quoxmq2a5hlysc\"><strong>为什么？</strong>有助于在早期阶段保持应用结构小巧且易于维护，同时易于随着应用的增长而演变。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oep38yoojvq017hxhlpervgl\"><strong>为什么？</strong>组件通常有四个文件（例如 \n<code>*.html</code>、\n<code>*.css</code>、\n<code>*.ts</code> 和 \n<code>*.spec.ts</code>），并且会很快使文件夹变得杂乱。</p>\n</div>\n<a id=\"file-tree\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6dnlmvs0umk26eucgbofgur3g\">下面是符合规范的目录和文件结构</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    &lt;project root&gt;\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          core\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            core.module.ts\n          </div>\n          <div class=\"file\">\n            exception.service.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            user-profile.service.ts|spec.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          heroes\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            hero\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero.component.ts|html|css|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            hero-list\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero-list.component.ts|html|css|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            shared\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero-button.component.ts|html|css|spec.ts\n            </div>\n            <div class=\"file\">\n              hero.model.ts\n            </div>\n            <div class=\"file\">\n              hero.service.ts|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            heroes.component.ts|html|css|spec.ts\n          </div>\n          <div class=\"file\">\n            heroes.module.ts\n          </div>\n          <div class=\"file\">\n            heroes-routing.module.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          shared\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            shared.module.ts\n          </div>\n          <div class=\"file\">\n            init-caps.pipe.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            text-filter.component.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            text-filter.service.ts|spec.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          villains\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            villain\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              ...\n            </div>\n          </div>\n          <div class=\"file\">\n            villain-list\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              ...\n            </div>\n          </div>\n          <div class=\"file\">\n            shared\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              ...\n            </div>\n          </div>\n          <div class=\"file\">\n            villains.component.ts|html|css|spec.ts\n          </div>\n          <div class=\"file\">\n            villains.module.ts\n          </div>\n          <div class=\"file\">\n            villains-routing.module.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          app.component.ts|html|css|spec.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          app-routing.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        ...\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules/...\n    </div>\n    <div class=\"file\">\n      ...\n    </div>\n  </div>\n</div>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"108ym2bh3exi0op9p0x5jnyf2\">虽然在专用文件夹中放置组件是广泛的首选， 但对于小型应用来说，另一个选择是保持组件扁平（不在专用文件夹中）。 这会将四个文件添加到现有文件夹中，但也减少了文件夹嵌套。 无论你选择什么，都要保持一致。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-07\"></a>\n<h3 id=\"folders-by-feature-structure\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kpqlvv46pjhzolc3p91cr99w\"><i class=\"material-icons\">link</i><em>按功能划分文件夹</em> 结构</h3>\n<h4 id=\"style-04-07\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b51s9f2pyvqr1rv4ydwn5exux\"><i class=\"material-icons\">link</i>样式 04-07</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"26ngx6ya72y2q2vwnz98zsjwl\"><strong>坚持</strong>根据特性区含义命名目录。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2j7uskbbwflw15ee31kprtzgd\"><strong>为什么？</strong>开发人员可以一眼就定位代码并识别每个文件代表什么。 该结构尽可能扁平，并且没有重复或冗余的名称。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"187ll7x6wtlkdwn9owthhgc71\"><strong>为什么？</strong>LIFT 准则都已涵盖。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4uczioo7yn6hcxehv7p0wl54\"><strong>为什么？</strong>有助于通过组织内容并使其与 LIFT 准则保持一致来防止应用变得杂乱。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wlhbfhc70pz1il38xvf1sbvg\"><strong>为什么？</strong>当有很多文件时，例如 10 个以上， 使用一致的文件夹结构更容易定位它们，而在扁平结构中则更难。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bi7ji0cxjgandfz0352bdfsx\"><strong>要</strong>为每个功能区域创建一个 NgModule。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qtlujr7uox6kzg6wjlv7vdbo\"><strong>为什么？</strong>NgModule 使得惰性加载可路由功能变得容易。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3onmhgiegpnzih1let4dcqc5u\"><strong>为什么？</strong>NgModule 使得隔离、测试和重用功能变得更容易。</p>\n</div>\n<div class=\"file-tree-reference\">\n  <a href=\"guide/styleguide#file-tree\">Refer to this _folder and file structure_ example.</a>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p><a href=\"guide/styleguide#toc\">\n</a>\n<p><a id=\"04-08\"></a></p>\n<h3 id=\"app-root-module\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"1kenniji1uujqveftn9a34bal\"><i class=\"material-icons\">link</i>应用的<em>根模块</em></h3>\n<h4 id=\"style-04-08\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"1tt688gd8nh8m4w3ldkqx1yiz\"><i class=\"material-icons\">link</i>风格 04-08</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1s3i0k2b696iws7bfaz878hu1\"><strong>要</strong>在应用的根文件夹中创建一个 NgModule， 例如，在 \n<code>/src/app</code> 中。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1woyjl6vi5ucr6hh9jkxjmm\"><strong>为什么？</strong>每个应用都需要至少一个根 NgModule。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dadevf98xn1cdtoj2wlmbu265\"><strong>考虑</strong>把根模块命名为 <code>app.module.ts</code>。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"n9tro62bkynrqgjfgbkwhrn6\"><strong>为什么？</strong>使定位和识别根模块变得更容易。</p>\n</div>\n<code-example path=\"styleguide/src/04-08/app/app.module.ts\" region=\"example\" title=\"app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent }    from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ],\n  entryComponents: [ AppComponent ]\n})\nexport class AppModule {}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-09\"></a>\n<h3 id=\"feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bf4qau51t25zl7c84rwr3a4f\"><i class=\"material-icons\">link</i>特性模块</h3>\n<h4 id=\"style-04-09\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"22w93srpp3bmgwudmsy0n9jsf\"><i class=\"material-icons\">link</i>风格 04-09</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caawlvuolkv7ysv2bg3njnkyv\"><strong>要</strong>为应用中的所有不同功能创建一个 NgModule； 例如，\n<code>Heroes</code> 功能。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"354hg1vfks4b2xleowj3gj1qk\"><strong>要</strong>将功能模块放在与功能区域同名的文件夹中； 例如，在 \n<code>app/heroes</code> 中。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eazhy5x9uzh5u3d22louoe9up\"><strong>要</strong>将功能模块文件命名为反映功能区域、文件夹和文件名称； 例如，\n<code>app/heroes/heroes.module.ts</code>。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etp0x9x9mykz5kdwsq7xjbfti\"><strong>要</strong>将功能模块符号命名为反映功能区域、文件夹和文件名称； 例如，\n<code>app/heroes/heroes.module.ts</code> 定义了 \n<code>HeroesModule</code>。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eailyu74c9em5gw7c8grqn1jq\"><strong>为什么？</strong>功能模块可以向其他模块公开或隐藏其实现。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81w4p97w02sqr28666f5prj3e\"><strong>为什么？</strong> 特性模块标识了构成特性区域的不同相关组件集。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lk13ygw8tdnufh3mlahi7c3n\"><strong>为什么？</strong> 特性模块可以轻松地被急性加载和惰性加载。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f598r0cfhnj558lwlsfzi7a97\"><strong>为什么？</strong> 特性模块在特定功能和其他应用程序特性之间定义了清晰的边界。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wblqrf83s91w8fh5yrc2dgfv\"><strong>为什么？</strong> 特性模块有助于澄清并简化将开发职责分配给不同团队的过程。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5zow5fz79uibbqg5bp656f03\"><strong>为什么？</strong> 特性模块可以轻松地被隔离以进行测试。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-10\"></a>\n<h3 id=\"shared-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7onivvwse0wsdg3gni46ktcwe\"><i class=\"material-icons\">link</i>共享特性模块</h3>\n<h4 id=\"style-04-10\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9ln1kvjakd7wxmouvyjo2kf7\"><i class=\"material-icons\">link</i>样式 04-10</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bf1f8esara6rl7baa73xky7c\"><strong>请</strong>在 \n<code>shared</code> 文件夹中创建一个名为 \n<code>SharedModule</code> 的特性模块；例如，\n<code>app/shared/shared.module.ts</code> 定义了 \n<code>SharedModule</code>。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvj3cnuj4s2gdw28ab3ootq2v\"><strong>请</strong>在共享模块中声明组件、指令和管道，当这些条目将被复用并被其他特性模块中声明的组件引用时。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"eazsew109qg0r0541tmoa0zzr\"><strong>考虑</strong>把可能在整个应用中到处引用的模块命名为 SharedModule。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"buofxbmegeombxgxownsbg75e\"><strong>请勿</strong>在共享模块中提供服务。服务通常是单例，它们只为整个应用程序或特定特性模块提供一次。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ann6xd0ntthxdxho7u7hgfavg\"><strong>请</strong>导入 \n<code>SharedModule</code> 中的资产所需的所有模块；例如，\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 和 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3cf7sr1u2skge4ywu8rfrvzjg\"><strong>为什么？</strong> \n<code>SharedModule</code> 将包含可能需要来自另一个通用模块的特性（例如，\n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 在 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 中）的组件、指令和管道。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6z4uasw104sbq66nqhvx03jmx\"><strong>坚持</strong>在 <code>SharedModule</code> 中声明所有组件、指令和管道。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"y6n4cabtyb7lrdqstu9wy4zb\"><strong>坚持</strong>从 <code>SharedModule</code> 中导出其它特性模块所需的全部符号。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d7crp6cfm5bl8fmb64aebas0\"><strong>为什么？</strong> \n<code>SharedModule</code> 存在是为了使常用的组件、指令和管道能够在许多其他模块中组件的模板中使用。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyitn22ry7rqo7rbli3p1gurs\"><strong>请勿</strong>在 \n<code>SharedModule</code> 中指定应用程序范围的单例提供者。有意创建的单例是可以的。请注意。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2t8ap98qqq18c2pma2tn3l9qd\"><strong>为什么？</strong> 惰性加载的特性模块导入该共享模块将创建自己的服务副本，并可能产生不良结果。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4grvsvlzkwhmjyr6ejas5gqg\"><strong>为什么？</strong> 你不希望每个模块都有自己的单例服务实例。但是，如果 \n<code>SharedModule</code> 提供了服务，那么就会存在发生这种情况的真实风险。</p>\n</div>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      app\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        shared\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          shared.module.ts\n        </div>\n        <div class=\"file\">\n          init-caps.pipe.ts|spec.ts\n        </div>\n        <div class=\"file\">\n          text-filter.component.ts|spec.ts\n        </div>\n        <div class=\"file\">\n          text-filter.service.ts|spec.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        app.component.ts|html|css|spec.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n      <div class=\"file\">\n        app-routing.module.ts\n      </div>\n    </div>\n    <div class=\"file\">\n      main.ts\n    </div>\n    <div class=\"file\">\n      index.html\n    </div>\n  </div>\n  <div class=\"file\">\n    ...\n  </div>\n</div>\n<code-tabs>\n\n  <code-pane title=\"app/shared/shared.module.ts\" path=\"styleguide/src/04-10/app/shared/shared.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }  from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms';\n\nimport { FilterTextComponent } from './filter-text/filter-text.component';\nimport { FilterTextService }   from './filter-text/filter-text.service';\nimport { InitCapsPipe }        from './init-caps.pipe';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>],\n  declarations: [\n    FilterTextComponent,\n    InitCapsPipe\n  ],\n  providers: [FilterTextService],\n  exports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    FilterTextComponent,\n    InitCapsPipe\n  ]\n})\nexport class SharedModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"app/shared/init-caps.pipe.ts\" path=\"styleguide/src/04-10/app/shared/init-caps.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' })\nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform = (value: string) =&gt; value;\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/shared/filter-text/filter-text.component.ts\" path=\"styleguide/src/04-10/app/shared/filter-text/filter-text.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-filter-text',\n  template: '&lt;input type=\"text\" id=\"filterText\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"filter\" (keyup)=\"filterChanged($event)\" /&gt;'\n})\nexport class FilterTextComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() changed: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;;\n\n  filter: string;\n\n  constructor() {\n    this.changed = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;();\n  }\n\n  clear() {\n    this.filter = '';\n  }\n\n  filterChanged(event: any) {\n    event.preventDefault();\n    console.log(`Filter Changed: ${this.filter}`);\n    this.changed.emit(this.filter);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/shared/filter-text/filter-text.service.ts\" path=\"styleguide/src/04-10/app/shared/filter-text/filter-text.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class FilterTextService {\n  constructor() {\n    console.log('Created an instance of FilterTextService');\n  }\n\n  filter(data: string, props: Array&lt;string&gt;, originalList: Array&lt;any&gt;) {\n    let filteredList: any[];\n    if (data &amp;&amp; props &amp;&amp; originalList) {\n      data = data.toLowerCase();\n      let filtered = originalList.filter(item =&gt; {\n        let match = false;\n        for (let prop of props) {\n          if (item[prop].toString().toLowerCase().indexOf(data) &gt; -1) {\n            match = true;\n            break;\n          }\n        };\n        return match;\n      });\n      filteredList = filtered;\n    } else {\n      filteredList = originalList;\n    }\n    return filteredList;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/04-10/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { FilterTextService } from '../shared/filter-text/filter-text.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  templateUrl: './heroes.component.html'\n})\nexport class HeroesComponent {\n\n  heroes = [\n    { id: 1, name: 'Windstorm' },\n    { id: 2, name: 'Bombasto' },\n    { id: 3, name: 'Magneta' },\n    { id: 4, name: 'Tornado' }\n  ];\n\n  filteredHeroes = this.heroes;\n\n  constructor(private filterService: FilterTextService) { }\n\n  filterChanged(searchText: string) {\n    this.filteredHeroes = this.filterService.filter(searchText, ['id', 'name'], this.heroes);\n  }\n}\n\n\n\n</code-pane>\n\n  <code-pane title=\"app/heroes/heroes.component.html\" path=\"styleguide/src/04-10/app/heroes/heroes.component.html\">\n&lt;div&gt;This is heroes component&lt;/div&gt;\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of filteredHeroes\"&gt;\n    {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n&lt;toh-filter-text (changed)=\"filterChanged($event)\"&gt;&lt;/toh-filter-text&gt;\n\n\n</code-pane>\n\n</code-tabs>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-11\"></a>\n<h3 id=\"core-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p5c8btpc6zip17x8278yfgft\"><i class=\"material-icons\">link</i>核心特性模块</h3>\n<h4 id=\"style-04-11\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"473eznidcw6nzle5w4o7krnzf\"><i class=\"material-icons\">link</i>样式 04-11</h4>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2alaqkt4nshs4e9hckkrgm3o2\"><strong>请考虑</strong>将许多辅助的、一次性使用的类收集到核心模块中，以简化特性模块的表观结构。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3367nh0hxmgraynveqmov81mb\"><strong>请考虑</strong>将应用程序范围的核心模块命名为 \n<code>CoreModule</code>。将 \n<code>CoreModule</code> 导入根 \n<code>AppModule</code> 中会降低其复杂性，并强调其作为整个应用程序的协调者的作用。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gecpi35bq94ksw2zhxr3ydmf\"><strong>请</strong>在 \n<code>core</code> 文件夹中创建一个名为 \n<code>CoreModule</code> 的特性模块（例如，\n<code>app/core/core.module.ts</code> 定义了 \n<code>CoreModule</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4elp28pg5iwoel0ge9ego76q8\"><strong>请</strong>将实例将在整个应用程序中共享的单例服务放在 \n<code>CoreModule</code> 中（例如，\n<code>ExceptionService</code> 和 \n<code>LoggerService</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"h8yf9hmtpgmwkb50x9ad32jx\"><strong>请</strong>导入 \n<code>CoreModule</code> 中的资产所需的所有模块（例如，\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 和 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>）。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2m3g34z1kczxplygxa7i0hfi5\"><strong>为什么？</strong> \n<code>CoreModule</code> 提供了一个或多个单例服务。Angular 将提供者注册到应用程序根注入器，使每个服务的单例实例可供任何需要它们的组件使用，无论该组件是急性加载还是惰性加载。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9h6kjsivmu9dhi6vhcatpxvvq\"><strong>为什么？</strong> \n<code>CoreModule</code> 将包含单例服务。当惰性加载的模块导入这些服务时，它将获得一个新的实例，而不是预期的应用程序范围的单例。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5v4nlgicllovrbyhnw8p11o7b\"><strong>请</strong>将应用程序范围的、一次性使用的组件收集到 \n<code>CoreModule</code> 中。在应用程序启动时只导入它一次（在 \n<code>AppModule</code> 中），并且不要在其他任何地方导入它。（例如，\n<code>NavComponent</code> 和 \n<code>SpinnerComponent</code>）。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o015pzg1r3t89xcaaryerpkn\"><strong>为什么？</strong> 真实的应用程序可能包含几个一次性使用的组件（例如，加载动画、消息提示和模态对话框），它们只出现在 \n<code>AppComponent</code> 模板中。它们不会被导入到其他地方，因此从这个意义上说它们不会被共享。但是，它们太大太乱，不能放在根文件夹中。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am8rd30hm3e7b6nwwjbjo871c\"><strong>请勿</strong>在 \n<code>AppModule</code> 以外的任何地方导入 \n<code>CoreModule</code>。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y99lbah2ho6j2s5xx6kp3oju\"><strong>为什么？</strong> 惰性加载的特性模块直接导入 \n<code>CoreModule</code> 将创建自己的服务副本，并可能产生不良结果。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8d1p1fs1w02rgp9ces5qo8b1a\"><strong>为什么？</strong> 急性加载的特性模块已经可以访问 \n<code>AppModule</code> 的注入器，因此可以访问 \n<code>CoreModule</code> 的服务。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lfmu0r3s1k81ynnqvpu8hv2k\"><strong>请</strong>导出 \n<code>CoreModule</code> 中 \n<code>AppModule</code> 将导入并使其他特性模块可用的所有符号。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4yvxiop9qbbruy1r01uz1iczl\"><strong>为什么？</strong> \n<code>CoreModule</code> 存在是为了使常用的单例服务能够在许多其他模块中使用。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7evpu2esolc0ekr9dhklz5my\"><strong>为什么？</strong> 你希望整个应用程序使用一个单例实例。你不希望每个模块都有自己的单例服务实例。但是，如果 \n<code>CoreModule</code> 提供了服务，那么就会存在发生这种情况的意外风险。</p>\n</div>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      app\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        core\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          core.module.ts\n        </div>\n        <div class=\"file\">\n          logger.service.ts|spec.ts\n        </div>\n        <div class=\"file\">\n          nav\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            nav.component.ts|html|css|spec.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          spinner\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            spinner.component.ts|html|css|spec.ts\n          </div>\n          <div class=\"file\">\n            spinner.service.ts|spec.ts\n          </div>\n        </div>\n      </div>\n      <div class=\"file\">\n        app.component.ts|html|css|spec.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n      <div class=\"file\">\n        app-routing.module.ts\n      </div>\n    </div>\n    <div class=\"file\">\n      main.ts\n    </div>\n    <div class=\"file\">\n      index.html\n    </div>\n  </div>\n  <div class=\"file\">\n    ...\n  </div>\n</div>\n<code-tabs>\n\n  <code-pane title=\"app/app.module.ts\" path=\"styleguide/src/04-11/app/app.module.ts\" region=\"example\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent }   from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { CoreModule }    from './core/core.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    CoreModule,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ],\n  entryComponents: [ AppComponent ]\n})\nexport class AppModule {}\n\n</code-pane>\n\n  <code-pane title=\"app/core/core.module.ts\" path=\"styleguide/src/04-11/app/core/core.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\nimport { LoggerService } from './logger.service';\nimport { NavComponent } from './nav/nav.component';\nimport { SpinnerComponent } from './spinner/spinner.component';\nimport { SpinnerService } from './spinner/spinner.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> // we use <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>\n  ],\n &nbsp;exports: [NavComponent, SpinnerComponent],\n &nbsp;declarations: [NavComponent, SpinnerComponent],\n  providers: [LoggerService, SpinnerService]\n})\nexport class CoreModule { }\n\n\n\n</code-pane>\n\n  <code-pane title=\"app/core/logger.service.ts\" path=\"styleguide/src/04-11/app/core/logger.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class LoggerService {\n  log(msg: string) {\n    console.log(msg);\n  }\n\n  error(msg: string) {\n    console.error(msg);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/core/nav/nav.component.ts\" path=\"styleguide/src/04-11/app/core/nav/nav.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css'],\n})\nexport class NavComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  menuItems = [\n    'Heroes',\n    'Villains',\n    'Other'\n  ];\n\n  ngOnInit() {  }\n\n  constructor() { }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/core/nav/nav.component.html\" path=\"styleguide/src/04-11/app/core/nav/nav.component.html\">\n&lt;header&gt;\n  &lt;div&gt;\n    &lt;h4&gt;Tour of Heroes&lt;/h4&gt;\n  &lt;/div&gt;\n  &lt;nav&gt;\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of menuItems\"&gt;\n        {{item}}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n  &lt;br/&gt;\n&lt;/header&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"app/core/spinner/spinner.component.ts\" path=\"styleguide/src/04-11/app/core/spinner/spinner.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { LoggerService } from '../logger.service';\nimport { SpinnerState, SpinnerService } from './spinner.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.css']\n})\nexport class SpinnerComponent implements <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  visible = false;\n\n  private spinnerStateChanged: Subscription;\n\n  constructor(\n    private loggerService: LoggerService,\n    private spinnerService: SpinnerService\n  ) { }\n\n  ngOnInit() {\n    console.log(this.visible);\n    this.spinnerStateChanged = this.spinnerService.spinnerState\n      .subscribe((<a href=\"api/animations/state\" class=\"code-anchor\">state</a>: SpinnerState) =&gt; {\n        this.visible = state.show;\n        this.loggerService.log(`visible=${this.visible}`);\n      });\n  }\n\n  ngOnDestroy() {\n    this.spinnerStateChanged.unsubscribe();\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/core/spinner/spinner.component.html\" path=\"styleguide/src/04-11/app/core/spinner/spinner.component.html\">\n&lt;div class=\"spinner\" [class.spinner-hidden]=\"!visible\"&gt; &lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"app/core/spinner/spinner.service.ts\" path=\"styleguide/src/04-11/app/core/spinner/spinner.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\nexport interface SpinnerState {\n  show: boolean;\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class SpinnerService {\n  private spinnerSubject = new Subject&lt;SpinnerState&gt;();\n\n  spinnerState = this.spinnerSubject.asObservable();\n\n  constructor() { }\n\n  show() {\n    this.spinnerSubject.next(&lt;SpinnerState&gt;{ show: true });\n  }\n\n  hide() {\n    this.spinnerSubject.next(&lt;SpinnerState&gt;{ show: false });\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pw3m138y5ym89iotajkqqfr5\"><code>AppModule</code> 变得更小，因为许多应用程序/根类已移至其他模块。\n<code>AppModule</code> 变得稳定，因为你将把未来的组件和提供者添加到其他模块中，而不是这个模块。\n<code>AppModule</code> 将工作委托给导入的模块，而不是自己完成工作。\n<code>AppModule</code> 专注于其主要任务，即协调整个应用程序。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-12\"></a>\n<h3 id=\"prevent-re-import-of-the-core-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vd479u9bu7vuc2d1ke4y22a1\"><i class=\"material-icons\">link</i>防止重新导入核心模块</h3>\n<h4 id=\"style-04-12\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ngwbkjlqkk0k1zjznwboze99\"><i class=\"material-icons\">link</i>样式 04-12</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vr74y6myqs3dq16svtodl487\">只有根 \n<code>AppModule</code> 应该导入 \n<code>CoreModule</code>。</p>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ey7q9g46gfgz7ekdoya9d75x0\"><strong>请</strong>通过添加保护逻辑来防止重新导入 \n<code>CoreModule</code> 并快速失败。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vs0xxmhcsz94xbwjyiek04q3\"><strong>为什么？</strong> 防止重新导入 \n<code>CoreModule</code>。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crc3m2xamcanseny71x8ztonb\"><strong>为什么？</strong> 防止创建多个旨在作为单例的资产实例。</p>\n</div>\n<code-tabs>\n\n  <code-pane title=\"app/core/module-import-guard.ts\" path=\"styleguide/src/04-12/app/core/module-import-guard.ts\">\nexport function throwIfAlreadyLoaded(parentModule: any, moduleName: string) {\n  if (parentModule) {\n    throw new Error(`${moduleName} has already been loaded. Import Core modules in the AppModule only.`);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/core/core.module.ts\" path=\"styleguide/src/04-12/app/core/core.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>, <a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>, <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\nimport { LoggerService } from './logger.service';\nimport { NavComponent } from './nav/nav.component';\nimport { throwIfAlreadyLoaded } from './module-import-guard';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> // we use <a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>\n  ],\n &nbsp;exports: [NavComponent],\n &nbsp;declarations: [NavComponent],\n  providers: [LoggerService]\n})\nexport class CoreModule {\n  constructor( @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parentModule: CoreModule) {\n    throwIfAlreadyLoaded(parentModule, 'CoreModule');\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-13\"></a>\n<h3 id=\"lazy-loaded-folders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39kut8fey3hykmu7l2lemr22a\"><i class=\"material-icons\">link</i>惰性加载的文件夹</h3>\n<h4 id=\"style-04-13\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ei8cjp8ecgzmsl6p8aeanvi8\"><i class=\"material-icons\">link</i>样式 04-13</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bcyc7zb2ljzb2zfxfhakkmti7\">某些边界清晰的应用特性或工作流可以做成<em>惰性加载</em>或<em>按需加载</em>的，而不用总是随着应用启动。</p>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9y4gt0znlgof001ere2obgxpx\"><strong>请</strong>将惰性加载的特性内容放在\n<em>惰性加载的文件夹</em>中。典型的\n<em>惰性加载的文件夹</em>包含一个\n<em>路由组件</em>、它的子组件以及它们相关的资产和模块。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e75h7p3sbf6fcr35di65gwpk\"><strong>为什么？</strong> 该文件夹使识别和隔离特性内容变得容易。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"04-14\"></a>\n<h3 id=\"never-directly-import-lazy-loaded-folders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxvrueel5ypzmbvmeol6y3kuh\"><i class=\"material-icons\">link</i>永远不要直接导入惰性加载的文件夹</h3>\n<h4 id=\"style-04-14\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rfnd71lpowmazbjnhb7cr2o0\"><i class=\"material-icons\">link</i>样式 04-14</h4>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81t84vw2eyut9sdvb6rfgbqx6\"><strong>请勿</strong>允许兄弟文件夹和父文件夹中的模块直接导入\n<em>惰性加载的特性</em>中的模块。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2yzljgrujob4ozwolicm46gl\"><strong>为什么？</strong> 直接导入和使用模块将立即加载它，而实际意图是按需加载它。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<h2 id=\"components\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c7vzzlnsersqq3lvejga81lr\"><i class=\"material-icons\">link</i>组件</h2>\n<a id=\"05-02\"></a>\n<h3 id=\"component-selector-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw9htiool0ocxqxa0bma3ok9n\"><i class=\"material-icons\">link</i>组件选择器名称</h3>\n<h4 id=\"style-05-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e230js3j4tjqk0yfvnq73yygd\"><i class=\"material-icons\">link</i>样式 05-02</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9sxqsutfoebo8t3si321nvfhe\"><strong>坚持</strong>使用<em>中线命名法（dashed-case）</em>或叫<em>烤串命名法（kebab-case）</em>来命名组件的元素选择器。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epn2z0g5dmfxr10w0vemty6bo\"><strong>为什么？</strong>保持元素名称与 \n<a href=\"https://www.w3.org/TR/custom-elements/\">自定义元素</a> 规范一致。</p>\n</div>\n<code-example path=\"styleguide/src/05-02/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" title=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'tohHeroButton',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<code-tabs>\n\n  <code-pane title=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-02/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-pane>\n\n  <code-pane title=\"app/app.component.html\" path=\"styleguide/src/05-02/app/app.component.html\">\n&lt;toh-hero-button&gt;&lt;/toh-hero-button&gt;\n\n\n</code-pane>\n\n</code-tabs>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"05-03\"></a>\n<h3 id=\"components-as-elements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6u048gcd76rb0te698nazwr9\"><i class=\"material-icons\">link</i>组件作为元素</h3>\n<h4 id=\"style-05-03\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4qbnn2qv1dcqw5s6lctwvocu8\"><i class=\"material-icons\">link</i>风格 05-03</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"cev7a0di4uqdhtxx7tmc3el75\"><strong>考虑</strong>给组件一个<em>元素</em>选择器，而不是<em>属性</em>或<em>类</em>选择器。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vwkxydb2qj49w31rjcjv6m3h\"><strong>为什么？</strong>组件包含包含 HTML 和可选 Angular 模板语法的模板。 它们显示内容。 开发人员将组件放置在页面上，就像他们使用原生 HTML 元素和 Web 组件一样。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9thza18oppktts06uub4172mp\"><strong>为什么？</strong>通过查看模板的 html，更容易识别符号是组件。</p>\n</div>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fe2vbvhqq4gmsbkgvdny57dz\">在某些情况下，你会给组件赋予一个属性，例如，当你想增强内置元素时。例如，\n<a href=\"https://material.angular.io/components/button/overview\">Material Design</a> 使用 \n<code>&lt;button mat-button&gt;</code> 技术。但是，你不会在自定义元素上使用此技术。</p>\n</div>\n<code-example path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" title=\"app/heroes/hero-button/hero-button.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: '[tohHeroButton]',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<code-example path=\"styleguide/src/05-03/app/app.component.avoid.html\" title=\"app/app.component.html\">\n&lt;!-- avoid --&gt;\n\n&lt;div tohHeroButton&gt;&lt;/div&gt;\n\n\n</code-example>\n<code-tabs>\n\n  <code-pane title=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-pane>\n\n  <code-pane title=\"app/app.component.html\" path=\"styleguide/src/05-03/app/app.component.html\">\n&lt;toh-hero-button&gt;&lt;/toh-hero-button&gt;\n\n\n</code-pane>\n\n</code-tabs>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"05-04\"></a>\n<h3 id=\"extract-templates-and-styles-to-their-own-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am9auzm9lghnknvv75o4xyoqd\"><i class=\"material-icons\">link</i>将模板和样式提取到它们自己的文件中</h3>\n<h4 id=\"style-05-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eusr8yppyvdhtin7il2oi6jg7\"><i class=\"material-icons\">link</i>样式 05-04</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"q18hrsui80muekaolp3oa55w\"><strong>坚持</strong>当超过 3 行时，把模板和样式提取到一个单独的文件。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"d7n469j1h7nqaij0dt3hyl7ga\"><strong>坚持</strong>把模板文件命名为 <code>[component-name].component.html</code>，其中，[component-name] 是组件名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bpi83ixfwlyqgwt3j3px5cmuk\"><strong>坚持</strong>把样式文件命名为 <code>[component-name].component.css</code>，其中，[component-name] 是组件名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"f1zs7wuk93pscsr1hxmv0s5co\"><strong>坚持</strong>指定<em>相对于模块的</em> URL，给它加上 <code>./</code> 前缀。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6308q4nvsq3r91ksokqh7m6kg\"><strong>为什么？</strong>大型的内联模板和样式会掩盖组件的目的和实现，降低可读性和可维护性。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj3bxv9ntko8gynmzvnm2frre\"><strong>为什么？</strong>在大多数编辑器中，在开发内联模板和样式时，语法提示和代码片段不可用。 Angular TypeScript 语言服务（即将推出）承诺克服那些支持它的编辑器中 HTML 模板的这一缺陷；它不会帮助 CSS 样式。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8690qqh5ijrpvddppu3dyf061\"><strong>为什么？</strong>只要文件保持在一起，\n<em>组件相对</em> URL 在移动组件文件时不需要更改。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eebjhk66fhie5lpo7l3ewsonk\"><strong>为什么？</strong>\n<code>./</code> 前缀是相对 URL 的标准语法；不要依赖 Angular 当前无需该前缀的能力。</p>\n</div>\n<code-example path=\"styleguide/src/05-04/app/heroes/heroes.component.avoid.ts\" region=\"example\" title=\"app/heroes/heroes.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;My Heroes&lt;/h2&gt;\n      &lt;ul class=\"heroes\"&gt;\n        &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"selectedHero=hero\"&gt;\n          &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n        &lt;h2&gt;{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} is my hero&lt;/h2&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `,\n  styles: [`\n    .heroes {\n      margin: 0 0 2em 0; list-style-type: none; padding: 0; width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Observable&lt;Hero[]&gt;;\n  selectedHero: Hero;\n\n constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.heroes = this.heroService.getHeroes();\n  }\n}\n\n</code-example>\n<code-tabs>\n\n  <code-pane title=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/05-04/app/heroes/heroes.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls:  ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Observable&lt;Hero[]&gt;;\n  selectedHero: Hero;\n\n constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.heroes = this.heroService.getHeroes();\n  }\n}\n\n</code-pane>\n\n  <code-pane title=\"app/heroes/heroes.component.html\" path=\"styleguide/src/05-04/app/heroes/heroes.component.html\">\n&lt;div&gt;\n  &lt;h2&gt;My Heroes&lt;/h2&gt;\n  &lt;ul class=\"heroes\"&gt;\n    &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"selectedHero=hero\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n    &lt;h2&gt;{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} is my hero&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"app/heroes/heroes.component.css\" path=\"styleguide/src/05-04/app/heroes/heroes.component.css\">\n.heroes {\n  margin: 0 0 2em 0; list-style-type: none; padding: 0; width: 15em;\n}\n.heroes li {\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"05-12\"></a>\n<h3 id=\"decorate-input-and-output-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epidkc68apnnfetgzezs0k9ka\"><i class=\"material-icons\">link</i>装饰 \n<em>输入</em> 和 \n<em>输出</em> 属性</h3>\n<h4 id=\"style-05-12\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"y0cgyiuofwcn7vwmm5uaalaf\"><i class=\"material-icons\">link</i>风格 05-12</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jg43a4uw2gnpgsr5hhuux9gj\"><strong>请</strong>使用 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 \n<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 类装饰器，而不是 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据的 \n<code>inputs</code> 和 \n<code>outputs</code> 属性：</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajf8uhl92meqres2hhku618pz\"><strong>考虑</strong>将 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 或 \n<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 放置在它装饰的属性的同一行。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f09l4kg3ppyi8p06szzwrv2q4\"><strong>为什么？</strong>更容易、更易读地识别类中的哪些属性是输入或输出。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nlqcuj0h5jc27c0n2ciz0kif\"><strong>为什么？</strong>如果你需要重命名与 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 或 \n<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> 关联的属性或事件名称，你可以在一个地方修改它。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3cf04oi9jcgktg1sxa0hbzkwy\"><strong>为什么？</strong>附加到指令的元数据声明更短，因此更易读。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qdoqbmay838742nr3n5qeh28\"><strong>为什么？</strong>将装饰器放在同一行\n<em>通常</em>会使代码更短，并且仍然可以轻松地识别属性是输入还是输出。 当这样做明显更易读时，将其放在上面的行。</p>\n</div>\n<code-example path=\"styleguide/src/05-12/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" title=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button&gt;&lt;/button&gt;`,\n  inputs: [\n    'label'\n  ],\n  outputs: [\n    'change'\n  ]\n})\nexport class HeroButtonComponent {\n  change = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  label: string;\n}\n\n</code-example>\n<code-example path=\"styleguide/src/05-12/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\" title=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button&gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() change = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label: string;\n}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"05-13\"></a>\n<h3 id=\"avoid-aliasing-inputs-and-outputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cynaddbua1n5oj8roxkulcepi\"><i class=\"material-icons\">link</i>避免为 \n<em>输入</em> 和 \n<em>输出</em> 设置别名</h3>\n<h4 id=\"style-05-13\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7dia357ojdijecgujb9js9kq\"><i class=\"material-icons\">link</i>样式 05-13</h4>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d79l1e6s62r57xxg9mr2kjawn\"><strong>避免</strong>\n<em>输入</em> 和 \n<em>输出</em> 别名，除非它有重要的用途。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jzs54z15fehrx8sltlg76nc3\"><strong>为什么？</strong>同一个属性的两个名称（一个私有，一个公共）本质上是令人困惑的。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8w5e2w8zquy3fmc6gzrqtefy5\"><strong>为什么？</strong>当指令名称也是\n<em>输入</em> 属性时，你应该使用别名，并且指令名称不描述属性。</p>\n</div>\n<code-example path=\"styleguide/src/05-13/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" title=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n/* avoid pointless aliasing */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button&gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  // Pointless aliases\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('changeEvent') change = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('labelAttribute') label: string;\n}\n\n</code-example>\n<code-example path=\"styleguide/src/05-13/app/app.component.avoid.html\" title=\"app/app.component.html\">\n&lt;!-- avoid --&gt;\n\n&lt;toh-hero-button labelAttribute=\"OK\" (changeEvent)=\"doSomething()\"&gt;\n&lt;/toh-hero-button&gt;\n\n\n</code-example>\n<code-tabs>\n\n  <code-pane title=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button&gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  // No aliases\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() change = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label: string;\n}\n\n</code-pane>\n\n  <code-pane title=\"app/heroes/shared/hero-button/hero-highlight.directive.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[heroHighlight]' })\nexport class HeroHighlightDirective implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n\n  // Aliased because `color` is <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> better property name than `heroHighlight`\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('heroHighlight') color: string;\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {}\n\n  ngOnChanges() {\n    this.el.nativeElement.style.backgroundColor = this.color || 'yellow';\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app/app.component.html\" path=\"styleguide/src/05-13/app/app.component.html\">\n&lt;toh-hero-button label=\"OK\" (change)=\"doSomething()\"&gt;\n&lt;/toh-hero-button&gt;\n\n&lt;!-- `heroHighlight` is both the directive name and the data-bound aliased property name --&gt;\n&lt;h3 heroHighlight=\"skyblue\"&gt;The Great Bombasto&lt;/h3&gt;\n\n\n</code-pane>\n\n</code-tabs>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"05-14\"></a>\n<h3 id=\"member-sequence\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oca2i5mg4lzplab2ve5amei0\"><i class=\"material-icons\">link</i>成员顺序</h3>\n<h4 id=\"style-05-14\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ok5ze1jbjrmdlnhrmx3cj53i\"><i class=\"material-icons\">link</i>样式 05-14</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba7qz7rok0np6dvwa0brzz7y5\"><strong>请</strong>将属性放在最上面，然后是方法。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2o0c2hijyccdac1shh0dcp1r\"><strong>请</strong>将私有成员放在公共成员之后，按字母顺序排列。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nznxs62ng0qn4veunzr8f00e\"><strong>为什么？</strong>将成员放置在一致的顺序中，使其易于阅读，并有助于立即识别组件的哪些成员服务于哪些目的。</p>\n</div>\n<code-example path=\"styleguide/src/05-14/app/shared/toast/toast.component.avoid.ts\" region=\"example\" title=\"app/shared/toast/toast.component.ts\">\n/* avoid */\n\nexport class ToastComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  private defaults = {\n    title: '',\n    message: 'May the Force be with you'\n  };\n  message: string;\n  title: string;\n  private toastElement: any;\n\n  ngOnInit() {\n    this.toastElement = document.getElementById('toh-toast');\n  }\n\n  // private methods\n  private hide() {\n    this.toastElement.style.opacity = 0;\n    window.setTimeout(() =&gt; this.toastElement.style.zIndex = 0, 400);\n  }\n\n  activate(message = this.defaults.message, title = this.defaults.title) {\n    this.title = title;\n    this.message = message;\n    this.show();\n  }\n\n  private show() {\n    console.log(this.message);\n    this.toastElement.style.opacity = 1;\n    this.toastElement.style.zIndex = 9999;\n\n    window.setTimeout(() =&gt; this.hide(), 2500);\n  }\n}\n\n</code-example>\n<code-example path=\"styleguide/src/05-14/app/shared/toast/toast.component.ts\" region=\"example\" title=\"app/shared/toast/toast.component.ts\">\nexport class ToastComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  // public properties\n  message: string;\n  title: string;\n\n  // private fields\n  private defaults = {\n    title: '',\n    message: 'May the Force be with you'\n  };\n  private toastElement: any;\n\n  // public methods\n  activate(message = this.defaults.message, title = this.defaults.title) {\n    this.title = title;\n    this.message = message;\n    this.show();\n  }\n\n  ngOnInit() {\n    this.toastElement = document.getElementById('toh-toast');\n  }\n\n  // private methods\n  private hide() {\n    this.toastElement.style.opacity = 0;\n    window.setTimeout(() =&gt; this.toastElement.style.zIndex = 0, 400);\n  }\n\n  private show() {\n    console.log(this.message);\n    this.toastElement.style.opacity = 1;\n    this.toastElement.style.zIndex = 9999;\n    window.setTimeout(() =&gt; this.hide(), 2500);\n  }\n}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"05-15\"></a>\n<h3 id=\"delegate-complex-component-logic-to-services\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4sjhooroq160yo8ibg0w4eper\"><i class=\"material-icons\">link</i>将复杂的组件逻辑委托给服务</h3>\n<h4 id=\"style-05-15\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8dlthjznwg0h21smaiyyczw6q\"><i class=\"material-icons\">link</i>风格 05-15</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmrpmchrztbwrhxt3a5zwe6na\"><strong>请</strong>将组件中的逻辑限制为视图所需的逻辑。所有其他逻辑都应委托给服务。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8xpvoms52donpnf9k74o0wdec\"><strong>坚持</strong>把可复用的逻辑放到服务中，保持组件简单，聚焦于它们预期目的。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67vu9m3w4ka5bh36na2tndlya\"><strong>为什么？</strong>当逻辑放置在服务中并通过函数公开时，它可以被多个组件重用。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw3gdtfvne7u5pf2l7kvph2r5\"><strong>为什么？</strong>服务中的逻辑可以更容易地在单元测试中隔离，而组件中的调用逻辑可以很容易地模拟。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4t1wyr6g4kcmwou1vc6mcca3y\"><strong>为什么？</strong>删除依赖项并将实现细节隐藏在组件之外。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17jbqtwkkwxahzc8mta4cs39j\"><strong>为什么？</strong>保持组件精简、整洁、专注。</p>\n</div>\n<code-example path=\"styleguide/src/05-15/app/heroes/hero-list/hero-list.component.avoid.ts\" title=\"app/heroes/hero-list/hero-list.component.ts\">\n/* avoid */\n\nimport { <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>, <a href=\"api/http/Response\" class=\"code-anchor\">Response</a> } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/finally';\nimport 'rxjs/add/operator/map';\n\nimport { Hero } from '../shared/hero.model';\n\nconst heroesUrl = 'http://angular.io';\n\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n  constructor(private http: <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>) {}\n  getHeroes() {\n    this.heroes = [];\n    this.http.get(heroesUrl)\n      .map((response: <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>) =&gt; &lt;Hero[]&gt;response.json().data)\n      .catch(this.catchBadResponse)\n      .finally(() =&gt; this.hideSpinner())\n      .subscribe((heroes: Hero[]) =&gt; this.heroes = heroes);\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  private catchBadResponse(err: any, source: Observable&lt;any&gt;) {\n    // log and handle the exception\n    return new Observable();\n  }\n\n  private hideSpinner() {\n    // hide the spinner\n  }\n}\n\n\n</code-example>\n<code-example path=\"styleguide/src/05-15/app/heroes/hero-list/hero-list.component.ts\" region=\"example\" title=\"app/heroes/hero-list/hero-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from '../shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `...`\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n  constructor(private heroService: HeroService) {}\n  getHeroes() {\n    this.heroes = [];\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"05-16\"></a>\n<h3 id=\"dont-prefix-output-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yasso2uz0ld3qznrsp98xcf4\"><i class=\"material-icons\">link</i>不要为 \n<em>输出</em> 属性添加前缀</h3>\n<h4 id=\"style-05-16\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aur0ss5s4szipnsl2h1sjc76v\"><i class=\"material-icons\">link</i>样式 05-16</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9n7ci6ig8f56yxsylfuw4azr2\"><strong>坚持</strong>命名事件时，不要带前缀 <code>on</code>。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bbihi5zfa038vkuf43d0e2c0w\"><strong>坚持</strong>把事件处理器方法命名为 <code>on</code> 前缀之后紧跟着事件名。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cec70raex6ymzfvsq1tup3mq\"><strong>为什么？</strong>这与内置事件（如按钮点击）一致。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2rw5c1nxfpjo6ij53frg1460\"><strong>为什么？</strong>Angular 允许使用 \n<a href=\"guide/template-syntax#binding-syntax\">替代语法</a> \n<code>on-*</code>。如果事件本身以 \n<code>on</code> 为前缀，这将导致 \n<code>on-onEvent</code> 绑定表达式。</p>\n</div>\n<code-example path=\"styleguide/src/05-16/app/heroes/hero.component.avoid.ts\" region=\"example\" title=\"app/heroes/hero.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onSavedTheDay = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;boolean&gt;();\n}\n\n</code-example>\n<code-example path=\"styleguide/src/05-16/app/app.component.avoid.html\" title=\"app/app.component.html\">\n&lt;!-- avoid --&gt;\n\n&lt;toh-hero (onSavedTheDay)=\"onSavedTheDay($event)\"&gt;&lt;/toh-hero&gt;\n\n\n</code-example>\n<code-tabs>\n\n  <code-pane title=\"app/heroes/hero.component.ts\" path=\"styleguide/src/05-16/app/heroes/hero.component.ts\" region=\"example\">\nexport class HeroComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() savedTheDay = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;boolean&gt;();\n}\n\n</code-pane>\n\n  <code-pane title=\"app/app.component.html\" path=\"styleguide/src/05-16/app/app.component.html\">\n&lt;toh-hero (savedTheDay)=\"onSavedTheDay($event)\"&gt;&lt;/toh-hero&gt;\n\n\n</code-pane>\n\n</code-tabs>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"05-17\"></a>\n<h3 id=\"put-presentation-logic-in-the-component-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lrwdego8w0hxvuunbepexrf8\"><i class=\"material-icons\">link</i>将表示逻辑放在组件类中</h3>\n<h4 id=\"style-05-17\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b69ap4yvlbc0yrtom8nlexkl8\"><i class=\"material-icons\">link</i>风格 05-17</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9ddm6xgxiu5sii23dsl7pglll\"><strong>坚持</strong>把表现层逻辑放进组件类中，而不要放在模板里。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vkvbnehguicnmk86lq5iuew5\"><strong>为什么？</strong>逻辑将包含在一个地方（组件类）中，而不是分散在两个地方。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gne2il5zci3fyk8aiucturyf\"><strong>为什么？</strong>将组件的表示逻辑保留在类中而不是模板中，可以提高可测试性、可维护性和可重用性。</p>\n</div>\n<code-example path=\"styleguide/src/05-17/app/heroes/hero-list/hero-list.component.avoid.ts\" region=\"example\" title=\"app/heroes/hero-list/hero-list.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `\n    &lt;section&gt;\n      Our list of heroes:\n      &lt;hero-profile *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" [hero]=\"hero\"&gt;\n      &lt;/hero-profile&gt;\n      Total powers: {{totalPowers}}&lt;br&gt;\n      Average power: {{totalPowers / heroes.length}}\n    &lt;/section&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n  totalPowers: number;\n}\n\n</code-example>\n<code-example path=\"styleguide/src/05-17/app/heroes/hero-list/hero-list.component.ts\" region=\"example\" title=\"app/heroes/hero-list/hero-list.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `\n    &lt;section&gt;\n      Our list of heroes:\n      &lt;toh-hero *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" [hero]=\"hero\"&gt;\n      &lt;/toh-hero&gt;\n      Total powers: {{totalPowers}}&lt;br&gt;\n      Average power: {{avgPower}}\n    &lt;/section&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n  totalPowers: number;\n\n  get avgPower() {\n    return this.totalPowers / this.heroes.length;\n  }\n}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<h2 id=\"directives\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\"><i class=\"material-icons\">link</i>指令</h2>\n<a id=\"06-01\"></a>\n<h3 id=\"use-directives-to-enhance-an-element\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9qrhkt6t0lzehgbeunxjc8vfo\"><i class=\"material-icons\">link</i>使用指令来增强已有元素</h3>\n<h4 id=\"style-06-01\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7mz4nbpy6hlqt8wqmqx7fvp38\"><i class=\"material-icons\">link</i>风格 06-01</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6ar1yht85z1eb5de39agm27i9\"><strong>坚持</strong>当你需要有表现层逻辑，但没有模板时，使用属性型指令。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fymv1uek7yamcbp13k641ode\"><strong>为什么？</strong>属性指令没有关联的模板。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdmrbcnbxezy5bqq1o9lsoah0\"><strong>为什么？</strong>一个元素可以应用多个属性指令。</p>\n</div>\n<code-example path=\"styleguide/src/06-01/app/shared/highlight.directive.ts\" region=\"example\" title=\"app/shared/highlight.directive.ts\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohHighlight]'\n})\nexport class HighlightDirective {\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseover') onMouseEnter() {\n    // do highlight work\n  }\n}\n\n</code-example>\n<code-example path=\"styleguide/src/06-01/app/app.component.html\" title=\"app/app.component.html\">\n&lt;div tohHighlight&gt;Bombasta&lt;/div&gt;\n\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"06-03\"></a>\n<h3 id=\"hostlistenerhostbinding-decorators-versus-host-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58uyxezy4tyrvqymq7ld162u2\"><i class=\"material-icons\">link</i><em>HostListener</em>/\n<em>HostBinding</em> 装饰器与 \n<em>host</em> 元数据</h3>\n<h4 id=\"style-06-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvqu41fe3vjfok501rm9i6ixi\"><i class=\"material-icons\">link</i>样式 06-03</h4>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asasju0rpxwljz7262j0ka45v\"><strong>考虑</strong>优先使用 \n<code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 和 \n<code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code>，而不是 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 \n<code>host</code> 属性。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5306v283iscxtut0y9o29no7d\"><strong>坚持</strong>让你的选择保持一致。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3zggs5oy6dgx22rp8869yfx0l\"><strong>为什么？</strong>与 \n<code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 关联的属性或与 \n<code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 关联的方法只能在一个地方修改——在指令的类中。 如果你使用 \n<code>host</code> 元数据属性，你必须修改指令类中的属性/方法声明以及与指令关联的装饰器中的元数据。</p>\n</div>\n<code-example path=\"styleguide/src/06-03/app/shared/validator.directive.ts\" title=\"app/shared/validator.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidator]'\n})\nexport class ValidatorDirective {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('attr.role') role = 'button';\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    // do work\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3vro5546ykfowdbn93601mp84\">与不推荐的方式（<code>host</code> 元数据）比较一下。</p>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5r8s7cpqmsun3meejvj6tbqce\"><strong>为什么？</strong>\n<code>host</code> 元数据只有一个术语需要记住，并且不需要额外的 ES 导入。</p>\n</div>\n<code-example path=\"styleguide/src/06-03/app/shared/validator2.directive.ts\" title=\"app/shared/validator2.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidator2]',\n  host: {\n    '[attr.role]': 'role',\n    '(mouseenter)': 'onMouseEnter()'\n  }\n})\nexport class Validator2Directive {\n  role = 'button';\n  onMouseEnter() {\n    // do work\n  }\n}\n\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<h2 id=\"services\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"92fqgk8698jdwr0o85057qr44\"><i class=\"material-icons\">link</i>服务</h2>\n<a id=\"07-01\"></a>\n<h3 id=\"services-are-singletons\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7mmb1oae651luu3dpn0xbe19v\"><i class=\"material-icons\">link</i>服务总是单例的</h3>\n<h4 id=\"style-07-01\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"adi2dnp3qoo3b2sc8pzhibsp\"><i class=\"material-icons\">link</i>风格 07-01</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ozkbe25e1ybwx9l2br8v3zq2\"><strong>请</strong>在同一个注入器中使用服务作为单例。使用它们来共享数据和功能。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ao15y2et9r5dlwgbkh5vn7jjv\"><strong>为什么？</strong>服务非常适合在功能区域或应用程序中共享方法。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50305znufyc3yzydvsshlkw9e\"><strong>为什么？</strong>服务非常适合共享有状态的内存中数据。</p>\n</div>\n<code-example path=\"styleguide/src/07-01/app/heroes/shared/hero.service.ts\" region=\"example\" title=\"app/heroes/shared/hero.service.ts\">\nexport class HeroService {\n  constructor(private http: <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>) { }\n\n  getHeroes() {\n    return this.http.get('api/heroes')\n      .map((response: <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>) =&gt; &lt;Hero[]&gt;response.json());\n  }\n}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"07-02\"></a>\n<h3 id=\"single-responsibility-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94xyn6xpuo11uve5x3vem22k8\"><i class=\"material-icons\">link</i>单一职责</h3>\n<h4 id=\"style-07-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ajcb0pexcji0xjg7p6d5gz23\"><i class=\"material-icons\">link</i>样式 07-02</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"978is1sp6vrfnbe793pmmljp7\"><strong>要</strong>创建具有单一职责的服务，该职责由其上下文封装。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xl5dpr0fschzgib0wfqck27n\">当服务开始超出其单一目的时，\n<strong>请</strong>创建一个新的服务。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cf2baftstm7gyh51fgx0k8w7q\"><strong>为什么？</strong> 当一个服务承担多个职责时，测试就会变得困难。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uj02vobl3cg78v652txe5415\"><strong>为什么？</strong> 当一个服务拥有多个职责时，每个注入它的组件或服务都会承担所有这些职责的负担。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"07-03\"></a>\n<h3 id=\"providing-a-service\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bqbndmh59jdanzp44olf38bqa\"><i class=\"material-icons\">link</i>提供服务</h3>\n<h4 id=\"style-07-03\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dokeyg41dc8gbpluswdiz52us\"><i class=\"material-icons\">link</i>风格 07-03</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nozam6cf8kmlved7qxwsyb5u\">在最顶层的组件中提供服务给 Angular 注入器，这样它们就可以被共享。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ectkj1hgctoyabr8qvvvvytec\"><strong>为什么？</strong> Angular 注入器是分层的。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8tfdf4r27492ppmso13sql1e\"><strong>为什么？</strong> 当你将服务提供给顶级组件时，该实例会被共享，并且所有顶级组件的子组件都可以访问它。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckaoq8m4fktizkewsdl039pib\">这是因为当服务需要共享方法或状态时，这种方式是理想的。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hf3kvpe7sgn10ndr5qtr4ii9\"><strong>为什么？</strong> 当两个不同的组件需要服务的不同实例时，这并不理想。在这种情况下，最好在需要新实例的组件级别提供服务。</p>\n</div>\n<code-tabs>\n\n  <code-pane title=\"app/app.component.ts\" path=\"styleguide/src/07-03/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { HeroService } from './heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-app',\n  template: `\n      &lt;toh-heroes&gt;&lt;/toh-heroes&gt;\n    `,\n  providers: [HeroService]\n})\nexport class AppComponent {}\n\n\n</code-pane>\n\n  <code-pane title=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/07-03/app/heroes/hero-list/hero-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from '../shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n      &lt;pre&gt;{{heroes | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&lt;/pre&gt;\n    `\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.heroService.getHeroes().subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"07-04\"></a>\n<h3 id=\"use-the-injectable-class-decorator\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e6opptpkxon4my9dbfa3p4erd\"><i class=\"material-icons\">link</i>使用 @Injectable() 类装饰器</h3>\n<h4 id=\"style-07-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3kt2mf77bwyp0i6b0g8r3yhj\"><i class=\"material-icons\">link</i>样式 07-04</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dofiu17yief6o4fbrctfagw1u\"><strong>使用</strong> \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 类装饰器，而不是 \n<code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> 参数装饰器，来为服务的依赖项使用类型作为令牌。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vtvsqkurpm3c5e5pvay0xutl\"><strong>为什么？</strong> Angular 依赖注入（DI）机制根据服务构造函数参数的声明类型来解析服务自身的依赖项。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkah80jbtp1aw3kccfbfuzlfm\"><strong>为什么？</strong> 当服务只接受与类型令牌关联的依赖项时，与在每个构造函数参数上使用 \n<code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code> 相比，\n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 语法更简洁。</p>\n</div>\n<code-example path=\"styleguide/src/07-04/app/heroes/shared/hero-arena.service.avoid.ts\" region=\"example\" title=\"app/heroes/shared/hero-arena.service.ts\">\n/* avoid */\n\nexport class HeroArena {\n  constructor(\n      @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(HeroService) private heroService: HeroService,\n      @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/http/Http\" class=\"code-anchor\">Http</a>) private http: <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>) {}\n}\n\n</code-example>\n<code-example path=\"styleguide/src/07-04/app/heroes/shared/hero-arena.service.ts\" region=\"example\" title=\"app/heroes/shared/hero-arena.service.ts\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroArena {\n  constructor(\n    private heroService: HeroService,\n    private http: <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>) {}\n}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<h2 id=\"data-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o08xf4203bnyfj3owsjqmb88\"><i class=\"material-icons\">link</i>数据服务</h2>\n<a id=\"08-01\"></a>\n<h3 id=\"talk-to-the-server-through-a-service\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3plankokhhxsi5ia5w01435ir\"><i class=\"material-icons\">link</i>通过服务与 Web 服务器通讯</h3>\n<h4 id=\"style-08-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqd2mtbf8icft9fvcl6nsf6td\"><i class=\"material-icons\">link</i>样式 08-01</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"a8imhd004jzj7zh6hk9gmdlra\"><strong>坚持</strong>把数据操作和与数据交互的逻辑重构到服务里。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"68dddujl9iy6ynh0y0w460vmj\"><strong>坚持</strong>让数据服务来负责 XHR 调用、本地储存、内存储存或者其它数据操作。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ypdy8umob54px32o02h3jnvp\"><strong>为什么？</strong> 组件负责视图的展示和信息的收集。它不应该关心如何获取数据，只需要知道向谁索取数据即可。将数据服务分离，将获取数据的逻辑移到数据服务中，使组件更简单，更专注于视图。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9h8s24f9q3ovkzj72kbagcaab\"><strong>为什么？</strong> 这使得在测试使用数据服务的组件时，更容易测试（模拟或真实）数据调用。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7r08q2s0s1razso28cxa5l8o\"><strong>为什么？</strong> 数据管理的细节，例如标头、HTTP 方法、缓存、错误处理和重试逻辑，与组件和其他数据使用者无关。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9pfic0ppsqa8826nbcxdtg9h\">数据服务封装了这些细节。在服务内部演化这些细节更容易，不会影响其使用者。使用模拟服务实现测试使用者也更容易。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<h2 id=\"lifecycle-hooks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bhlcyenmobknyvoaatlpnddj\"><i class=\"material-icons\">link</i>生命周期钩子</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c3jox0z9q4o8fd1baomtlbrvk\">使用生命周期钩子来介入到 Angular 暴露的重要事件里。</p>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"09-01\"></a>\n<h3 id=\"implement-lifecycle-hook-interfaces\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2g3bh3q2wpuinespekvoufb37\"><i class=\"material-icons\">link</i>实现生命周期钩子接口</h3>\n<h4 id=\"style-09-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdob4wqvtpaa0h7aj7eulgpn\"><i class=\"material-icons\">link</i>样式 09-01</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b35gggesqie2y2ppzrymg1nw0\"><strong>坚持</strong>实现生命周期钩子接口。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"146siu1sdb5puckkcy7sxax65\"><strong>为什么？</strong> 生命周期接口规定了类型化的方法签名。使用这些签名可以标记拼写和语法错误。</p>\n</div>\n<code-example path=\"styleguide/src/09-01/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" title=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button&gt;OK&lt;button&gt;`\n})\nexport class HeroButtonComponent {\n  onInit() { // misspelled\n    console.log('The component is initialized');\n  }\n}\n\n</code-example>\n<code-example path=\"styleguide/src/09-01/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\" title=\"app/heroes/shared/hero-button/hero-button.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button&gt;OK&lt;/button&gt;`\n})\nexport class HeroButtonComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  ngOnInit() {\n    console.log('The component is initialized');\n  }\n}\n\n</code-example>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<h2 id=\"appendix\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cb6szqqkvvp9lxctzd6kfs3fm\"><i class=\"material-icons\">link</i>附录</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"94dgcpaytmuepwjqakaygcfg9\">有用的 Angular 工具和小提示。</p>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"A-01\"></a>\n<h3 id=\"codelyzer\">Codelyzer</h3>\n<h4 id=\"style-a-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8if7xvbav8m9xe6k5dp879drz\"><i class=\"material-icons\">link</i>样式 A-01</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d10vb7mpni1wbcb7zndz41kx7\"><strong>请</strong>使用 \n<a href=\"https://www.npmjs.com/package/codelyzer\">codelyzer</a> 来遵循此指南。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3zi56qxufu0zmr7i6avc2y36i\"><strong>考虑</strong>调整 codelyzer 中的规则以满足你的需求。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"A-02\"></a>\n<h3 id=\"file-templates-and-snippets\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"31m9m1xhkj9r19gg0cb6654d7\"><i class=\"material-icons\">link</i>文档模板和代码片段</h3>\n<h4 id=\"style-a-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26k6r32q2ibyz3w46s8bbkq9i\"><i class=\"material-icons\">link</i>样式 A-02</h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oef1ot25a46tgqxtto0xuqdi\"><strong>请</strong>使用文件模板或代码片段来帮助遵循一致的样式和模式。以下是一些 Web 开发编辑器和 IDE 的模板和/或代码片段。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jr2gbceiazdex8hf96kzlmad\"><strong>考虑</strong>使用 \n<a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">代码片段</a>（适用于 \n<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>），这些代码片段遵循以下样式和指南。</p>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">\n  <img src=\"generated/images/guide/styleguide/use-extension.gif\" alt=\"Use Extension\" width=\"700\" height=\"429\">\n</a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxgpvg42ortiadzp330tpul3t\"><strong>考虑</strong>使用 \n<a href=\"https://atom.io/packages/angular-2-typescript-snippets\">代码片段</a>（适用于 \n<a href=\"https://atom.io/\">Atom</a>），这些代码片段遵循以下风格和指南。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o8vf3j2q0udftui25mwuofd1\"><strong>考虑</strong>使用 \n<a href=\"https://github.com/orizens/sublime-angular2-snippets\">代码片段</a>（适用于 \n<a href=\"http://www.sublimetext.com/\">Sublime Text</a>），这些代码片段遵循以下风格和指南。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eo5rkgyvbc2fr2ipz3gtqhc5e\"><strong>考虑</strong>使用 \n<a href=\"https://github.com/mhartington/vim-angular2-snippets\">代码片段</a>（针对 \n<a href=\"http://www.vim.org/\">Vim</a>），这些代码片段遵循以下风格和指南。</p>\n</div>\n<p><a href=\"guide/styleguide#toc\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n\n</div>\n<!-- links to this doc:\n - guide/change-log\n - guide/docs-style-guide\n - guide/npm-packages\n - guide/quickstart\n - guide/setup-systemjs-anatomy\n - guide/structural-directives\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/common/CommonModule\n - api/common/JsonPipe\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/Inject\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Optional\n - api/core/Output\n - api/core/Pipe\n - api/core/PipeTransform\n - api/core/SkipSelf\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/http/Http\n - api/http/Response\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - api/router/RouterModule\n - guide/styleguide#angular-ngmodule-names\n - guide/styleguide#app-root-module\n - guide/styleguide#appendix\n - guide/styleguide#application-structure-and-ngmodules\n - guide/styleguide#avoid-aliasing-inputs-and-outputs\n - guide/styleguide#bootstrapping\n - guide/styleguide#classes\n - guide/styleguide#codelyzer\n - guide/styleguide#coding-conventions\n - guide/styleguide#component-selector-names\n - guide/styleguide#components\n - guide/styleguide#components-as-elements\n - guide/styleguide#constants\n - guide/styleguide#core-feature-module\n - guide/styleguide#custom-prefix-for-components\n - guide/styleguide#custom-prefix-for-directives\n - guide/styleguide#data-services\n - guide/styleguide#decorate-input-and-output-properties\n - guide/styleguide#delegate-complex-component-logic-to-services\n - guide/styleguide#directive-selectors\n - guide/styleguide#directives\n - guide/styleguide#dont-prefix-output-properties\n - guide/styleguide#end-to-end-e2e-test-file-names\n - guide/styleguide#extract-templates-and-styles-to-their-own-files\n - guide/styleguide#feature-modules\n - guide/styleguide#file-structure-conventions\n - guide/styleguide#file-templates-and-snippets\n - guide/styleguide#file-tree\n - guide/styleguide#flat\n - guide/styleguide#folders-by-feature-structure\n - guide/styleguide#general-naming-guidelines\n - guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\n - guide/styleguide#identify\n - guide/styleguide#implement-lifecycle-hook-interfaces\n - guide/styleguide#import-line-spacing\n - guide/styleguide#interfaces\n - guide/styleguide#lazy-loaded-folders\n - guide/styleguide#lifecycle-hooks\n - guide/styleguide#lift\n - guide/styleguide#locate\n - guide/styleguide#member-sequence\n - guide/styleguide#naming\n - guide/styleguide#never-directly-import-lazy-loaded-folders\n - guide/styleguide#overall-structural-guidelines\n - guide/styleguide#pipe-names\n - guide/styleguide#prevent-re-import-of-the-core-module\n - guide/styleguide#properties-and-methods\n - guide/styleguide#providing-a-service\n - guide/styleguide#put-presentation-logic-in-the-component-class\n - guide/styleguide#rule-of-one\n - guide/styleguide#separate-file-names-with-dots-and-dashes\n - guide/styleguide#service-names\n - guide/styleguide#services\n - guide/styleguide#services-are-singletons\n - guide/styleguide#shared-feature-module\n - guide/styleguide#single-responsibility\n - guide/styleguide#single-responsibility-1\n - guide/styleguide#small-functions\n - guide/styleguide#style-01-01\n - guide/styleguide#style-01-02\n - guide/styleguide#style-02-01\n - guide/styleguide#style-02-02\n - guide/styleguide#style-02-03\n - guide/styleguide#style-02-04\n - guide/styleguide#style-02-05\n - guide/styleguide#style-02-06\n - guide/styleguide#style-02-07\n - guide/styleguide#style-02-08\n - guide/styleguide#style-02-09\n - guide/styleguide#style-02-10\n - guide/styleguide#style-02-11\n - guide/styleguide#style-02-12\n - guide/styleguide#style-03-01\n - guide/styleguide#style-03-02\n - guide/styleguide#style-03-03\n - guide/styleguide#style-03-04\n - guide/styleguide#style-03-06\n - guide/styleguide#style-04-01\n - guide/styleguide#style-04-02\n - guide/styleguide#style-04-03\n - guide/styleguide#style-04-04\n - guide/styleguide#style-04-05\n - guide/styleguide#style-04-06\n - guide/styleguide#style-04-07\n - guide/styleguide#style-04-08\n - guide/styleguide#style-04-09\n - guide/styleguide#style-04-10\n - guide/styleguide#style-04-11\n - guide/styleguide#style-04-12\n - guide/styleguide#style-04-13\n - guide/styleguide#style-04-14\n - guide/styleguide#style-05-02\n - guide/styleguide#style-05-03\n - guide/styleguide#style-05-04\n - guide/styleguide#style-05-12\n - guide/styleguide#style-05-13\n - guide/styleguide#style-05-14\n - guide/styleguide#style-05-15\n - guide/styleguide#style-05-16\n - guide/styleguide#style-05-17\n - guide/styleguide#style-06-01\n - guide/styleguide#style-06-03\n - guide/styleguide#style-07-01\n - guide/styleguide#style-07-02\n - guide/styleguide#style-07-03\n - guide/styleguide#style-07-04\n - guide/styleguide#style-08-01\n - guide/styleguide#style-09-01\n - guide/styleguide#style-a-01\n - guide/styleguide#style-a-02\n - guide/styleguide#style-guide\n - guide/styleguide#style-vocabulary\n - guide/styleguide#symbols-and-file-names\n - guide/styleguide#t-dry-try-to-be-dry\n - guide/styleguide#talk-to-the-server-through-a-service\n - guide/styleguide#toc\n - guide/styleguide#unit-test-file-names\n - guide/styleguide#use-directives-to-enhance-an-element\n - guide/styleguide#use-the-injectable-class-decorator\n - guide/template-syntax#binding-syntax\n - http://karma-runner.github.io/\n - http://www.sublimetext.com/\n - http://www.vim.org/\n - https://atom.io/\n - https://atom.io/packages/angular-2-typescript-snippets\n - https://code.visualstudio.com/\n - https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\n - https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines\n - https://github.com/mhartington/vim-angular2-snippets\n - https://github.com/orizens/sublime-angular2-snippets\n - https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\n - https://material.angular.io/components/button/overview\n - https://wikipedia.org/wiki/Single_responsibility_principle\n - https://www.npmjs.com/package/codelyzer\n - https://www.w3.org/TR/custom-elements/\n-->"
}