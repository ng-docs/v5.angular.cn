{
  "id" : "guide/ngmodules",
  "title" : "NgModules",
  "contents" : "<div class=\"content\">\n<h1 id=\"ngmodules\">NgModules</h1>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\"><i class=\"material-icons\">link</i>先决条件</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wtw65w7vo9ysndhyuq3y2kie\">对以下概念的基本理解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t22zgv8ykbwmu1loddo1606h\"><a href=\"guide/bootstrapping\">引导</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb4qsq6zvscyfkwgoajja4d9x\"><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 模块与 NgModules</a>。</li>\n</ul>\n<hr>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2b6ia9h14jr60su0x6s736v9\"><strong>NgModules</strong> 配置注入器和编译器，并帮助将相关事物组织在一起。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm5xjui81wuxltgx743b28m1s\">NgModule 是一个用 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器标记的类。\n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 接受一个元数据对象，该对象描述了如何编译组件的模板以及如何在运行时创建注入器。它标识模块自己的组件、指令和管道，通过 \n<code>exports</code> 属性公开其中一些，以便外部组件可以使用它们。\n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 还可以将服务提供者添加到应用程序依赖注入器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8buyuoy6awq5nqoj4zplg9e1p\">有关展示 NgModules 相关页面涵盖的所有技术的示例应用程序，请参见 \n<live-example></live-example>。有关各个技术的说明，请访问 NgModules 部分下的相关 NgModule 页面。</p>\n<h2 id=\"angular-modularity\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ezl02ydxqb4ynxky4foww77hp\"><i class=\"material-icons\">link</i>Angular 模块化</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3ilamfqmqn5jxfk6hfik72v09\">模块是组织应用和使用外部库扩展应用的最佳途径。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69v01qxr2lk50z1kovctovi5y\">Angular 库是 NgModules，例如 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>、\n<code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 和 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。许多第三方库也以 NgModules 的形式提供，例如 \n<a href=\"https://material.angular.io/\">Material Design</a>、\n<a href=\"http://ionicframework.com/\">Ionic</a> 和 \n<a href=\"https://github.com/angular/angularfire2\">AngularFire2</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wk7cm694ko4h6re2u061lpl1\">NgModules 将组件、指令和管道整合到功能一致的模块中，每个模块都专注于一个特性区域、应用程序业务领域、工作流或常见的实用程序集合。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"cdd7doxhex4rz4qhohuahhcb4\">模块还可以把服务加到应用中。这些服务可能是内部开发的（比如你自己写的），或者来自外部的（比如 Angular 的路由和 HTTP 客户端）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e6op44blqu0dy3ypw9astarco\">模块可以在应用启动时急性加载，也可以由路由器进行异步的惰性加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3rpwdk3hiiwznfxv7ldu780z9\">NgModule 的元数据会做这些：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bxlyw1adblxliwbnt0r7clhf\">声明哪些组件、指令和管道属于该模块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cr2qnmfn3amkhzval0mnfb1q\">公开其中一些组件、指令和管道，以便其他模块的组件模板可以使用它们。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebjx0w8t26oo8gxx5kwhqz8d1\">导入其他模块，这些模块包含当前模块中的组件所需的组件、指令和管道。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2aj47lcxhuq7j38vxjban07n0\">提供其他应用程序组件可以使用的服务。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asgdgrp9psna021ojmobwl7g2\">每个 Angular 应用至少有一个模块，即根模块。你 \n<a href=\"guide/bootstrapping\">引导</a> 该模块来启动应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8ctol2uk21ra741yryw5d8gw\">在只有一个组件的简单应用程序中，根模块就足够了。随着应用程序的增长，你将根模块重构为 \n<a href=\"guide/feature-modules\">特性模块</a>，这些模块代表相关功能的集合。然后，你将这些模块导入到根模块中。</p>\n<h2 id=\"the-basic-ngmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wm6vcqx58uae24nwua8t17ji\"><i class=\"material-icons\">link</i>基本的 NgModule</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57llqf8p09gu97h38ow906lii\">CLI 在创建新应用程序时会生成以下基本应用程序模块。</p>\n<code-example path=\"bootstrapping/src/app/app.module.ts\" region=\"whole-ngmodule\" title=\"src/app/app.module.ts\" linenums=\"false\">\n\n// imports\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a> } from '@angular/http';\n\nimport { AppComponent } from './app.component';\nimport { ItemDirective } from './item.directive';\n\n\n// @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> decorator with its metadata\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    ItemDirective\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4swcswd424g0rxhb93gfrl6t6\">在顶部是导入语句。下一部分是你在其中配置 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的地方，说明哪些组件和指令属于它（\n<code>declarations</code>），以及它使用哪些其他模块（\n<code>imports</code>）。本页基于 \n<a href=\"guide/bootstrapping\">引导</a>，其中详细介绍了 NgModule 的结构。如果你需要更多关于 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 结构的信息，请务必阅读 \n<a href=\"guide/bootstrapping\">引导</a>。</p>\n<hr>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\"><i class=\"material-icons\">link</i>关于 NgModules 的更多信息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"320pd4quk21g01cifflgmc0pj\">你可能还会对以下内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy2an3vxrjhdg4mjgf59h805c\"><a href=\"guide/feature-modules\">特性模块</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfi3jry8ngl0qndh8quap6m0s\"><a href=\"guide/entry-components\">入口组件</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg213zznp5hwjyrbbmmmf2q3n\"><a href=\"guide/providers\">提供者</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mtv6f6esfp9x34wuk7qwqbn4\"><a href=\"guide/module-types\">NgModules 类型</a>。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/aot-compiler\n - guide/architecture-modules\n - guide/attribute-directives\n - guide/change-log\n - guide/frequent-ngmodules\n - guide/glossary\n - guide/ngmodule-faq\n - guide/testing\n - guide/upgrade\n - tutorial/toh-pt1\n-->\n<!-- links from this doc:\n - api/common/http/HttpClientModule\n - api/core/NgModule\n - api/forms/FormsModule\n - api/http/HttpModule\n - api/platform-browser/BrowserModule\n - api/router/RouterModule\n - guide/bootstrapping\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n - guide/ngmodules#angular-modularity\n - guide/ngmodules#more-on-ngmodules\n - guide/ngmodules#ngmodules\n - guide/ngmodules#prerequisites\n - guide/ngmodules#the-basic-ngmodule\n - guide/providers\n - http://ionicframework.com/\n - https://github.com/angular/angularfire2\n - https://material.angular.io/\n-->"
}