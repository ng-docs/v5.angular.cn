{
  "id" : "guide/service-worker-getting-started",
  "title" : "Service Worker 快速上手",
  "contents" : "<div class=\"content\">\n<h1 id=\"getting-started-with-service-workers\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4yha3afq07kgs584opdzpq1lo\"><i class=\"material-icons\">link</i>Service Worker 快速上手</h1>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\"><i class=\"material-icons\">link</i>先决条件</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xq8keqzpcinu80uje7xu3rbf\">对以下内容的基本了解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3plgxtcfyho0w4o9qrjol9uy8\"><a href=\"guide/service-worker-intro\">Angular 服务工作者简介</a>.</li>\n</ul>\n<hr>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vy1ayhr01hgxpqpqprbiggnu\">从 Angular 5.0.0 开始，你可以在任何 CLI 项目中轻松启用 Angular 服务工作者支持。本文档介绍如何在新的和现有的项目中启用 Angular 服务工作者支持。然后，它使用一个简单的示例来展示服务工作者的实际应用，演示加载和基本缓存。</p>\n<h2 id=\"adding-a-service-worker-to-a-new-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a46upysxjwg2nmokyuf0mwiyz\"><i class=\"material-icons\">link</i>向新应用程序添加服务工作者</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21re1bslxplq3z4ux57olxw9m\">如果你正在生成一个新的 CLI 项目，你可以使用 CLI 在创建项目时设置 Angular 服务工作者。为此，请将 \n<code>--service-worker</code> 标志添加到 \n<code>ng new</code> 命令中：</p>\n<code-example language=\"sh\">\nng new my-project --service-worker \n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0h400dom8emk0giz3jobtdjg\"><code>--service-worker</code> 标志通过添加 \n<code>service-worker</code> 包以及设置支持服务工作者所需的文件来配置你的应用以使用服务工作者。有关详细信息，请参阅下一节，该节详细介绍了该过程，因为它向你展示了如何手动将服务工作者添加到现有应用中。</p>\n<h2 id=\"adding-a-service-worker-to-an-existing-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3p0pkffesz8gnhtrq9c76n1i7\"><i class=\"material-icons\">link</i>向现有应用程序添加服务工作者</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adkv6aj7yo1pg6smrjoobaui3\">要向现有应用添加服务工作者，请执行以下操作：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z6bvuayo9c4bj4oaud0di23u\">添加服务工作者包。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fr8r66pafipvwprzfuv4dbbf\">在 CLI 中启用服务工作者构建支持。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4d4nspfavjw6z8jexdr6bro5\">导入并注册服务工作者。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cv52gwi0vutxeyli1vi41vzpj\">创建服务工作者配置文件，该文件指定缓存行为和其他设置。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3zkv45f1lrxp3zohl4b8e9s4i\">构建项目。</li>\n</ol>\n<h3 id=\"step-1-add-the-service-worker-package\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vycw7q4l2xbuhc7k5rl6amf0\"><i class=\"material-icons\">link</i>步骤 1：添加服务工作者包</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj5vympzntj87ygric0gwuhor\">添加包 \n<code>@angular/service-worker</code>，使用 yarn 实用程序，如下所示：</p>\n<code-example language=\"sh\">\nyarn add @angular/service-worker\n</code-example>\n<h3 id=\"step-2-enable-service-worker-build-support-in-the-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17rmpuga8732gfloqr76xr8yy\"><i class=\"material-icons\">link</i>步骤 2：在 CLI 中启用服务工作者构建支持</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3go6d8mv7vfnmijr5ql0bqp5q\">要启用 Angular 服务工作者，CLI 必须在构建时生成 Angular 服务工作者清单。要使 CLI 为现有项目生成清单，请在项目的 \n<code>.angular-cli.json</code> 文件中将 \n<code>serviceWorker</code> 标志设置为 \n<code>true</code>，如下所示：</p>\n<code-example language=\"sh\">\nng set apps.0.serviceWorker=true\n</code-example>\n<h3 id=\"step-3-import-and-register-the-service-worker\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1b47ztaakle6te18cutn2wkah\"><i class=\"material-icons\">link</i>步骤 3：导入并注册服务工作者</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bi2s6xbjx1qa1ebvuou0cdmn2\">要导入并注册 Angular 服务工作者，请执行以下操作：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egshj8azy6dnsu7uwue36t52q\">在根模块 \n<code>src/app/app.module.ts</code> 的顶部，导入 \n<code><a href=\"api/service-worker/ServiceWorkerModule\" class=\"code-anchor\">ServiceWorkerModule</a></code> 和 \n<code>environment</code>。</p>\n<code-example path=\"service-worker-getting-started/src/app/app.module.ts\" linenums=\"false\" title=\"src/app/app.module.ts\" region=\"sw-import\">\nimport { <a href=\"api/service-worker/ServiceWorkerModule\" class=\"code-anchor\">ServiceWorkerModule</a> } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dao6ehanq7hr3bx63dgdllzvz\">将 \n<code><a href=\"api/service-worker/ServiceWorkerModule\" class=\"code-anchor\">ServiceWorkerModule</a></code> 添加到 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 \n<code>imports</code> 数组中。使用 \n<code>register()</code> 辅助函数来注册服务工作者，注意在非生产模式下禁用服务工作者。</p>\n<code-example path=\"service-worker-getting-started/src/app/app.module.ts\" linenums=\"false\" title=\"src/app/app.module.ts\" region=\"sw-module\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    ServiceWorkerModule.register('/ngsw-worker.js', {enabled: environment.production})\n  ],\n  providers: [\n    CheckForUpdateService,\n    LogUpdateService,\n    PromptUpdateService,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azgtj5r9gk4lmxcfkg2p4ozox\">文件 \n<code>ngsw-worker.js</code> 是预构建的服务工作者脚本的名称，CLI 会将其复制到 \n<code>dist/</code> 中，以便与你的服务器一起部署。</p>\n<h3 id=\"step-4-create-the-configuration-file-ngsw-configjson\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"130fx31mp15jdw6a57a6hnb1b\"><i class=\"material-icons\">link</i>步骤 4：创建配置文件 \n<code>ngsw-config.json</code></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rj0ugt1zwvkzjcc6dwr3k2ul\">Angular CLI 需要一个服务工作者配置文件，名为 \n<code>ngsw-config.json</code>。配置文件控制服务工作者如何缓存文件和数据资源。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26l6jfm5xijct5jxeoe3if3pv\">你可以从 CLI 的样板版本开始，该版本为大多数应用程序配置了合理的默认值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1ma2xyxhuvakg3du9e9vuowj\">或者，将以下内容保存为 \n<code>src/ngsw-config.json</code>：</p>\n<code-example path=\"service-worker-getting-started/src/ngsw-config.json\" linenums=\"false\" title=\"src/ngsw-config.json\">\n\n{\n  \"index\": \"/index.html\",\n  \"assetGroups\": [{\n    \"name\": \"app\",\n    \"installMode\": \"prefetch\",\n    \"resources\": {\n      \"files\": [\n        \"/favicon.ico\",\n        \"/index.html\"\n      ],\n      \"versionedFiles\": [\n        \"/*.bundle.css\",\n        \"/*.bundle.js\",\n        \"/*.chunk.js\"\n      ]\n    }\n  }, {\n    \"name\": \"assets\",\n    \"installMode\": \"lazy\",\n    \"updateMode\": \"prefetch\",\n    \"resources\": {\n      \"files\": [\n        \"/assets/**\"\n      ]\n    }\n  }]\n}\n\n</code-example>\n<h3 id=\"step-5-build-the-project\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m1q1ub8g3h0zo4gp6rkztbp4\"><i class=\"material-icons\">link</i>步骤 5：构建项目</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpjri4361kt25kbwwhno4iwpw\">最后，构建项目：</p>\n<code-example language=\"sh\">\nng build --prod\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"eakp2vhma7v9tao4aitfq5auj\">现在，这个 CLI 项目就可以使用 Angular Service Worker 了。</p>\n<h2 id=\"service-worker-in-action-a-tour\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"aapfkbx4b29k01a2h7xs8p41g\"><i class=\"material-icons\">link</i>Service Worker 实战：向导</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"64js80cj7v5cug05v85fqhbr1\">本节用一个范例应用来演示一下 Service Worker 实战。</p>\n<h3 id=\"serving-with-http-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0k485plrbt7b0u3xjzsnjv3i\"><i class=\"material-icons\">link</i>使用 \n<code>http-server</code> 提供服务</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dddeqcszp0h4ibpyo59vxoquh\">由于 \n<code>ng serve</code> 不适用于服务工作者，因此你必须使用单独的 HTTP 服务器在本地测试你的项目。你可以使用任何 HTTP 服务器。以下示例使用 npm 中的 \n<a href=\"https://www.npmjs.com/package/http-server\">http-server</a> 包。为了减少冲突的可能性，请在专用端口上进行测试。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emdnrcw5lds6i2g0i7ewldaq9\">要使用 \n<code>http-server</code> 提供服务，请更改到包含你的 Web 文件的目录并启动 Web 服务器：</p>\n<code-example language=\"sh\">\ncd dist\nhttp-server -p 8080\n</code-example>\n<h3 id=\"initial-load\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fe5bvw4ksvggq8yyjr9cemea\"><i class=\"material-icons\">link</i>初始加载</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edw2zhunfyfhxb8rihtbd5doo\">服务器运行后，你可以将浏览器指向 \n<a href=\"http://localhost:8080/\">http://localhost:8080/</a>。你的应用程序应该正常加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eumnke37iwzz0jq7f1p5v464y\"><strong>提示：</strong>在测试 Angular 服务工作者时，最好在浏览器中使用隐身或私密窗口，以确保服务工作者不会最终从之前的剩余状态读取数据，这会导致意外行为。</p>\n<h3 id=\"simulating-a-network-issue\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dfbik6sxxjrssehkisgdje4b2\"><i class=\"material-icons\">link</i>模拟网络出问题</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkc4qf9atifgwwz79yec052se\">要模拟网络问题，请禁用应用程序的网络交互。在 Chrome 中：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49ub06bedwl6ob5c2acn7wauk\">从 Chrome 菜单（位于右上角）中选择 **工具** &gt; **开发者工具**。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7egcsyqxgmk8ahjqbdt1ks9kz\">进入 <strong>Network 页</strong>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3p9vu50rl0ol711l84e917an1\">选中 **离线** 复选框。</li>\n</ol>\n<figure>\n  <img src=\"generated/images/guide/service-worker/offline-checkbox.png\" alt=\"The offline checkbox in the Network tab is checked\" width=\"600\" height=\"62\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h2pmwourwg24reyksapl7172\">现在应用无法进行网络交互。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"142cnnhi57joa6fcd1akq570o\">对于那些不使用 Angular Service Worker 的应用，现在刷新将会显示 Chrome 的“网络中断”页，提示“没有可用的网络连接”。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duwd3sn3b8mavckipcfkdkwr5\">添加 Angular 服务工作者后，应用的行为会发生变化。刷新页面时，页面会正常加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tiqg365r0rjf1nnmq03umou6\">查看 **网络** 选项卡，可以验证服务工作者是否处于活动状态。</p>\n<figure>\n  <img src=\"generated/images/guide/service-worker/sw-active.png\" alt=\"Requests are marked as from ServiceWorker\" width=\"630\" height=\"112\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6knqpxxiriuw5aanjpy4at4s\">注意，在“大小”列下，请求状态为 \n<code>(from ServiceWorker)</code>。这意味着资源不是从网络加载的，而是从服务工作者的缓存中加载的。</p>\n<h3 id=\"whats-being-cached\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"cv1x6fcf23pfneu3unifia472\"><i class=\"material-icons\">link</i>哪些内容被缓存了？</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uv1i0ul7fdivlkeijis3ctn3\">注意，浏览器渲染此应用所需的所有文件都已缓存。\n<code>ngsw-config.json</code> 模板配置已设置为缓存 CLI 使用的特定资源：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85awu7inye57dovr0jedzt6ga\"><code>index.html</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60ho9df4sbryboen9ckd7ocuk\"><code>favicon.ico</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkp9go8g1jrptmqc11j4ymn6q\">构建工件（JS 和 CSS 捆绑包）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bghya874dql9ctzrqvba63tdx\"><code>assets</code> 下的所有内容。</li>\n</ul>\n<h3 id=\"making-changes-to-your-application\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"17kj9bztiae63lut6gogrp2bt\"><i class=\"material-icons\">link</i>修改你的应用</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eruv2s01o6agfpwznbt54g0gn\">现在你已经了解了服务工作者如何缓存你的应用，下一步是了解更新是如何工作的。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ohetwohyuptjxzvazz45p35d\">如果你在隐身窗口中测试，请打开第二个空白标签页。这将使隐身窗口和缓存状态在测试期间保持活动状态。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qt2lnanp1z9uve66r9cb9qwu\">关闭应用标签页，但不要关闭窗口。这也会关闭开发者工具。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67av7q9box275n4ur1tjtx1ih\">关闭 \n<code>http-server</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adsp6i1p28uqovt2j3mudhurt\">接下来，对应用进行更改，并观察服务工作者安装更新。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7hr5lbwyrv9f8ov5d2i9yii6x\">打开 <code>src/app/app.component.html</code> 以供编辑。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"jyvu169iq829jd2w3lh9k16d\">把文本 <code>Welcome to {{title}}!</code> 改为 <code>Bienvenue à {{title}}!</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7qo6pjm5mg8j3aw0qd12dg37i\">再次构建并运行此服务器：</p>\n</li>\n</ol>\n<code-example language=\"sh\">\nng build --prod\ncd dist\nhttp-server -p 8080\n</code-example>\n<h3 id=\"updating-your-application-in-the-browser\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"d3qeh57xh83q2m0u5islqenpc\"><i class=\"material-icons\">link</i>在浏览器中更新你的应用</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"eigww7tkojjjaca1f7ivjixlp\">现在，看看浏览器和 Service Worker 如何处理这个更新后的应用。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1g0z9oxz9a78qwsoy9x3urz6q\">在同一个窗口中再次打开 \n<a href=\"http://localhost:8080\">http://localhost:8080</a>。发生了什么？</li>\n</ol>\n<figure>\n  <img src=\"generated/images/guide/service-worker/welcome-msg-en.png\" alt=\"It still says Welcome to Service Workers!\" width=\"411\" height=\"248\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el19gn9wwen0tm0gnxyv2011s\">出了什么问题？实际上，什么问题也没有。Angular 服务工作者正在正常工作，并提供它已 **安装** 的应用版本，即使有更新可用。为了提高速度，服务工作者不会在提供已缓存的应用之前等待检查更新。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kxnla4ieqvgjv10j73nxa7x6\">如果你查看 \n<code>http-server</code> 日志，你会看到服务工作者请求 \n<code>/ngsw.json</code>。这就是服务工作者如何检查更新的方式。</p>\n<ol start=\"2\">\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9mmvm1labqvmf7epmverv6qt\">刷新页面。</li>\n</ol>\n<figure>\n  <img src=\"generated/images/guide/service-worker/welcome-msg-fr.png\" alt=\"The text has changed to say Bienvenue à app!\" width=\"393\" height=\"240\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9i534708erdsudxjaz1gitsi1\">服务工作者已在 \n<em>后台</em> 安装了更新版本的应用，下次加载或重新加载页面时，服务工作者将切换到最新版本。</p>\n<hr>\n<h2 id=\"more-on-angular-service-workers\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e9jl51v338pdg88lkv1cl8f1i\"><i class=\"material-icons\">link</i>关于 Angular Service Worker 的更多信息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"320pd4quk21g01cifflgmc0pj\">你可能还会对以下内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48los6o6rpw1gxmk7imm3o729\"><a href=\"guide/service-worker-communications\">与服务工作者通信</a>.</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/service-worker-communications\n - guide/service-worker-intro\n-->\n<!-- links from this doc:\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - api/service-worker/ServiceWorkerModule\n - guide/service-worker-communications\n - guide/service-worker-getting-started#adding-a-service-worker-to-a-new-application\n - guide/service-worker-getting-started#adding-a-service-worker-to-an-existing-app\n - guide/service-worker-getting-started#getting-started-with-service-workers\n - guide/service-worker-getting-started#initial-load\n - guide/service-worker-getting-started#making-changes-to-your-application\n - guide/service-worker-getting-started#more-on-angular-service-workers\n - guide/service-worker-getting-started#prerequisites\n - guide/service-worker-getting-started#service-worker-in-action-a-tour\n - guide/service-worker-getting-started#serving-with-http-server\n - guide/service-worker-getting-started#simulating-a-network-issue\n - guide/service-worker-getting-started#step-1-add-the-service-worker-package\n - guide/service-worker-getting-started#step-2-enable-service-worker-build-support-in-the-cli\n - guide/service-worker-getting-started#step-3-import-and-register-the-service-worker\n - guide/service-worker-getting-started#step-4-create-the-configuration-file-ngsw-configjson\n - guide/service-worker-getting-started#step-5-build-the-project\n - guide/service-worker-getting-started#updating-your-application-in-the-browser\n - guide/service-worker-getting-started#whats-being-cached\n - guide/service-worker-intro\n - http://localhost:8080\n - http://localhost:8080/\n - https://www.npmjs.com/package/http-server\n-->"
}