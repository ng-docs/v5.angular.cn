{
  "id" : "guide/cheatsheet",
  "title" : "速查表",
  "contents" : "<div class=\"content\">\n<h1 class=\"no-toc\" id=\"cheat-sheet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q9xg5162yzq576ij8zd0qh61\"><i class=\"material-icons\">link</i>速查表</h1>\n<div id=\"cheatsheet\">\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p29plvvbfir7eo01lmju80ab\">引导</th>\n<th><p><code>import { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';</code>\n</p>\n</th>\n</tr>\n<tr>\n<td><code><b><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule</b>(AppModule);</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"barvvhjhqbcnjwvzx5hpp7pqb\">使用指定 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中的根组件引导应用。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th>NgModules</th>\n<th><p><code>import { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';</code>\n</p>\n</th>\n</tr>\n<tr>\n<td><code>@<b><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></b>({ declarations: ..., imports: ...,<br>     exports: ..., providers: ..., bootstrap: ...})<br>class MyModule {}</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mnff4io92mzlq1l8j7tzp7xb\">定义一个包含组件、指令、管道和提供者的模块。</p>\n</td>\n</tr><tr>\n<td><code><b>declarations:</b> [MyRedComponent, MyBlueComponent, MyDatePipe]</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ryg35mx9gjbhkfgdedx7k3fp\">属于此模块的组件、指令和管道的列表。</p>\n</td>\n</tr><tr>\n<td><code><b>imports:</b> [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, SomeOtherModule]</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eei325zivkha8z0yeo0azb5xb\">要导入到此模块的模块列表。导入模块中的所有内容都可用于此模块的 \n<code>declarations</code>。</p>\n</td>\n</tr><tr>\n<td><code><b>exports:</b> [MyRedComponent, MyDatePipe]</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2i2yyp7mugzaqvtpxxyrs33c7\">对导入此模块的模块可见的组件、指令和管道的列表。</p>\n</td>\n</tr><tr>\n<td><code><b>providers:</b> [MyService, { provide: ... }]</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9m10cg840ckfe2rp6otunfx4\">对该模块的内容和导入该模块的模块都可见的依赖注入提供者的列表。</p>\n</td>\n</tr><tr>\n<td><code><b>bootstrap:</b> [MyAppComponent]</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44xv5um0unbdwukahkmnx8gad\">引导此模块时要引导的组件列表。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5w5kqvgmi0o4l4z6rjt7db87s\">模板语法</th>\n<th></th>\n</tr>\n<tr>\n<td><code>&lt;input <b>[value]</b>=\"firstName\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24jd9krxo2nalnessot9qyb0q\">将属性 \n<code>value</code> 绑定到表达式 \n<code>firstName</code> 的结果。</p>\n</td>\n</tr><tr>\n<td><code>&lt;div <b>[attr.role]</b>=\"myAriaRole\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1poyb2ls4nu5vcp8683w70d8z\">将属性 \n<code>role</code> 绑定到表达式 \n<code>myAriaRole</code> 的结果。</p>\n</td>\n</tr><tr>\n<td><code>&lt;div <b>[class.extra-sparkle]</b>=\"isDelightful\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5uhv95ya40bj0tib48uwllj2o\">将元素上 \n<code>extra-sparkle</code> CSS 类 存在与否绑定到表达式 \n<code>isDelightful</code> 的真值与否。</p>\n</td>\n</tr><tr>\n<td><code>&lt;div <b>[style.width.px]</b>=\"mySize\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epo1b9wf5zh2ienusyvwepz3u\">将样式属性 \n<code>width</code> 绑定到表达式 \n<code>mySize</code> 的结果（以像素为单位）。单位是可选的。</p>\n</td>\n</tr><tr>\n<td><code>&lt;button <b>(click)</b>=\"readRainbow($event)\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3jqk65rul7w35hgloiyfksok\">当在此按钮元素（或其子元素）上触发点击事件时，调用方法 \n<code>readRainbow</code>，并将事件对象传递给它。</p>\n</td>\n</tr><tr>\n<td><code>&lt;div title=\"Hello <b>{{ponyName}}</b>\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wofiyf3tplc4twunwm65yfno\">将属性绑定到插值字符串，例如“Hello Seabiscuit”。等效于： \n<code>&lt;div [title]=\"'Hello ' + ponyName\"&gt;</code></p>\n</td>\n</tr><tr>\n<td><code>&lt;p&gt;Hello <b>{{ponyName}}</b>&lt;/p&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6q86xheakoie0vva7rdxxe8d0\">将文本内容绑定到插值字符串，例如“Hello Seabiscuit”。</p>\n</td>\n</tr><tr>\n<td><code>&lt;my-cmp <b>[(title)]</b>=\"name\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dtdx759majfvuovyte8p7o85\">设置双向数据绑定。等效于：\n<code>&lt;my-cmp [title]=\"name\" (titleChange)=\"name=$event\"&gt;</code></p>\n</td>\n</tr><tr>\n<td><code>&lt;video <b>#movieplayer</b> ...&gt;<br>  &lt;button <b>(click)</b>=\"movieplayer.play()\"&gt;<br>&lt;/video&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kdegutdk4b4qgwsmmc3wtho2\">创建一个局部变量 \n<code>movieplayer</code>，它提供对当前模板中数据绑定和事件绑定表达式中的 \n<code>video</code> 元素实例的访问。</p>\n</td>\n</tr><tr>\n<td><code>&lt;p <b>*myUnless</b>=\"myExpression\"&gt;...&lt;/p&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ysvnudpot24pf8cfobf0k0lv\"><code>*</code> 符号将当前元素转换为嵌入式模板。等效于： \n<code>&lt;ng-template [myUnless]=\"myExpression\"&gt;&lt;p&gt;...&lt;/p&gt;&lt;/ng-template&gt;</code></p>\n</td>\n</tr><tr>\n<td><code>&lt;p&gt;Card No.: <b>{{cardNumber | myCardNumberFormatter}}</b>&lt;/p&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nz6dgp2388siziry4thhentf\">通过名为 \n<code>myCardNumberFormatter</code> 的管道转换表达式 \n<code>cardNumber</code> 的当前值。</p>\n</td>\n</tr><tr>\n<td><code>&lt;p&gt;Employer: <b>{{employer?.companyName}}</b>&lt;/p&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dftpzwoyiktds5lojjodfatrr\">安全导航运算符（\n<code>?</code>）表示 \n<code>employer</code> 字段是可选的，如果为 \n<code>undefined</code>，则应忽略表达式的其余部分。</p>\n</td>\n</tr><tr>\n<td><code>&lt;<b>svg:</b>rect x=\"0\" y=\"0\" width=\"100\" height=\"100\"/&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qkqqsobj4vf3q918qiv56qzw\">SVG 片段模板需要在其根元素上使用 \n<code>svg:</code> 前缀来区分 SVG 元素和 HTML 组件。</p>\n</td>\n</tr><tr>\n<td><code>&lt;<b>svg</b>&gt;<br>  &lt;rect x=\"0\" y=\"0\" width=\"100\" height=\"100\"/&gt;<br>&lt;/<b>svg</b>&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9d1qu9f7lz2nynbt37jc5dcq\"><code>&lt;svg&gt;</code> 根元素会自动检测为 SVG 元素，无需前缀。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"caiz9ki6ffyzkmf5op1f69ql7\">内置指令</th>\n<th><p><code>import { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';</code>\n</p>\n</th>\n</tr>\n<tr>\n<td><code>&lt;section <b>*ngIf</b>=\"showSection\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ju1xzflyuxxu876cmc5u7gwv\">根据 \n<code>showSection</code> 表达式删除或重新创建 DOM 树的一部分。</p>\n</td>\n</tr><tr>\n<td><code>&lt;li <b>*ngFor</b>=\"let item of list\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eo5tym2qglpj905xsrm980x1w\">将 li 元素及其内容转换为模板，并使用它为列表中的每个条目实例化一个视图。</p>\n</td>\n</tr><tr>\n<td><code>&lt;div <b>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</b>=\"conditionExpression\"&gt;<br>  &lt;ng-template <b>[<b><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></b>]</b>=\"case1Exp\"&gt;...&lt;/ng-template&gt;<br>  &lt;ng-template <b>ngSwitchCase</b>=\"case2LiteralString\"&gt;...&lt;/ng-template&gt;<br>  &lt;ng-template <b>ngSwitchDefault</b>&gt;...&lt;/ng-template&gt;<br>&lt;/div&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ce0yre8z61g712kp2lpnzv98\">根据 \n<code>conditionExpression</code> 的当前值，通过选择一个嵌入式模板来有条件地交换 div 的内容。</p>\n</td>\n</tr><tr>\n<td><code>&lt;div <b>[ngClass]</b>=\"{'active': isActive, 'disabled': isDisabled}\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4roin00vrz7mhvuhz05oncz5o\">将元素上 CSS 类的存在与否绑定到关联的映射表值的真值与否。右侧表达式应返回 {class-name: true/false} 映射表。</p>\n</td>\n</tr>\n<tr>\n<td><code>&lt;div <b>[ngStyle]</b>=\"{'property': 'value'}\"&gt;</code><br><code>&lt;div <b>[ngStyle]</b>=\"dynamicStyles()\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay6kb4vvztg2r8oodhwr8zjxy\">允许你使用 CSS 将样式分配给 HTML 元素。你可以直接使用 CSS，如第一个示例所示，也可以从组件中调用方法。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5xsni8fgg13z9qwldwylke25i\">表单</th>\n<th><p><code>import { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';</code>\n</p>\n</th>\n</tr>\n<tr>\n<td><code>&lt;input <b>[(ngModel)]</b>=\"userName\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7zogn1ffbztd1l1mmg473995c\">为表单控件提供双向数据绑定、解析和验证。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeom5pdaiszm2cpagxgv939fw\">类装饰器</th>\n<th><p><code>import { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, ... } from '@angular/core';</code>\n</p>\n</th>\n</tr>\n<tr>\n<td><code><b>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})</b><br>class MyComponent() {}</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee1veddzwc3yjqyb9eu4quodw\">声明一个类是一个组件，并提供有关组件的元数据。</p>\n</td>\n</tr><tr>\n<td><code><b>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({...})</b><br>class MyDirective() {}</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8db0838b79hwvn46jgpsbewsa\">声明一个类是一个指令，并提供有关指令的元数据。</p>\n</td>\n</tr><tr>\n<td><code><b>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({...})</b><br>class MyPipe() {}</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qz5rl7e74vjgqxf5fcb03dmr\">声明一个类是一个管道，并提供有关管道的元数据。</p>\n</td>\n</tr><tr>\n<td><code><b>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</b><br>class MyService() {}</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dn1cf9o9wkk9abu70kkf470m\">声明一个类具有依赖项，这些依赖项应在依赖注入器创建此类的实例时注入到构造函数中。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azk2dn7rjdadywgbbt0nzm2f\">指令配置</th>\n<th><p><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ property1: value1, ... })</code>\n</p>\n</th>\n</tr>\n<tr>\n<td><code><b>selector:</b> '.cool-button:not(<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>)'</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"494ibr1cp457v6lfbua7z0xr2\">指定一个 CSS 选择器，用于在模板中标识此指令。支持的选择器包括 \n<code>element</code>、 \n<code>[attribute]</code>、\n<code>.class</code> 和 \n<code>:not()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2soeb757ar23ccjyo1t21yq3j\">不支持父子关系选择器。</p>\n</td>\n</tr><tr>\n<td><code><b>providers:</b> [MyService, { provide: ... }]</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uqgh14di2o202kssb9l1pjio\">此指令及其子元素的依赖注入提供者的列表。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"en7738qntn1hwe5nldgn3dsw\">组件配置</th>\n<th><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pjjc9z686s05kqpglk68m3v\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 扩展了 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>， 因此 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 配置也适用于组件</p>\n</th>\n</tr>\n<tr>\n<td><code><b>moduleId:</b> module.id</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayovu9cqkvflarrz12jyop87p\">如果设置，则 \n<code>templateUrl</code> 和 \n<code>styleUrl</code> 相对于组件解析。</p>\n</td>\n</tr><tr>\n<td><code><b>viewProviders:</b> [MyService, { provide: ... }]</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edacqgtsy1o6nh1j4nia6rtal\">作用域为该组件视图的依赖注入提供者的列表。</p>\n</td>\n</tr><tr>\n<td><code><b>template:</b> 'Hello {{name}}'<br><b>templateUrl:</b> 'my-component.html'</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mmwcp2dogmn05yw8sp8ojoj7\">组件视图的内联模板或外部模板 URL。</p>\n</td>\n</tr><tr>\n<td><code><b>styles:</b> ['.primary {color: red}']<br><b>styleUrls:</b> ['my-component.css']</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85rtwah3617bqk9brwxis9ydq\">用于为组件视图设置样式的内联 CSS 样式或外部样式表 URL 列表。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zy1tapigmzr60ihtg0or25ip\">指令和组件的类字段装饰器</th>\n<th><p><code>import { <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, ... } from '@angular/core';</code>\n</p>\n</th>\n</tr>\n<tr>\n<td><code><b>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</b> myProperty;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ozulonk42lmme0dys36h0xt0\">声明一个输入属性，你可以通过属性绑定更新它（示例： \n<code>&lt;my-cmp [myProperty]=\"someExpression\"&gt;</code>）。</p>\n</td>\n</tr><tr>\n<td><code><b>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</b> myEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>();</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ave842j5k6ersxswxz9rqd4mn\">声明一个输出属性，它会触发事件，你可以使用事件绑定订阅这些事件（示例：\n<code>&lt;my-cmp (myEvent)=\"doSomething()\"&gt;</code>）。</p>\n</td>\n</tr><tr>\n<td><code><b>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('class.valid')</b> isValid;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exztr312t4402k861cwfs5ymq\">将宿主元素属性（此处为 CSS 类 \n<code>valid</code>）绑定到指令/组件属性（\n<code>isValid</code>）。</p>\n</td>\n</tr><tr>\n<td><code><b>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('click', ['$event'])</b> onClick(e) {...}</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgsaufp70xg0t7ydwha2n3tof\">使用指令/组件方法（\n<code>onClick</code>）订阅宿主元素事件（\n<code>click</code>），可以选择传递参数（\n<code>$event</code>）。</p>\n</td>\n</tr><tr>\n<td><code><b>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(myPredicate)</b> myChildComponent;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1uoi3pq1hfa2uoioqj6xyvoee\">将组件内容查询（\n<code>myPredicate</code>）的第一个结果绑定到类的属性（\n<code>myChildComponent</code>）。</p>\n</td>\n</tr><tr>\n<td><code><b>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a>(myPredicate)</b> myChildComponents;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"257smj8crgmzl0znw7g5v0wgl\">将组件内容查询（\n<code>myPredicate</code>）的结果绑定到类的属性（\n<code>myChildComponents</code>）。</p>\n</td>\n</tr><tr>\n<td><code><b>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(myPredicate)</b> myChildComponent;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92n9qdkf2tqbsnsvvsjrnvl9x\">将组件视图查询（\n<code>myPredicate</code>）的第一个结果绑定到类的属性（\n<code>myChildComponent</code>）上。指令不可用。</p>\n</td>\n</tr><tr>\n<td><code><b>@<a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a>(myPredicate)</b> myChildComponents;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay7ok7hukr1ickapdbot7ejqk\">将组件视图查询（\n<code>myPredicate</code>）的结果绑定到类的属性（\n<code>myChildComponents</code>）上。指令不可用。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nkhio5vwll7aajxru9947h88\">指令和组件变更检测以及生命周期钩子</th>\n<th><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g5mwm98x8sejq0h6y0iwtdqc\">（以类方法实现）</p>\n</th>\n</tr>\n<tr>\n<td><code><b>constructor(myService: MyService, ...)</b> { ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg2aqwdkxbslxouui7xudzq90\">在任何其他生命周期钩子之前调用。使用它来注入依赖项，但避免在此处进行任何繁重的工作。</p>\n</td>\n</tr><tr>\n<td><code><b>ngOnChanges(changeRecord)</b> { ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ialdd7t9xdzck0okhcq0umip\">在每次输入属性发生更改后，并在处理内容或子视图之前调用。</p>\n</td>\n</tr><tr>\n<td><code><b>ngOnInit()</b> { ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nbfew2b0u9s3vhibuldqo18z\">在构造函数、初始化输入属性以及第一次调用 \n<code>ngOnChanges</code> 之后调用。</p>\n</td>\n</tr><tr>\n<td><code><b>ngDoCheck()</b> { ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3wrvosqynf2ke6vngsxflkog\">每次检查组件或指令的输入属性时调用。使用它通过执行自定义检查来扩展变更检测。</p>\n</td>\n</tr><tr>\n<td><code><b>ngAfterContentInit()</b> { ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg2hhn7ewbosl6j9st7oefxv\">在 \n<code>ngOnInit</code> 之后调用，此时组件或指令的内容已初始化。</p>\n</td>\n</tr><tr>\n<td><code><b>ngAfterContentChecked()</b> { ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eip7wtlphdxg02yi6zb1cjkhq\">在每次检查组件或指令的内容之后调用。</p>\n</td>\n</tr><tr>\n<td><code><b>ngAfterViewInit()</b> { ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dscuupgpmh76ax6sztlhfdvlu\">在 \n<code>ngAfterContentInit</code> 之后调用，此时组件的视图和子视图/指令所在的视图已初始化。</p>\n</td>\n</tr><tr>\n<td><code><b>ngAfterViewChecked()</b> { ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27hmxmg2f2b3mhworaa2ltrdh\">在每次检查组件的视图和子视图/指令所在的视图之后调用。</p>\n</td>\n</tr><tr>\n<td><code><b>ngOnDestroy()</b> { ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqvjt0ospae160oava0hg3goq\">调用一次，在实例销毁之前。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ssn6uzcufropks11kqjq01rz\">依赖注入配置</th>\n<th></th>\n</tr>\n<tr>\n<td><code>{ <b>provide</b>: MyService, <b>useClass</b>: MyMockService }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dpjmnvrck26iz1efj03py8is\">将 \n<code>MyService</code> 的提供者设置为 \n<code>MyMockService</code> 类，或覆盖此提供者。</p>\n</td>\n</tr><tr>\n<td><code>{ <b>provide</b>: MyService, <b>useFactory</b>: myFactory }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wcxyldw0djwa2sks4nnim87d\">将 \n<code>MyService</code> 的提供者设置为 \n<code>myFactory</code> 工厂函数，或覆盖此提供者。</p>\n</td>\n</tr><tr>\n<td><code>{ <b>provide</b>: MyValue, <b>useValue</b>: 41 }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54oq6kydlymurf93507bsm7k3\">将 \n<code>MyValue</code> 的提供者设置为值 \n<code>41</code>，或覆盖此提供者。</p>\n</td>\n</tr>\n</tbody></table>\n<table class=\"is-full-width is-fixed-layout\">\n<tbody><tr>\n<th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezodoh04qben8komampk7fumq\">路由和导航</th>\n<th><p><code>import { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, ... } from '@angular/router';</code>\n</p>\n</th>\n</tr>\n<tr>\n<td><code>const routes: <b><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></b> = [<br>  { path: '', component: HomeComponent },<br>  { path: 'path/:routeParam', component: MyComponent },<br>  { path: 'staticPath', component: ... },<br>  { path: '**', component: ... },<br>  { path: 'oldPath', redirectTo: '/staticPath' },<br>  { path: ..., component: ..., data: { message: 'Custom' } }<br>]);<br><br>const routing = RouterModule.forRoot(routes);</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"de2ckawbhj4yqz14mnf6b1aj1\">配置应用程序的路由。支持静态路由、参数化路由、重定向路由和通配符路由。还支持自定义路由数据和求解。</p>\n</td>\n</tr><tr>\n<td><code><br>&lt;<b><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></b>&gt;&lt;/<b><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></b>&gt;<br>&lt;<b><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></b> name=\"aux\"&gt;&lt;/<b>router-outlet</b>&gt;<br></code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yez9ev7y3zv2s1hv4lvmaoqk\">标记要加载活动路由组件的位置。</p>\n</td>\n</tr><tr>\n<td><code><br>&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/path\"&gt;<br>&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <b>[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]</b>=\"[ '/path', routeParam ]\"&gt;<br>&lt;a <b>[routerLink]</b>=\"[ '/path', { matrixParam: 'value' } ]\"&gt;<br>&lt;a <b>[routerLink]</b>=\"[ '/path' ]\" [queryParams]=\"{ page: 1 }\"&gt;<br>&lt;a <b>[routerLink]</b>=\"[ '/path' ]\" fragment=\"anchor\"&gt;<br></code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el7ezxr4djdy1wtuqk2j7xir7\">根据路由指令创建指向不同视图的链接，该指令包含路由路径、必需参数和可选参数、查询参数以及片段。要导航到根路由，请使用 \n<code>/</code> 前缀；对于子路由，请使用 \n<code>./</code> 前缀；对于兄弟路由或父路由，请使用 \n<code>../</code> 前缀。</p>\n</td>\n</tr><tr>\n<td><code>&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kaylhzx2vxikrwhkplg6n93\">当 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 成为当前活动路由时，提供的类将添加到元素中。</p>\n</td>\n</tr><tr>\n<td><code>class <b><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></b>Guard implements <b><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></b> {<br>    canActivate(<br>      route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,<br>      state: RouterStateSnapshot<br>    ): Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean { ... }<br>}<br><br>{ path: ..., canActivate: [<b>CanActivate</b>Guard] }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ah1vbjo29hyzryuzlp6wy51nl\">用于定义类的接口，路由器应首先调用此类以确定是否应激活此组件。应返回布尔值或求解为布尔值的 Observable/Promise。</p>\n</td>\n</tr><tr>\n<td><code>class <b><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></b>Guard implements <b><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></b>&lt;T&gt; {<br>    canDeactivate(<br>      component: T,<br>      route: ActivatedRouteSnapshot,<br>      state: RouterStateSnapshot<br>    ): Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean { ... }<br>}<br><br>{ path: ..., canDeactivate: [<b>CanDeactivate</b>Guard] }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etjv5mjpqfrrq4b5ovjc0t1y0\">用于定义类的接口，路由器应首先调用此类以确定在导航后是否应停用此组件。应返回布尔值或求解为布尔值的 Observable/Promise。</p>\n</td>\n</tr><tr>\n<td><code>class <b><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></b>Guard implements <b><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></b> {<br>    canActivateChild(<br>      route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,<br>      state: RouterStateSnapshot<br>    ): Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean { ... }<br>}<br><br>{ path: ..., canActivateChild: [CanActivateGuard],<br>    children: ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lfci18xvt2vlikliuw7h1vrz\">用于定义类的接口，路由器应首先调用此类以确定是否应激活子路由。应返回布尔值或求解为布尔值的 Observable/Promise。</p>\n</td>\n</tr><tr>\n<td><code>class <b><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></b>Guard implements <b><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></b>&lt;T&gt; {<br>    resolve(<br>      route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,<br>      state: RouterStateSnapshot<br>    ): Observable&lt;any&gt;|Promise&lt;any&gt;|any { ... }<br>}<br><br>{ path: ..., resolve: [<b>Resolve</b>Guard] }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pfqio238cnh6rjnntemouqki\">用于定义类的接口，路由器应首先调用此类以在渲染路由之前求解路由数据。应返回一个值或求解为值的 Observable/Promise。</p>\n</td>\n</tr><tr>\n<td><code>class <b><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></b>Guard implements <b><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></b> {<br>    canLoad(<br>      route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a><br>    ): Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean { ... }<br>}<br><br>{ path: ..., canLoad: [<b>CanLoad</b>Guard], loadChildren: ... }</code></td>\n<td><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"528p86tzlmo7ffrcjqh9zx9m8\">用于定义类的接口，路由器应首先调用此类以检查是否应加载惰性加载的模块。应返回布尔值或求解为布尔值的 Observable/Promise。</p>\n</td>\n</tr>\n</tbody></table>\n</div>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/Output\n - api/core/Pipe\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/forms/FormsModule\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/Resolve\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterLinkWithHref\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/cheatsheet#cheat-sheet\n-->"
}