{
  "id" : "guide/dynamic-component-loader",
  "title" : "动态组件加载器",
  "contents" : "<div class=\"content\">\n<h1 id=\"dynamic-component-loader\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"en7gme456eiz81ziemhdrs2ad\"><i class=\"material-icons\">link</i>动态组件加载器</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hyi56qojnsy8wvwpjfcftjti\">组件模板并不总是固定的。应用程序可能需要在运行时加载新的组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hhulxiip10y1ar4kuk7z9i12\">本指南展示了如何使用 \n<code><a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a></code> 动态添加组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b87k9ba73tv9rrrdo6t9kl8ja\">查看本指南中代码的 \n<live-example name=\"dynamic-component-loader\"></live-example> 。</p>\n<a id=\"dynamic-loading\"></a>\n<h2 id=\"dynamic-component-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yhvywavza8g6sjtyc2wdp2e5\"><i class=\"material-icons\">link</i>动态组件加载</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5r6nizyabb1j82ftapxgupykr\">以下示例展示了如何构建动态广告横幅。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atdqphrfsryphxm6o5sfo67ou\">英雄管理局正在策划一项广告活动，其中包含多个不同的广告在横幅中循环播放。新的广告组件经常由多个不同的团队添加。这使得使用具有静态组件结构的模板变得不切实际。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"curmhlq1ikzro99959byrf06t\">相反，你需要一种方法来加载新的组件，而无需在广告横幅的模板中固定引用该组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wqgem3klj0b6ozr4ixcr6423\">Angular 自带用于动态加载组件的 API。</p>\n<a id=\"directive\"></a>\n<h2 id=\"the-anchor-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31201sws8fijb189rra7i19np\"><i class=\"material-icons\">link</i>锚点指令</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8liirv9rdecrvlu7tv2cy7elp\">在添加组件之前，你必须定义一个锚点，告诉 Angular 在哪里插入组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1t06akhcmo6tzeuehdkpe917y\">广告横幅使用一个名为 \n<code>AdDirective</code> 的辅助指令来标记模板中有效的插入点。</p>\n<code-example path=\"dynamic-component-loader/src/app/ad.directive.ts\" title=\"src/app/ad.directive.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[ad-host]',\n})\nexport class AdDirective {\n  constructor(public viewContainerRef: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) { }\n}\n\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rnc30nqnrur4u7mvx7cxn5w3\"><code>AdDirective</code> 注入 \n<code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 以访问将承载动态添加组件的元素的视图容器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dn1lix9eb7lkzoznpw9wwo7r3\">在 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器中，注意选择器名称 \n<code>ad-host</code>；这就是你用来将指令应用于元素的名称。下一节将展示如何操作。</p>\n<a id=\"loading-components\"></a>\n<h2 id=\"loading-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwf2acy2cqlh16rujrwtgxoly\"><i class=\"material-icons\">link</i>加载组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zgnft31nx4esg6iptacoasja\">广告横幅的大部分实现都在 \n<code>ad-banner.component.ts</code> 中。为了使本示例保持简单，HTML 作为模板字符串位于 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 \n<code>template</code> 属性中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c90z7lnlw2hk5dj2geyitirqx\"><code>&lt;ng-template&gt;</code> 元素是应用你刚刚创建的指令的地方。要应用 \n<code>AdDirective</code>，请回忆 \n<code>ad.directive.ts</code> 中的选择器 \n<code>ad-host</code>。将其应用于 \n<code>&lt;ng-template&gt;</code>，无需方括号。现在 Angular 知道在哪里动态加载组件。</p>\n<code-example path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"ad-host\" title=\"src/app/ad-banner.component.ts (template)\" linenums=\"false\">\ntemplate: `\n            &lt;div class=\"ad-banner\"&gt;\n              &lt;h3&gt;Advertisements&lt;/h3&gt;\n              &lt;ng-template ad-host&gt;&lt;/ng-template&gt;\n            &lt;/div&gt;\n          `\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqpotya5340qwvsnwmc1a63k7\"><code>&lt;ng-template&gt;</code> 元素非常适合动态组件，因为它不会渲染任何额外的输出。</p>\n<a id=\"resolving-components\"></a>\n<h2 id=\"resolving-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ogzj5nuiji0c8hnq7q24a04y\"><i class=\"material-icons\">link</i>求解组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmcs2e2iq3y4qfysob3yktf3n\">仔细查看 \n<code>ad-banner.component.ts</code> 中的方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"509mu86r7izwq5o56w5y4jjw1\"><code>AdBannerComponent</code> 将 \n<code>AdItem</code> 对象数组作为输入，最终来自 \n<code>AdService</code>。\n<code>AdItem</code> 对象指定要加载的组件类型以及要绑定到组件的任何数据。\n<code>AdService</code> 返回构成广告活动的实际广告。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"851ylcmleoq2oe1k3kc868pix\">将组件数组传递给 \n<code>AdBannerComponent</code> 允许动态列表广告，而无需模板中的静态元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49ny2cxwtdydokxeq1omjk6ke\"><code>AdBannerComponent</code> 使用其 \n<code>getAds()</code> 方法遍历 \n<code>AdItems</code> 数组，并通过调用 \n<code>loadComponent()</code> 每 3 秒加载一个新组件。</p>\n<code-example path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"class\" title=\"src/app/ad-banner.component.ts (excerpt)\" linenums=\"false\">\nexport class AdBannerComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() ads: AdItem[];\n  currentAdIndex: number = -1;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(AdDirective) adHost: AdDirective;\n  interval: any;\n\n  constructor(private componentFactoryResolver: <a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a>) { }\n\n  ngOnInit() {\n    this.loadComponent();\n    this.getAds();\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.interval);\n  }\n\n  loadComponent() {\n    this.currentAdIndex = (this.currentAdIndex + 1) % this.ads.length;\n    let adItem = this.ads[this.currentAdIndex];\n\n    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(adItem.component);\n\n    let viewContainerRef = this.adHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    let componentRef = viewContainerRef.createComponent(componentFactory);\n    (&lt;AdComponent&gt;componentRef.instance).data = adItem.data;\n  }\n\n  getAds() {\n    this.interval = setInterval(() =&gt; {\n      this.loadComponent();\n    }, 3000);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dasf8ug4hqjqq1ljodzm90f6v\"><code>loadComponent()</code> 方法在这里做了很多繁重的工作。让我们一步一步地进行。首先，它选择一个广告。</p>\n<div class=\"l-sub-section\">\n<p><strong data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agw4hp9hubpk6qxetiz5mogak\"><em>loadComponent()</em> 如何选择广告</strong></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pwu8hmwc9232j7v3osv089zs\"><code>loadComponent()</code> 方法使用一些数学方法来选择广告。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"551n0drvviesm2j7d11xfqjaa\">首先，它通过将当前值加 1，然后除以 \n<code>AdItem</code> 数组的长度，并使用\n<em>余数</em>作为新的 \n<code>currentAdIndex</code> 值来设置 \n<code>currentAdIndex</code>。然后，它使用该值从数组中选择一个 \n<code>adItem</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lnij1zkkbdego2ir2mtnb67f\">在 \n<code>loadComponent()</code> 选择广告后，它使用 \n<code><a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a></code> 为每个特定组件求解一个 \n<code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code>。然后，\n<code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> 创建每个组件的实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhjvpmlqm7ndi665oqxnxsyd6\">接下来，你正在定位存在于此特定组件实例上的 \n<code>viewContainerRef</code>。你如何知道它是这个特定实例？因为它是指 \n<code>adHost</code>，而 \n<code>adHost</code> 是你之前设置的指令，用于告诉 Angular 在哪里插入动态组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d39q0h9hncmx4w3xae95giwlu\">如你所知，\n<code>AdDirective</code> 在其构造函数中注入 \n<code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>。这就是指令访问你想要用来承载动态组件的元素的方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53mp5utemqq6ykd58806k0p71\">要将组件添加到模板，请在 \n<code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 上调用 \n<code>createComponent()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyyk1lo1ln6vhepqd63o5ko9\"><code>createComponent()</code> 方法返回对已加载组件的引用。使用该引用通过为其属性赋值或调用其方法来与组件交互。</p>\n<a id=\"selector-references\"></a>\n<h4 id=\"selector-references\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4amh6s1p9rpmjnzc20wmqmpi4\"><i class=\"material-icons\">link</i>选择器引用</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40qf4f52mkll02scwz2gmifmn\">通常，Angular 编译器会为模板中引用的任何组件生成一个 \n<code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code>。但是，动态加载组件的模板中没有选择器引用，因为它们是在运行时加载的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7w1pt72dv6ax8omy0g80azt6h\">为了确保编译器仍然生成工厂，请将动态加载的组件添加到 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 \n<code>entryComponents</code> 数组中：</p>\n<code-example path=\"dynamic-component-loader/src/app/app.module.ts\" region=\"entry-components\" title=\"src/app/app.module.ts (entry components)\" linenums=\"false\">\nentryComponents: [ HeroJobAdComponent, HeroProfileComponent ],\n\n</code-example>\n<a id=\"common-interface\"></a>\n<h2 id=\"the-adcomponent-interface\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq396d926kq1qw27k20ro9zic\"><i class=\"material-icons\">link</i><em>AdComponent</em> 接口</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asc1mnoe8w8i3tdhj6jelejsr\">在广告横幅中，所有组件都实现一个通用的 \n<code>AdComponent</code> 接口，以标准化将数据传递给组件的 API。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qt6q78cvu4kiyivyf8828x48\">以下列出了两个示例组件和 \n<code>AdComponent</code> 接口，供参考：</p>\n<code-tabs>\n\n  <code-pane title=\"hero-job-ad.component.ts\" path=\"dynamic-component-loader/src/app/hero-job-ad.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\nimport { AdComponent }      from './ad.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;div class=\"job-ad\"&gt;\n      &lt;h4&gt;{{data.headline}}&lt;/h4&gt; \n      \n      {{data.body}}\n    &lt;/div&gt;\n  `\n})\nexport class HeroJobAdComponent implements AdComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() data: any;\n\n}\n\n\n\n</code-pane>\n\n  <code-pane title=\"hero-profile.component.ts\" path=\"dynamic-component-loader/src/app/hero-profile.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> }  from '@angular/core';\n\nimport { AdComponent }       from './ad.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;div class=\"hero-profile\"&gt;\n      &lt;h3&gt;Featured Hero Profile&lt;/h3&gt;\n      &lt;h4&gt;{{data.name}}&lt;/h4&gt;\n      \n      &lt;p&gt;{{data.bio}}&lt;/p&gt;\n\n      &lt;strong&gt;Hire this hero today!&lt;/strong&gt;\n    &lt;/div&gt;\n  `\n})\nexport class HeroProfileComponent implements AdComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() data: any;\n}\n\n\n\n\n</code-pane>\n\n  <code-pane title=\"ad.component.ts\" path=\"dynamic-component-loader/src/app/ad.component.ts\">\nexport interface AdComponent {\n  data: any;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<a id=\"final-ad-baner\"></a>\n<h2 id=\"final-ad-banner\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31k4mr6yk7fhuwt27asegoa0h\"><i class=\"material-icons\">link</i>最终的广告横幅</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"be8cfq8v4qbziljnxrhsks4xe\">最终的广告横幅如下所示：</p>\n<figure>\n  <img src=\"generated/images/guide/dynamic-component-loader/ads.gif\" alt=\"Ads\" width=\"480\" height=\"222\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2apv62xn281dx0iihkrpnii1y\">查看 \n<live-example name=\"dynamic-component-loader\"></live-example>。</p>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/Directive\n - api/core/Input\n - api/core/NgModule\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/ViewChild\n - api/core/ViewContainerRef\n - guide/dynamic-component-loader#dynamic-component-loader\n - guide/dynamic-component-loader#dynamic-component-loading\n - guide/dynamic-component-loader#final-ad-banner\n - guide/dynamic-component-loader#loading-components\n - guide/dynamic-component-loader#resolving-components\n - guide/dynamic-component-loader#selector-references\n - guide/dynamic-component-loader#the-adcomponent-interface\n - guide/dynamic-component-loader#the-anchor-directive\n-->"
}