{
  "id" : "guide/upgrade",
  "title" : "从 AngularJS 升级",
  "contents" : "<div class=\"content\">\n<h1 id=\"upgrading-from-angularjs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ek19fqa4pe6zalfy92p01znx\"><i class=\"material-icons\">link</i>从 AngularJS 升级</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tbwrd56k6qtbqvd78cxgqfzm\"><em>Angular</em> 是指当今和未来的 Angular。 \n<em>AngularJS</em> 是指 Angular 的所有 v1.x 版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3v88wdbyf5b0ooi8bwlmfsnt6\">AngularJS 应用很棒。在迁移到 Angular 之前，始终要考虑业务案例。该案例的重要部分是迁移所需的时间和精力。本指南介绍了用于高效地将 AngularJS 项目逐步迁移到 Angular 平台的内置工具。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8me9cv32jdjybu5jwythgtyi5\">一些应用比其他应用更容易升级，并且有很多方法可以使升级过程变得更容易。你可以在开始升级过程之前，甚至可以准备和调整 AngularJS 应用以适应 Angular。这些准备步骤都是为了使代码更加解耦、更易于维护，并更好地与现代开发工具相适应。这意味着除了使升级更容易之外，你还可以改进现有的 AngularJS 应用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5a0cusb8oi72o2r4ggt2rla19\">成功升级的关键之一是增量升级，即在同一个应用中并行运行两个框架，并将 AngularJS 组件逐个移植到 Angular。这使得即使是大型复杂应用也可以在不影响其他业务的情况下进行升级，因为工作可以协作完成，并分散在一段时间内完成。Angular 中的 \n<code>upgrade</code> 模块旨在使增量升级变得无缝。</p>\n<h2 id=\"preparation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"950c8mg85fl94yevwp15mppan\"><i class=\"material-icons\">link</i>准备工作</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"otvs8f6yi23ljqt1ju4l5xmx\">有很多方法可以构建 AngularJS 应用。当你开始将这些应用升级到 Angular 时，你会发现有些应用比其他应用更容易处理。有一些关键技术和模式，你可以在开始迁移之前应用到未来的应用中。</p>\n<a id=\"follow-the-angular-styleguide\"></a>\n<h3 id=\"follow-the-angularjs-style-guide\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j0smlzff8ppa7ke0e4jeidzb\"><i class=\"material-icons\">link</i>遵循 AngularJS 风格指南</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ocmqv743fx06bxudca9pk7kb\">The \n<a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md\">AngularJS Style Guide</a> 收集了已被证明可以产生更简洁、更易于维护的 AngularJS 应用的模式和实践。它包含大量关于如何编写和组织 AngularJS 代码的信息——同样重要的是——如何\n<strong>不</strong>编写和组织 AngularJS 代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pba6b8jzyt2bidjpomu3h933\">Angular 是对 AngularJS 最佳部分的重新构想。从这个意义上说，它的目标与 AngularJS 风格指南的目标相同：保留 AngularJS 的优点，并避免其缺点。当然，Angular 不仅仅是这些，但这确实意味着\n<em>遵循风格指南有助于使你的 AngularJS 应用更接近 Angular</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ade7hclsg6fk6xoxp36e7d1i\">有一些特定的规则，将使使用 Angular \n<code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code> 模块进行\n<em>增量升级</em>变得更加容易：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35fi10wrc46x9umqmgmqu965q\">The \n<a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility\">Rule of 1</a> 指出每个文件应该只有一个组件。这不仅使组件易于导航和查找，而且还允许我们一次迁移一个组件，在语言和框架之间迁移。在这个示例应用中，每个控制器、组件、服务和过滤器都在其自己的源文件中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpxl8uirrg3xsf12f11sj6sqz\">The \n<a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure\">Folders-by-Feature Structure</a> 和 \n<a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity\">Modularity</a> 规则在更高的抽象级别定义了类似的原则：应用的不同部分应该位于不同的目录和 NgModules 中。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejinmbe4jerdon2uzyjfeend6\">当应用以这种方式按功能进行布局时，它也可以一次迁移一个功能。对于还没有这样布局的应用，应用 AngularJS 风格指南中的规则是一个强烈推荐的准备步骤。这不仅仅是为了升级——它本身就是很好的建议！</p>\n<h3 id=\"using-a-module-loader\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arz77jaegwgdnm373zx7j4yc4\"><i class=\"material-icons\">link</i>使用模块加载器</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73c7cs1m50sxuaircovaq4dwm\">当你将应用代码分解成每个文件一个组件时，你通常会得到一个项目结构，其中包含大量相对较小的文件。这比少量大型文件更整洁，但如果你必须使用 &lt;script&gt; 标签将所有这些文件加载到 HTML 页面中，它就不太好用了。尤其是在你还要维护这些标签的正确顺序时。这就是为什么使用\n<em>模块加载器</em>是一个好主意。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xrksmp5h1qplscjbffceiz0f\">使用模块加载器，例如 \n<a href=\"https://github.com/systemjs/systemjs\">SystemJS</a>、\n<a href=\"http://webpack.github.io/\">Webpack</a> 或 \n<a href=\"http://browserify.org/\">Browserify</a>，允许我们使用 TypeScript 或 ES2015 的内置模块系统。你可以使用 \n<code>import</code> 和 \n<code>export</code> 功能，这些功能明确指定了哪些代码可以在应用的不同部分之间共享。对于 ES5 应用，你可以使用 CommonJS 风格的 \n<code>require</code> 和 \n<code>module.exports</code> 功能。在这两种情况下，模块加载器都会负责按正确顺序加载应用所需的所有代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4umilptx6zpir87farczpba0i\">在将应用迁移到生产环境时，模块加载器还可以更轻松地将它们打包成包含所有必要功能的生产捆绑包。</p>\n<h3 id=\"migrating-to-typescript\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0iypptthzl3e3ryq30m2n2zd\"><i class=\"material-icons\">link</i>迁移到 TypeScript</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42bp516izcgfz3kvraycrpgek\">如果 Angular 升级计划的一部分是使用 TypeScript，那么在升级本身开始之前引入 TypeScript 编译器是有意义的。这意味着在实际升级过程中，你只需要学习和考虑一项新技术。这也意味着你可以在 AngularJS 代码中开始使用 TypeScript 功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xlr4wlwbma98k878g5wgfa9h\">由于 TypeScript 是 ECMAScript 2015 的超集，而 ECMAScript 2015 又是 ECMAScript 5 的超集，因此“切换”到 TypeScript 不一定需要做任何事情，只需要安装 TypeScript 编译器并将文件从 \n<code>*.js</code> 重命名为 \n<code>*.ts</code> 即可。但仅仅这样做并没有什么用处或令人兴奋。以下额外的步骤可以让我们获得更大的回报：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zf587fddbszolthgccmbg9qq\">对于使用模块加载器的应用，TypeScript 导入和导出（实际上是 ECMAScript 2015 导入和导出）可以用来将代码组织成模块。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1878lggfsidmznyi87hkavs2m\">可以逐步将类型注解添加到现有的函数和变量中，以确定它们的类型，并获得构建时错误检查、强大的自动完成支持和内联文档等好处。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blax0iy1moajcjoyhf6ogxsj7\">ES2015 中新增的 JavaScript 功能，如箭头函数、\n<code>let</code> 和 \n<code>const</code>、默认函数参数和解构赋值，也可以逐步添加，以使代码更具表现力。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bw7rpafstsyzzw3q4b6jhpjss\">服务和控制器可以转换为\n<em>类</em>。这样，它们将更接近于成为 Angular 服务和组件类，这将使升级后的生活更轻松。</p>\n</li>\n</ul>\n<h3 id=\"using-component-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"952aex07wlxrcbd07fkif89vr\"><i class=\"material-icons\">link</i>使用组件指令</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22fov9tvv3crm39quqj0nr3qg\">在 Angular 中，组件是构建用户界面的主要基本元素。你将 UI 的不同部分定义为组件，并将它们组合成完整的用户体验。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vd23gduigywlobder4vve4yg\">你也可以在 AngularJS 中使用\n<em>组件指令</em>来实现这一点。这些指令定义了自己的模板、控制器和输入/输出绑定——与 Angular 组件定义的相同内容。使用组件指令构建的应用比使用更低级功能（如 \n<code>ng-controller</code>、\n<code>ng-include</code> 和作用域继承）构建的应用更容易迁移到 Angular。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64483cy4hrnw4dnl0v02dfu4i\">为了与 Angular 兼容，AngularJS 组件指令应该配置以下属性：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1smire1wjvub8yr8dxussw3ro\"><code>restrict: 'E'</code>。组件通常用作元素。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ei20d77k6ghy62dvaeiaqp362\"><code>scope: {}</code> - 一个隔离作用域。在 Angular 中，组件始终与其周围环境隔离，你应该在 AngularJS 中也这样做。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b978j5crvk0uc9vkwq7rzea1s\"><code>bindToController: {}</code>。组件输入和输出应该绑定到控制器，而不是使用 \n<code>$scope</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jpr2qab5egbc10e49dpdykhc\"><code>controller</code> 和 \n<code>controllerAs</code>。组件有自己的控制器。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54iobk9rf9xf8fsjljirinm8z\"><code>template</code> 或 \n<code>templateUrl</code>。组件有自己的模板。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ec4uhrdtptyvl4jte52hdkc6\">组件指令也可以使用以下属性：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5z8phryccp6j1emvptoxbk0vy\"><code>transclude: true/{}</code>，如果组件需要从其他地方转入内容。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34dvk2eqzwltjpmt0qa4ku1mz\"><code>require</code>，如果组件需要与某个父组件的控制器通信。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90uiq99nyd9n40veyqd1eyqiw\">组件指令\n<strong>不应该</strong>使用以下属性：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7u1pph39g4davb9lf5x59gyiy\"><code>compile</code>。此属性在 Angular 中将不再支持。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vqksmcxiv25epsisnh2sg37e\"><code>replace: true</code>。Angular 永远不会用组件模板替换组件元素。此属性在 AngularJS 中也被弃用。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vvssa59wfdyi4sckul9wj1pf\"><code>priority</code> 和 \n<code>terminal</code>。虽然 AngularJS 组件可以使用这些属性，但它们在 Angular 中未使用，最好不要编写依赖它们的代码。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8s69609kfhsmjiba1tqeikbl\">一个完全符合 Angular 架构的 AngularJS 组件指令可能看起来像这样：</p>\n<code-example path=\"upgrade-module/src/app/hero-detail.directive.ts\" title=\"hero-detail.directive.ts\">\nexport function heroDetailDirective() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      hero: '=',\n      deleted: '&amp;'\n    },\n    template: `\n      &lt;h2&gt;{{$ctrl.hero.name}} details!&lt;/h2&gt;\n      &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{$ctrl.hero.id}}&lt;/div&gt;\n      &lt;button ng-click=\"$ctrl.onDelete()\"&gt;Delete&lt;/button&gt;\n    `,\n    controller: function() {\n      this.onDelete = () =&gt; {\n        this.deleted({hero: this.hero});\n      };\n    },\n    controllerAs: '$ctrl'\n  };\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7zoip110o05crsh5iev1423zd\">AngularJS 1.5 引入了 \n<a href=\"https://docs.angularjs.org/api/ng/type/angular.Module#component\">组件 API</a>，它使定义像这样的组件指令变得更容易。出于以下几个原因，最好将此 API 用于组件指令：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3jx0fra03f6n14jhhrad48sd\">它需要更少的样板代码。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ljvtu14h3cz8ypehnol3eodi\">它强制使用组件最佳实践，例如 \n<code>controllerAs</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hjplya532d49sgn2tx232jgx\">它为指令属性（如 \n<code>scope</code> 和 \n<code>restrict</code>）提供了良好的默认值。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9drk9x1wil7ewm5am844cjoi3\">上面的组件指令示例使用组件 API 表达时看起来像这样：</p>\n<code-example path=\"upgrade-module/src/app/upgrade-io/hero-detail.component.ts\" region=\"hero-detail-io\" title=\"hero-detail.component.ts\">\nexport const heroDetail = {\n  bindings: {\n    hero: '&lt;',\n    deleted: '&amp;'\n  },\n  template: `\n    &lt;h2&gt;{{$ctrl.hero.name}} details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{$ctrl.hero.id}}&lt;/div&gt;\n    &lt;button ng-click=\"$ctrl.onDelete()\"&gt;Delete&lt;/button&gt;\n  `,\n  controller: function() {\n    this.onDelete = () =&gt; {\n      this.deleted(this.hero);\n    };\n  }\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cd3en5x1grhxy96z8lhs5ftld\">控制器生命周期钩子方法 \n<code>$onInit()</code>、\n<code>$onDestroy()</code> 和 \n<code>$onChanges()</code> 是 AngularJS 1.5 引入的另一个方便的特性。它们在 Angular 中几乎都有完全相同的 \n<a href=\"guide/lifecycle-hooks\">等效项</a>，因此围绕它们组织组件生命周期逻辑将简化最终的 Angular 升级过程。</p>\n<h2 id=\"upgrading-with-ngupgrade\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3rnnpbxs5nro7j80tpc08zwo\"><i class=\"material-icons\">link</i>使用 ngUpgrade 升级</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9iywqbtyvbo4qb0nuh4u8hbtj\">Angular 中的 ngUpgrade 库是升级除最小的应用程序之外的任何内容的非常有用的工具。使用它，你可以在同一个应用程序中混合匹配 AngularJS 和 Angular 组件，并使它们无缝地交互。这意味着你无需一次性完成所有升级工作，因为在过渡期间，这两个框架之间存在自然的共存关系。</p>\n<h3 id=\"how-ngupgrade-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91jy19qrli16w6hv9a4n94jh4\"><i class=\"material-icons\">link</i>ngUpgrade 的工作原理</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2q653z5wszo2l7ampv64am8gi\">ngUpgrade 提供的主要工具称为 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>。这是一个包含用于引导和管理支持 Angular 和 AngularJS 代码的混合应用程序的实用程序的模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tmgu342ssnjnn3hqs93ys1i5\">当你使用 ngUpgrade 时，你实际上是在\n<em>同时运行 AngularJS 和 Angular</em>。所有 Angular 代码都在 Angular 框架中运行，而 AngularJS 代码则在 AngularJS 框架中运行。这两个都是框架的实际完整功能版本。没有进行模拟，因此你可以预期拥有两个框架的所有功能和自然行为。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"en5g7km1skqqr4aoftchzv0ac\">在此之上发生的事情是，由一个框架管理的组件和服务可以与来自另一个框架的组件和服务交互。这发生在三个主要领域：依赖注入、DOM 和变更检测。</p>\n<h4 id=\"dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o5rlb7acys3t8dxjenlygz93\"><i class=\"material-icons\">link</i>依赖注入</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ol72zrdxtvzlhs552282pj5g\">依赖注入是 AngularJS 和 Angular 的核心，但这两个框架在其实际工作方式上存在一些关键差异。</p>\n<table>\n  <tbody><tr>\n    <th>\n      AngularJS\n    </th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b15dx02gvm25ufx1yzzqi9xxk\">Angular</th>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7woh9f5wx3on2ys06hw1hnqj2\">依赖注入令牌始终是字符串</td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kci0r52fs2s987yssly0q4nq\">令牌 \n<a href=\"guide/dependency-injection\">可以具有不同的类型</a>。它们通常是类。它们也可能是字符串。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajgmi3pxdszplttubjrhe8bif\">只有一个注入器。即使在多模块应用程序中，所有内容都注入到一个大的命名空间中。</p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dy0v7ig52zp8u158zisg5cxhn\">有一个 \n<a href=\"guide/hierarchical-dependency-injection\">注入器树层次结构</a>，它包含一个根注入器和每个组件的附加注入器。</p>\n    </td>\n  </tr>\n</tbody></table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0aki9icn6lbva6rc9ikqkhg7\">即使考虑到这些差异，你仍然可以实现依赖注入交互。\n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 会解决这些差异，并使一切无缝地工作：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kz5f0osifkawotywoqvmbmas\">你可以通过\n<em>升级</em> AngularJS 服务，使其可供 Angular 代码注入。每个服务的同一个单例实例在框架之间共享。在 Angular 中，这些服务始终位于\n<em>根注入器</em>中，并且对所有组件可用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5abqshuaw8agomt5jag1e2snh\">你也可以通过\n<em>降级</em> Angular 服务，使其可供 AngularJS 代码注入。只有来自 Angular 根注入器的服务才能降级。同样，同一个单例实例在框架之间共享。当你注册一个降级服务时，你必须显式指定要在 AngularJS 中使用的\n<em>字符串令牌</em>。</p>\n</li>\n</ul>\n<figure>\n  <img src=\"generated/images/guide/upgrade/injectors.png\" alt=\"The two injectors in a hybrid application\" width=\"700\" height=\"262\">\n</figure>\n<h4 id=\"components-and-the-dom\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56tjnf5bhjmtwum0uzmw6r4dd\"><i class=\"material-icons\">link</i>组件和 DOM</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o1aw3z9howudt2wazb03iw9t\">在混合 ngUpgrade 应用程序的 DOM 中，有来自 AngularJS 和 Angular 的组件和指令。这些组件通过使用各自框架的输入和输出绑定来相互通信，ngUpgrade 将它们桥接在一起。它们也可以通过共享的注入依赖项进行通信，如上所述。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xlgwx7gm4zsbwtqjcva0ritj\">关于混合应用程序，需要理解的关键一点是，DOM 中的每个元素都由两个框架中的一个框架拥有。另一个框架会忽略它。如果一个元素由 AngularJS 拥有，Angular 会将其视为不存在，反之亦然。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq9sf760i5itbjvgpshab1rn0\">因此，混合应用程序通常以 AngularJS 应用程序的形式开始，并且是 AngularJS 处理根模板（例如 index.html）。当 AngularJS 模板中使用 Angular 组件时，Angular 就会介入。然后，该组件的模板将由 Angular 管理，并且它可能包含任意数量的 Angular 组件和指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h7jm6zftx6anruxe7x02dl19\">除此之外，你还可以交织使用这两个框架。你总是通过以下两种方式之一跨越两个框架之间的边界：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8aenavctwf3oz8fmq9607qn6o\">使用来自另一个框架的组件：使用 Angular 组件的 AngularJS 模板，或使用 AngularJS 组件的 Angular 模板。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cepvw6r5whc4q32gix09pe83v\">通过从另一个框架转入或投影内容。ngUpgrade 将 AngularJS 转入和 Angular 内容投影的相关概念桥接在一起。</p>\n</li>\n</ol>\n<figure>\n  <img src=\"generated/images/guide/upgrade/dom.png\" alt=\"DOM element ownership in a hybrid application\" width=\"500\" height=\"294\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bify1ju287lpg5zxrv3942t4e\">每当你使用属于另一个框架的组件时，就会发生框架边界之间的切换。但是，该切换只发生在该组件模板中的元素上。考虑这样一种情况，你从 AngularJS 中使用 Angular 组件：</p>\n<code-example language=\"html\" escape=\"html\">\n  &lt;a-component&gt;&lt;/a-component&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bs9miiaro52lgrbo6sh04k6f\">DOM 元素 \n<code>&lt;a-component&gt;</code> 将仍然是 AngularJS 管理的元素，因为它是在 AngularJS 模板中定义的。这也意味着你可以向它应用额外的 AngularJS 指令，但\n<em>不能</em>应用 Angular 指令。只有在 \n<code>&lt;a-component&gt;</code> 的模板中，Angular 才会介入。当从 Angular 中使用 AngularJS 组件指令时，也适用相同的规则。</p>\n<h4 id=\"change-detection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7azixb8qk7ftis9xv31c3m4b7\"><i class=\"material-icons\">link</i>变更检测</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5shh1342rbrpxfx4eqjmc0ru\"><code>scope.$apply()</code> 是 AngularJS 检测变更并更新数据绑定的方式。在发生的每个事件之后，都会调用 \n<code>scope.$apply()</code>。这可以通过框架自动完成，也可以由你手动完成。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57jxalzx2yb9vhaqsdd3ruwfq\">在 Angular 中，情况有所不同。虽然变更检测仍然在每个事件之后发生，但没有人需要调用 \n<code>scope.$apply()</code> 来使之发生。这是因为所有 Angular 代码都在称为 \n<a href=\"api/core/NgZone\">Angular 区域</a> 的东西中运行。Angular 始终知道代码何时完成，因此它也知道何时应该启动变更检测。代码本身不需要调用 \n<code>scope.$apply()</code> 或类似的任何东西。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exvkcrpm12i9wyhjbmqlzp7dg\">在混合应用程序的情况下，\n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 会桥接 AngularJS 和 Angular 的方法。以下是发生的情况：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2g3304mfm56v9ubq0exkjy9h\">应用程序中发生的所有事情都在 Angular 区域内运行。无论事件起源于 AngularJS 代码还是 Angular 代码，都是如此。区域在每个事件之后触发 Angular 变更检测。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8416gii79arop7ojr98g58q\"><code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 会在 Angular 区域的每次轮换之后调用 AngularJS \n<code>$rootScope.$apply()</code>。这也将在每个事件之后触发 AngularJS 变更检测。</p>\n</li>\n</ul>\n<figure>\n  <img src=\"generated/images/guide/upgrade/change_detection.png\" alt=\"Change detection in a hybrid application\" width=\"600\" height=\"163\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blfgktunt5qrlci49wseka4qd\">在实践中，你不需要调用 \n<code>$apply()</code>，无论它是在 AngularJS 还是 Angular 中。\n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 会为我们完成。你\n<em>仍然可以</em>调用 \n<code>$apply()</code>，因此无需从现有代码中删除此类调用。这些调用只是在混合应用程序中触发额外的 AngularJS 变更检测检查。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0wtq2mnlq06r7382jubdj8wf\">当你降级 Angular 组件，然后从 AngularJS 中使用它时，组件的输入将使用 AngularJS 变更检测进行监视。当这些输入发生变化时，组件中的相应属性会被设置。你也可以通过在组件中实现 \n<a href=\"api/core/OnChanges\">OnChanges</a> 接口来挂钩这些变化，就像你没有降级它一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aft12k0qrrry11ao1tvx1uta8\">相应地，当你升级 AngularJS 组件并从 Angular 中使用它时，为组件指令的 \n<code>scope</code>（或 \n<code>bindToController</code>）定义的所有绑定都将挂钩到 Angular 变更检测。它们将被视为常规的 Angular 输入。当它们发生变化时，它们的值将被写入升级后的组件的范围（或控制器）。</p>\n<h3 id=\"using-upgrademodule-with-angular-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhvfaj6xib0jrbzvln7fh905\"><i class=\"material-icons\">link</i>将 UpgradeModule 与 Angular \n<em>NgModules</em> 一起使用</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eye8hdgsez8yrqcij814pciey\">AngularJS 和 Angular 都有自己的模块概念，以帮助将应用程序组织成功能一致的块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4neyxcfbsmf4dkyx7wco7bxhj\">它们的细节在架构和实现上大不相同。在 AngularJS 中，你将 Angular 资产添加到 \n<code>angular.module</code> 属性中。在 Angular 中，你创建一个或多个用 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器修饰的类，该装饰器在元数据中描述 Angular 资产。从那里开始，差异就会显现出来。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gmg7s3wqb55jw1lmtho81xwv\">在混合应用中，你同时运行 Angular 的两个版本。这意味着你至少需要一个来自 AngularJS 和 Angular 的模块。你将在 NgModule 中导入 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>，然后用它来引导 AngularJS 模块。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"741zrgwtmp8ak0805y0sdmohb\">更多信息，请参见 \n<a href=\"guide/ngmodules\">NgModules</a>。</p>\n</div>\n<h3 id=\"bootstrapping-hybrid-applications\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djsm82itiq3miyg0ul88fn66c\"><i class=\"material-icons\">link</i>引导混合应用</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ld439k3sedwi448gwgtryow3\">要引导混合应用，你必须引导应用的 Angular 和 AngularJS 部分。你必须先引导 Angular 部分，然后让 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 来引导 AngularJS 部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3cbclrdnxkorsq0jswpcd6dn\">在 AngularJS 应用中，你有一个根 AngularJS 模块，它也将用于引导 AngularJS 应用。</p>\n<code-example path=\"upgrade-module/src/app/ajs-bootstrap/app.module.ts\" region=\"ng1module\" title=\"app.module.ts\">\nangular.module('heroApp', [])\n  .controller('MainCtrl', function() {\n    this.message = 'Hello world';\n  });\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e30stsknbttrgp5ltrgl50f1i\">纯 AngularJS 应用可以通过在 HTML 页面上的某个地方使用 \n<code>ng-app</code> 指令来自动引导。但对于混合应用，你必须通过 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 手动引导。因此，在将 AngularJS 应用切换到混合模式之前，将它们切换到使用手动 JavaScript \n<a href=\"https://docs.angularjs.org/api/ng/function/angular.bootstrap\"><code>angular.bootstrap</code></a> 方法是一个很好的初步步骤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8t331f8y8m63wzi1qogqedbp9\">假设你有一个像这样的 \n<code>ng-app</code> 驱动的引导：</p>\n<code-example path=\"upgrade-module/src/index-ng-app.html\">\n&lt;!DOCTYPE HTML&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;base href=\"/\"&gt;\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.3/angular.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"app/ajs-ng-app/app.module.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body ng-app=\"heroApp\" ng-strict-di&gt;\n    &lt;div id=\"message\" ng-controller=\"MainCtrl as mainCtrl\"&gt;\n      {{ mainCtrl.message }}\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7poftsxf0qaqry20xz7n2xf64\">你可以从 HTML 中删除 \n<code>ng-app</code> 和 \n<code>ng-strict-di</code> 指令，改为从 JavaScript 中调用 \n<code>angular.bootstrap</code>，这将产生相同的结果：</p>\n<code-example path=\"upgrade-module/src/app/ajs-bootstrap/app.module.ts\" region=\"bootstrap\" title=\"app.module.ts\">\nangular.bootstrap(document.body, ['heroApp'], { strictDi: true });\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy920ajzgkup72blv5telac09\">要开始将你的 AngularJS 应用转换为混合应用，你需要加载 Angular 框架。你可以通过遵循 \n<a href=\"guide/setup\">设置</a> 中的说明，从 \n<a href=\"https://github.com/angular/quickstart\">QuickStart github 仓库</a> 中选择性地复制代码，来了解如何使用 SystemJS 完成此操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2njsj9030lq1iy6nnmizwrzcb\">你还需要通过 \n<code>npm install @angular/upgrade --save</code> 安装 \n<code>@angular/upgrade</code> 包，并为 \n<code>@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a></code> 包添加映射：</p>\n<code-example path=\"upgrade-module/src/systemjs.config.1.js\" region=\"upgrade-static-umd\" title=\"systemjs.config.js (map)\">\n'@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>': 'npm:@angular/upgrade/bundles/upgrade-static.umd.js',\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4gfxp1ko4gjmtrt731xo4jbr\">接下来，创建一个 \n<code>app.module.ts</code> 文件，并添加以下 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类：</p>\n<code-example path=\"upgrade-module/src/app/ajs-a-hybrid-bootstrap/app.module.ts\" region=\"ngmodule\" title=\"app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>\n  ]\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.body, ['heroApp'], { strictDi: true });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96ooqlcusixoj2pw6rdt2jqff\">这个最基本的 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 导入 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>，这是每个基于浏览器的 Angular 应用都必须有的模块。它还从 \n<code>@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a></code> 中导入 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>，它导出将用于升级和降级服务和组件的提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bfdj6aie67r5p4oi9hdfbg9y\">在 \n<code>AppModule</code> 的构造函数中，使用依赖注入获取 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 实例，并在 \n<code>AppModule.ngDoBootstrap</code> 方法中使用它来引导 AngularJS 应用。\n<code>upgrade.bootstrap</code> 方法接受与 \n<a href=\"https://docs.angularjs.org/api/ng/function/angular.bootstrap\">angular.bootstrap</a> 完全相同的参数：</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pb2hfi2s4dfkor62rzybpf72\">请注意，你没有在 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器中添加 \n<code>bootstrap</code> 声明，因为 AngularJS 将拥有应用的根模板。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26jhas7ni7kjqrossfoixdlmz\">现在，你可以使用 \n<code>platformBrowserDynamic.bootstrapModule</code> 方法来引导 \n<code>AppModule</code>。</p>\n<code-example path=\"upgrade-module/src/app/ajs-a-hybrid-bootstrap/app.module.ts\" region=\"bootstrap\" title=\"app.module.ts'\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e39e8hmsm19f5roumt47m6o7\">恭喜！你正在运行一个混合应用！现有的 AngularJS 代码按原样工作，\n<em>并且</em>你已准备好开始添加 Angular 代码。</p>\n<h3 id=\"using-angular-components-from-angularjs-code\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"885qrpd2cvz2vs2ikgn29p5vf\"><i class=\"material-icons\">link</i>从 AngularJS 代码中使用 Angular 组件</h3>\n<img src=\"generated/images/guide/upgrade/ajs-to-a.png\" alt=\"Using an Angular component from AngularJS code\" class=\"left\" width=\"250\" height=\"44\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0tnmai4uvd74w07m4e5foxnh\">一旦你运行了一个混合应用，你就可以开始逐步升级代码。一种更常见的模式是，在 AngularJS 上下文中使用 Angular 组件。这可能是一个全新的组件，也可能是一个以前是 AngularJS 但已被重写为 Angular 的组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecd8u2vusiun8ivw4h9cw5dlh\">假设你有一个简单的 Angular 组件，它显示有关英雄的信息：</p>\n<code-example path=\"upgrade-module/src/app/downgrade-static/hero-detail.component.ts\" title=\"hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero-detail',\n  template: `\n    &lt;h2&gt;Windstorm details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;1&lt;/div&gt;\n  `\n})\nexport class HeroDetailComponent { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jb4n5x6zh68cwemu56a2c6zm\">如果你想从 AngularJS 中使用此组件，你需要使用 \n<code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>()</code> 方法将其\n<em>降级</em>。结果是一个 AngularJS \n<em>指令</em>，你可以将其注册到 AngularJS 模块中：</p>\n<code-example path=\"upgrade-module/src/app/downgrade-static/app.module.ts\" region=\"downgradecomponent\" title=\"app.module.ts\">\nimport { HeroDetailComponent } from './hero-detail.component';\n\n/* . . . */\n\nimport { <a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\nangular.module('heroApp', [])\n  .directive(\n    'heroDetail',\n    <a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>({ component: HeroDetailComponent }) as angular.IDirectiveFactory\n  );\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvsmblulmuqzr75d7m4dpafc5\">因为 \n<code>HeroDetailComponent</code> 是一个 Angular 组件，所以你必须将其添加到 \n<code>AppModule</code> 中的 \n<code>declarations</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41aad86a4vn5m6yw1bj3x7l5x\">并且因为此组件是从 AngularJS 模块中使用的，并且是进入 Angular 应用的入口点，所以你必须将其添加到 NgModule 的 \n<code>entryComponents</code> 中。</p>\n<code-example path=\"upgrade-module/src/app/downgrade-static/app.module.ts\" region=\"ngmodule\" title=\"app.module.ts\">\nimport { HeroDetailComponent } from './hero-detail.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>\n  ],\n  declarations: [\n    HeroDetailComponent\n  ],\n  entryComponents: [\n    HeroDetailComponent\n  ]\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.body, ['heroApp'], { strictDi: true });\n  }\n}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emeky4wlgzd0dnicst52xjokn\">所有 Angular 组件、指令和管道都必须在 NgModule 中声明。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkpppuysqin3go5o5l19odiwy\">最终结果是一个名为 \n<code>heroDetail</code> 的 AngularJS 指令，你可以像在 AngularJS 模板中使用任何其他指令一样使用它。</p>\n<code-example path=\"upgrade-module/src/index-downgrade-static.html\" region=\"usecomponent\">\n&lt;hero-detail&gt;&lt;/hero-detail&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uabqh367v3ret0i3u1e5zl60\">请注意，此 AngularJS 是一个名为 \n<code>heroDetail</code> 的元素指令 (\n<code>restrict: 'E'</code>)。AngularJS 元素指令是根据其\n<em>名称</em>匹配的。\n<em>降级后的 Angular 组件的 <code>selector</code> 元数据将被忽略。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s7tyl61djj4h482pcxx6qavq\">当然，大多数组件并不像这样简单。它们中的许多都有\n<em>输入和输出</em>，将它们连接到外部世界。一个带有输入和输出的 Angular 英雄详情组件可能看起来像这样：</p>\n<code-example path=\"upgrade-module/src/app/downgrade-io/hero-detail.component.ts\" title=\"hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\nimport { Hero }&nbsp;from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero-detail',\n  template: `\n    &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n    &lt;button (click)=\"onDelete()\"&gt;Delete&lt;/button&gt;\n  `\n})\nexport class HeroDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() deleted = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;Hero&gt;();\n  onDelete() {\n    this.deleted.emit(this.hero);\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sa5ctew9ivdrk37voxrqzbl2\">这些输入和输出可以从 AngularJS 模板中提供，\n<code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>()</code> 方法负责将它们连接起来：</p>\n<code-example path=\"upgrade-module/src/index-downgrade-io.html\" region=\"usecomponent\">\n&lt;div ng-controller=\"MainController as mainCtrl\"&gt;\n  &lt;hero-detail [hero]=\"mainCtrl.hero\"\n               (deleted)=\"mainCtrl.onDelete($event)\"&gt;\n  &lt;/hero-detail&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kvid96l79agmusbf900e9v11\">请注意，即使你身处 AngularJS 模板中，\n<strong>你仍然使用 Angular 属性语法来绑定输入和输出</strong>。这是降级组件的要求。表达式本身仍然是普通的 AngularJS 表达式。</p>\n<div class=\"callout is-important\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckbap1o33d77dnjfrg5xx8rx0\">对降级组件属性使用 kebab-case</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7y4gsbsrkr8tnfw4kl7aqj0b1\">对于降级组件使用 Angular 属性语法规则有一个值得注意的例外。它与由多个单词组成的输入或输出名称有关。在 Angular 中，你将使用 camelCase 绑定这些属性：</p>\n<code-example format=\"\">\n  [myHero]=\"hero\"\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vgf4aacuu1bscax6kvpgaflq\">但是，当从 AngularJS 模板中使用它们时，你必须使用 kebab-case：</p>\n<code-example format=\"\">\n  [my-hero]=\"hero\"\n</code-example>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2f8vfuo6ptxo6frqutv3jsqc\"><code>$event</code> 变量可以在输出中使用，以访问已发出的对象。在本例中，它将是 \n<code>Hero</code> 对象，因为它是传递给 \n<code>this.deleted.emit()</code> 的对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9np0xuvsn6218f7ybxw7ex6bt\">由于这是一个 AngularJS 模板，你仍然可以在元素上使用其他 AngularJS 指令，即使它上面有 Angular 绑定属性。例如，你可以使用 \n<code>ng-repeat</code> 轻松地创建组件的多个副本：</p>\n<code-example path=\"upgrade-module/src/index-downgrade-io.html\" region=\"userepeatedcomponent\">\n&lt;div ng-controller=\"MainController as mainCtrl\"&gt;\n  &lt;hero-detail [hero]=\"hero\"\n               (deleted)=\"mainCtrl.onDelete($event)\"\n               ng-repeat=\"hero in mainCtrl.heroes\"&gt;\n  &lt;/hero-detail&gt;\n&lt;/div&gt;\n\n</code-example>\n<h3 id=\"using-angularjs-component-directives-from-angular-code\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38meio4200gddmv1p5m74rk0i\"><i class=\"material-icons\">link</i>从 Angular 代码中使用 AngularJS 组件指令</h3>\n<img src=\"generated/images/guide/upgrade/a-to-ajs.png\" alt=\"Using an AngularJS component from Angular code\" class=\"left\" width=\"250\" height=\"44\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1x5kui289nn4crq0uzdh15o5h\">因此，你可以编写一个 Angular 组件，然后从 AngularJS 代码中使用它。当你开始从较低级别的组件迁移并向上工作时，这很有用。但在某些情况下，以相反的顺序做事更方便：从较高级别的组件开始，然后向下工作。这也可以使用 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 完成。你可以\n<em>升级</em> AngularJS 组件指令，然后从 Angular 中使用它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pml4umnj3kl6rvkxfc8m4mqp\">并非所有类型的 AngularJS 指令都可以升级。该指令实际上必须是一个\n<em>组件指令</em>，具有\n<a href=\"guide/upgrade#using-component-directives\">上面准备指南中描述的特性</a>。确保兼容性的最安全方法是使用 AngularJS 1.5 中引入的\n<a href=\"https://docs.angularjs.org/api/ng/type/angular.Module\">组件 API</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9a2zqqe2va7p46wv9vsrn4qp4\">一个可升级组件的简单示例是一个只有模板和控制器的组件：</p>\n<code-example path=\"upgrade-module/src/app/upgrade-static/hero-detail.component.ts\" region=\"hero-detail\" title=\"hero-detail.component.ts\">\nexport const heroDetail = {\n  template: `\n    &lt;h2&gt;Windstorm details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;1&lt;/div&gt;\n  `,\n  controller: function() {\n  }\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5l2rhyplhn5sclxv7ex9rnyr2\">你可以使用 \n<code><a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a></code> 类将此组件\n<em>升级</em>到 Angular。通过创建一个新的 Angular \n<strong>指令</strong>，它扩展了 \n<code><a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a></code>，并在其构造函数中进行 \n<code>super</code> 调用，你将获得一个完全升级的 AngularJS 组件，可以在 Angular 中使用。剩下的就是将其添加到 \n<code>AppModule</code> 的 \n<code>declarations</code> 数组中。</p>\n<code-example path=\"upgrade-module/src/app/upgrade-static/hero-detail.component.ts\" region=\"hero-detail-upgrade\" title=\"hero-detail.component.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>, <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a> } from '@angular/core';\nimport { <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: 'hero-detail'\n})\nexport class HeroDetailDirective extends <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> {\n  constructor(elementRef: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) {\n    super('heroDetail', elementRef, injector);\n  }\n}\n\n</code-example>\n<code-example path=\"upgrade-module/src/app/upgrade-static/app.module.ts\" region=\"hero-detail-upgrade\" title=\"app.module.ts\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>\n  ],\n  declarations: [\n    HeroDetailDirective,\n/* . . . */\n  ]\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.body, ['heroApp'], { strictDi: true });\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ujpo2ue7phhw2i49cwp68uv0\">升级后的组件是 Angular \n<strong>指令</strong>，而不是 \n<strong>组件</strong>，因为 Angular 不知道 AngularJS 将在其下创建元素。就 Angular 而言，升级后的组件只是一个指令——一个标签——Angular 不必关心它的子元素。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wg2bcgaqh3d5t1htgmjelm9b\">升级后的组件也可以有输入和输出，如原始 AngularJS 组件指令的范围/控制器绑定所定义。当你从 Angular 模板中使用组件时，使用 \n<strong>Angular 模板语法</strong> 提供输入和输出，并遵守以下规则：</p>\n<table>\n  <tbody><tr>\n    <th>\n    </th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lowemi0g1a885eww1mg11g19\">绑定定义</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"cp2s7wol83gmsbkck7ziazrb1\">模板语法</th>\n  </tr>\n  <tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"buf468afxlrd76bz2g552jrtc\">attribute 绑定</th>\n    <td>\n<p>      <code>myAttribute: '@myAttribute'</code></p>\n    </td>\n    <td>\n<p>      <code>&lt;my-component myAttribute=\"value\"&gt;</code></p>\n    </td>\n  </tr>\n  <tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5che81jqnuifbt14o4s8bwtv0\">表达式绑定</th>\n    <td>\n<p>      <code>myOutput: '&amp;myOutput'</code></p>\n    </td>\n    <td>\n<p>      <code>&lt;my-component (myOutput)=\"action()\"&gt;</code></p>\n    </td>\n  </tr>\n  <tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22k0hrtpsokatgxx8k5rmu4fm\">单向绑定</th>\n    <td>\n<p>      <code>myValue: '&lt;myValue'</code></p>\n    </td>\n    <td>\n<p>      <code>&lt;my-component [myValue]=\"anExpression\"&gt;</code></p>\n    </td>\n  </tr>\n  <tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfj91a2tzi7kstl2b5xcxrj7n\">双向绑定</th>\n    <td>\n<p>      <code>myValue: '=myValue'</code></p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvceovzs2dcvvv3djyzkbzpsy\">作为双向绑定：\n<code>&lt;my-component [(myValue)]=\"anExpression\"&gt;</code>。由于大多数 AngularJS 双向绑定实际上在实践中只需要单向绑定，因此 \n<code>&lt;my-component [myValue]=\"anExpression\"&gt;</code> 通常就足够了。</p>\n    </td>\n  </tr>\n</tbody></table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97umr5pyu5495r3jpq87l7i3v\">例如，想象一个带有单个输入和单个输出的英雄详情 AngularJS 组件指令：</p>\n<code-example path=\"upgrade-module/src/app/upgrade-io/hero-detail.component.ts\" region=\"hero-detail-io\" title=\"hero-detail.component.ts\">\nexport const heroDetail = {\n  bindings: {\n    hero: '&lt;',\n    deleted: '&amp;'\n  },\n  template: `\n    &lt;h2&gt;{{$ctrl.hero.name}} details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{$ctrl.hero.id}}&lt;/div&gt;\n    &lt;button ng-click=\"$ctrl.onDelete()\"&gt;Delete&lt;/button&gt;\n  `,\n  controller: function() {\n    this.onDelete = () =&gt; {\n      this.deleted(this.hero);\n    };\n  }\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"10atvpx5uby7dix7mjg4o6l87\">你可以将此组件升级到 Angular，在升级指令中注释输入和输出，然后使用 Angular 模板语法提供输入和输出：</p>\n<code-example path=\"upgrade-module/src/app/upgrade-io/hero-detail.component.ts\" region=\"hero-detail-io-upgrade\" title=\"hero-detail.component.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\nimport { <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: 'hero-detail'\n})\nexport class HeroDetailDirective extends <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() deleted: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;Hero&gt;;\n\n  constructor(elementRef: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) {\n    super('heroDetail', elementRef, injector);\n  }\n}\n\n</code-example>\n<code-example path=\"upgrade-module/src/app/upgrade-io/container.component.ts\" title=\"container.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-container',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;hero-detail [hero]=\"hero\"\n                 (deleted)=\"heroDeleted($event)\"&gt;\n    &lt;/hero-detail&gt;\n  `\n})\nexport class ContainerComponent {\n  hero = new Hero(1, 'Windstorm');\n  heroDeleted(hero: Hero) {\n    hero.name = 'Ex-' + hero.name;\n  }\n}\n\n\n</code-example>\n<h3 id=\"projecting-angularjs-content-into-angular-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9gxaoipbvjjdvhsxqdmvmai4\"><i class=\"material-icons\">link</i>将 AngularJS 内容投影到 Angular 组件中</h3>\n<img src=\"generated/images/guide/upgrade/ajs-to-a-with-projection.png\" alt=\"Projecting AngularJS content into Angular\" class=\"left\" width=\"250\" height=\"48\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3btx4esysrrxzam25r8l1s764\">当你从 AngularJS 模板中使用降级后的 Angular 组件时，可能需要将一些内容\n<em>转入</em>它。这也是可能的。虽然 Angular 中没有转入的概念，但有一个非常类似的概念叫做\n<em>内容投影</em>。\n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 能够使这两个特性相互操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5z80i5j8czav5imbuf0lhd0q4\">支持内容投影的 Angular 组件在其内部使用 \n<code>&lt;ng-content&gt;</code> 标签。以下是一个此类组件的示例：</p>\n<code-example path=\"upgrade-module/src/app/ajs-to-a-projection/hero-detail.component.ts\" title=\"hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero-detail',\n  template: `\n    &lt;h2&gt;{{hero.name}}&lt;/h2&gt;\n    &lt;div&gt;\n      &lt;ng-content&gt;&lt;/ng-content&gt;\n    &lt;/div&gt;\n  `\n})\nexport class HeroDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n0kzmgvuv6swzofvn9i3r3kr\">当从 AngularJS 中使用此组件时，你可以为其提供内容。就像它们在 AngularJS 中被转入一样，它们会被投影到 Angular 中 \n<code>&lt;ng-content&gt;</code> 标签的位置：</p>\n<code-example path=\"upgrade-module/src/index-ajs-to-a-projection.html\" region=\"usecomponent\">\n&lt;div ng-controller=\"MainController as mainCtrl\"&gt;\n  &lt;hero-detail [hero]=\"mainCtrl.hero\"&gt;\n    &lt;!-- Everything here will get projected --&gt;\n    &lt;p&gt;{{mainCtrl.hero.description}}&lt;/p&gt;\n  &lt;/hero-detail&gt;\n&lt;/div&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gllwp2jicqcb4amnzagxrjng\">当 AngularJS 内容被投影到 Angular 组件内部时，它仍然保留在“AngularJS 领域”中，并由 AngularJS 框架管理。</p>\n</div>\n<h3 id=\"transcluding-angular-content-into-angularjs-component-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kxc169isbsiflxfsaqqst9tu\"><i class=\"material-icons\">link</i>将 Angular 内容转入 AngularJS 组件指令</h3>\n<img src=\"generated/images/guide/upgrade/a-to-ajs-with-transclusion.png\" alt=\"Projecting Angular content into AngularJS\" class=\"left\" width=\"250\" height=\"48\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ngijcyzwc351w6pbz3ij9yl3\">就像你可以将 AngularJS 内容投影到 Angular 组件中一样，你也可以在使用它们的升级版本时，将 Angular 内容\n<em>转入</em> AngularJS 组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdx40auhuoqv7wr2arkggjyj7\">当 AngularJS 组件指令支持转入时，它可以在其模板中使用 \n<code>ng-transclude</code> 指令来标记转入点：</p>\n<code-example path=\"upgrade-module/src/app/a-to-ajs-transclusion/hero-detail.component.ts\" title=\"hero-detail.component.ts\">\nexport const heroDetail = {\n  bindings: {\n    hero: '='\n  },\n  template: `\n    &lt;h2&gt;{{$ctrl.hero.name}}&lt;/h2&gt;\n    &lt;div&gt;\n      &lt;ng-transclude&gt;&lt;/ng-transclude&gt;\n    &lt;/div&gt;\n  `,\n  transclude: true\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tzx5akrr7badrhosqizb7hmh\">如果你升级了此组件并从 Angular 中使用它，你可以用内容填充组件标签，这些内容随后会被转入：</p>\n<code-example path=\"upgrade-module/src/app/a-to-ajs-transclusion/container.component.ts\" title=\"container.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-container',\n  template: `\n    &lt;hero-detail [hero]=\"hero\"&gt;\n      &lt;!-- Everything here will get transcluded --&gt;\n      &lt;p&gt;{{hero.description}}&lt;/p&gt;\n    &lt;/hero-detail&gt;\n  `\n})\nexport class ContainerComponent {\n  hero = new Hero(1, 'Windstorm', 'Specific powers of controlling winds');\n}\n\n\n</code-example>\n<h3 id=\"making-angularjs-dependencies-injectable-to-angular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbo6a02p2xquu5gp3oyzy5fp3\"><i class=\"material-icons\">link</i>使 AngularJS 依赖项可注入到 Angular</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ksuq0hexguyvitu5l29e0cqw\">在运行混合应用时，你可能会遇到需要将一些 AngularJS 依赖项注入到 Angular 代码中的情况。也许你有一些业务逻辑仍然在 AngularJS 服务中。也许你想要访问 AngularJS 的内置服务，例如 \n<code>$location</code> 或 \n<code>$timeout</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xtjza0omtrn3k5k4qhn1f943\">在这些情况下，可以将 AngularJS 提供者\n<em>升级</em>到 Angular。这使得在 Angular 代码中的某个地方注入它成为可能。例如，你可能在 AngularJS 中有一个名为 \n<code>HeroesService</code> 的服务：</p>\n<code-example path=\"upgrade-module/src/app/ajs-to-a-providers/heroes.service.ts\" title=\"heroes.service.ts\">\nimport { Hero }&nbsp;from '../hero';\n\nexport class HeroesService {\n  get() {\n    return [\n      new Hero(1, 'Windstorm'),\n      new Hero(2, 'Spiderman')\n    ];\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30i4jhne6n0y5lbfjjo1tsxpy\">你可以使用 Angular \n<a href=\"guide/dependency-injection#factory-providers\">工厂提供者</a> 升级此服务，该提供者从 AngularJS \n<code>$injector</code> 中请求此服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jbby26b3j5pxxwpokxil54oe\">许多开发人员更喜欢在单独的 \n<code>ajs-upgraded-providers.ts</code> 文件中声明工厂提供者，这样它们就都在一起，便于引用、创建新的提供者以及在升级完成后删除它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2himg21d5skqm6bdb6si8czjq\">还建议导出 \n<code>heroesServiceFactory</code> 函数，以便预先编译可以获取它。</p>\n<code-example path=\"upgrade-module/src/app/ajs-to-a-providers/ajs-upgraded-providers.ts\" title=\"ajs-upgraded-providers.ts\">\nimport { HeroesService } from './heroes.service';\n\nexport function heroesServiceFactory(i: any) {\n  return i.get('heroes');\n}\n\nexport const heroesServiceProvider = {\n  provide: HeroesService,\n  useFactory: heroesServiceFactory,\n  deps: ['$injector']\n};\n\n\n</code-example>\n<code-example path=\"upgrade-module/src/app/ajs-to-a-providers/app.module.ts\" region=\"register\" title=\"app.module.ts\">\nimport { heroesServiceProvider } from './ajs-upgraded-providers';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>\n  ],\n  providers: [\n    heroesServiceProvider\n  ],\n/* . . . */\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.body, ['heroApp'], { strictDi: true });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpc55f9sc7460n70kl3ginwy4\">然后，你可以使用它的类作为类型注解，在 Angular 中注入它：</p>\n<code-example path=\"upgrade-module/src/app/ajs-to-a-providers/hero-detail.component.ts\" title=\"hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { HeroesService } from './heroes.service';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero-detail',\n  template: `\n    &lt;h2&gt;{{hero.id}}: {{hero.name}}&lt;/h2&gt;\n  `\n})\nexport class HeroDetailComponent {\n  hero: Hero;\n  constructor(heroes: HeroesService) {\n    this.hero = heroes.get()[0];\n  }\n}\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xjre33r81oq9i3ow9wf9dbky\">在此示例中，你升级了一个服务类。你可以在注入它时使用 TypeScript 类型注解。虽然它不会影响依赖项的处理方式，但它可以实现静态类型检查的优势。但这并不是必需的，任何 AngularJS 服务、工厂或提供者都可以被升级。</p>\n</div>\n<h3 id=\"making-angular-dependencies-injectable-to-angularjs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e380i9qin7y0139imlr9ront7\"><i class=\"material-icons\">link</i>使 Angular 依赖项可注入到 AngularJS</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4lh8m3ffa9i7gqzoni580cx81\">除了升级 AngularJS 依赖项之外，你还可以\n<em>降级</em> Angular 依赖项，以便你可以在 AngularJS 中使用它们。当你开始将服务迁移到 Angular 或在 Angular 中创建新的服务，同时保留用 AngularJS 编写的组件时，这会很有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54x2tut843052x61qj4tga1f1\">例如，你可能有一个名为 \n<code>Heroes</code> 的 Angular 服务：</p>\n<code-example path=\"upgrade-module/src/app/a-to-ajs-providers/heroes.ts\" title=\"heroes.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Hero }&nbsp;from '../hero';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class Heroes {\n  get() {\n    return [\n      new Hero(1, 'Windstorm'),\n      new Hero(2, 'Spiderman')\n    ];\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51cehqvj6v3o70f224wu8gmqb\">同样，与 Angular 组件一样，通过将它添加到模块的 \n<code>providers</code> 列表中，将提供者注册到 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中。</p>\n<code-example path=\"upgrade-module/src/app/a-to-ajs-providers/app.module.ts\" region=\"ngmodule\" title=\"app.module.ts\">\nimport { Heroes } from './heroes';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>\n  ],\n  providers: [ Heroes ]\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.body, ['heroApp'], { strictDi: true });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ji6m56cb4tjpo026ecuyeqr3\">现在，使用 \n<code><a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>()</code> 将 Angular \n<code>Heroes</code> 包装在一个\n<em>AngularJS 工厂函数</em>中，并将工厂插入到 AngularJS 模块中。AngularJS 依赖项的名称由你决定：</p>\n<code-example path=\"upgrade-module/src/app/a-to-ajs-providers/app.module.ts\" region=\"register\" title=\"app.module.ts\">\nimport { Heroes } from './heroes';\n/* . . . */\nimport { <a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\nangular.module('heroApp', [])\n  .factory('heroes', <a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>(Heroes))\n  .component('heroDetail', heroDetailComponent);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1uv2g379bzd3h6a0fhvfedk7l\">在此之后，该服务可以在 AngularJS 代码中的任何地方注入：</p>\n<code-example path=\"upgrade-module/src/app/a-to-ajs-providers/hero-detail.component.ts\" title=\"hero-detail.component.ts\">\nexport const heroDetailComponent = {\n  template: `\n    &lt;h2&gt;{{$ctrl.hero.id}}: {{$ctrl.hero.name}}&lt;/h2&gt;\n  `,\n  controller: ['heroes', function(heroes: Heroes) {\n    this.hero = heroes.get()[0];\n  }]\n};\n\n\n</code-example>\n<h2 id=\"using-ahead-of-time-compilation-with-hybrid-apps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzpr7h7u1la004ryul33p75tk\"><i class=\"material-icons\">link</i>在混合应用中使用预先编译</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2myiuec46092gt5mg4urfc6a\">你可以在混合应用中利用预先编译（AOT），就像在任何其他 Angular 应用程序中一样。混合应用的设置与\n<a href=\"guide/aot-compiler\">预先编译章节</a>中描述的设置基本相同，除了 \n<code>index.html</code> 和 \n<code>main-aot.ts</code> 中的差异。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9h8pk6oouyvcmu515y3arkqq\"><code>index.html</code> 可能会有加载 AngularJS 文件的脚本标签，因此 AOT 的 \n<code>index.html</code> 也必须加载这些文件。一个简单的复制方法是将每个文件添加到 \n<code>copy-dist-files.js</code> 文件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3waxwudo5bn4t5xgvvqixygg2\">你需要使用生成的 \n<code>AppModuleFactory</code>，而不是原始的 \n<code>AppModule</code> 来引导混合应用：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/main-aot.ts\" title=\"app/main-aot.ts\">\nimport { <a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a> } from '@angular/platform-browser';\n\nimport { AppModuleNgFactory } from '../aot/app/app.module.ngfactory';\n\n<a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a>().bootstrapModuleFactory(AppModuleNgFactory);\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71vn9i99jwys3f2jjzlagf9sc\">这就是你为 Angular 应用获得 AOT 的全部优势所需要做的！</p>\n<h2 id=\"phonecat-upgrade-tutorial\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jgri4q9swr39zjjzuzy9dtcg\"><i class=\"material-icons\">link</i>PhoneCat 升级教程</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fw14ua3xm72cecqmyy2gv0rf\">在本节中，你将学习如何使用 \n<code>ngUpgrade</code> 来准备和升级应用程序。示例应用程序是来自\n<a href=\"https://docs.angularjs.org/tutorial\">原始 AngularJS 教程</a>的\n<a href=\"https://github.com/angular/angular-phonecat\">Angular PhoneCat</a>，这是我们许多人开始 Angular 之旅的地方。现在你将看到如何将该应用程序带到 Angular 的新世界。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8d9ewfu1wu3i5nt33ocs8ru16\">在此过程中，你将学习如何应用\n<a href=\"guide/upgrade#preparation\">准备指南</a>中概述的步骤。你将使应用程序与 Angular 对齐，并开始使用 TypeScript 编写代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed16u92z63whk0kti59bzlq82\">要跟随教程，请克隆\n<a href=\"https://github.com/angular/angular-phonecat\">angular-phonecat</a> 仓库，并在操作过程中应用这些步骤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ds02jhte0gfwdyov2y7gvth6r\">在项目结构方面，这是工作开始的地方：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-phonecat\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      bower.json\n    </div>\n    <div class=\"file\">\n      karma.conf.js\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n    <div class=\"file\">\n      app\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        core\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          checkmark\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            checkmark.filter.js\n          </div>\n          <div class=\"file\">\n            checkmark.filter.spec.js\n          </div>\n        </div>\n        <div class=\"file\">\n          phone\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            phone.module.js\n          </div>\n          <div class=\"file\">\n            phone.service.js\n          </div>\n          <div class=\"file\">\n            phone.service.spec.js\n          </div>\n        </div>\n        <div class=\"file\">\n          core.module.js\n        </div>\n      </div>\n      <div class=\"file\">\n        phone-detail\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          phone-detail.component.js\n        </div>\n        <div class=\"file\">\n          phone-detail.component.spec.js\n        </div>\n        <div class=\"file\">\n          phone-detail.module.js\n        </div>\n        <div class=\"file\">\n          phone-detail.template.html\n        </div>\n      </div>\n      <div class=\"file\">\n        phone-list\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          phone-list.component.js\n        </div>\n        <div class=\"file\">\n          phone-list.component.spec.js\n        </div>\n        <div class=\"file\">\n          phone-list.module.js\n        </div>\n        <div class=\"file\">\n          phone-list.template.html\n        </div>\n      </div>\n      <div class=\"file\">\n        img\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n           ...\n        </div>\n      </div>\n      <div class=\"file\">\n        phones\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n           ...\n        </div>\n      </div>\n      <div class=\"file\">\n        app.animations.js\n      </div>\n      <div class=\"file\">\n        app.config.js\n      </div>\n      <div class=\"file\">\n        app.css\n      </div>\n      <div class=\"file\">\n        app.module.js\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n    </div>\n    <div class=\"file\">\n      e2e-tests\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        protractor-conf.js\n      </div>\n      <div class=\"file\">\n        scenarios.js\n      </div>\n    </div>\n  </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sn1d6u91g7igshdd02c0upw0\">这实际上是一个很好的起点。代码使用了 AngularJS 1.5 组件 API，组织遵循\n<a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md\">AngularJS 风格指南</a>，这是在成功升级之前的重要\n<a href=\"guide/upgrade#follow-the-angular-styleguide\">准备步骤</a>。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kh95hf3riypxy0fswybas5v2\">每个组件、服务和过滤器都在其自己的源文件中，如\n<a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility\">规则 1</a>所述。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3kuvrmsypiohqrev1gm51u2k\"><code>core</code>、\n<code>phone-detail</code> 和 \n<code>phone-list</code> 模块分别位于其自己的子目录中。这些子目录包含 JavaScript 代码以及每个特定功能的 HTML 模板。这符合\n<a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure\">按功能划分文件夹结构</a>和\n<a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity\">模块化</a>规则。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13bjfh84t13oeq6ewpnymnwpz\">单元测试与应用程序代码并排放置，便于查找，如\n<a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests\">组织测试</a>规则中所述。</p>\n</li>\n</ul>\n<h3 id=\"switching-to-typescript\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7y7f56xnbmhgpagrzvt5alpqp\"><i class=\"material-icons\">link</i>切换到 TypeScript</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mw0bluyb3i0ql3lwz7l1jmji\">由于你将使用 TypeScript 编写 Angular 代码，因此在开始升级之前引入 TypeScript 编译器是有意义的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwu3gcl61x136tgk85g4l95u6\">你将开始逐步淘汰 Bower 包管理器，转而使用 NPM，使用 NPM 安装所有新的依赖项，并最终从项目中删除 Bower。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xj8b1g47zs62ggoebjlkeuay\">首先，将 TypeScript 安装到项目中。</p>\n<code-example format=\"\">\n  npm i typescript --save-dev\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9anwn4touiczpnz8qu8l700g9\">安装你正在使用但没有预打包类型的现有库的类型定义：AngularJS 和 Jasmine 单元测试框架。</p>\n<code-example format=\"\">\n  npm install @types/jasmine @types/angular @types/angular-animate @types/angular-cookies @types/angular-mocks @types/angular-resource @types/angular-route @types/angular-sanitize --save-dev\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pda1jn0b91z9t18g269uw4bw\">你还应该在项目目录中使用 \n<code>tsconfig.json</code> 配置 TypeScript 编译器，如\n<a href=\"guide/typescript-configuration\">TypeScript 配置</a>指南中所述。\n<code>tsconfig.json</code> 文件告诉 TypeScript 编译器如何将你的 TypeScript 文件转换为捆绑到 CommonJS 模块中的 ES5 代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9skw6miae9i06rgk1i5evnyze\">最后，你应该在 \n<code>package.json</code> 中添加一些 npm 脚本，以将 TypeScript 文件编译为 JavaScript（基于 \n<code>tsconfig.json</code> 配置文件）：</p>\n<code-example format=\"\">\n  \"script\": {\n    \"tsc\": \"tsc\",\n    \"tsc:w\": \"tsc -w\",\n    ...\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eaa2rzwoten42fdkz03a9yu2l\">现在，从命令行以监视模式启动 TypeScript 编译器：</p>\n<code-example format=\"\">\n  npm run tsc:w\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22mvu9ww53f68ztxszcq63mrw\">让此进程在后台运行，并在你进行更改时进行监视和重新编译。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1tvcyvep2gednbcrlkk8cmje\">接下来，将你当前的 JavaScript 文件转换为 TypeScript。由于 TypeScript 是 ECMAScript 2015 的超集，而 ECMAScript 2015 又是 ECMAScript 5 的超集，因此你可以简单地将文件扩展名从 \n<code>.js</code> 更改为 \n<code>.ts</code>，一切都会像以前一样工作。当 TypeScript 编译器运行时，它会为每个 \n<code>.ts</code> 文件发出相应的 \n<code>.js</code> 文件，并且编译后的 JavaScript 是实际执行的代码。如果你使用 \n<code>npm start</code> 启动项目 HTTP 服务器，你应该在浏览器中看到功能齐全的应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfhslj0x5vuj2n5mizm99nniv\">现在你有了 TypeScript，你可以开始享受它的一些功能。这种语言可以为 AngularJS 应用程序提供很多价值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atb0724m8rz0g4x58ae1viz49\">首先，TypeScript 是 ES2015 的超集。任何以前使用 ES5 编写的应用程序（如 PhoneCat 示例）都可以使用 TypeScript 开始合并 ES2015 中的新 JavaScript 功能。这些功能包括 \n<code>let</code> 和 \n<code>const</code>、箭头函数、默认函数参数和解构赋值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p8ty621f6ussikf6oygub7ls\">你还可以开始为你的代码添加\n<em>类型安全</em>。由于你安装了 AngularJS 类型，这实际上已经部分实现了。TypeScript 会检查你在执行诸如将组件注册到 Angular 模块之类的操作时是否正确调用了 AngularJS API。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nb6nwx7kzasq0faz6qzfffyt\">但你也可以开始添加\n<em>类型注解</em>，以从 TypeScript 的类型系统中获得更多收益。例如，你可以注解复选标记过滤器，使其明确地期望布尔值作为参数。这使得过滤器应该做什么更加清晰。</p>\n<code-example path=\"upgrade-phonecat-1-typescript/app/core/checkmark/checkmark.filter.ts\" title=\"app/core/checkmark/checkmark.filter.ts\">\nangular.\n  module('core').\n  filter('checkmark', function() {\n    return function(input: boolean) {\n      return input ? '\\u2713' : '\\u2718';\n    };\n  });\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4luou7ld3bn887ocuwrwolztq\">在 \n<code>Phone</code> 服务中，你可以明确地注解 \n<code>$resource</code> 服务依赖项为 \n<code>angular.resource.IResourceService</code>（由 AngularJS 类型定义的类型）。</p>\n<code-example path=\"upgrade-phonecat-1-typescript/app/core/phone/phone.service.ts\" title=\"app/core/phone/phone.service.ts\">\nangular.\n  module('core.phone').\n  factory('Phone', ['$resource',\n    function($resource: angular.resource.IResourceService) {\n      return $resource('phones/:phoneId.json', {}, {\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>: {\n          method: 'GET',\n          params: {phoneId: 'phones'},\n          isArray: true\n        }\n      });\n    }\n  ]);\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8o6qya6irgq0g3jdce3ly916g\">你可以在应用程序的路由配置文件 \n<code>app.config.ts</code> 中应用相同的技巧，你在这里使用位置和路由服务。通过相应地注解它们，TypeScript 可以验证你是否使用正确类型的参数调用了它们的 API。</p>\n<code-example path=\"upgrade-phonecat-1-typescript/app/app.config.ts\" title=\"app/app.config.ts\">\nangular.\n  module('phonecatApp').\n  config(['$locationProvider', '$routeProvider',\n    function config($locationProvider: angular.ILocationProvider,\n                    $routeProvider: angular.route.IRouteProvider) {\n      $locationProvider.hashPrefix('!');\n\n      $routeProvider.\n        when('/phones', {\n          template: '&lt;phone-list&gt;&lt;/phone-list&gt;'\n        }).\n        when('/phones/:phoneId', {\n          template: '&lt;phone-detail&gt;&lt;/phone-detail&gt;'\n        }).\n        otherwise('/phones');\n    }\n  ]);\n\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46i2jj2xgvw8aph4ks07ejns4\">你安装的 \n<a href=\"https://www.npmjs.com/package/@types/angular\">AngularJS 1.x 类型定义</a> 并非由 Angular 团队官方维护， 但内容相当全面。借助这些定义，可以使 AngularJS 1.x 应用 完全类型标注。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lw24gz3mpz2ijasc1db1t0xp\">如果你想这样做，最好在 \n<code>tsconfig.json</code> 中启用 \n<code>noImplicitAny</code> 配置选项。这将 导致 TypeScript 编译器在遇到任何没有类型标注的代码时显示警告。你可以用它作为指南， 告知我们你的项目距离完全标注还有多远。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ezpnge4zu726lspr1hzosrgt\">你可以利用的另一个 TypeScript 特性是\n<em>类</em>。特别是，你可以 将组件控制器转换为类。这样一来，它们就更接近于成为 Angular 组件类，这将使你 在升级时更容易。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"216f8azu0ae4s604y0lgp1yt2\">AngularJS 期望控制器是构造函数。这正是 ES2015/TypeScript 类在底层实现的方式，这意味着你可以直接将一个 类作为组件控制器插入，AngularJS 会很乐意使用它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21u8l9iwkegnsh62kk1rsb9v9\">以下是电话列表组件控制器的新类的样子：</p>\n<code-example path=\"upgrade-phonecat-1-typescript/app/phone-list/phone-list.component.ts\" title=\"app/phone-list/phone-list.component.ts\">\nclass PhoneListController {\n  phones: any[];\n  orderProp: string;\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>: string;\n\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> $<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a> = ['Phone'];\n  constructor(Phone: any) {\n    this.phones = Phone.query();\n    this.orderProp = 'age';\n  }\n\n}\n\nangular.\n  module('phoneList').\n  component('phoneList', {\n    templateUrl: 'phone-list/phone-list.template.html',\n    controller: PhoneListController\n  });\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bks7jxmhflnq7qvfhsgolm5rz\">以前在控制器函数中完成的操作现在在类的 构造函数中完成。依赖注入标注使用静态属性 \n<code>$<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a></code> 附加到类。在运行时，这将成为 \n<code>PhoneListController.$<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a></code> 属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eem56llszi2p940vvko6jpq19\">该类还声明了三个成员：电话数组、当前排序键的名称和搜索查询。这些都是你已经 附加到控制器但没有在任何地方明确声明的东西。 最后一个实际上没有在 TypeScript 代码中使用，因为它只 在模板中引用，但为了清晰起见，你应该定义所有控制器成员。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnt0roi7jotv1hb031dqa4qp8\">在电话详情控制器中，你将有两个成员：一个用于用户正在查看的电话， 另一个用于当前显示的图像的 URL：</p>\n<code-example path=\"upgrade-phonecat-1-typescript/app/phone-detail/phone-detail.component.ts\" title=\"app/phone-detail/phone-detail.component.ts\">\nclass PhoneDetailController {\n  phone: any;\n  mainImageUrl: string;\n\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> $<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a> = ['$routeParams', 'Phone'];\n  constructor($routeParams: angular.route.IRouteParamsService, Phone: any) {\n    let phoneId = $routeParams['phoneId'];\n    this.phone = Phone.get({phoneId}, (phone: any) =&gt; {\n      this.setImage(phone.images[0]);\n    });\n  }\n\n  setImage(imageUrl: string) {\n    this.mainImageUrl = imageUrl;\n  }\n}\n\nangular.\n  module('phoneDetail').\n  component('phoneDetail', {\n    templateUrl: 'phone-detail/phone-detail.template.html',\n    controller: PhoneDetailController\n  });\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72cl23tjsftfhxrvzb1l9q22x\">这使得控制器代码看起来更像 Angular 了。你 已经准备好将 Angular 引入项目了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eaft3fad6lp2k29nl14pawdf1\">如果你在项目中使用了任何 AngularJS 服务，这些服务也是 转换为类的良好候选者，因为与控制器一样， 它们也是构造函数。但你只在这个项目中使用了 \n<code>Phone</code> 工厂， 它有点特殊，因为它是一个 \n<code>ngResource</code> 工厂。所以你不会在准备阶段对它做任何操作。 你将直接把它变成一个 Angular 服务。</p>\n<h3 id=\"installing-angular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2znofqnml4e8p9iiwbmbvosgc\"><i class=\"material-icons\">link</i>安装 Angular</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1srrlv6ilv3ux2io1sbj8y7\">完成准备工作后，开始使用 Angular 升级 PhoneCat。你将借助 \n<a href=\"guide/upgrade#upgrading-with-ngupgrade\">ngUpgrade</a>（它与 Angular 一起提供）逐步完成此操作。 当你完成时，你将能够完全从项目中删除 AngularJS，但关键是分步进行， 不要破坏应用程序。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61cen97qurw8sum7lp7aiezs7\">该项目还包含一些动画。 你不会在本指南的这个版本中升级它们。 请参阅 \n<a href=\"guide/animations\">Angular 动画</a> 指南以了解相关信息。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y5l7e8qiecksvnig8hjafak4\">将 Angular 和其他新依赖项安装到项目中，以及 SystemJS 模块加载器。 查看 \n<a href=\"guide/setup\">设置</a> 指令的结果， 并从中获取以下配置：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bl8olvaj2jiqx52xriubqmjvs\">将 Angular 和其他新依赖项添加到 \n<code>package.json</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n6wb73gxx032puqyf6ng60pb\">将 SystemJS 配置文件 \n<code>systemjs.config.js</code> 添加到项目根目录。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crvro543i3qapgcrqeak6fj5o\">完成这些操作后，运行：</p>\n<code-example format=\"\">\n  npm install\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dh3jijna0wqzwhhqtry8942cp\">很快你就可以通过 \n<code>index.html</code> 将 Angular 依赖项加载到应用程序中， 但首先你需要进行一些目录路径调整。 你需要从 \n<code>node_modules</code> 和项目根目录加载文件，而不是 从 \n<code>/app</code> 目录加载文件，就像你之前一直在做的那样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0n9pkorrf0j29exedqvr1ri7\">将 \n<code>app/index.html</code> 文件移动到项目根目录。然后更改 \n<code>package.json</code> 中的开发服务器根路径，使其也指向项目根目录， 而不是 \n<code>app</code>：</p>\n<code-example format=\"\">\n  \"start\": \"http-server ./ -a localhost -p 8000 -c-1\",\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wkfgi3u9vk0m96hfw0w8nxqx\">现在你可以从项目根目录向 Web 浏览器提供所有内容。但你\n<em>不</em> 希望必须更改应用程序代码中使用的所有图像和数据路径以匹配 开发设置。为此，你将在 \n<code>index.html</code> 中添加一个 \n<code>&lt;base&gt;</code> 标签，这将 导致相对 URL 解析回 \n<code>/app</code> 目录：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/index.html\" region=\"base\" title=\"index.html\">\n&lt;base href=\"/app/\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"799kvat4h29peap8wvpcxm7k9\">现在你可以通过 SystemJS 加载 Angular。你将在 \n<code>&lt;head&gt;</code> 部分的末尾添加 Angular 腻子脚本和 SystemJS 配置，然后使用 \n<code>System.import</code> 加载实际的应用程序：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/index.html\" region=\"angular\" title=\"index.html\">\n&lt;script src=\"/node_modules/core-js/client/shim.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"/node_modules/zone.js/dist/zone.js\"&gt;&lt;/script&gt;\n&lt;script src=\"/node_modules/systemjs/dist/system.src.js\"&gt;&lt;/script&gt;\n&lt;script src=\"/systemjs.config.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  System.import('/app');\n&lt;/script&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"plkmqybnacalzv25gx2a8x2a\">你还需要对 \n<a href=\"guide/setup\">设置</a> 期间安装的 \n<code>systemjs.config.js</code> 文件进行一些调整。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ny2v4n334mmcyrtqhbvzvsrk\">通过 SystemJS 加载内容时，将浏览器指向项目根目录， 而不是使用 \n<code>&lt;base&gt;</code> URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fvxw2myupdrrh38akvx3col\">通过 \n<code>npm install @angular/upgrade --save</code> 安装 \n<code>upgrade</code> 包， 并为 \n<code>@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a></code> 包添加映射。</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"paths\" title=\"systemjs.config.js\">\n  System.config({\n    paths: {\n      // paths serve as alias\n      'npm:': '/node_modules/'\n    },\n    map: {\n      'ng-loader': '../src/systemjs-angular-loader.js',\n      app: '/app',\n/* . . . */\n      '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>': 'npm:@angular/upgrade/bundles/upgrade-static.umd.js',\n/* . . . */\n    },\n\n</code-example>\n<h3 id=\"creating-the-appmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xiee3ucgjh95xrxk57t9l0rw\"><i class=\"material-icons\">link</i>创建\n<em>AppModule</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nakrshjt5804ywvv45eho0es\">现在创建名为 \n<code>AppModule</code> 的根 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类。 已经有一个名为 \n<code>app.module.ts</code> 的文件，它包含 AngularJS 模块。 将其重命名为 \n<code>app.module.ajs.ts</code>，并在 \n<code>index.html</code> 中更新相应的脚本名称。 文件内容保持不变：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/app.module.ajs.ts\" title=\"app.module.ajs.ts\">\n'use strict';\n\n// Define the `phonecatApp` AngularJS module\nangular.module('phonecatApp', [\n  'ngAnimate',\n  'ngRoute',\n  'core',\n  'phoneDetail',\n  'phoneList',\n]);\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hq6eed001ay4uz4ecsq0wssw\">现在创建一个新的 \n<code>app.module.ts</code>，其中包含最小的 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/app.module.ts\" region=\"bare\" title=\"app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n})\nexport class AppModule {\n}\n\n</code-example>\n<h3 id=\"bootstrapping-a-hybrid-phonecat\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2awdmccx8wycf3lj476w46epu\"><i class=\"material-icons\">link</i>引导混合 PhoneCat</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93b7bf7wqoqep7501k0uuwxw0\">接下来，你将引导应用程序作为\n<em>混合应用程序</em>， 它同时支持 AngularJS 和 Angular 组件。之后， 你可以开始将各个部分转换为 Angular。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6k211cbou289d0m4eh2wlgeau\">应用程序目前使用附加到主机页面 \n<code>&lt;html&gt;</code> 元素的 AngularJS \n<code>ng-app</code> 指令进行引导。这在混合 应用程序中将不再有效。改为使用 \n<a href=\"guide/upgrade#bootstrapping-hybrid-applications\">ngUpgrade 引导</a> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p6ar52v34g9xut3h90c3165x\">首先，从 \n<code>index.html</code> 中删除 \n<code>ng-app</code> 属性。 然后在 \n<code>AppModule</code> 中导入 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>，并覆盖其 \n<code>ngDoBootstrap</code> 方法：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/app.module.ts\" region=\"upgrademodule\" title=\"app/app.module.ts\">\nimport { <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>,\n  ],\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.documentElement, ['phonecatApp']);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aru2nub0e1c26kil8k9h1bt5j\">请注意，你正在从 \n<code>ngDoBootstrap</code> 内部引导 AngularJS 模块。 参数与你手动 引导 AngularJS 时传递给 \n<code>angular.bootstrap</code> 的参数相同：应用程序的根元素；以及要加载的 AngularJS 1.x 模块的数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ectizbbwzdgx05grb9a26eqov\">最后，在 \n<code>src/main.ts</code> 中引导 \n<code>AppModule</code>。 该文件已在 \n<code>systemjs.config.js</code> 中配置为应用程序入口点， 因此它已经被浏览器加载。</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/main.ts\" region=\"bootstrap\" title=\"app/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b67spdo380za84g9u7goymf4t\">现在你同时运行 AngularJS 和 Angular。这很 令人兴奋！你还没有运行任何实际的 Angular 组件。接下来就是它了。</p>\n<div class=\"l-sub-section\">\n<h4 id=\"why-declare-angular-as-angulariangularstatic\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79u45opl7ax94q588a4ctq255\"><i class=\"material-icons\">link</i>为什么将\n<em>angular</em> 声明为\n<em>angular.IAngularStatic</em>？</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hmazrvc3wlodezgun5s541a7\"><code>@types/angular</code> 被声明为一个 UMD 模块，并且由于 \n<a href=\"https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#support-for-umd-module-definitions\">UMD 类型定义</a> 的工作方式，一旦你在一个文件中使用 ES6 \n<code>import</code> 语句，所有 UMD 类型模块也必须通过 \n<code>import</code> 语句导入，而不是全局可用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jhf14staa3bygtqbb3j4wkqp\">AngularJS 目前由 \n<code>index.html</code> 中的脚本标签加载，这意味着整个应用程序 都可以访问它作为全局变量，并使用 \n<code>angular</code> 变量的同一个实例。 如果你使用 \n<code>import * as angular from 'angular'</code>，你还要 加载 AngularJS 应用程序中的每个文件以使用 ES2015 模块，以确保 AngularJS 被 正确加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45a22nx4e1nbu7gtxnlc9sbiv\">这是一项相当大的工作，而且通常不值得，尤其是当你正在 将代码迁移到 Angular 的过程中。 相反，将 \n<code>angular</code> 声明为 \n<code>angular.IAngularStatic</code> 以指示它是一个全局变量， 并仍然拥有完整的类型支持。</p>\n</div>\n<h3 id=\"upgrading-the-phone-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dwv6wzkogntbiizz3iy6r02h\"><i class=\"material-icons\">link</i>升级 Phone 服务</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehuc4i21udjdj0ckfog2d83tr\">你将移植到 Angular 的第一个部分是 \n<code>Phone</code> 服务，它 位于 \n<code>app/core/phone/phone.service.ts</code> 中，并使组件 能够从服务器加载电话信息。现在它使用 ngResource 实现，你将其用于两件事：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59r5gwene8ofmbzs7sq65mc21\">将所有电话的列表加载到电话列表组件中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuasshxu9rr1ebayzj00e4w6s\">将单个电话的详细信息加载到电话详情组件中。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bz1akv28z0vmcxiuxulcksp71\">你可以用 Angular 服务类替换此实现，同时 将控制器保留在 AngularJS 领域。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8vdbu1up84zbh0bl339py2v3\">在新版本中，你将导入 Angular HTTP 模块并调用其 \n<code><a href=\"api/http/Http\" class=\"code-anchor\">Http</a></code> 服务，而不是 \n<code>ngResource</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lb5g27t7iqfglsa5yy04tuww\">重新打开 \n<code>app.module.ts</code> 文件，导入并将 \n<code><a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a></code> 添加到 \n<code>AppModule</code> 的 \n<code>imports</code> 数组中：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/app.module.ts\" region=\"httpmodule\" title=\"app.module.ts\">\nimport { <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a> } from '@angular/http';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>,\n  ],\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.documentElement, ['phonecatApp']);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73nara3cw5w7hxoecdfk3d1d5\">现在你已准备好升级 Phone 服务本身。用装饰为 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 的 TypeScript 类替换 \n<code>phone.service.ts</code> 中基于 ngResource 的 服务：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/core/phone/phone.service.ts\" region=\"classdef\" title=\"app/core/phone/phone.service.ts (skeleton)\" linenums=\"false\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class Phone {\n/* . . . */\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acndjy5dw2yyvna7hmi2fojip\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 装饰器将附加一些依赖注入元数据 到类，让 Angular 知道它的依赖项。如 \n<a href=\"guide/dependency-injection\">依赖注入指南</a> 所述， 这是一个标记装饰器，你需要将其用于没有其他 Angular 装饰器但仍然需要注入依赖项的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pvbz09tj4ijb575cnuobnri3\">在构造函数中，该类期望获取 \n<code><a href=\"api/http/Http\" class=\"code-anchor\">Http</a></code> 服务。它将 被注入到它，并存储为一个私有字段。然后在 两个实例方法中使用该服务，其中一个加载所有电话的列表， 另一个加载指定电话的详细信息：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/core/phone/phone.service.ts\" region=\"fullclass\" title=\"app/core/phone/phone.service.ts\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class Phone {\n  constructor(private http: <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>) { }\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(): Observable&lt;PhoneData[]&gt; {\n    return this.http.get(`phones/phones.json`)\n      .map((res: <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>) =&gt; res.json());\n  }\n  get(id: string): Observable&lt;PhoneData&gt; {\n    return this.http.get(`phones/${id}.json`)\n      .map((res: <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>) =&gt; res.json());\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mahgx931fnofpm9u3asnm5ya\">这些方法现在返回类型为 \n<code>PhoneData</code> 和 \n<code>PhoneData[]</code> 的可观察者。这是一个 你还没有的类型。为它添加一个简单的接口：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/core/phone/phone.service.ts\" region=\"phonedata-interface\" title=\"app/core/phone/phone.service.ts (interface)\" linenums=\"false\">\nexport interface PhoneData {\n  name: string;\n  snippet: string;\n  images: string[];\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az0e33dossyteg3bionanaiyp\"><code>@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a></code> 有一个 \n<code><a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a></code> 方法，用于使 Angular 服务可用于 AngularJS 代码。使用它来插入 \n<code>Phone</code> 服务：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/core/phone/phone.service.ts\" region=\"downgrade-injectable\" title=\"app/core/phone/phone.service.ts (downgrade)\" linenums=\"false\">\ndeclare var angular: angular.IAngularStatic;\nimport { <a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n/* . . . */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class Phone {\n/* . . . */\n}\n\nangular.module('core.phone')\n  .factory('phone', <a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>(Phone));\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7ymgnmtvyj4o5rhpowuw8tn8\">以下是此服务的完整最终代码：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/core/phone/phone.service.ts\" title=\"app/core/phone/phone.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>, <a href=\"api/http/Response\" class=\"code-anchor\">Response</a> } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\n\ndeclare var angular: angular.IAngularStatic;\nimport { <a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\nimport 'rxjs/add/operator/map';\n\nexport interface PhoneData {\n  name: string;\n  snippet: string;\n  images: string[];\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class Phone {\n  constructor(private http: <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>) { }\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(): Observable&lt;PhoneData[]&gt; {\n    return this.http.get(`phones/phones.json`)\n      .map((res: <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>) =&gt; res.json());\n  }\n  get(id: string): Observable&lt;PhoneData&gt; {\n    return this.http.get(`phones/${id}.json`)\n      .map((res: <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>) =&gt; res.json());\n  }\n}\n\nangular.module('core.phone')\n  .factory('phone', <a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>(Phone));\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kmlwy4h0ft65g8g2zzurhlat\">注意，你正在单独导入 RxJS \n<code>Observable</code> 的 \n<code>map</code> 操作符。 对每个 RxJS 操作符都这样做。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ald4dfywx398bmxycsobw1ff\">新的 \n<code>Phone</code> 服务具有与原始的基于 \n<code>ngResource</code> 的服务相同的特性。 因为它是一个 Angular 服务，所以你使用 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 提供者来注册它：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/app.module.ts\" region=\"phone\" title=\"app.module.ts\">\nimport { Phone } from './core/phone/phone.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>,\n  ],\n  providers: [\n    Phone,\n  ]\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.documentElement, ['phonecatApp']);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94eu0jr2a6ea27epyxb3ga7kw\">现在你通过一个由 SystemJS 求解的导入来加载 \n<code>phone.service.ts</code>，你应该\n<strong>从 <code>index.html</code> 中删除服务对应的 &lt;script&gt; 标签</strong>。 你将对所有组件都执行此操作，因为你正在升级它们。与 AngularJS 到 Angular 的升级同时，你还在将代码从脚本迁移到模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2r6jg9cxgw5qagvwfgrshyhi8\">此时，你可以切换这两个组件以使用新服务，而不是旧服务。虽然你使用 \n<code>$<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a></code> 将其作为降级的 \n<code>phone</code> 工厂注入， 但它实际上是 \n<code>Phone</code> 类的实例，并且你相应地对其类型进行注释：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-list/phone-list.component.ajs.ts\" title=\"app/phone-list/phone-list.component.ts\">\ndeclare var angular: angular.IAngularStatic;\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n\nclass PhoneListController {\n  phones: PhoneData[];\n  orderProp: string;\n\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> $<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a> = ['phone'];\n  constructor(phone: Phone) {\n    phone.query().subscribe(phones =&gt; {\n      this.phones = phones;\n    });\n    this.orderProp = 'age';\n  }\n\n}\n\nangular.\n  module('phoneList').\n  component('phoneList', {\n    templateUrl: 'app/phone-list/phone-list.template.html',\n    controller: PhoneListController\n  });\n\n\n</code-example>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-detail/phone-detail.component.ajs.ts\" title=\"app/phone-detail/phone-detail.component.ts\">\ndeclare var angular: angular.IAngularStatic;\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n\nclass PhoneDetailController {\n  phone: PhoneData;\n  mainImageUrl: string;\n\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> $<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a> = ['$routeParams', 'phone'];\n  constructor($routeParams: angular.route.IRouteParamsService, phone: Phone) {\n    let phoneId = $routeParams['phoneId'];\n    phone.get(phoneId).subscribe(data =&gt; {\n      this.phone = data;\n      this.setImage(data.images[0]);\n    });\n  }\n\n  setImage(imageUrl: string) {\n    this.mainImageUrl = imageUrl;\n  }\n}\n\nangular.\n  module('phoneDetail').\n  component('phoneDetail', {\n    templateUrl: 'phone-detail/phone-detail.template.html',\n    controller: PhoneDetailController\n  });\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1u69hldaqleqdh1z2u084o0s8\">现在有两个 AngularJS 组件使用了一个 Angular 服务！ 组件不需要知道这一点，尽管服务返回的是可观察者而不是 Promise，这有点泄露了天机。 无论如何，你所做的是将服务迁移到 Angular，而无需立即迁移使用它的组件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agqpkcbxk5mcqmvlirpsze7u0\">你可以在服务中使用 \n<code>Observable</code> 的 \n<code>toPromise</code> 方法将这些 可观察者转换为 Promise。在许多情况下，这会减少对组件控制器的更改次数。</p>\n</div>\n<h3 id=\"upgrading-components\">Upgrading Components</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6hz0l55mmjt68q0h7tjuyc6p\">接下来，将 AngularJS 组件升级到 Angular 组件。 一次升级一个组件，同时保持应用程序处于混合模式。 在进行这些转换时，你还会定义第一个 Angular \n<em>管道</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36ow800zw6x1fcrd5o3pfbhvq\">首先看一下电话列表组件。现在它包含一个 TypeScript 控制器类和一个组件定义对象。你可以通过重命名控制器类并将 AngularJS 组件定义对象转换为 Angular \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器来将其转换为 Angular 组件。 然后，你还可以从类中删除静态 \n<code>$<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a></code> 属性：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-list/phone-list.component.ts\" region=\"initialclass\" title=\"app/phone-list/phone-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'phone-list',\n  templateUrl: './phone-list.template.html'\n})\nexport class PhoneListComponent {\n  phones: PhoneData[];\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>: string;\n  orderProp: string;\n\n  constructor(phone: Phone) {\n    phone.query().subscribe(phones =&gt; {\n      this.phones = phones;\n    });\n    this.orderProp = 'age';\n  }\n/* . . . */\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ame5a1tuimvws8plpkkxqub1g\"><code>selector</code> 属性是一个 CSS 选择器，它定义了组件应该在页面上的哪个位置。在 AngularJS 中，你根据组件名称进行匹配，但在 Angular 中， 你拥有这些显式选择器。此选择器将匹配名称为 \n<code>phone-list</code> 的元素， 就像 AngularJS 版本一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uti8qpcj3hr7digdf24t205a\">现在将此组件的模板转换为 Angular 语法。 搜索控件将 AngularJS \n<code>$ctrl</code> 表达式 替换为 Angular 的双向 \n<code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 绑定语法：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-list/phone-list.template.html\" region=\"controls\" title=\"app/phone-list/phone-list.template.html (search controls)\" linenums=\"false\">\n&lt;p&gt;\n  Search:\n  &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"<a href=\"api/animations/query\" class=\"code-anchor\">query</a>\" /&gt;\n&lt;/p&gt;\n\n&lt;p&gt;\n  Sort by:\n  &lt;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"orderProp\"&gt;\n    &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> value=\"name\"&gt;Alphabetical&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n    &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> value=\"age\"&gt;Newest&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n  &lt;/select&gt;\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37c0s3ofwfvg5wp6falw7h8d7\">将列表的 \n<code>ng-repeat</code> 替换为 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>，如 \n<a href=\"guide/template-syntax#directives\">模板语法页面所述</a>。 将图像标签的 \n<code>ng-src</code> 替换为对原生 \n<code>src</code> 属性的绑定。</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-list/phone-list.template.html\" region=\"list\" title=\"app/phone-list/phone-list.template.html (phones)\" linenums=\"false\">\n&lt;ul class=\"phones\"&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let phone of getPhones()\"\n      class=\"thumbnail phone-list-item\"&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> href=\"/#!/phones/{{phone.id}}\" class=\"thumb\"&gt;\n      &lt;img [src]=\"phone.imageUrl\" [alt]=\"phone.name\" /&gt;\n    &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> href=\"/#!/phones/{{phone.id}}\" class=\"name\"&gt;{{phone.name}}&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<h4 id=\"no-angular-filter-or-orderby-filters\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awh7lfszud11xbxb984aqbk84\"><i class=\"material-icons\">link</i>没有 Angular \n<em>过滤器</em>或 \n<em>orderBy</em> 过滤器</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7a8modqgt6xowynhtxuq7qcxq\">AngularJS 内置的 \n<code>filter</code> 和 \n<code>orderBy</code> 过滤器在 Angular 中不存在， 因此你需要自己进行过滤和排序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3p9kzckbtkgk9fjkcnqbg9xok\">你用对 \n<code>getPhones()</code> 控制器方法的绑定替换了 \n<code>filter</code> 和 \n<code>orderBy</code> 过滤器， 该方法在组件本身内部实现了过滤和排序逻辑。</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-list/phone-list.component.ts\" region=\"getphones\" title=\"app/phone-list/phone-list.component.ts\">\ngetPhones(): PhoneData[] {\n  return this.sortPhones(this.filterPhones(this.phones));\n}\n\nprivate filterPhones(phones: PhoneData[]) {\n  if (phones &amp;&amp; this.query) {\n    return phones.filter(phone =&gt; {\n      let name = phone.name.toLowerCase();\n      let snippet = phone.snippet.toLowerCase();\n      return name.indexOf(this.query) &gt;= 0 || snippet.indexOf(this.query) &gt;= 0;\n    });\n  }\n  return phones;\n}\n\nprivate sortPhones(phones: PhoneData[]) {\n  if (phones &amp;&amp; this.orderProp) {\n    return phones\n      .slice(0) // Make <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> copy\n      .sort((<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>, b) =&gt; {\n        if (<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>[this.orderProp] &lt; b[this.orderProp]) {\n          return -1;\n        } else if ([b[this.orderProp] &lt; <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>[this.orderProp]]) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n  }\n  return phones;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5dtm53d5xkan2mqddkh1qxl\">现在你需要降级 Angular 组件，以便你可以在 AngularJS 中使用它。 你注册的是一个 \n<code>phoneList</code> \n<em>指令</em>，而不是注册一个组件， 它是 Angular 组件的降级版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3d1cxi6q48oqlio0txmhuler\"><code>as angular.IDirectiveFactory</code> 转换告诉 TypeScript 编译器 \n<code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a></code> 方法的返回值是一个指令工厂。</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-list/phone-list.component.ts\" region=\"downgrade-component\" title=\"app/phone-list/phone-list.component.ts\">\ndeclare var angular: angular.IAngularStatic;\nimport { <a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\n/* . . . */\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'phone-list',\n  templateUrl: './phone-list.template.html'\n})\nexport class PhoneListComponent {\n/* . . . */\n}\n\nangular.module('phoneList')\n  .directive(\n    'phoneList',\n    <a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>({component: PhoneListComponent}) as angular.IDirectiveFactory\n  );\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pxlozc4ucxxvzm2geucultvf\">新的 \n<code>PhoneListComponent</code> 使用 Angular \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令，该指令位于 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 中。 将 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 添加到 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 导入中，声明新的 \n<code>PhoneListComponent</code>， 最后将其添加到 \n<code>entryComponents</code> 中，因为你已将其降级：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/app.module.ts\" region=\"phonelist\" title=\"app.module.ts\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { PhoneListComponent } from './phone-list/phone-list.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n  ],\n  declarations: [\n    PhoneListComponent,\n  ],\n  entryComponents: [\n    PhoneListComponent,\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.documentElement, ['phonecatApp']);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eu8c66u4bgg4sq6ctob87uflx\">从 \n<code>index.html</code> 中删除电话列表组件对应的 &lt;script&gt; 标签。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2elcpviv35bin548l5jn1nup\">现在将剩余的 \n<code>phone-detail.component.ts</code> 设置如下：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-detail/phone-detail.component.ts\" title=\"app/phone-detail/phone-detail.component.ts\">\ndeclare var angular: angular.IAngularStatic;\nimport { <a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Phone, PhoneData } from '../core/phone/phone.service';\nimport { RouteParams } from '../ajs-upgraded-providers';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'phone-detail',\n  templateUrl: './phone-detail.template.html',\n})\nexport class PhoneDetailComponent {\n  phone: PhoneData;\n  mainImageUrl: string;\n\n  constructor(routeParams: RouteParams, phone: Phone) {\n    phone.get(routeParams['phoneId']).subscribe(phone =&gt; {\n      this.phone = phone;\n      this.setImage(phone.images[0]);\n    });\n  }\n\n  setImage(imageUrl: string) {\n    this.mainImageUrl = imageUrl;\n  }\n}\n\nangular.module('phoneDetail')\n  .directive(\n    'phoneDetail',\n    <a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>({component: PhoneDetailComponent}) as angular.IDirectiveFactory\n  );\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cajspvqvv7t28qdw3lp7ni2d0\">这与电话列表组件类似。 新的变化是 \n<code>RouteParams</code> 类型注释，它标识了 \n<code>routeParams</code> 依赖项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95w3ulddrk313epbxz5r3i16\">AngularJS 注入器有一个名为 \n<code>$routeParams</code> 的 AngularJS 路由器依赖项， 它在 \n<code>PhoneDetails</code> 仍然是 AngularJS 控制器时被注入到其中。 你打算将其注入到新的 \n<code>PhoneDetailsComponent</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6aw351j25hne7jj0ak55wfc0y\">不幸的是，AngularJS 依赖项不会自动对 Angular 组件可用。 你必须通过 \n<a href=\"guide/upgrade#making-angularjs-dependencies-injectable-to-angular\">工厂提供者</a> 来升级此服务，以使 \n<code>$routeParams</code> 成为 Angular 可注入的。 在名为 \n<code>ajs-upgraded-providers.ts</code> 的新文件中执行此操作，并在 \n<code>app.module.ts</code> 中导入它：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/ajs-upgraded-providers.ts\" title=\"app/ajs-upgraded-providers.ts\">\nexport abstract class RouteParams {\n  [key: string]: string;\n}\n\nexport function routeParamsFactory(i: any) {\n  return i.get('$routeParams');\n}\n\nexport const routeParamsProvider = {\n  provide: RouteParams,\n  useFactory: routeParamsFactory,\n  deps: ['$injector']\n};\n\n\n</code-example>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/app.module.ts\" region=\"routeparams\" title=\"app/app.module.ts ($routeParams)\" linenums=\"false\">\nimport { routeParamsProvider } from './ajs-upgraded-providers';\n  providers: [\n    Phone,\n    routeParamsProvider\n  ]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aky4ddqt0935pmfz1nj4ht3v5\">将电话详情组件模板转换为 Angular 语法，如下所示：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-detail/phone-detail.template.html\" title=\"app/phone-detail/phone-detail.template.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"phone\"&gt;\n  &lt;div class=\"phone-images\"&gt;\n    &lt;img [src]=\"img\" class=\"phone\"\n        [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'selected': img === mainImageUrl}\"\n        *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let img of phone.images\" /&gt;\n  &lt;/div&gt;\n\n  &lt;h1&gt;{{phone.name}}&lt;/h1&gt;\n\n  &lt;p&gt;{{phone.description}}&lt;/p&gt;\n\n  &lt;ul class=\"phone-thumbs\"&gt;\n    &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let img of phone.images\"&gt;\n      &lt;img [src]=\"img\" (click)=\"setImage(img)\" /&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;ul class=\"specs\"&gt;\n    &lt;li&gt;\n      &lt;span&gt;Availability and Networks&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Availability&lt;/dt&gt;\n        &lt;dd *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let availability of phone.availability\"&gt;{{availability}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Battery&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;/dt&gt;\n        &lt;dd&gt;{{phone.battery?.type}}&lt;/dd&gt;\n        &lt;dt&gt;Talk <a href=\"api/common/Time\" class=\"code-anchor\">Time</a>&lt;/dt&gt;\n        &lt;dd&gt;{{phone.battery?.talkTime}}&lt;/dd&gt;\n        &lt;dt&gt;Standby time (max)&lt;/dt&gt;\n        &lt;dd&gt;{{phone.battery?.standbyTime}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Storage and Memory&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;RAM&lt;/dt&gt;\n        &lt;dd&gt;{{phone.storage?.ram}}&lt;/dd&gt;\n        &lt;dt&gt;Internal Storage&lt;/dt&gt;\n        &lt;dd&gt;{{phone.storage?.flash}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Connectivity&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Network Support&lt;/dt&gt;\n        &lt;dd&gt;{{phone.connectivity?.cell}}&lt;/dd&gt;\n        &lt;dt&gt;WiFi&lt;/dt&gt;\n        &lt;dd&gt;{{phone.connectivity?.wifi}}&lt;/dd&gt;\n        &lt;dt&gt;Bluetooth&lt;/dt&gt;\n        &lt;dd&gt;{{phone.connectivity?.bluetooth}}&lt;/dd&gt;\n        &lt;dt&gt;Infrared&lt;/dt&gt;\n        &lt;dd&gt;{{phone.connectivity?.infrared | checkmark}}&lt;/dd&gt;\n        &lt;dt&gt;GPS&lt;/dt&gt;\n        &lt;dd&gt;{{phone.connectivity?.gps | checkmark}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Android&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;OS <a href=\"api/core/Version\" class=\"code-anchor\">Version</a>&lt;/dt&gt;\n        &lt;dd&gt;{{phone.android?.os}}&lt;/dd&gt;\n        &lt;dt&gt;UI&lt;/dt&gt;\n        &lt;dd&gt;{{phone.android?.ui}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Size and Weight&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Dimensions&lt;/dt&gt;\n        &lt;dd *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let dim of phone.sizeAndWeight?.dimensions\"&gt;{{dim}}&lt;/dd&gt;\n        &lt;dt&gt;Weight&lt;/dt&gt;\n        &lt;dd&gt;{{phone.sizeAndWeight?.weight}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Display&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Screen size&lt;/dt&gt;\n        &lt;dd&gt;{{phone.display?.screenSize}}&lt;/dd&gt;\n        &lt;dt&gt;Screen resolution&lt;/dt&gt;\n        &lt;dd&gt;{{phone.display?.screenResolution}}&lt;/dd&gt;\n        &lt;dt&gt;Touch screen&lt;/dt&gt;\n        &lt;dd&gt;{{phone.display?.touchScreen | checkmark}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Hardware&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;CPU&lt;/dt&gt;\n        &lt;dd&gt;{{phone.hardware?.cpu}}&lt;/dd&gt;\n        &lt;dt&gt;USB&lt;/dt&gt;\n        &lt;dd&gt;{{phone.hardware?.usb}}&lt;/dd&gt;\n        &lt;dt&gt;Audio / headphone jack&lt;/dt&gt;\n        &lt;dd&gt;{{phone.hardware?.audioJack}}&lt;/dd&gt;\n        &lt;dt&gt;FM Radio&lt;/dt&gt;\n        &lt;dd&gt;{{phone.hardware?.fmRadio | checkmark}}&lt;/dd&gt;\n        &lt;dt&gt;Accelerometer&lt;/dt&gt;\n        &lt;dd&gt;{{phone.hardware?.accelerometer | checkmark}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Camera&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Primary&lt;/dt&gt;\n        &lt;dd&gt;{{phone.camera?.primary}}&lt;/dd&gt;\n        &lt;dt&gt;Features&lt;/dt&gt;\n        &lt;dd&gt;{{phone.camera?.features?.join(', ')}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Additional Features&lt;/span&gt;\n      &lt;dd&gt;{{phone.additionalFeatures}}&lt;/dd&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehvhpgahgo3tuvd7nt5ezzsh4\">这里有几个值得注意的变化：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj6e3zk749ck5t46ktxanl9t3\">你已从所有表达式中删除了 \n<code>$ctrl.</code> 前缀。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pkeo0u85uv3lhkmefey3zf8f\">你已将 \n<code>ng-src</code> 替换为标准 \n<code>src</code> 属性的属性 绑定。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ryjjjx1es5tytngrilhcoa87\">你正在 \n<code>ng-class</code> 周围使用属性绑定语法。虽然 Angular 确实有 \n<a href=\"guide/template-syntax#directives\">一个与 AngularJS 非常相似的 <code>ngClass</code></a>， 但它的值不会像魔法一样被评估为表达式。 在 Angular 中，你始终在模板中指定属性值的 属性表达式，而不是字面量字符串。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vnp6g0tnua1nkgwjfyciiw5s\">你已将 \n<code>ng-repeat</code> 替换为 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1k0237pumb09utb2f5vpwt8x8\">你已将 \n<code>ng-click</code> 替换为标准 \n<code>click</code> 的事件绑定。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4vt60j2zmy2tbrd6pdy5kwhu\">你已将整个模板包装在一个 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 中，该 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 仅在存在电话时才会渲染它。你需要这样做，因为当组件 首次加载时，你还没有 \n<code>phone</code>，并且表达式将引用一个 不存在的值。与 AngularJS 不同，当尝试引用未定义对象上的属性时，Angular 表达式不会静默失败。你需要明确 说明预期出现这种情况的情况。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3143755ox5mxda9z2n1pxwvl\">将 \n<code>PhoneDetailComponent</code> 组件添加到 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 \n<em>声明</em> 和 \n<em>entryComponents</em> 中：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/app.module.ts\" region=\"phonedetail\" title=\"app.module.ts\">\nimport { PhoneDetailComponent } from './phone-detail/phone-detail.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n  ],\n  declarations: [\n    PhoneListComponent,\n    PhoneDetailComponent,\n  ],\n  entryComponents: [\n    PhoneListComponent,\n    PhoneDetailComponent\n  ],\n  providers: [\n    Phone,\n    routeParamsProvider\n  ]\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.documentElement, ['phonecatApp']);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejcwliit5ln8ky1zxdke1ae1e\">现在你应该从 \n<code>index.html</code> 中删除电话详情组件对应的 &lt;script&gt; 标签。</p>\n<h4 id=\"add-the-checkmarkpipe\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p7n1d41pj804mb8uw90l1k4l\"><i class=\"material-icons\">link</i>添加 \n<em>CheckmarkPipe</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzy26ijw6q3f4ci86428jpw7f\">AngularJS 指令有一个 \n<code>checkmark</code> \n<em>过滤器</em>。 将其转换为 Angular \n<strong>管道</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arb833gk7jrg0j8luy11cljld\">没有升级方法可以将过滤器转换为管道。 你不会错过它。 将过滤器函数转换为等效的管道类很容易。 实现与以前相同，只是重新打包在 \n<code>transform</code> 方法中。 将文件重命名为 \n<code>checkmark.pipe.ts</code> 以符合 Angular 约定：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/core/checkmark/checkmark.pipe.ts\" title=\"app/core/checkmark/checkmark.pipe.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({name: 'checkmark'})\nexport class CheckmarkPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(input: boolean) {\n    return input ? '\\u2713' : '\\u2718';\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azb8hsytg9xmt58kr068pdpb4\">现在导入并声明新创建的管道， 并从 \n<code>index.html</code> 中删除过滤器对应的 &lt;script&gt; 标签：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/app.module.ts\" region=\"checkmarkpipe\" title=\"app.module.ts\">\nimport { CheckmarkPipe } from './core/checkmark/checkmark.pipe';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n  ],\n  declarations: [\n    PhoneListComponent,\n    PhoneDetailComponent,\n    CheckmarkPipe\n  ],\n  entryComponents: [\n    PhoneListComponent,\n    PhoneDetailComponent\n  ],\n  providers: [\n    Phone,\n    routeParamsProvider\n  ]\n})\nexport class AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) { }\n  ngDoBootstrap() {\n    this.upgrade.bootstrap(document.documentElement, ['phonecatApp']);\n  }\n}\n\n</code-example>\n<h3 id=\"aot-compile-the-hybrid-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rivxl7jm3kfk3xcs8hitoj59\"><i class=\"material-icons\">link</i>使用 AOT 编译混合应用程序</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mufn80u3cqrbrjnq8anl93jl\">要在混合应用程序中使用 AOT，你必须首先像任何其他 Angular 应用程序一样设置它， 如 \n<a href=\"guide/aot-compiler\">提前编译章节</a> 中所示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qewtj5iaaxa8qbkzbvu1chtn\">然后将 \n<code>main-aot.ts</code> 更改为引导由 AOT 编译器生成的 \n<code>AppComponentFactory</code>：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/main-aot.ts\" title=\"app/main-aot.ts\">\nimport { <a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a> } from '@angular/platform-browser';\n\nimport { AppModuleNgFactory } from '../aot/app/app.module.ngfactory';\n\n<a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a>().bootstrapModuleFactory(AppModuleNgFactory);\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2vb76m7jviknrlqzyxwr1q4x\">你需要在 \n<code>aot/index.html</code> 中加载你在 \n<code>index.html</code> 中使用的所有 AngularJS 文件。 以及：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/aot/index.html\" title=\"aot/index.html\">\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n\n    &lt;base href=\"/app/\"&gt;\n\n    &lt;title&gt;Google Phone Gallery&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"app.css\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"app.animations.css\" /&gt;\n\n    &lt;script src=\"https://code.jquery.com/jquery-2.2.4.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://code.angularjs.org/1.5.5/angular.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://code.angularjs.org/1.5.5/angular-animate.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://code.angularjs.org/1.5.5/angular-resource.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://code.angularjs.org/1.5.5/angular-route.js\"&gt;&lt;/script&gt;\n\n    &lt;script src=\"app.module.ajs.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"app.config.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"app.animations.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"core/core.module.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"core/phone/phone.module.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"phone-list/phone-list.module.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"phone-detail/phone-detail.module.js\"&gt;&lt;/script&gt;\n\n    &lt;script src=\"/node_modules/core-js/client/shim.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/node_modules/zone.js/dist/zone.min.js\"&gt;&lt;/script&gt;\n\n    &lt;script&gt;window.module = 'aot';&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;div class=\"view-container\"&gt;\n      &lt;div ng-view class=\"view-frame\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n  &lt;script src=\"/dist/build.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"712iuqa8nka3ruxeqx03o9j2s\">这些文件需要与 polyfills 一起复制。应用程序 在运行时需要的文件，例如 \n<code>.json</code> 电话列表和图像，也需要复制。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eya6atdcyltp3cu8k5ibr82ok\">通过 \n<code>npm install fs-extra --save-dev</code> 安装 \n<code>fs-extra</code> 以获得更好的文件复制功能，并将 \n<code>copy-dist-files.js</code> 更改为以下内容：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/copy-dist-files.js\" title=\"copy-dist-files.js\">\nvar fsExtra = require('fs-extra');\nvar resources = [\n  // polyfills\n  'node_modules/core-js/client/shim.min.js',\n  'node_modules/zone.js/dist/zone.min.js',\n  // css\n  'app/app.css',\n  'app/app.animations.css',\n  // images and json files\n  'app/img/',\n  'app/phones/',\n  // app files\n  'app/app.module.ajs.js',\n  'app/app.config.js',\n  'app/app.animations.js',\n  'app/core/core.module.js',\n  'app/core/phone/phone.module.js',\n  'app/phone-list/phone-list.module.js',\n  'app/phone-detail/phone-detail.module.js'\n];\nresources.map(function(sourcePath) {\n  var destPath = `aot/${sourcePath}`;\n  fsExtra.copySync(sourcePath, destPath);\n});\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60t900gdegiv5s74wkqc08xx\">这就是你在升级应用程序时使用 AOT 所需的全部内容！</p>\n<h3 id=\"adding-the-angular-router-and-bootstrap\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89sjoxfppumsw0kot19e7a2u0\"><i class=\"material-icons\">link</i>添加 Angular 路由器和引导程序</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tnr51elmwtbx9io7bod1eqh1\">此时，你已将所有 AngularJS 应用程序组件替换为 它们的 Angular 对应组件，即使你仍然从 AngularJS 路由器中提供它们。</p>\n<h4 id=\"add-the-angular-router\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8i5lngpd5rud5ku9p1s6e8r6c\"><i class=\"material-icons\">link</i>添加 Angular 路由器</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8k2v2u4m2zean0h77f0etk6xl\">Angular 有一个 \n<a href=\"guide/router\">全新的路由器</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cw7mjjuef85f5t1c9rplp8o1j\">像所有路由器一样，它需要 UI 中的一个位置来显示路由视图。 对于 Angular，它是 \n<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code>，它属于应用程序组件树顶部的\n<em>根组件</em>中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5q292wx9k82mjjzmqyojjt28u\">你还没有这样的根组件，因为应用程序仍然作为 AngularJS 应用程序进行管理。 创建一个包含以下 \n<code>AppComponent</code> 类的新 \n<code>app.component.ts</code> 文件：</p>\n<code-example path=\"upgrade-phonecat-3-final/app/app.component.ts\" title=\"app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'phonecat-app',\n  template: '&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;'\n})\nexport class AppComponent { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1apae0rpvqd5de5pt1g0lzjx6\">它有一个简单的模板，只包含 \n<code>&lt;router-outlet&gt;</code>。此组件只渲染活动路由的内容，没有其他内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3sv0453v293ntz4pgmvn3pbsr\">选择器告诉 Angular 在应用程序启动时将此根组件插入宿主网页上的 \n<code>&lt;phonecat-app&gt;</code> 元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekx0zqvhwwqfxur5lxwzclyzy\">将此 \n<code>&lt;phonecat-app&gt;</code> 元素添加到 \n<code>index.html</code> 中。它替换了旧的 AngularJS \n<code>ng-view</code> 指令：</p>\n<code-example path=\"upgrade-phonecat-3-final/index.html\" region=\"appcomponent\" title=\"index.html (body)\" linenums=\"false\">\n&lt;body&gt;\n  &lt;phonecat-app&gt;&lt;/phonecat-app&gt;\n&lt;/body&gt;\n\n</code-example>\n<h4 id=\"create-the-routing-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dhtn2vvbhja2vzgccu18a8da\"><i class=\"material-icons\">link</i>创建 \n<em>路由模块</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqfwys94w8xcbayqcmrzzg1wi\">路由器需要配置，无论是 AngularJS、Angular 还是其他任何路由器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80s8eafo9wr3xc9e3xtqb11rz\">Angular 路由器配置的详细信息最好留给 \n<a href=\"guide/router\">路由文档</a>，它建议你创建一个专门用于路由配置的 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>（称为 \n<em>路由模块</em>）。</p>\n<code-example path=\"upgrade-phonecat-3-final/app/app-routing.module.ts\" title=\"app/app-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\nimport { <a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a>, <a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a>, <a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a> } from '@angular/common';\n\nimport { PhoneDetailComponent } from './phone-detail/phone-detail.component';\nimport { PhoneListComponent }   from './phone-list/phone-list.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: 'phones', pathMatch: 'full' },\n  { path: 'phones',          component: PhoneListComponent },\n  { path: 'phones/:phoneId', component: PhoneDetailComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ],\n  providers: [\n    { provide: <a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a>, useValue: '!' },\n    { provide: <a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a>, useClass: <a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a> },\n  ]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cns3ps0whgtlicddgc1adi6\">此模块定义了一个 \n<code>routes</code> 对象，其中包含两个指向两个电话组件的路由，以及一个用于空路径的默认路由。它将 \n<code>routes</code> 传递给 \n<code>RouterModule.forRoot</code> 方法，该方法完成其余工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3g6cpqu2d40fna7u15klubcws\">一些额外的提供者使用“哈希”URL（例如 \n<code>#!/phones</code>）启用路由，而不是默认的“推送状态”策略。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5p1smg09jhj39n96zw0by20tk\">现在更新 \n<code>AppModule</code> 以导入此 \n<code>AppRoutingModule</code>，并声明根 \n<code>AppComponent</code> 作为引导组件。这告诉 Angular 它应该使用 \n<em>根</em> \n<code>AppComponent</code> 引导应用程序，并将它的视图插入宿主网页。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37no22ji3vdr5w678lwdyg4a\">你还要从 \n<code>app.module.ts</code> 中的 \n<code>ngDoBootstrap()</code> 中删除 AngularJS 模块的引导，以及 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 导入。</p>\n<code-example path=\"upgrade-phonecat-3-final/app/app.module.ts\" title=\"app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a> } from '@angular/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent }     from './app.component';\nimport { CheckmarkPipe }    from './core/checkmark/checkmark.pipe';\nimport { Phone }            from './core/phone/phone.service';\nimport { PhoneDetailComponent } from './phone-detail/phone-detail.component';\nimport { PhoneListComponent }   from './phone-list/phone-list.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    PhoneListComponent,\n    CheckmarkPipe,\n    PhoneDetailComponent\n  ],\n  providers: [\n    Phone\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z5i9vp6ogecrls139kaatvq8\">由于你直接路由到 \n<code>PhoneListComponent</code> 和 \n<code>PhoneDetailComponent</code>，而不是使用带有 \n<code>&lt;phone-list&gt;</code> 或 \n<code>&lt;phone-detail&gt;</code> 标签的路由模板，因此你也可以删除它们的 Angular 选择器。</p>\n<h4 id=\"generate-links-for-each-phone\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5khpmh2kixb29568yuz4vzmgo\"><i class=\"material-icons\">link</i>为每个电话生成链接</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3c22trilneygfwd22lo5kun0\">你不再需要在电话列表中硬编码到电话详细信息的链接。你可以为每个电话的 \n<code>id</code> 生成数据绑定到 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令，并让该指令构造到 \n<code>PhoneDetailComponent</code> 的适当 URL：</p>\n<code-example path=\"upgrade-phonecat-3-final/app/phone-list/phone-list.template.html\" region=\"list\" title=\"app/phone-list/phone-list.template.html (list with links)\" linenums=\"false\">\n&lt;ul class=\"phones\"&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let phone of getPhones()\"\n      class=\"thumbnail phone-list-item\"&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/phones', phone.id]\" class=\"thumb\"&gt;\n      &lt;img [src]=\"phone.imageUrl\" [alt]=\"phone.name\" /&gt;\n    &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/phones', phone.id]\" class=\"name\"&gt;{{phone.name}}&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efp7srucyn1zfkt89uizerdlv\">有关详细信息，请参阅 \n<a href=\"guide/router\">路由</a> 页面。</p>\n</div><br>\n<h4 id=\"use-route-parameters\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a74h5g517am5ijlrhaeylo9ll\"><i class=\"material-icons\">link</i>使用路由参数</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddm96lu74vq2tj5uiir3r6dr\">Angular 路由器以不同的方式传递路由参数。更正 \n<code>PhoneDetail</code> 组件构造函数以期望注入的 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 对象。从 \n<code>ActivatedRoute.snapshot.params</code> 中提取 \n<code>phoneId</code>，并像以前一样获取电话数据：</p>\n<code-example path=\"upgrade-phonecat-3-final/app/phone-detail/phone-detail.component.ts\" title=\"app/phone-detail/phone-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }      from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'phone-detail',\n  templateUrl: './phone-detail.template.html'\n})\nexport class PhoneDetailComponent {\n  phone: PhoneData;\n  mainImageUrl: string;\n\n  constructor(activatedRoute: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, phone: Phone) {\n    phone.get(activatedRoute.snapshot.paramMap.get('phoneId'))\n      .subscribe((p: PhoneData) =&gt; {\n        this.phone = p;\n        this.setImage(p.images[0]);\n      });\n  }\n\n  setImage(imageUrl: string) {\n    this.mainImageUrl = imageUrl;\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bylv6mboeefk0bwumnfndvfjy\">你现在正在运行一个纯 Angular 应用程序！</p>\n<h3 id=\"say-goodbye-to-angularjs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jk30yicn3yf3ylvkhjl7qzr7\"><i class=\"material-icons\">link</i>告别 AngularJS</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45jrx48islwv8p35knuw22u6h\">现在是时候摘掉训练轮，让应用程序开始它作为纯净、闪亮的 Angular 应用程序的新生活。剩下的任务都与删除代码有关——当然，这是每个程序员最喜欢的任务！</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbiawdx63wgvzvvpys2kzj1jx\">应用程序仍然作为混合应用程序引导。现在不再需要这样做。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87sqohtt0erx6k0g4vpdu2335\">将应用程序的引导方法从 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 切换到 Angular 方式。</p>\n<code-example path=\"upgrade-phonecat-3-final/app/main.ts\" title=\"main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fgac06365a8lebq1lhrag5i1\">如果你还没有，请从 \n<code>app.module.ts</code> 中删除所有对 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 的引用，以及 AngularJS 服务的任何 \n<a href=\"guide/upgrade#making-angularjs-dependencies-injectable-to-angular\">工厂提供者</a>，以及 \n<code>app/ajs-upgraded-providers.ts</code> 文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7k7we9vcuvniq5vhzzzuhc4tf\">还要删除你找到的任何 \n<code><a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>()</code> 或 \n<code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>()</code>，以及相关的 AngularJS 工厂或指令声明。由于你不再有降级组件，因此你不再在 \n<code>entryComponents</code> 中列出它们。</p>\n<code-example path=\"upgrade-phonecat-3-final/app/app.module.ts\" title=\"app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a> } from '@angular/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent }     from './app.component';\nimport { CheckmarkPipe }    from './core/checkmark/checkmark.pipe';\nimport { Phone }            from './core/phone/phone.service';\nimport { PhoneDetailComponent } from './phone-detail/phone-detail.component';\nimport { PhoneListComponent }   from './phone-list/phone-list.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    PhoneListComponent,\n    CheckmarkPipe,\n    PhoneDetailComponent\n  ],\n  providers: [\n    Phone\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clunkqhwkg09mnh7vn6q4bk9c\">你也可以完全删除以下文件。它们是 AngularJS 模块配置文件，在 Angular 中不需要：</p>\n<ul>\n<li><code>app/app.module.ajs.ts</code></li>\n<li><code>app/app.config.ts</code></li>\n<li><code>app/core/core.module.ts</code></li>\n<li><code>app/core/phone/phone.module.ts</code></li>\n<li><code>app/phone-detail/phone-detail.module.ts</code></li>\n<li><code>app/phone-list/phone-list.module.ts</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"n123gfdrsnjlmq99qh3wet9q\">AngularJS 的外部类型定义也可以卸载。你仍然需要的只是 Jasmine 和 Angular 腻子脚本。\n<code>@angular/upgrade</code> 包及其在 \n<code>systemjs.config.js</code> 中的映射也可以删除。</p>\n<code-example format=\"\">\n  npm uninstall @angular/upgrade --save\n  npm uninstall @types/angular @types/angular-animate @types/angular-cookies @types/angular-mocks @types/angular-resource @types/angular-route @types/angular-sanitize --save-dev\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8t39g6gvnf3h18sbdch6eek8q\">最后，从 \n<code>index.html</code> 中删除所有对 AngularJS 脚本和 jQuery 的引用。完成后，它应该如下所示：</p>\n<code-example path=\"upgrade-phonecat-3-final/index.html\" region=\"full\" title=\"index.html\">\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;base href=\"/app/\"&gt;\n    &lt;title&gt;Google Phone Gallery&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"app.css\" /&gt;\n\n    &lt;script src=\"/node_modules/core-js/client/shim.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/node_modules/zone.js/dist/zone.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/node_modules/systemjs/dist/system.src.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/systemjs.config.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      System.import('/app');\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;phonecat-app&gt;&lt;/phonecat-app&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zb7camcj5vi94zri419xon7b\">这是你最后一次看到 AngularJS！它为我们服务得很好，但现在是时候说再见了。</p>\n<h2 id=\"appendix-upgrading-phonecat-tests\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93h9q1ecby8g0mt62fnrvqz7b\"><i class=\"material-icons\">link</i>附录：升级 PhoneCat 测试</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92tf1o4voqunmprpi81ff9mcg\">测试不仅可以通过升级过程保留，而且还可以用作确保应用程序在升级过程中不会中断的宝贵安全措施。E2E 测试对于此目的特别有用。</p>\n<h3 id=\"e2e-tests\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bycajx2kfk5kvivpigw6ictqp\"><i class=\"material-icons\">link</i>E2E 测试</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5h6dgsy6tmi8o1fdz1o6xfxe9\">PhoneCat 项目中既有 E2E Protractor 测试，也有一些 Karma 单元测试。在这两者中，E2E 测试更容易处理：根据定义，E2E 测试通过与应用程序放在屏幕上的各种 UI 元素交互，从 \n<em>外部</em> 访问应用程序。E2E 测试实际上并不关心应用程序组件的内部结构。这也意味着，尽管你在升级过程中对项目进行了相当大的修改，但 E2E 测试套件应该只需进行少量修改就能继续通过。你没有改变应用程序从用户角度来看的行为方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bh20fqtqnm05nb45s97d2xk74\">在 TypeScript 转换期间，无需做任何事情来保持 E2E 测试正常工作。但是，当你将引导更改为混合应用程序的引导时，你必须进行一些更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"oxeu0s21gyrnujxx70h5b5fj\">更新 \n<code>protractor-conf.js</code> 以与混合应用程序同步：</p>\n<code-example format=\"\">\n  ng12Hybrid: true\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wyh2hj5ygusglu751dmhb3r2\">当你开始将组件及其模板升级到 Angular 时，你将进行更多更改，因为 E2E 测试具有特定于 AngularJS 的匹配器。对于 PhoneCat，你需要进行以下更改才能使事情与 Angular 一起工作：</p>\n<table>\n  <tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"biao6xxp1le127g5i8u85s5rx\">以前的代码</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95t9abngmhs9xcy3vaxpdamfd\">新代码</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hynksj22lrzfg5zp3vy6nwem\">说明</th>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>by.repeater('phone in $ctrl.phones').column('phone.name')</code></p>\n    </td>\n    <td>\n<p>      <code>by.css('.phones .name')</code></p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0tdxnxsoot67m3d0ueeeq1se\">重复匹配器依赖于 AngularJS \n<code>ng-repeat</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>by.repeater('phone in $ctrl.phones')</code></p>\n    </td>\n    <td>\n<p>      <code>by.css('.phones li')</code></p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0tdxnxsoot67m3d0ueeeq1se\">重复匹配器依赖于 AngularJS \n<code>ng-repeat</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>by.model('$ctrl.query')</code></p>\n    </td>\n    <td>\n<p>      <code>by.css('input')</code></p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"618hsmcqycf4i4j0v1zlmflcl\">模型匹配器依赖于 AngularJS \n<code>ng-model</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>by.model('$ctrl.orderProp')</code></p>\n    </td>\n    <td>\n<p>      <code>by.css('select')</code></p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"618hsmcqycf4i4j0v1zlmflcl\">模型匹配器依赖于 AngularJS \n<code>ng-model</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>by.binding('$ctrl.phone.name')</code></p>\n    </td>\n    <td>\n<p>      <code>by.css('h1')</code></p>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5n2ga98rc4nly4rk6l9toy5gu\">绑定匹配器依赖于 AngularJS 数据绑定</p>\n    </td>\n  </tr>\n</tbody></table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61lvvgpkjju6b8vhq5p4jh2f6\">当引导方法从 \n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 切换到纯 Angular 时，AngularJS 将完全从页面上消失。此时，你需要告诉 Protractor 它不应该再查找 AngularJS 应用程序，而应该从页面中查找 \n<em>Angular 应用程序</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bznksfrw69zgjmv4xefjw7l0q\">在 \n<code>protractor-conf.js</code> 中用以下内容替换之前添加的 \n<code>ng12Hybrid</code>：</p>\n<code-example format=\"\">\n  useAllAngular2AppRoots: true,\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52ud24vqe726og0fwvlq4ta12\">此外，PhoneCat 测试代码中还有一些 Protractor API 调用在幕后使用 AngularJS \n<code>$location</code> 服务。由于该服务在升级后不再存在，因此请用使用 WebDriver 的通用 URL API 的调用替换这些调用。第一个是重定向规范：</p>\n<code-example path=\"upgrade-phonecat-3-final/e2e-spec.ts\" region=\"redirect\" title=\"e2e-tests/scenarios.ts\">\nit('should redirect `index.html` to `index.html#!/phones', function() {\n  browser.get('index.html');\n  browser.waitForAngular();\n  browser.getCurrentUrl().then(function(url: string) {\n    expect(url.endsWith('/phones')).toBe(true);\n  });\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nynk4xe9rh4py7ojuw68k6x\">第二个是电话链接规范：</p>\n<code-example path=\"upgrade-phonecat-3-final/e2e-spec.ts\" region=\"links\" title=\"e2e-tests/scenarios.ts\">\nit('should render phone specific links', function() {\n  let <a href=\"api/animations/query\" class=\"code-anchor\">query</a> = element(by.css('input'));\n  query.sendKeys('nexus');\n  element.all(by.css('.phones li <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>')).first().click();\n  browser.getCurrentUrl().then(function(url: string) {\n    expect(url.endsWith('/phones/nexus-s')).toBe(true);\n  });\n});\n\n</code-example>\n<h3 id=\"unit-tests\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cphicttr9x4gr1yr1e8yq440r\"><i class=\"material-icons\">link</i>单元测试</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1abad2upbh2fmr9u7qirk911c\">另一方面，对于单元测试，需要进行更多转换工作。实际上，它们需要与生产代码一起 \n<em>升级</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o2bztvjrlaqxiefizdf7a833\">在 TypeScript 转换期间，严格来说没有必要进行任何更改。但是，将单元测试代码也转换为 TypeScript 可能是一个好主意。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vntfxd30n4lg84cvdy9pszdu\">例如，在电话详细信息组件规范中，你可以使用 ES2015 功能（如箭头函数和块级变量），并从你正在使用的 AngularJS 服务的类型定义中获益：</p>\n<code-example path=\"upgrade-phonecat-1-typescript/app/phone-detail/phone-detail.component.spec.ts\" title=\"app/phone-detail/phone-detail.component.spec.ts\">\ndescribe('phoneDetail', () =&gt; {\n\n  // Load the module that contains the `phoneDetail` component before each test\n  beforeEach(angular.mock.module('phoneDetail'));\n\n  // Test the controller\n  describe('PhoneDetailController', () =&gt; {\n    let $httpBackend: angular.IHttpBackendService;\n    let ctrl: any;\n    let xyzPhoneData = {\n      name: 'phone xyz',\n      images: ['image/url1.png', 'image/url2.png']\n    };\n\n    beforeEach(<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a>(($componentController: any,\n                       _$httpBackend_: angular.IHttpBackendService,\n                       $routeParams: angular.route.IRouteParamsService) =&gt; {\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET('phones/xyz.json').respond(xyzPhoneData);\n\n      $routeParams['phoneId'] = 'xyz';\n\n      ctrl = $componentController('phoneDetail');\n    }));\n\n    it('should fetch the phone details', () =&gt; {\n      jasmine.addCustomEqualityTester(angular.equals);\n\n      expect(ctrl.phone).toEqual({});\n\n      $httpBackend.flush();\n      expect(ctrl.phone).toEqual(xyzPhoneData);\n    });\n\n  });\n\n});\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xvkbrw4j5hfm7rv6fjvi57po\">一旦你开始升级过程并引入 SystemJS，Karma 就需要进行配置更改。你需要让 SystemJS 加载所有新的 Angular 代码，这可以通过以下类型的 shim 文件来完成：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/karma-test-shim.1.js\" title=\"karma-test-shim.js\">\n// /*global jasmine, __karma__, window*/\nError.stackTraceLimit = 0; // \"No stacktrace\"\" is usually best for app testing.\n\n// Uncomment to get full stacktrace output. Sometimes helpful, usually not.\n// Error.stackTraceLimit = Infinity; //\n\njasmine.DEFAULT_TIMEOUT_INTERVAL = 1000;\n\nvar builtPath = '/base/app/';\n\n__karma__.loaded = function () { };\n\nfunction isJsFile(path) {\n  return path.slice(-3) == '.js';\n}\n\nfunction isSpecFile(path) {\n  return /\\.spec\\.(.*\\.)?js$/.test(path);\n}\n\nfunction isBuiltFile(path) {\n  return isJsFile(path) &amp;&amp; (path.substr(0, builtPath.length) == builtPath);\n}\n\nvar allSpecFiles = Object.keys(window.__karma__.files)\n  .filter(isSpecFile)\n  .filter(isBuiltFile);\n\nSystem.config({\n  baseURL: '/base',\n  // Extend usual application package list with test folder\n  packages: { 'testing': { main: 'index.js', defaultExtension: 'js' } },\n\n  // Assume npm: is set in `paths` in systemjs.config\n  // Map the angular testing umd bundles\n  map: {\n    '@angular/core/testing': 'npm:@angular/core/bundles/core-testing.umd.js',\n    '@angular/common/testing': 'npm:@angular/common/bundles/common-testing.umd.js',\n    '@angular/common/http/testing': 'npm:@angular/common/bundles/common-http-testing.umd.js',\n    '@angular/compiler/testing': 'npm:@angular/compiler/bundles/compiler-testing.umd.js',\n    '@angular/platform-browser/testing': 'npm:@angular/platform-browser/bundles/platform-browser-testing.umd.js',\n    '@angular/platform-browser-dynamic/testing': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic-testing.umd.js',\n    '@angular/http/testing': 'npm:@angular/http/bundles/http-testing.umd.js',\n    '@angular/router/testing': 'npm:@angular/router/bundles/router-testing.umd.js',\n    '@angular/forms/testing': 'npm:@angular/forms/bundles/forms-testing.umd.js',\n  },\n});\n\nSystem.import('systemjs.config.js')\n  .then(importSystemJsExtras)\n  .then(initTestBed)\n  .then(initTesting);\n\n/** <a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a> SystemJS configuration extras. Keep going w/o it */\nfunction importSystemJsExtras(){\n  return System.import('systemjs.config.extras.js')\n  .catch(function(reason) {\n    console.log(\n      'Warning: System.import could not load the optional \"systemjs.config.extras.js\". Did you omit it by accident? Continuing without it.'\n    );\n    console.log(reason);\n  });\n}\n\nfunction initTestBed(){\n  return Promise.all([\n    System.import('@angular/core/testing'),\n    System.import('@angular/platform-browser-dynamic/testing')\n  ])\n\n  .then(function (providers) {\n    var coreTesting    = providers[0];\n    var browserTesting = providers[1];\n\n    coreTesting.TestBed.initTestEnvironment(\n      browserTesting.BrowserDynamicTestingModule,\n      browserTesting.platformBrowserDynamicTesting());\n  })\n}\n\n// Import all spec files and start karma\nfunction initTesting () {\n  return Promise.all(\n    allSpecFiles.map(function (moduleName) {\n      return System.import(moduleName);\n    })\n  )\n  .then(__karma__.start, __karma__.error);\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5866g67o5iehb1v189swpkphf\">shim 首先加载 SystemJS 配置，然后加载 Angular 的测试支持库，最后加载应用程序的规范文件本身。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p93ua8xx2sh1jd6hqnflvl5s\">然后，应该更改 Karma 配置，使其使用应用程序根目录作为基目录，而不是 \n<code>app</code>。</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/karma.conf.ajs.js\" region=\"basepath\" title=\"karma.conf.js\">\nbasePath: './',\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21c2dwz76hlx7czyt7hcqqd93\">完成后，你可以加载 SystemJS 和其他依赖项，还可以切换加载应用程序文件的配置，使其\n<em>不</em>被 Karma 包含到页面中。你将让 shim 和 SystemJS 加载它们。</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/karma.conf.ajs.js\" region=\"files\" title=\"karma.conf.js\">\n// System.js for module loading\n'node_modules/systemjs/dist/system.src.js',\n\n// Polyfills\n'node_modules/core-js/client/shim.js',\n\n// zone.js\n'node_modules/zone.js/dist/zone.js',\n'node_modules/zone.js/dist/long-stack-trace-zone.js',\n'node_modules/zone.js/dist/proxy.js',\n'node_modules/zone.js/dist/sync-test.js',\n'node_modules/zone.js/dist/jasmine-patch.js',\n'node_modules/zone.js/dist/async-test.js',\n'node_modules/zone.js/dist/fake-async-test.js',\n\n// RxJs.\n{ <a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: 'node_modules/rxjs/**/*.js', included: false, watched: false },\n{ <a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: 'node_modules/rxjs/**/*.js.map', included: false, watched: false },\n\n// Angular itself and the testing library\n{<a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: 'node_modules/@angular/**/*.js', included: false, watched: false},\n{<a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: 'node_modules/@angular/**/*.js.map', included: false, watched: false},\n\n{<a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: 'systemjs.config.js', included: false, watched: false},\n'karma-test-shim.js',\n\n{<a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: 'app/**/*.module.js', included: false, watched: true},\n{<a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: 'app/*!(.module|.spec).js', included: false, watched: true},\n{<a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: 'app/!(bower_components)/**/*!(.module|.spec).js', included: false, watched: true},\n{<a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: 'app/**/*.spec.js', included: false, watched: true},\n\n{<a href=\"api/forms/PatternValidator\" class=\"code-anchor\">pattern</a>: '**/*.html', included: false, watched: true},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nrrdgpbk13exxlr5v6hksgrx\">由于 Angular 组件的 HTML 模板也将被加载，因此你必须帮助 Karma 一下，以便它可以将它们路由到正确的路径：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/karma.conf.ajs.js\" region=\"html\" title=\"karma.conf.js\">\n// proxied base paths for loading assets\nproxies: {\n  // required for component assets fetched by Angular's compiler\n  \"/phone-detail\": '/base/app/phone-detail',\n  \"/phone-list\": '/base/app/phone-list'\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2itr1ac0cormksz91e6aqfvyg\">当它们的生产对应项被切换时，单元测试文件本身也需要切换到 Angular。复选标记管道的规范可能是最直接的，因为管道没有依赖项：</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/core/checkmark/checkmark.pipe.spec.ts\" title=\"app/core/checkmark/checkmark.pipe.spec.ts\">\nimport { CheckmarkPipe } from './checkmark.pipe';\n\ndescribe('CheckmarkPipe', function() {\n\n  it('should convert boolean values to unicode checkmark or cross', function () {\n    const checkmarkPipe = new CheckmarkPipe();\n    expect(checkmarkPipe.transform(true)).toBe('\\u2713');\n    expect(checkmarkPipe.transform(false)).toBe('\\u2718');\n  });\n});\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k27lmxqa1l9foiungoy2dwge\">电话服务的单元测试稍微复杂一些。你需要从模拟的 AngularJS \n<code>$httpBackend</code> 切换到模拟的 Angular Http 后端。</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/core/phone/phone.service.spec.ts\" title=\"app/core/phone/phone.service.spec.ts\">\nimport { <a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a>, <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\nimport {\n  <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>,\n  <a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>,\n  <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>,\n  <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>\n} from '@angular/http';\nimport { <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>, <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a> } from '@angular/http/testing';\nimport { Phone, PhoneData } from './phone.service';\n\ndescribe('Phone', function() {\n  let phone: Phone;\n  let phonesData: PhoneData[] = [\n    {name: 'Phone X', snippet: '', images: []},\n    {name: 'Phone Y', snippet: '', images: []},\n    {name: 'Phone Z', snippet: '', images: []}\n  ];\n  let mockBackend: <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>;\n\n  beforeEach(() =&gt; {\n    TestBed.configureTestingModule({\n      providers: [\n        Phone,\n        <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>,\n        <a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>,\n        { provide: <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>,\n          useFactory: (backend: <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>, options: <a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>) =&gt; new <a href=\"api/http/Http\" class=\"code-anchor\">Http</a>(backend, options),\n          deps: [<a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>, <a href=\"api/http/BaseRequestOptions\" class=\"code-anchor\">BaseRequestOptions</a>]\n        }\n      ]\n    });\n  });\n\n  beforeEach(<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a>([<a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>, Phone], (_mockBackend_: <a href=\"api/http/testing/MockBackend\" class=\"code-anchor\">MockBackend</a>, _phone_: Phone) =&gt; {\n    mockBackend = _mockBackend_;\n    phone = _phone_;\n  }));\n\n  it('should fetch the phones data from `/phones/phones.json`', (done: () =&gt; void) =&gt; {\n    mockBackend.connections.subscribe((conn: <a href=\"api/http/testing/MockConnection\" class=\"code-anchor\">MockConnection</a>) =&gt; {\n      conn.mockRespond(new <a href=\"api/http/Response\" class=\"code-anchor\">Response</a>(new <a href=\"api/http/ResponseOptions\" class=\"code-anchor\">ResponseOptions</a>({body: JSON.stringify(phonesData)})));\n    });\n    phone.query().subscribe(result =&gt; {\n      expect(result).toEqual(phonesData);\n      done();\n    });\n  });\n\n});\n\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vad1wqjm8u6s9nz5fatl4hrt\">对于组件规范，你可以模拟 \n<code>Phone</code> 服务本身，并让它提供预先准备好的电话数据。你使用 Angular 的组件单元测试 API 来测试这两个组件。</p>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-detail/phone-detail.component.spec.ts\" title=\"app/phone-detail/phone-detail.component.spec.ts\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\n\nimport { PhoneDetailComponent&nbsp;} from './phone-detail.component';\nimport { Phone, PhoneData } from '../core/phone/phone.service';\nimport { CheckmarkPipe } from '../core/checkmark/checkmark.pipe';\n\nfunction xyzPhoneData(): PhoneData {\n  return {\n    name: 'phone xyz',\n    snippet: '',\n    images: ['image/url1.png', 'image/url2.png']\n  };\n}\n\nclass MockPhone {\n  get(id: string): Observable&lt;PhoneData&gt; {\n    return Observable.of(xyzPhoneData());\n  }\n}\n\n\nclass ActivatedRouteMock {\n  constructor(public snapshot: any) {}\n}\n\n\ndescribe('PhoneDetailComponent', () =&gt; {\n\n\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() =&gt; {\n    TestBed.configureTestingModule({\n      declarations: [ CheckmarkPipe, PhoneDetailComponent ],\n      providers: [\n        { provide: Phone, useClass: MockPhone },\n        { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: new ActivatedRouteMock({ params: { 'phoneId': 1 } }) }\n      ]\n    })\n    .compileComponents();\n  }));\n\n  it('should fetch phone detail', () =&gt; {\n    const fixture = TestBed.createComponent(PhoneDetailComponent);\n    fixture.detectChanges();\n    let compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('h1').textContent).toContain(xyzPhoneData().name);\n  });\n\n});\n\n\n</code-example>\n<code-example path=\"upgrade-phonecat-2-hybrid/app/phone-list/phone-list.component.spec.ts\" title=\"app/phone-list/phone-list.component.spec.ts\">\nimport { <a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>, <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\nimport { <a href=\"api/common/testing/SpyLocation\" class=\"code-anchor\">SpyLocation</a> } from '@angular/common/testing';\n\nimport { PhoneListComponent } from './phone-list.component';\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n\nclass ActivatedRouteMock {\n  constructor(public snapshot: any) {}\n}\n\nclass MockPhone {\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(): Observable&lt;PhoneData[]&gt; {\n    return Observable.of([\n      {name: 'Nexus S', snippet: '', images: []},\n      {name: 'Motorola DROID', snippet: '', images: []}\n    ]);\n  }\n}\n\nlet fixture: <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&lt;PhoneListComponent&gt;;\n\ndescribe('PhoneList', () =&gt; {\n\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() =&gt; {\n    TestBed.configureTestingModule({\n      declarations: [ PhoneListComponent ],\n      providers: [\n        { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: new ActivatedRouteMock({ params: { 'phoneId': 1 } }) },\n        { provide: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>, useClass: <a href=\"api/common/testing/SpyLocation\" class=\"code-anchor\">SpyLocation</a> },\n        { provide: Phone, useClass: MockPhone },\n      ],\n      schemas: [ <a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a> ]\n    })\n    .compileComponents();\n  }));\n\n  beforeEach(() =&gt; {\n    fixture = TestBed.createComponent(PhoneListComponent);\n  });\n\n  it('should create \"phones\" model with 2 phones fetched from xhr', () =&gt; {\n    fixture.detectChanges();\n    let compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelectorAll('.phone-list-item').length).toBe(2);\n    expect(\n      compiled.querySelector('.phone-list-item:nth-child(1)').textContent\n    ).toContain('Motorola DROID');\n    expect(\n      compiled.querySelector('.phone-list-item:nth-child(2)').textContent\n    ).toContain('Nexus S');\n  });\n\n  xit('should set the default value of orderProp model', () =&gt; {\n    fixture.detectChanges();\n    let compiled = fixture.debugElement.nativeElement;\n    expect(\n      compiled.querySelector('select <a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>:last-child').selected\n    ).toBe(true);\n  });\n\n});\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dav2nvxx5suvc6hedky8zf121\">最后，当你切换到 Angular 路由器时，重新审视这两个组件测试。对于详情组件，提供 Angular \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 对象的模拟，而不是使用 AngularJS \n<code>$routeParams</code>。</p>\n<code-example path=\"upgrade-phonecat-3-final/app/phone-detail/phone-detail.component.spec.ts\" region=\"activatedroute\" title=\"app/phone-detail/phone-detail.component.spec.ts\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n/* . . . */\n\nclass ActivatedRouteMock {\n  constructor(public snapshot: any) {}\n}\n\n/* . . . */\n\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() =&gt; {\n    TestBed.configureTestingModule({\n      declarations: [ CheckmarkPipe, PhoneDetailComponent ],\n      providers: [\n        { provide: Phone, useClass: MockPhone },\n        { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: new ActivatedRouteMock({ params: { 'phoneId': 1 } }) }\n      ]\n    })\n    .compileComponents();\n  }));\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xmyd8wcehduak0vdfetddyod\">对于电话列表组件，对路由器进行一些调整，使 \n<code>RouteLink</code> 指令能够正常工作。</p>\n<code-example path=\"upgrade-phonecat-3-final/app/phone-list/phone-list.component.spec.ts\" region=\"routestuff\" title=\"app/phone-list/phone-list.component.spec.ts\">\nimport { <a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>, <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\nimport { <a href=\"api/common/testing/SpyLocation\" class=\"code-anchor\">SpyLocation</a> } from '@angular/common/testing';\n\nimport { PhoneListComponent } from './phone-list.component';\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n\n/* . . . */\n\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() =&gt; {\n    TestBed.configureTestingModule({\n      declarations: [ PhoneListComponent ],\n      providers: [\n        { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: new ActivatedRouteMock({ params: { 'phoneId': 1 } }) },\n        { provide: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>, useClass: <a href=\"api/common/testing/SpyLocation\" class=\"code-anchor\">SpyLocation</a> },\n        { provide: Phone, useClass: MockPhone },\n      ],\n      schemas: [ <a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a> ]\n    })\n    .compileComponents();\n  }));\n\n  beforeEach(() =&gt; {\n    fixture = TestBed.createComponent(PhoneListComponent);\n  });\n\n</code-example>\n\n</div>\n<!-- links to this doc:\n - guide/change-log\n-->\n<!-- links from this doc:\n - api/animations/query\n - api/common/APP_BASE_HREF\n - api/common/HashLocationStrategy\n - api/common/Location\n - api/common/LocationStrategy\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/Time\n - api/common/testing/SpyLocation\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/Injectable\n - api/core/Injector\n - api/core/Input\n - api/core/NO_ERRORS_SCHEMA\n - api/core/NgModule\n - api/core/NgZone\n - api/core/OnChanges\n - api/core/Optional\n - api/core/Output\n - api/core/Pipe\n - api/core/PipeTransform\n - api/core/SimpleChanges\n - api/core/Type\n - api/core/Version\n - api/core/testing/ComponentFixture\n - api/core/testing/TestBed\n - api/core/testing/async\n - api/core/testing/inject\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/forms/NgSelectOption\n - api/forms/PatternValidator\n - api/http/BaseRequestOptions\n - api/http/Http\n - api/http/HttpModule\n - api/http/Response\n - api/http/ResponseOptions\n - api/http/testing/MockBackend\n - api/http/testing/MockConnection\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/platform-browser/platformBrowser\n - api/router/ActivatedRoute\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/Routes\n - api/upgrade/static\n - api/upgrade/static/UpgradeComponent\n - api/upgrade/static/UpgradeModule\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - guide/animations\n - guide/aot-compiler\n - guide/dependency-injection\n - guide/dependency-injection#factory-providers\n - guide/hierarchical-dependency-injection\n - guide/lifecycle-hooks\n - guide/ngmodules\n - guide/router\n - guide/setup\n - guide/template-syntax#directives\n - guide/typescript-configuration\n - guide/upgrade#add-the-angular-router\n - guide/upgrade#add-the-checkmarkpipe\n - guide/upgrade#adding-the-angular-router-and-bootstrap\n - guide/upgrade#aot-compile-the-hybrid-app\n - guide/upgrade#appendix-upgrading-phonecat-tests\n - guide/upgrade#bootstrapping-a-hybrid-phonecat\n - guide/upgrade#bootstrapping-hybrid-applications\n - guide/upgrade#change-detection\n - guide/upgrade#components-and-the-dom\n - guide/upgrade#create-the-routing-module\n - guide/upgrade#creating-the-appmodule\n - guide/upgrade#dependency-injection\n - guide/upgrade#e2e-tests\n - guide/upgrade#follow-the-angular-styleguide\n - guide/upgrade#follow-the-angularjs-style-guide\n - guide/upgrade#generate-links-for-each-phone\n - guide/upgrade#how-ngupgrade-works\n - guide/upgrade#installing-angular\n - guide/upgrade#making-angular-dependencies-injectable-to-angularjs\n - guide/upgrade#making-angularjs-dependencies-injectable-to-angular\n - guide/upgrade#migrating-to-typescript\n - guide/upgrade#no-angular-filter-or-orderby-filters\n - guide/upgrade#phonecat-upgrade-tutorial\n - guide/upgrade#preparation\n - guide/upgrade#projecting-angularjs-content-into-angular-components\n - guide/upgrade#say-goodbye-to-angularjs\n - guide/upgrade#switching-to-typescript\n - guide/upgrade#transcluding-angular-content-into-angularjs-component-directives\n - guide/upgrade#unit-tests\n - guide/upgrade#upgrading-components\n - guide/upgrade#upgrading-from-angularjs\n - guide/upgrade#upgrading-the-phone-service\n - guide/upgrade#upgrading-with-ngupgrade\n - guide/upgrade#use-route-parameters\n - guide/upgrade#using-a-module-loader\n - guide/upgrade#using-ahead-of-time-compilation-with-hybrid-apps\n - guide/upgrade#using-angular-components-from-angularjs-code\n - guide/upgrade#using-angularjs-component-directives-from-angular-code\n - guide/upgrade#using-component-directives\n - guide/upgrade#using-upgrademodule-with-angular-ngmodules\n - guide/upgrade#why-declare-angular-as-angulariangularstatic\n - http://browserify.org/\n - http://webpack.github.io/\n - https://docs.angularjs.org/api/ng/function/angular.bootstrap\n - https://docs.angularjs.org/api/ng/type/angular.Module\n - https://docs.angularjs.org/api/ng/type/angular.Module#component\n - https://docs.angularjs.org/tutorial\n - https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#support-for-umd-module-definitions\n - https://github.com/angular/angular-phonecat\n - https://github.com/angular/quickstart\n - https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md\n - https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure\n - https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity\n - https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests\n - https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility\n - https://github.com/systemjs/systemjs\n - https://www.npmjs.com/package/@types/angular\n-->"
}