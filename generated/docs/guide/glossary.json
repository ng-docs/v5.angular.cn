{
  "id" : "guide/glossary",
  "title" : "Angular 词汇表",
  "contents" : "<div class=\"content\">\n<h1 id=\"angular-glossary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85096m25kbazbdnmjeqi6upv5\"><i class=\"material-icons\">link</i>Angular 词汇表</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6woyr30e3m7jytrggfg9si0ko\">Angular 有自己的词汇。大多数 Angular 术语都是常见的英语单词，在 Angular 系统中具有特定的含义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5o29mq3pbz65wir45v8izdi2\">本词汇表列出了最突出的术语，以及一些不太熟悉的术语，它们具有不寻常或出乎意料的定义。</p>\n<p><a href=\"guide/glossary#A\">A</a> <a href=\"guide/glossary#B\">B</a> <a href=\"guide/glossary#C\">C</a> <a href=\"guide/glossary#D\">D</a> <a href=\"guide/glossary#E\">E</a> <a href=\"guide/glossary#F\">F</a> <a href=\"guide/glossary#G\">G</a> <a href=\"guide/glossary#H\">H</a> <a href=\"guide/glossary#I\">I</a>\n<a href=\"guide/glossary#J\">J</a> <a href=\"guide/glossary#K\">K</a> <a href=\"guide/glossary#L\">L</a> <a href=\"guide/glossary#M\">M</a> <a href=\"guide/glossary#N\">N</a> <a href=\"guide/glossary#O\">O</a> <a href=\"guide/glossary#P\">P</a> <a href=\"guide/glossary#Q\">Q</a> <a href=\"guide/glossary#R\">R</a>\n<a href=\"guide/glossary#S\">S</a> <a href=\"guide/glossary#T\">T</a> <a href=\"guide/glossary#U\">U</a> <a href=\"guide/glossary#V\">V</a> <a href=\"guide/glossary#W\">W</a> <a href=\"guide/glossary#X\">X</a> <a href=\"guide/glossary#Y\">Y</a> <a href=\"guide/glossary#Z\">Z</a></p>\n<a id=\"A\"></a>\n<a id=\"aot\"></a>\n<h2 id=\"ahead-of-time-aot-compilation\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"86a6leao0pq5hk3gqyd7aemk7\"><i class=\"material-icons\">link</i>预先（AOT）编译器</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5s33sggvxy36lmyase0i2pozp\">你可以在构建时编译 Angular 应用。通过使用编译器 CLI（\n<code>ngc</code>）编译你的应用，你可以直接引导到模块工厂，这意味着你不需要在 JavaScript 捆绑包中包含 Angular 编译器。预先编译的应用还可以缩短加载时间并提高性能。</p>\n<h2 id=\"annotation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"537kxnejc3pouww9n8aghrmad\"><i class=\"material-icons\">link</i>注解</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b38ptibcvhj16estyjofz64v5\">在实践中，它是 \n<a href=\"guide/glossary#decorator\">装饰器</a> 的同义词。</p>\n<a id=\"attribute-directive\"></a>\n<a id=\"attribute-directives\"></a>\n<h2 id=\"attribute-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdzt47k44s3ld0g2lsx3frsix\"><i class=\"material-icons\">link</i>属性型指令</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55xa82u49ckatijksks4zn78g\">一种 \n<a href=\"guide/glossary#directive\">指令</a>，可以监听和修改其他 HTML 元素、属性、属性和组件的行为。它们通常表示为 HTML 属性，因此得名。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ln91h2bm8hc9146hz7mwgr71\">例如，你可以使用 \n<code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 指令来添加和删除 CSS 类名。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6chncayhchiseudolxghq8sm3\">在 \n<a href=\"guide/attribute-directives\"><em>属性型指令</em></a> 指南中了解它们。</p>\n<a id=\"B\"></a>\n<h2 id=\"barrel\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pmdu7d43zyj3uke28rqww9bj\"><i class=\"material-icons\">link</i>桶</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1csicipxltky3zwhv34sv9npr\">一种将来自多个 ES2015 模块的\n<em>导出</em>\n<em>汇总</em>到一个方便的 ES2015 模块中的方法。桶本身是一个 ES2015 模块文件，它重新导出其他 ES2015 模块的\n<em>选定</em>导出。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7k0suc1hi5vvyx24fmpg8jefb\">例如，假设 \n<code>heroes</code> 文件夹中有三个 ES2015 模块：</p>\n<code-example>\n  // heroes/hero.component.ts\n  export class HeroComponent {}\n\n  // heroes/hero.model.ts\n  export class Hero {}\n\n  // heroes/hero.service.ts\n  export class HeroService {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j2vvq0z2ut6qkaozq4v40zca\">没有桶，消费者需要三个导入语句：</p>\n<code-example>\n  import { HeroComponent } from '../heroes/hero.component.ts';\n  import { Hero }          from '../heroes/hero.model.ts';\n  import { HeroService }   from '../heroes/hero.service.ts';\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aquv15u0fas124q88b4wvxhw3\">你可以向 \n<code>heroes</code> 文件夹添加一个桶（按照惯例称为 \n<code>index</code>），它导出所有这些项：</p>\n<code-example>\n  export * from './hero.model.ts';   // re-export all of its exports\n  export * from './hero.service.ts'; // re-export all of its exports\n  export { HeroComponent } from './hero.component.ts'; // re-export the named thing\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56zhr12xmo4egkmzlwwfxkgff\">现在，消费者可以从桶中导入它需要的内容。</p>\n<code-example>\n  import { Hero, HeroService } from '../heroes'; // index is implied\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqf5ufywwta6wmd2z30qvw33t\">Angular 的 \n<a href=\"guide/glossary#scoped-package\">作用域包</a> 都有一个名为 \n<code>index</code> 的桶。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8i8j1fzwwipdg59tqqtc9nl3b\">你通常可以使用 \n<a href=\"guide/glossary#ngmodule\">NgModules</a> 来实现相同的结果。</p>\n</div>\n<h2 id=\"binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n8e9nzuqb6ukne8lqpchbpc5\"><i class=\"material-icons\">link</i>绑定</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91zj5yqordopg1nipsktkkg6i\">通常指的是 \n<a href=\"guide/glossary#data-binding\">数据绑定</a>，以及将 HTML 对象属性绑定到数据对象属性的行为。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cql3crt05z6piqzhlgbh48kjm\">有时指的是 \n<a href=\"guide/glossary#dependency-injection\">依赖注入</a> 绑定，在“令牌”（也称为“键”）和依赖项 \n<a href=\"guide/glossary#provider\">提供者</a> 之间。</p>\n<h2 id=\"bootstrap\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62o8jtgtf2mdfz17vjpiduudt\"><i class=\"material-icons\">link</i>引导</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eff5b0lgh1kk617ruw8b2dn79\">你可以通过使用应用根 NgModule（\n<code>AppModule</code>）“引导”它来启动 Angular 应用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9t9o21m1v7sv481h1xomj1b3v\">引导会识别应用的顶级“根”\n<a href=\"guide/glossary#component\">组件</a>，它是为应用加载的第一个组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jq27ic75m409vew4gojgs0ya\">你可以在同一个 \n<code>index.html</code> 中引导多个应用，每个应用都有自己的顶级根。</p>\n<a id=\"C\"></a>\n<h2 id=\"camelcase\">camelCase</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2kwuewxqjjmppysjatwf0c30\">编写复合词或短语的做法，使每个词或缩写都以大写字母开头，\n<em>除了第一个字母，它为小写</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atik7nn2xo6i9ufcvs49l1usz\">函数、属性和方法名称通常使用 camelCase 命名。例如，\n<code>square</code>、\n<code>firstName</code> 和 \n<code>getHeroes</code>。注意，\n<code>square</code> 是一个使用 camelCase 命名单个单词的示例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1f7akly3jeq1cwxp96yj2j3g\">camelCase 也称为 \n<em>小驼峰命名法</em>，以区别于 \n<em>大驼峰命名法</em> 或 \n<a href=\"guide/glossary#pascalcase\">PascalCase</a>。 在 Angular 文档中，“camelCase” 始终指 \n<em>小驼峰命名法</em>。</p>\n<h2 id=\"cli\">CLI</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6b0zncgscuv83g2q9rchc9kid\">Angular CLI 是一个 \n<code>命令行界面</code> 工具，可以创建项目、添加文件并执行各种持续开发任务，例如测试、打包和部署。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ep9v20rd89smunlozknvkqk93\">在 \n<a href=\"guide/quickstart\">入门指南</a> 中了解更多信息。</p>\n<a id=\"component\"></a>\n<h2 id=\"component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2n8tguxhs6hbmqbwyqfclvff1\"><i class=\"material-icons\">link</i>组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ntckhj994mtgwkkvmlacntrg\">一个 Angular 类，负责向 \n<a href=\"guide/glossary#view\">视图</a> 公开数据，并处理大部分视图的显示和用户交互逻辑。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2nhotj2t2z34u8gkev0b41n3\"><em>组件</em> 是 Angular 系统中最重要的构建块之一。 实际上，它是一个 Angular \n<a href=\"guide/glossary#directive\">指令</a>，并带有一个配套的 \n<a href=\"guide/glossary#template\">模板</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyl371ymepkj7tz3vaffwe8cj\">将 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> \n<a href=\"guide/glossary#decorator\">装饰器</a> 应用于 组件类，从而将必要的组件元数据附加到该类，Angular 需要这些元数据来创建组件实例，并使用其模板将组件渲染为视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wbbxvl7zvicnwh42c9yatyw7\">熟悉“MVC”和“MVVM”模式的人会认识到 组件在“控制器”或“视图模型”中的作用。</p>\n<a id=\"D\"></a>\n<h2 id=\"dash-case\">dash-case</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cogocuctfjyopxe76viyby3md\">将复合词或短语以连字符 (\n<code>-</code>) 分隔的写法。 这种形式也称为 kebab-case。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"thnuoav47egh5n6or47oe9w3\"><a href=\"guide/glossary#directive\">指令</a> 选择器（如 \n<code>my-app</code>）和 文件名根（如 \n<code>hero-list.component.ts</code>）通常 使用 dash-case 命名。</p>\n<h2 id=\"data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dep77znovb7x0wl9uhcyc1rph\"><i class=\"material-icons\">link</i>数据绑定</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0mo7e5y5hdtdscanq9r9h6at\">应用程序将数据值显示给用户，并响应用户 操作（如点击、触摸和按键）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1n4ynm1dajl8nepcryj4taemi\">在数据绑定中，你声明 HTML 小部件和数据源之间的关系，并让框架处理细节。 数据绑定是手动将应用程序数据值推送到 HTML、附加 事件监听器、从屏幕中拉取更改的值以及 更新应用程序数据值的替代方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5iu9qyrtni89ofnqjdec973n9\">Angular 拥有一个丰富的数据绑定框架，其中包含各种数据绑定 操作和支持的声明语法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4do7lxw5qe4skjoo3k18t5666\">在 \n<a href=\"guide/template-syntax\">模板语法</a> 页面中阅读以下绑定形式：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wry2zz8mrqden0mgrldppc0o\"><a href=\"guide/template-syntax#interpolation\">插值</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ad1waila2nqlghnr3jg6w1l3q\"><a href=\"guide/template-syntax#property-binding\">属性绑定</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48hhf9zffsnvbryr36cjiy6lt\"><a href=\"guide/template-syntax#event-binding\">事件绑定</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65ecad35eyh2rq9ijwu5h46nm\"><a href=\"guide/template-syntax#attribute-binding\">属性绑定</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gophpwtmvcueql8w2lb4y05l\"><a href=\"guide/template-syntax#class-binding\">类绑定</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kuw7uzxbe1evwen026hins5r\"><a href=\"guide/template-syntax#style-binding\">样式绑定</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bz3antl93dlyxy8n1fyd6a6fg\"><a href=\"guide/template-syntax#ngModel\">使用 ngModel 进行双向数据绑定</a>。</li>\n</ul>\n<a id=\"decorator\"></a>\n<a id=\"decoration\"></a>\n<h2 id=\"decorator--decoration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfll350uwl48f2fuzn4czcd5e\"><i class=\"material-icons\">link</i>装饰器 | 装饰</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94vg2qg15d60irk6xclkoo0xo\">一个 \n<em>函数</em>，用于向类、其成员（属性、方法）和函数参数添加元数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egeou0g03f0p5nxt7x91ecnv8\">装饰器是 JavaScript 语言的实验性（第 2 阶段）\n<a href=\"https://github.com/wycats/javascript-decorators\">特性</a>。TypeScript 添加了对装饰器的支持。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2q0hh18par2yvz71d5wf7msuy\">要应用装饰器，请将其放置在要装饰的项目的正上方或左侧。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1m00grrk1uv69jez5vy8v9nz\">Angular 有一套自己的装饰器，可以帮助它与应用程序的各个部分进行交互。 以下示例是一个 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器，它将一个 类标识为 Angular \n<a href=\"guide/glossary#component\">组件</a>，以及一个应用于该组件 \n<code>name</code> 属性的 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的省略对象参数将包含相关的组件元数据。</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\nexport class AppComponent {\n  constructor(@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>('SpecialFoo') public foo:Foo) {}\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() name:string;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71z2b6d7t0yqkb38jql6g20yi\">装饰器的范围仅限于它所装饰的语言特性。此处显示的任何装饰都不会“泄漏”到文件中后面的其他 类。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ncr0xo2jenm3s5lpz6bvyjx2\">在应用装饰器时，始终包含括号 \n<code>()</code>。</p>\n</div>\n<h2 id=\"dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ev35fdpq1f46jvj853hmazgoj\"><i class=\"material-icons\">link</i>依赖注入</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hspet3dinspyk23yq5sz3zos\">一种设计模式和机制， 用于创建应用程序的各个部分并将其交付给 请求它们的应用程序的其他部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ef7ygbuem4nusykkon3t3in3i\">Angular 开发人员更喜欢通过定义许多简单的部分来构建应用程序， 这些部分各自擅长做一件事，然后在运行时将它们连接在一起。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"oa320wttg6j6auum69rml7mj\">这些部分通常依赖于其他部分。一个 Angular \n<a href=\"guide/glossary#component\">组件</a> 部分可能依赖于一个服务部分来获取数据或执行计算。当 部分“A”依赖于另一个部分“B”时，你就会说“A”依赖于“B”， 而“B”是“A”的依赖项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"952nlw7plvub66ejn5l63d7am\">你可以请求“依赖注入系统”为我们创建“A”， 并处理所有依赖项。 如果“A”需要“B”，而“B”需要“C”，则该系统会解析此依赖项链， 并返回一个完全准备好的“A”实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ookm0kgt0bhk4soccmscm2py\">Angular 提供并依赖于它自己的复杂 依赖注入系统， 通过在需要时将应用程序部分“注入”到其他应用程序部分来组装和运行应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58nvc3b4y7s6tjw59jr0l084g\">从本质上讲，一个 \n<a href=\"guide/glossary#injector\"><code>注入器</code></a> 会根据请求返回依赖项值。 表达式 \n<code>injector.get(token)</code> 返回与给定令牌关联的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aie8kbagamrksle41x1gi30b0\">令牌是一个 Angular 类型 (\n<code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code>)。你很少需要直接使用令牌；大多数 方法接受一个类名 (\n<code>Foo</code>) 或一个字符串 (\"foo\")，Angular 会将其 转换为令牌。当你编写 \n<code>injector.get(Foo)</code> 时，注入器会返回 与 \n<code>Foo</code> 类令牌关联的值，通常是 \n<code>Foo</code> 本身的实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i15nm24uzru50meon15bz7ih\">在 Angular 的许多操作过程中，它会在内部发出类似的请求，例如在创建要显示的 \n<a href=\"guide/glossary#component\"><code>组件</code></a> 时。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jgjcaw0wlu9ojsdtmw0ydemp\"><code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 会维护一个令牌到依赖项值的内部映射表。 如果 \n<code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 找不到给定令牌的值，它会使用该令牌的 \n<code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 创建 一个新值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yl0hc9dsxass9gk949xgzbdd\">一个 \n<a href=\"guide/glossary#provider\">提供者</a> 是一个创建 与特定令牌关联的依赖项值的全新实例的配方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f3faqgl0ygf0znxk3wouc6jg\">只有当注入器在其内部提供者注册表中 具有该令牌的 \n<code>提供者</code> 时，它才能为给定令牌创建值。 注册提供者是一个关键的准备步骤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c3exk8esfipfgpwmx1x1n07a\">Angular 会在每个注入器中注册一些自己的提供者。 你可以注册自己的提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwwxn25igu5rupo1gh27hby68\">在 \n<a href=\"guide/dependency-injection\">依赖注入</a> 页面中阅读更多内容。</p>\n<a id=\"directive\"></a>\n<a id=\"directives\"></a>\n<h2 id=\"directive\">Directive</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5azcrikagrzntttcncmdtaxvv\">一个 Angular 类，负责在浏览器 DOM 中创建、重塑和与 HTML 元素 进行交互。指令是 Angular 最基本的功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wgk25b0u0bnm4trlker51opx\">指令通常与 HTML 元素或属性相关联。 此元素或属性通常被称为指令本身。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7y4kuzsyilt7qbi5xech6cue6\">当 Angular 在 HTML 模板中找到一个指令时， 它会创建匹配的指令类实例， 并让该实例控制浏览器 DOM 的那一部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y8aw7m5b6lxkio5kznv3ogvb\">你可以发明自定义 HTML 标记（例如，\n<code>&lt;my-directive&gt;</code>）来 与你的自定义指令相关联。你可以将此自定义标记添加到 HTML 模板中， 就像你在编写原生 HTML 一样。这样，指令就变成了 HTML 本身的扩展。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80anjto7v2fh4y03k24xvo6ap\">指令分为以下几类：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1r4ysfrh1h2m3vd0310g4swhe\"><a href=\"guide/glossary#component\">组件</a> 将应用程序逻辑与 HTML 模板结合起来， 以渲染应用程序 \n<a href=\"guide/glossary#view\">视图</a>。组件通常表示为 HTML 元素。 它们是 Angular 应用程序的构建块。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sf73mj0du34nntf9qd3py6f1\">属性型指令可以监听和修改其他 HTML 元素、属性、属性（Property）和组件的行为。它们通常以 HTML 属性的形式表示，因此得名。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eszhywkeub453y1olo6mdbmyn\">结构型指令负责塑造或重塑 HTML 布局，通常通过添加、删除或操作元素及其子元素来实现。</p>\n</li>\n</ul>\n<a id=\"E\"></a>\n<h2 id=\"ecmascript\">ECMAScript</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tv83bdpg2chpx8sd67f8ubq8\">ECMAScript 是 JavaScript 语言的官方规范。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"461lbluybkvr1t4zaotzim87x\">最新批准的 JavaScript 版本是 ECMAScript 2017（也称为“ES2017”或“ES8”）。许多 Angular 开发人员使用 ES8 或与其兼容的方言（如 TypeScript）编写应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3u6wcrwbams0gir4w6lkruh0\">大多数现代浏览器只支持更早的“ECMAScript 5”（也称为“ES5”）标准。用 ES2017、ES2016、ES2015 或其方言之一编写的应用程序必须被转译为 ES5 JavaScript。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ffthzn7na312jx26oq59neaq\">Angular 开发人员可以直接使用 ES5 编写代码。</p>\n<h2 id=\"es2015\">ES2015</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5233cm0tkfew02ph33rq6m821\">ES2015 是 ECMAScript 2015 的简写。</p>\n<h2 id=\"es5\">ES5</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4aqn6rnsv7cu2avjmw6yp34r\">ES5 是 ECMAScript 5 的简写，是大多数现代浏览器运行的 JavaScript 版本。</p>\n<h2 id=\"es6\">ES6</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5233cm0tkfew02ph33rq6m821\">ES2015 是 ECMAScript 2015 的简写。</p>\n<a id=\"F\"></a>\n<a id=\"G\"></a>\n<a id=\"H\"></a>\n<a id=\"I\"></a>\n<h2 id=\"injector\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fb5vyru4fe5pzxandbpk8dir\"><i class=\"material-icons\">link</i>注入器</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bo33jc9m5cidskhs01s6awcp3\">注入器是 Angular 依赖注入系统中的一个对象，它可以在其缓存中查找命名依赖项，或使用注册的提供者创建依赖项。</p>\n<h2 id=\"input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z3trrv8h1vyliw4ebb22v6d1\"><i class=\"material-icons\">link</i>输入</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ojdatnf7tnue8y2urkh34s38\">输入是一个指令属性，可以作为属性绑定的目标（在模板语法页面中有详细解释）。数据值从模板表达式右侧标识的数据源流入此属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5rpqno3xpalgfxhtkzzzfu3z\">请参阅模板语法页面中的输入和输出属性部分。</p>\n<h2 id=\"interpolation\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5dwlx3euzg7g5mhwhve51wn2p\"><i class=\"material-icons\">link</i>插值</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hqfngjwqrgqyotffc2n8ml25\">插值是属性数据绑定的一种形式，其中双花括号之间的模板表达式呈现为文本。该文本可以在分配给元素属性或显示在元素标签之间之前与相邻文本连接，如以下示例所示。</p>\n<code-example language=\"html\" escape=\"html\">\n  <label>My current hero is {{hero.name}}</label>\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75kgx4r33pcva4saogw57wv62\">在模板语法页面中阅读有关插值的更多信息。</p>\n<a id=\"J\"></a>\n<a id=\"jit\"></a>\n<h2 id=\"just-in-time-jit-compilation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epj5mepfcill9p8heau1zrl4b\"><i class=\"material-icons\">link</i>即时（JIT）编译</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"auvxvc3ukeleae32ubg0w0fb9\">在浏览器中编译组件和模块并动态启动应用程序的引导方法。即时模式在开发过程中是一个不错的选择。对于生产应用程序，请考虑使用预先编译模式。</p>\n<a id=\"K\"></a>\n<h2 id=\"kebab-case\">kebab-case</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9x0jg4wuycp7fje241pv1fq4\">请参阅 dash-case。</p>\n<a id=\"L\"></a>\n<h2 id=\"lifecycle-hooks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bhlcyenmobknyvoaatlpnddj\"><i class=\"material-icons\">link</i>生命周期钩子</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33nl75qp0ocj3ars0ja8be80t\">指令和组件的生命周期由 Angular 在创建、更新和销毁它们时管理。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jb62btgtgejwk5bq5ddbyh89\">你可以通过实现一个或多个生命周期钩子接口来利用生命周期中的关键时刻。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2itj14z7ka6091lf5ti7o80br\">每个接口都有一个单一的钩子方法，其名称是接口名称加上前缀 \n<code>ng</code>。例如，OnInit 接口有一个名为 ngOnInit 的钩子方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crt28zfp8wh48jvqi5qqk89to\">Angular 按以下顺序调用这些钩子方法：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ghe643zyxcv1h86sx402y2jy\">ngOnChanges：当输入/输出绑定值发生变化时。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bonfpuaui5net7z2ja3bj4z64\">ngOnInit：在第一次 ngOnChanges 之后。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0t7mf9846dqpgm22l8r6yf55\">ngDoCheck：开发人员自定义的变更检测。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ricx8rix9vhzhhb2m0ybn6fi\">ngAfterContentInit：在组件内容初始化之后。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzqz446pa0a7ws7jj8lbbd5pb\">ngAfterContentChecked：在每次检查组件内容之后。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hy60yw2urkp1tnu9zn50qkaq\">ngAfterViewInit：在组件视图初始化之后。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"doded9uux3sxbuyxpm8s57vzb\">ngAfterViewChecked：在每次检查组件视图之后。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y10ai2zjq96fgt6cdxzacyan\">ngOnDestroy：在指令被销毁之前。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ow54m680z3unq7ys767dx74i\">在生命周期钩子页面中阅读更多信息。</p>\n<a id=\"M\"></a>\n<h2 id=\"module\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\"><i class=\"material-icons\">link</i>模块</h2>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rzvnv091deehakkb2djvxqq9\">Angular 有以下类型的模块：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ay8l779mivxom7143vc1fkki\">NgModules。有关详细信息和示例，请参阅 NgModules 页面。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eixldf0p2zuiemv35wutdvzfr\">ES2015 模块，如本节所述。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfyawa7k5tym4ln41ep7l11wp\">有关比较，请参阅 JavaScript 模块与 NgModules。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2078fix2gy1pgh7058u3kss8a\">一个专门用于单一目的的代码块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ywy3ij8pru47n5wpg4jql8tk\">Angular 应用程序是模块化的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3n7y2f5rgqpu8xjykyxvb3dp4\">通常，你从许多模块（你编写的模块和从其他人那里获得的模块）组装一个应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85p7ae3hthbbgsbbkgjqcrvxu\">一个模块导出该代码中的一些有价值的东西，通常是一个东西，例如一个类；需要该类的模块导入它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"behbh5f8h32b5qd3b8stfipy3\">NgModules 的结构和导入/导出语法基于 ES2015 模块标准。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9nj044k3mj3n35jxu9vrc4k9\">遵循此标准的应用程序需要一个模块加载器来按需加载模块并解析模块间的依赖关系。Angular 不包含模块加载器，也不偏好任何特定的第三方库。你可以使用任何符合标准的模块库。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ya55u7hj7woz3fq2y5tgvqtl\">模块通常以定义导出内容的文件命名。Angular DatePipe 类属于名为 date_pipe 的特性模块，位于 date_pipe.ts 文件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8i73zq9jolb7ilvkm8kwzs5c\">你很少直接访问 Angular 特性模块。你通常从 Angular 范围包（如 @angular/core）中导入它们。</p>\n<a id=\"N\"></a>\n<h2 id=\"ngmodule\">NgModule</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8w1phx286z9o829m8hdv26dgz\">它帮助你将应用程序组织成具有凝聚力的功能块。 NgModule 标识了应用程序使用的组件、指令和管道，以及应用程序所需的外部 NgModule 列表，例如 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4g6do2zc2a1swtjfazxm3bo\">每个 Angular 应用程序都有一个应用程序根模块类。按照惯例，此类名为 \n<code>AppModule</code>，位于名为 \n<code>app.module.ts</code> 的文件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25o3x5mq0rxfz70fheexp2yjc\">有关详细信息和示例，请参阅 \n<a href=\"guide/ngmodules\">NgModules</a> 以及该部分中的相关文件。</p>\n<a id=\"O\"></a>\n<h2 id=\"observable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekbi3pmy2k9b83xgx9cjqwdyg\"><i class=\"material-icons\">link</i>可观察者</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5bkc8ke5qqy62xqkq88j9k6om\">一个数组，其条目会随着时间的推移异步到达。 可观察者帮助你管理异步数据，例如来自后端服务的數據。 可观察者在 Angular 本身中使用，包括 Angular 的事件系统和 HTTP 客户端服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dljwve7zmjvvthr6uzavl9n7p\">为了使用可观察者，Angular 使用一个名为 Reactive Extensions (RxJS) 的第三方库。 可观察者是 ES2016（下一版 JavaScript）中提出的一个特性。</p>\n<h2 id=\"output\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2h05d1nmsp4rguangw2faftqs\"><i class=\"material-icons\">link</i>输出</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bplje5etiyyim3e0m0vb6pqgc\">一个指令属性，可以作为事件绑定的\n<em>目标</em> （在 \n<a href=\"guide/template-syntax#event-binding\">事件绑定</a> 部分的 \n<a href=\"guide/template-syntax\">模板语法</a> 页面中了解更多信息）。 事件从该属性\n<em>流出</em>到等号右侧模板表达式中标识的接收器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5rpqno3xpalgfxhtkzzzfu3z\">请参阅模板语法页面中的输入和输出属性部分。</p>\n<a id=\"P\"></a>\n<h2 id=\"pascalcase\">PascalCase</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4nrd3cp0bos2i6qy6nos1txt\">编写单个单词、复合词或短语的习惯，使每个单词或缩写都以大写字母开头。 类名通常用 PascalCase 拼写。例如，\n<code>Person</code> 和 \n<code>HeroDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85unvklm9za2vyzlciz97m2vl\">此形式也称为\n<em>大驼峰式命名法</em>，以区别于\n<em>小驼峰式命名法</em>或简称为 \n<a href=\"guide/glossary#camelcase\">camelCase</a>。 在本文档中，“PascalCase”表示\n<em>大驼峰式命名法</em>，“camelCase”表示\n<em>小驼峰式命名法</em>。</p>\n<h2 id=\"pipe\">Pipe</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4qg75m5bp543tec7bfgreohg\">Angular 管道是一个函数，它将输入值转换为输出值，以便在 \n<a href=\"guide/glossary#view\">视图</a> 中显示。 以下示例使用内置的 \n<code>currency</code> 管道以本地货币显示数值。</p>\n<code-example language=\"html\" escape=\"html\">\n  <label>Price: </label>{{product.price | currency}}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2r403fd023kqh7bpj6a8ypxbh\">你也可以编写自己的自定义管道。 在 \n<a href=\"guide/pipes\">管道</a> 页面中了解更多信息。</p>\n<h2 id=\"provider\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c1yrocbi5g32gwqbq4rbbqun\"><i class=\"material-icons\">link</i>提供者</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwgchpd7wj3yu41nwl4x3r006\"><em>提供者</em>为 \n<a href=\"guide/glossary#dependency-injection\">依赖注入</a> 系统创建依赖项的新实例。 它将一个查找令牌与代码（有时称为“配方”）相关联，该代码可以创建依赖项值。</p>\n<a id=\"Q\"></a>\n<a id=\"R\"></a>\n<h2 id=\"reactive-forms\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b2xwzrnb2ye7twpwf3t9i2eiv\"><i class=\"material-icons\">link</i>响应式表单</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtp1n88uz8b34mfkiicwwgamz\">一种通过组件中的代码构建 Angular 表单的技术。 另一种技术是 \n<a href=\"guide/glossary#template-driven-forms\">模板驱动表单</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1uya8zjtmgiundzfbitojk455\">构建响应式表单时：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avxp6e5fauvwcbd6hw4poni2g\">“事实之源”是组件。验证是使用组件中的代码定义的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58a648ckxvqe0scrmnfdf1d8y\">每个控件都在组件类中使用 \n<code>new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()</code> 或 \n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 显式创建。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeqli077iffws3e8nppy00ph2\">模板输入元素\n<em>不</em>使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64a7f6k1s44fp6p0ajqr0yq6h\">相关的 Angular 指令都以 \n<code><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a></code> 为前缀，例如 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>、\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 和 \n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a></code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7otr2g4aehguthe02uoimqhu\">响应式表单功能强大、灵活，是更复杂的数据输入表单场景（例如动态生成表单控件）的理想选择。</p>\n<h2 id=\"router\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9a9suvh0m7vdzxj5aomuljv0d\"><i class=\"material-icons\">link</i>路由器</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhla37s89m06hy8bkkzgh2ve0\">大多数应用程序包含许多屏幕或 \n<a href=\"guide/glossary#view\">视图</a>。 用户通过单击链接和按钮在它们之间导航， 并执行其他类似的操作，这些操作会导致应用程序用另一个视图替换当前视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wag7ebke5qnp4fuop87inwy1\">Angular 组件路由器是一种功能丰富的机制，用于配置和管理整个视图导航过程，包括视图的创建和销毁。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aombtzqvujkw8goh7yq1chra7\">在大多数情况下，组件通过定义视图路由的 \n<code>RouterConfig</code> 附着到路由器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1i1brpg9b7snxd0nkfhjt32ww\">一个 \n<a href=\"guide/glossary#routing-component\">路由组件</a> 的模板有一个 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 元素，它可以在其中显示路由器生成的视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctzekwlye32jvwmcmy4x8nhil\">应用程序中的其他视图可能具有带有 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令的锚标签或按钮，用户可以单击这些标签或按钮进行导航。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3iu09tb9fpr7vct87utuht3cn\">有关更多信息，请参阅 \n<a href=\"guide/router\">路由和导航</a> 页面。</p>\n<h2 id=\"router-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8234qsol4677y1wpa520omgfw\"><i class=\"material-icons\">link</i>路由模块</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hy7o7fijfjxc10ctiwmd59cc\">一个单独的 \n<a href=\"guide/glossary#ngmodule\">NgModule</a>，它提供导航应用程序视图所需的必要服务提供者和指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3iu09tb9fpr7vct87utuht3cn\">有关更多信息，请参阅 \n<a href=\"guide/router\">路由和导航</a> 页面。</p>\n<h2 id=\"routing-component\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9u7mq4pbjyv40jwu8gjh18zum\"><i class=\"material-icons\">link</i>路由组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hzswticsa3fg28olseqboow6\">一个 Angular \n<a href=\"guide/glossary#component\">组件</a>，它有一个 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，根据路由器导航显示视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3iu09tb9fpr7vct87utuht3cn\">有关更多信息，请参阅 \n<a href=\"guide/router\">路由和导航</a> 页面。</p>\n<a id=\"S\"></a>\n<h2 id=\"scoped-package\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pwx0to9zt2i9fa5imnypycrt\"><i class=\"material-icons\">link</i>作用域包</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xmcbrba5j8dbddusyeha64vx\">一种对相关\n<em>npm</em>包进行分组的方式。 在 \n<a href=\"https://docs.npmjs.com/misc/scope\">npm-scope</a> 页面中了解更多信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cj9pzvfrg1suvh310atiw7vx\">NgModules 在\n<em>作用域包</em>中提供，例如 \n<code>@angular/core</code>、 \n<code>@angular/common</code>、\n<code>@angular/platform-browser-dynamic</code>、\n<code>@angular/http</code> 和 \n<code>@angular/router</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sx7nczkj2r0ae39e4vnnmsw0\">导入作用域包的方式与导入普通包相同。 从消费者的角度来看，唯一的区别是作用域包名称以 Angular 的\n<em>作用域名称</em> \n<code>@angular</code> 开头。</p>\n<code-example path=\"architecture/src/app/app.component.ts\" linenums=\"false\" title=\"architecture/src/app/app.component.ts (import)\" region=\"import\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n<h2 id=\"service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj0sxs9lg3xv89dux3jgchgud\"><i class=\"material-icons\">link</i>服务</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50amky2lkw4siipwj3819gdja\">对于与特定视图无关的数据或逻辑，或者你希望在组件之间共享的数据或逻辑，请构建服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4oc1b8bu5o9g4pa24cp5j8td\">应用程序通常需要服务，例如英雄数据服务或日志记录服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuufosekegl8roh7lhgfeoxbd\">服务是一个具有特定目的的类。 你通常会创建一个服务来实现与任何特定视图无关的功能， 在组件之间提供共享数据或逻辑，或封装外部交互。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27du8ccww4v7j92c65esx5gfs\">应用程序通常需要服务，例如数据服务或日志记录服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8msqulvtbpezvdb3srh79zvkn\">有关更多信息，请参阅 \n<a href=\"tutorial/toh-pt4\">服务</a> 页面，该页面位于 \n<a href=\"tutorial\">英雄之旅</a> 教程中。</p>\n<a id=\"snake-case\"></a>\n<h2 id=\"snake_case\">snake_case</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4oe9ocpvetph6ie97ikust70q\">编写复合词或短语的习惯，使用下划线 (\n<code>_</code>) 将一个词与另一个词隔开。此形式也称为\n<em>下划线命名法</em>。</p>\n<a id=\"structural-directive\"></a>\n<a id=\"structural-directives\"></a>\n<h2 id=\"structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"59lj2adjv35bjs3nghyd6twal\"><i class=\"material-icons\">link</i>结构型指令</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cj9lc9rhpzk3tb5ceqp80r36u\">一种可以 塑造或重塑 HTML 布局的 \n<a href=\"guide/glossary#directive\">指令</a> 类别，通常通过在 DOM 中添加和删除元素来实现。 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> “条件元素”指令和 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> “重复器”指令是众所周知的示例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1a9u9zz913t293ewcpbbyozzk\">在 \n<a href=\"guide/structural-directives\">结构型指令</a> 页面中了解更多信息。</p>\n<a id=\"T\"></a>\n<h2 id=\"template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cadeociaum750tx9xat1ysl0\"><i class=\"material-icons\">link</i>模板</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mihqy0fre7ggng1aokh8kmyv\">Angular 使用的一段 HTML 代码，用于在 Angular \n<a href=\"guide/glossary#directive\">指令</a>（最显著的是 \n<a href=\"guide/glossary#component\">组件</a>）的支持和指导下渲染 \n<a href=\"guide/glossary#view\">视图</a>。</p>\n<h2 id=\"template-driven-forms\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8ikuesboztjr8out2q3bj6j8i\"><i class=\"material-icons\">link</i>模板驱动表单</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4u6i1ly19pafjb0r65jd3d5h\">一种使用 HTML 表单和视图中的输入元素构建 Angular 表单的技术。 另一种技术是 \n<a href=\"guide/glossary#reactive-forms\">响应式表单</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34ig30uljy8erc0e9kormqi8m\">构建模板驱动表单时：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"601tas5o19h5gyryn8n8aw70e\">模板是「事实之源」。验证是通过单个输入元素上的属性定义的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5spkp2j4569g671iqi0bhu5wf\">使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 进行的 \n<a href=\"guide/glossary#data-binding\">双向绑定</a> 使组件模型与用户在输入元素中的输入保持同步。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnfalao25ajqut1ofcdgxmdpy\">在幕后，Angular 为每个输入元素创建一个新的控件，前提是你已为每个输入设置了 \n<code>name</code> 属性和双向绑定。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3okuuniegxd0sbve77a1ed9ls\">相关的 Angular 指令都以 \n<code>ng</code> 为前缀，例如 \n<code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code>、\n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 和 \n<code><a href=\"api/forms/NgModelGroup\" class=\"code-anchor\">ngModelGroup</a></code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fjmjwmzw1332hrk6a7iztxyc\">模板驱动表单方便、快捷、简单。它们是许多基本数据输入表单场景的不错选择。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a22sqfpxfocqi3k1wp6b28rjq\">阅读有关如何在 \n<a href=\"guide/forms\">表单</a> 页面中构建模板驱动表单的信息。</p>\n<h2 id=\"template-expression\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"basuwfxdimfojvkekvf3f78jj\"><i class=\"material-icons\">link</i>模板表达式</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1es0hqd9bdbwh7r91xacgap9d\">一种类似于 TypeScript 的语法，Angular 在 \n<a href=\"guide/glossary#data-binding\">数据绑定</a> 中对其进行求值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eo73ssk831gx883bx4t8gipsq\">阅读有关如何在 \n<a href=\"guide/template-syntax\">模板语法</a> 页面中的 \n<a href=\"guide/template-syntax#template-expressions\">模板表达式</a> 部分编写模板表达式的信息。</p>\n<h2 id=\"transpile\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch9mvkkppd73h02a0gfz1glcg\"><i class=\"material-icons\">link</i>转译</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lyyf58dwx5lm81lenkbbgi0j\">将以一种 JavaScript 形式（例如 TypeScript）编写的代码转换为另一种 JavaScript 形式（例如 \n<a href=\"guide/glossary#es5\">ES5</a>）的过程。</p>\n<h2 id=\"typescript\">TypeScript</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1g5aunzwu2wt4bpg5ef5oswwu\">一个支持大多数 \n<a href=\"guide/glossary#es2015\">ECMAScript 2015</a> 语言特性的 JavaScript 版本，例如 \n<a href=\"guide/glossary#decorator\">装饰器</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44lz0t3q2qg6nwvp87mhvpksf\">TypeScript 还以其可选类型系统而著称，该系统提供编译时类型检查和强大的工具支持（例如「智能感知」、代码补全、重构和智能搜索）。许多代码编辑器和 IDE 本身或通过插件支持 TypeScript。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9w3d30g71qdzcdw3pxqqgwha3\">TypeScript 是 Angular 开发的首选语言，尽管你可以使用其他 JavaScript 方言，例如 \n<a href=\"guide/glossary#es5\">ES5</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94429cu9sitozxon9rww2on9t\">在 \n<a href=\"http://www.typescriptlang.org/\">typescriptlang.org</a> 上了解更多关于 TypeScript 的信息。</p>\n<a id=\"U\"></a>\n<a id=\"V\"></a>\n<h2 id=\"view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3zh6nby3l7sh2jznenmum15hh\"><i class=\"material-icons\">link</i>视图</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rjyb5xijpdi5m7p8w3bt6qtw\">屏幕的一部分，用于显示信息并响应用户操作，例如点击、鼠标移动和按键。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmo01vnqwj9fc6tb35x7is4o7\">Angular 在一个或多个 \n<a href=\"guide/glossary#directive\">指令</a> 的控制下渲染视图，尤其是 \n<a href=\"guide/glossary#component\">组件</a> 指令和其配套的 \n<a href=\"guide/glossary#template\">模板</a>。组件扮演着如此重要的角色，以至于将组件称为视图通常很方便。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6kyk9ojqeb6pinth89ei9mt7\">视图通常包含其他视图。任何视图都可能在用户浏览应用程序时动态加载和卸载，通常在 \n<a href=\"guide/glossary#router\">路由器</a> 的控制下。</p>\n<a id=\"W\"></a>\n<a id=\"X\"></a>\n<a id=\"Y\"></a>\n<a id=\"Z\"></a>\n<h2 id=\"zone\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"anmmc6pxjxdunosxhmapd4md4\"><i class=\"material-icons\">link</i>时区</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drhwdbh14pfn7icn6qyolql5d\">一种封装和拦截 JavaScript 应用程序异步活动的机制。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6wtjqo5al9l6r96qekk33lki\">浏览器 DOM 和 JavaScript 只有有限数量的异步活动，例如 DOM 事件（例如点击）、\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> 和 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XHR</a> 对远程服务器的调用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e94onnqgzvlu6ux8wf7nza0h4\">Zone 拦截所有这些活动，并让「Zone 客户端」有机会在异步活动完成之前和之后采取行动。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bq5f51zrgf9gsqsp213jmojeu\">Angular 在一个 Zone 中运行你的应用程序，它可以通过检查数据更改并通过 \n<a href=\"guide/glossary#data-binding\">数据绑定</a> 更新其显示的信息来响应异步事件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aspkqgn8n2s1vzw2jzwqngt86\">在 \n<a href=\"https://www.youtube.com/watch?v=3IqtmUscE_U\">Brian Ford 视频</a> 中了解更多关于 Zone 的信息。</p>\n\n</div>\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/quickstart\n - guide/router\n - guide/setup\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/Inject\n - api/core/InjectionToken\n - api/core/Injector\n - api/core/Input\n - api/core/OnInit\n - api/core/Provider\n - api/forms/Form\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/router/RouterLink\n - api/router/RouterOutlet\n - guide/attribute-directives\n - guide/dependency-injection\n - guide/forms\n - guide/glossary#A\n - guide/glossary#B\n - guide/glossary#C\n - guide/glossary#D\n - guide/glossary#E\n - guide/glossary#F\n - guide/glossary#G\n - guide/glossary#H\n - guide/glossary#I\n - guide/glossary#J\n - guide/glossary#K\n - guide/glossary#L\n - guide/glossary#M\n - guide/glossary#N\n - guide/glossary#O\n - guide/glossary#P\n - guide/glossary#Q\n - guide/glossary#R\n - guide/glossary#S\n - guide/glossary#T\n - guide/glossary#U\n - guide/glossary#V\n - guide/glossary#W\n - guide/glossary#X\n - guide/glossary#Y\n - guide/glossary#Z\n - guide/glossary#ahead-of-time-aot-compilation\n - guide/glossary#angular-glossary\n - guide/glossary#annotation\n - guide/glossary#aot\n - guide/glossary#attribute-directive\n - guide/glossary#attribute-directives\n - guide/glossary#barrel\n - guide/glossary#binding\n - guide/glossary#bootstrap\n - guide/glossary#camelcase\n - guide/glossary#cli\n - guide/glossary#component\n - guide/glossary#dash-case\n - guide/glossary#data-binding\n - guide/glossary#decorator\n - guide/glossary#decorator--decoration\n - guide/glossary#dependency-injection\n - guide/glossary#directive\n - guide/glossary#ecmascript\n - guide/glossary#es2015\n - guide/glossary#es5\n - guide/glossary#es6\n - guide/glossary#injector\n - guide/glossary#input\n - guide/glossary#interpolation\n - guide/glossary#just-in-time-jit-compilation\n - guide/glossary#kebab-case\n - guide/glossary#lifecycle-hooks\n - guide/glossary#module\n - guide/glossary#ngmodule\n - guide/glossary#observable\n - guide/glossary#output\n - guide/glossary#pascalcase\n - guide/glossary#pipe\n - guide/glossary#provider\n - guide/glossary#reactive-forms\n - guide/glossary#router\n - guide/glossary#router-module\n - guide/glossary#routing-component\n - guide/glossary#scoped-package\n - guide/glossary#service\n - guide/glossary#snake_case\n - guide/glossary#structural-directive\n - guide/glossary#structural-directives\n - guide/glossary#template\n - guide/glossary#template-driven-forms\n - guide/glossary#template-expression\n - guide/glossary#transpile\n - guide/glossary#typescript\n - guide/glossary#view\n - guide/glossary#zone\n - guide/lifecycle-hooks\n - guide/ngmodule-vs-jsmodule\n - guide/ngmodules\n - guide/pipes\n - guide/quickstart\n - guide/router\n - guide/structural-directives\n - guide/template-syntax\n - guide/template-syntax#attribute-binding\n - guide/template-syntax#class-binding\n - guide/template-syntax#event-binding\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#interpolation\n - guide/template-syntax#ngModel\n - guide/template-syntax#property-binding\n - guide/template-syntax#style-binding\n - guide/template-syntax#template-expressions\n - tutorial\n - tutorial/toh-pt4\n - http://www.2ality.com/2014/09/es6-modules-final.html\n - http://www.ecma-international.org/ecma-262/8.0/\n - http://www.typescriptlang.org/\n - https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n - https://docs.npmjs.com/misc/scope\n - https://en.wikipedia.org/wiki/ECMAScript\n - https://github.com/angular/angular/blob/master/packages/common/src/pipes/date_pipe.ts\n - https://github.com/wycats/javascript-decorators\n - https://www.youtube.com/watch?v=3IqtmUscE_U\n-->"
}