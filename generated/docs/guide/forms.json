{
  "id" : "guide/forms",
  "title" : "表单",
  "contents" : "<div class=\"content\">\n<h1 id=\"forms\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5xsni8fgg13z9qwldwylke25i\"><i class=\"material-icons\">link</i>表单</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b64adva0douducr935k1vbtjh\">表单是商业应用的支柱。 你使用表单登录、提交帮助请求、下订单、预订航班、 安排会议，以及执行无数其他数据输入任务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6act5ipov3b8ua5j8y2yjc0up\">在开发表单时，重要的是要创建一个数据输入体验，引导 用户高效有效地完成工作流。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8ndh11qtdz914xn72mqxng7y\">开发表单需要设计技能（这超出了本页面的范围），以及框架对 \n<em>双向数据绑定、变更跟踪、验证和错误处理</em>的支持， 你将在本页学习这些内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ynueekcsn9w7gfmjrnug19zf\">本页向你展示如何从头开始构建一个简单的表单。在此过程中，你将学习如何：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e976drunzin9bk8kpfie2jwe2\">使用组件和模板构建 Angular 表单。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddr1arswegmw9k0rkh8swgjz8\">使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 创建双向数据绑定，用于读取和写入输入控件的值。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b42eomm2abwi5k1gkd3io6awm\">跟踪状态更改和表单控件的有效性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dke5cv1jfh0wnsabanzcy09m1\">使用跟踪控件状态的特殊 CSS 类提供视觉反馈。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exzp5t9310you6lkae6w010en\">向用户显示验证错误，并启用/禁用表单控件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2ib4p9argb1bw4gbczr3d940\">使用模板引用变量在 HTML 元素之间共享信息。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fliytthw8ajl1jed0jtyvesz\">你可以在 Stackblitz 中运行 \n<live-example></live-example> 并从那里下载代码。</p>\n<a id=\"template-driven\"></a>\n<h2 id=\"template-driven-forms\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8ikuesboztjr8out2q3bj6j8i\"><i class=\"material-icons\">link</i>模板驱动表单</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7enz9jalg3ybn97ijggdfh5k3\">你可以通过在 Angular \n<a href=\"guide/template-syntax\">模板语法</a> 中编写模板来构建表单，并使用本页中描述的表单特定指令和技术。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oghb5cnfz83rjypc2r419rmo\">你也可以使用响应式（或模型驱动）方法来构建表单。 但是，本页重点介绍模板驱动表单。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ygnukqbk7h5nh8o19iswx2a5\">你可以使用 Angular 模板构建几乎任何表单，例如登录表单、联系表单，以及几乎所有商业表单。 你可以创造性地布局控件，将它们绑定到数据，指定验证规则并显示验证错误， 有条件地启用或禁用特定控件，触发内置的视觉反馈，等等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cguvl8snl2892mdrx5fitz5h8\">Angular 使这个过程变得容易，因为它处理了许多你原本需要自己处理的重复性、样板任务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k13q0k3xt6s54gy6pe3meai3\">你将学习构建一个看起来像这样的模板驱动表单：</p>\n<figure>\n  <img src=\"generated/images/guide/forms/hero-form-1.png\" alt=\"Clean Form\" width=\"479\" height=\"339\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmlf98yv57htivygxhpjsb26o\"><em>英雄就业机构</em>使用此表单来维护英雄的个人信息。 每个英雄都需要一份工作。公司的使命是将合适的英雄与合适的危机匹配。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alqk0wzkdoe3id6vkpk4hykat\">此表单上的三个字段中有两个是必需的。必需字段左侧有一个绿色条，便于识别。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfvhjro8bw1fgbbrok6epty3s\">如果你删除英雄姓名，表单会以醒目的方式显示验证错误：</p>\n<figure>\n  <img src=\"generated/images/guide/forms/hero-form-2.png\" alt=\"Invalid, Name Required\" width=\"465\" height=\"402\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6flx6zhjx6ofzaa11xg26ugck\">请注意，\n<em>提交</em>按钮已禁用，输入控件左侧的 \"required\" 条从绿色变为红色。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pj2wy7fs2pgav43nkot6vwh\">你可以使用标准 CSS 自定义 \"required\" 条的颜色和位置。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayrqejvty9nunji4a5i5lbvar\">你将分步骤构建此表单：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjot6661sttmrmo8uwa91fsco\">创建 \n<code>Hero</code> 模型类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q5zlp9i2bakipgntjbhbaq4s\">创建控制表单的组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ydh2kfw0akp4lav8z907jfg7\">创建具有初始表单布局的模板。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5uvlfcsl1hggot60nbqiiqpq\">使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 双向数据绑定语法将数据属性绑定到每个表单控件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzdhk6616fdius3dfsevpjhwt\">向每个表单输入控件添加 \n<code>name</code> 属性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azhj7380uoc700scq2waeiy7k\">添加自定义 CSS 以提供视觉反馈。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a65vu6ujdch0agnlvjs5b2mxq\">显示和隐藏验证错误消息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1q38aehha13vgwakke7j9y41z\">使用 \n<em>ngSubmit</em> 处理表单提交。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"r5gy4wkgishgt0qgbfo4t8k4\">在表单有效之前，禁用表单的 \n<em>提交</em> 按钮。</li>\n</ol>\n<h2 id=\"setup\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a90a9lk5ukrzn7bkuyktmp1zv\"><i class=\"material-icons\">link</i>设置</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"341m8dpxazod3iwbbpbs5gz9c\">创建一个名为 \n<code>angular-forms</code> 的新项目：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng new angular-forms\n\n</code-example>\n<h2 id=\"create-the-hero-model-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9v4e2d23ck69ivpajbj5kox1d\"><i class=\"material-icons\">link</i>创建 Hero 模型类</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6y3lxhinc3ys50wcpd90u27xs\">当用户输入表单数据时，你将捕获他们的更改并更新模型实例。 在知道模型是什么样子之前，你无法布局表单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d68d2i7b06nvh0w6q2z99ovhi\">模型可以像一个“属性包”一样简单，它保存关于应用程序重要事物的相关信息。 这很好地描述了 \n<code>Hero</code> 类，它具有三个必需字段（\n<code>id</code>、\n<code>name</code>、\n<code>power</code>） 和一个可选字段（\n<code>alterEgo</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ov6uqwk2c93wzn5drybm7889\">使用 Angular CLI 生成一个名为 \n<code>Hero</code> 的新类：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate class Hero\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1genncgigkbmdasron36r0in\">内容如下：</p>\n<code-example path=\"forms/src/app/hero.ts\" title=\"src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qxvcxq3nvk8hbdq5ht0w50s7\">这是一个贫血模型，需求很少，没有行为。非常适合演示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"282zydok605l8xvmkmsaq55rm\">TypeScript 编译器为每个 \n<code>public</code> 构造函数参数生成一个公共字段， 并在你创建英雄时自动将参数的值赋予该字段。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ic2pk3is4ssnfw54jhyqfywy\"><code>alterEgo</code> 是可选的，因此构造函数允许你省略它；请注意 \n<code>alterEgo?</code> 中的问号 (?)。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmpqbkog49fvuek94okj9r7kx\">你可以像这样创建一个新的英雄：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.ts\" linenums=\"false\" region=\"SkyDog\">\nlet myHero =  new Hero(42, 'SkyDog',\n                       'Fetch any object at any distance',\n                       'Leslie Rollover');\nconsole.log('My hero is called ' + myHero.name); // \"My hero is called SkyDog\"\n\n</code-example>\n<h2 id=\"create-a-form-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o87mkcefwo7wj5bob9sptv6v\"><i class=\"material-icons\">link</i>创建一个表单组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1n4f5edahxec7t94zgs4j69m\">Angular 表单有两个部分：基于 HTML 的 \n<em>模板</em> 和一个组件 \n<em>类</em> 用于以编程方式处理数据和用户交互。 从类开始，因为它简要地说明了英雄编辑器可以做什么。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a2gr4kpwys180teklyd9v0pb\">使用 Angular CLI 生成一个名为 \n<code>HeroForm</code> 的新组件：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate component HeroForm\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1genncgigkbmdasron36r0in\">内容如下：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.ts\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.ts (v1)\" region=\"v1\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero }    from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-form',\n  templateUrl: './hero-form.component.html',\n  styleUrls: ['./hero-form.component.css']\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  // TODO: Remove this when we're done\n  get diagnostic() { return JSON.stringify(this.model); }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bby9mlr5v0ib5uugrysomkm3c\">此组件没有什么特别之处，没有特定于表单的内容， 与你之前编写的任何组件没有区别。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72g285nskj9iorx8xt24prj9a\">理解此组件只需要之前页面中介绍的 Angular 概念。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fcamfc4aijyh0le4x6ukud0f\">代码导入了 Angular 核心库和刚刚创建的 \n<code>Hero</code> 模型。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9votsrpwg31sj9c5p265tk531\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的选择器值为 \"hero-form\"，这意味着你可以在父模板中使用 \n<code>&lt;hero-form&gt;</code> 标签插入此表单。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38u2woqjlz4kf8u2cynnbnu4q\"><code>templateUrl</code> 属性指向模板 HTML 的单独文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emqosfyzhfz72lnwc572of3k0\">你为 \n<code>model</code> 和 \n<code>powers</code> 定义了虚拟数据，这很适合演示。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52qdx9rrn1px6273tq7mrxdhm\">将来，你可以注入数据服务来获取和保存真实数据， 或者将这些属性公开为输入和输出 （请参阅 \n<a href=\"guide/template-syntax#inputs-outputs\">输入和输出属性</a>，位于 \n<a href=\"guide/template-syntax\">模板语法</a> 页面）以绑定到父组件。现在这不是问题，这些未来的更改不会影响表单。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4abpbs8het33llynlkdc6fnki\">你添加了一个 \n<code>diagnostic</code> 属性来返回模型的 JSON 表示形式。 它将帮助你在开发过程中查看你的操作；你给自己留了一个清理注释，以便稍后将其丢弃。</li>\n</ul>\n<h2 id=\"revise-appmodulets\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"auya5t36l9up0dyjt1m28z3sp\"><i class=\"material-icons\">link</i>修改 \n<em>app.module.ts</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4n2tsn8z7s2supif6oyze2lg\"><code>app.module.ts</code> 定义了应用程序的根模块。在其中，你将识别将在应用程序中使用的外部模块， 并声明属于此模块的组件，例如 \n<code>HeroFormComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"w9n1qc462a7a7p91fa453eo1\">由于模板驱动表单位于它们自己的模块中，因此你需要将 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 添加到 应用程序模块的 \n<code>imports</code> 数组中，然后才能使用表单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1xk64jc5mg78llds2392vkbo\">使用以下内容更新它：</p>\n<code-example path=\"forms/src/app/app.module.ts\" title=\"src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\nimport { HeroFormComponent } from './hero-form/hero-form.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"208kamn3di3wl1hau8yo01z7d\">有两个更改：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3gqw5kezbb5dk7uzgfr5z4x6\">你导入了 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"669yhrk6nibpwxgm8cfk9m9a6\">你将 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 添加到 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器中定义的 \n<code>imports</code> 列表中。这使应用程序 能够访问所有模板驱动表单功能，包括 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>。</p>\n</li>\n</ol>\n</div>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nhnqlausgrjeyj29vv69942c\">如果组件、指令或管道属于 \n<code>imports</code> 数组中的模块，则​\n<em>不要</em>​在 \n<code>declarations</code> 数组中重新声明它。 如果你编写了它，并且它应该属于此模块，则​\n<em>要</em>​在 \n<code>declarations</code> 数组中声明它。</p>\n</div>\n<h2 id=\"revise-appcomponenthtml\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahz3br7vmhwzzvbi445klxoww\"><i class=\"material-icons\">link</i>修改 \n<em>app.component.html</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bhwqtp6rrivb5g5jd0pt6j25\"><code>AppComponent</code> 是应用程序的根组件。它将托管新的 \n<code>HeroFormComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1297uj530tye4dsxxonuiu55b\">将它的模板内容替换为以下内容：</p>\n<code-example path=\"forms/src/app/app.component.html\" title=\"src/app/app.component.html\">\n&lt;app-hero-form&gt;&lt;/app-hero-form&gt;\n\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb7h18l24osowj385xhawv5sj\">只有两个更改。 \n<code>template</code> 只是由组件的 \n<code>selector</code> 属性标识的新元素标签。 这将在加载应用程序组件时显示英雄表单。 不要忘记从类体中删除 \n<code>name</code> 字段。</p>\n</div>\n<h2 id=\"create-an-initial-html-form-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezhvtz7wj47ohjyvloxfb1r95\"><i class=\"material-icons\">link</i>创建一个初始的 HTML 表单模板</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b69o4cd90rqpl6neefr9jtaxx\">使用以下内容更新模板文件：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"start\" title=\"src/app/hero-form/hero-form.component.html\">\n&lt;div class=\"container\"&gt;\n    &lt;h1&gt;Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&lt;/h1&gt;\n    &lt;form&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"name\" required&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"alterEgo\"&gt;\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\" class=\"btn btn-success\"&gt;Submit&lt;/button&gt;\n\n    &lt;/form&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"912y4mjl7m1288riyovvg1ty7\">语言只是 HTML5。你正在呈现 \n<code>Hero</code> 的两个字段，\n<code>name</code> 和 \n<code>alterEgo</code>，并 在输入框中打开它们以供用户输入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jqnic1xk2ltkjec8jqdwhyra\"><em>名称</em> \n<code>&lt;input&gt;</code> 控件具有 HTML5 \n<code>required</code> 属性； \n<em>化名</em> \n<code>&lt;input&gt;</code> 控件没有，因为 \n<code>alterEgo</code> 是可选的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akxy5zr0o3wvqyi80hscus3oh\">你在底部添加了一个 \n<em>提交</em> 按钮，并在上面添加了一些用于样式的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5690tf72p2w9qu49j10ufis2z\"><em>你还没有使用 Angular</em>。没有绑定或额外的指令，只有布局。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zor8vs3y801ctcf4ayp38bqd\">在模板驱动表单中，如果你导入了 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，则无需对 \n<code>&lt;form&gt;</code> 标签进行任何操作 即可使用 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。继续查看它是如何工作的。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"757ri1xtlrtlk56wcplw7pukk\"><code>container</code>、\n<code>form-group</code>、\n<code>form-control</code> 和 \n<code>btn</code> 类 来自 \n<a href=\"http://getbootstrap.com/css/\">Twitter Bootstrap</a>。这些类纯粹是装饰性的。 Bootstrap 为表单提供了一些样式。</p>\n<div class=\"callout is-important\">\n  <header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55di4ddzk096jqhgix313ewqi\">Angular 表单不需要样式库</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5ri6ehi7xhszyahp66l2j73f\">Angular 不使用 \n<code>container</code>、\n<code>form-group</code>、\n<code>form-control</code> 和 \n<code>btn</code> 类或 任何外部库的样式。Angular 应用程序可以使用任何 CSS 库，也可以不使用任何库。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhiian1kzdtvssnppfyfxbvpr\">要添加样式表，请打开 \n<code>styles.css</code> 并将以下导入行添加到顶部：</p>\n<code-example path=\"forms/src/styles.1.css\" linenums=\"false\" title=\"src/styles.css\">\n@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');\n\n\n</code-example>\n<h2 id=\"add-powers-with-ngfor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xdxk8db5nwjdir2o0ukxdopz\"><i class=\"material-icons\">link</i>使用 \n<em>*ngFor</em> 添加力量</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eliycbk7oup77mwfkz9c9tjx8\">英雄必须从机构批准的力量列表中选择一种超能力。 你将在内部（在 \n<code>HeroFormComponent</code> 中）维护该列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kx4ovhhb07w5sy6smdchv64x\">你将在 表单中添加一个 \n<code>select</code>，并将选项绑定到 \n<code>powers</code> 列表，使用 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>， 这是一种在 \n<a href=\"guide/displaying-data\">显示数据</a> 页面中看到的技术。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnhc7qlhmk4v38p040ndqdnoe\">将以下 HTML 代码\n<em>添加到</em>\n<em>化名</em>组\n<em>下方</em>：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (powers)\" region=\"powers\">\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n  &lt;select class=\"form-control\" id=\"power\" required&gt;\n    &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eswoxt12fdq9stfip8w6ceurw\">此代码为 powers 列表中的每个 power 重复 \n<code>&lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;</code> 标签。 \n<code>pow</code> 模板输入变量是每次迭代中不同的 power； 你使用插值语法显示它的名称。</p>\n<a id=\"ngModel\"></a>\n<h2 id=\"two-way-data-binding-with-ngmodel\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4ggb7idnt2bj09e1txiav9gc\"><i class=\"material-icons\">link</i>双向数据绑定与 \n<em>ngModel</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i1yt4i0661miveqjtkqvzhg2\">现在运行应用会让人失望。</p>\n<figure>\n  <img src=\"generated/images/guide/forms/hero-form-3.png\" alt=\"Early form with no binding\" width=\"473\" height=\"294\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vge54mne9uwzns3w1kx8x1k7\">你没有看到英雄数据，因为你还没有绑定到 \n<code>Hero</code>。 你从前面的页面知道如何做到这一点。 \n<a href=\"guide/displaying-data\">显示数据</a> 教授了属性绑定。 \n<a href=\"guide/user-input\">用户输入</a> 展示了如何使用事件绑定监听 DOM 事件，以及如何使用显示的值更新组件属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f3vbt0rc9d86kbs161cad572\">现在你需要同时显示、监听和提取数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20sn0uodqufv7w2uxtzi0t4rx\">你可以使用你已经知道的技巧，但 你将使用新的 \n<code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法，它 使将表单绑定到模型变得容易。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30pyjc6vyrqif5los5xu7laws\">找到 \n<em>Name</em> 的 \n<code>&lt;input&gt;</code> 标签，并像这样更新它：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"ngModelName-1\">\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"&gt;\nTODO: remove this: {{model.name}}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7cd4s2w0had6x8vf2tguu9ez\">你在输入标签后添加了一个诊断插值， 这样你就可以看到你在做什么。 你给自己留了一个便条，提醒你在完成后将其删除。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eenr2kqrjvatcee1f5hhj9lah\">注意看绑定语法：\n<code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"...\"</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m01bks5m9xbm4n5f2xxe5hg4\">你需要再添加一个东西来显示数据。为表单声明 一个模板变量。使用 \n<code>#heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"</code> 更新 \n<code>&lt;form&gt;</code> 标签，如下所示：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"template-variable\">\n&lt;form #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elalmbuylsl7ptmy2r00l8s8h\">变量 \n<code>heroForm</code> 现在是 \n<code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令的引用，该指令控制整个表单。</p>\n<div class=\"l-sub-section\">\n<p>  <a id=\"ngForm\"></a></p>\n<h3 id=\"the-ngform-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d84wj6um2d5hdy9chqtkilaez\"><i class=\"material-icons\">link</i><em>NgForm</em> 指令</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uv3ehpko7h3od6y0tphrjmz1\">什么 \n<code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令？ 你没有添加 \n<a href=\"api/forms/NgForm\">NgForm</a> 指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b42nxsgikwgj3jwzvp5737oc\">Angular 添加了。Angular 会自动创建并附加一个 \n<code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令到 \n<code>&lt;form&gt;</code> 标签。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9p05y87n7k8ay8jyaei03xgun\"><code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令为 \n<code>form</code> 元素补充了额外的功能。 它包含你为带有 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令 和 \n<code>name</code> 属性的元素创建的控件，并监控它们的属性，包括它们的有效性。 它还有自己的 \n<code>valid</code> 属性，只有当\n<em>所有包含的控件</em>都有效时，该属性才为 true。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pmrwfzo2b1j9hb87cu3g4hir\">如果你现在运行应用，并在 \n<em>Name</em> 输入框中开始输入， 添加和删除字符，你会看到它们在插值文本中出现和消失。 在某些时候，它可能看起来像这样：</p>\n<figure>\n  <img src=\"generated/images/guide/forms/ng-model-in-action.png\" alt=\"ngModel in action\" width=\"500\" height=\"74\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xz3kyjmeyqrqsatt681fpl9b\">诊断证明值确实从输入框流向模型， 然后再流回来。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s6n3agfe24pjzruy7vyac1o3\">这就是\n<em>双向数据绑定</em>。 有关更多信息，请参阅 \n<a href=\"guide/template-syntax#ngModel\">使用 NgModel 进行双向绑定</a>，位于 \n<a href=\"guide/template-syntax\">模板语法</a> 页面。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"280stoa4brgv7dz31rf2pezar\">注意，你还向 \n<code>&lt;input&gt;</code> 标签添加了一个 \n<code>name</code> 属性，并将其设置为 \"name\"， 这对于英雄的名字来说是有意义的。任何唯一值都可以，但使用描述性名称会有所帮助。 在与表单结合使用 \n<code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 时，定义 \n<code>name</code> 属性是必需的。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85qurghi4uy36op1w1j49qkjo\">在内部，Angular 会创建 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例， 并将它们注册到 Angular 附加到 \n<code>&lt;form&gt;</code> 标签的 \n<code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令。 每个 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 都以你分配给 \n<code>name</code> 属性的名称注册。 在上一节 \n<a href=\"guide/forms#ngForm\">NgForm 指令</a> 中了解更多信息。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cm9nyj2dx0xtxmez21aei0p7\">向 \n<em>Alter Ego</em> 和 \n<em>Hero Power</em> 添加类似的 \n<code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 绑定和 \n<code>name</code> 属性。 你将删除输入框绑定消息， 并在组件的 \n<code>diagnostic</code> 属性中添加一个新的绑定（在顶部）。 然后，你可以确认双向数据绑定是否\n<em>对整个英雄模型</em>都有效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"196i0cgo07oc1dg3bq3m4gtoo\">修改后，表单的核心应该看起来像这样：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"ngModel-2\">\n{{diagnostic}}\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n  &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n         required\n         [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n  &lt;input type=\"text\"  class=\"form-control\" id=\"alterEgo\"\n         [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.alterEgo\" name=\"alterEgo\"&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n  &lt;select class=\"form-control\"  id=\"power\"\n          required\n          [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.power\" name=\"power\"&gt;\n    &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<div class=\"l-sub-section\">\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dzhkufr44ayhmmbfcjxcza6h\">每个输入元素都有一个 \n<code>id</code> 属性，该属性由 \n<code>label</code> 元素的 \n<code>for</code> 属性使用， 以将标签与它的输入控件匹配。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwtbggtpihr7atnt43f4u40i\">每个输入元素都有一个 \n<code>name</code> 属性，Angular 表单需要它来将控件注册到表单。</li>\n</ul>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6h5nvyjknrwmdv3ao2esuiyc9\">如果你现在运行应用并更改每个英雄模型属性，表单可能会显示如下：</p>\n<figure>\n  <img src=\"generated/images/guide/forms/ng-model-in-action-2.png\" alt=\"ngModel in action\" width=\"515\" height=\"377\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cin0f59t7et62em3n5muhf2ca\">表单顶部的诊断 确认你所做的所有更改都反映在模型中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbrlflzfuymdhtc6hv7fotdk7\"><em>删除</em>顶部的 \n<code>{{diagnostic}}</code> 绑定，因为它已经完成了它的任务。</p>\n<h2 id=\"track-control-state-and-validity-with-ngmodel\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ogv8dr7ovwddwucnffzy5d9p\"><i class=\"material-icons\">link</i>使用 \n<em>ngModel</em> 跟踪控件状态和有效性</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fm4ik2mdaj78tx3m6fg743fi\">在表单中使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 不仅仅提供了双向数据绑定。它还会告诉你 用户是否触碰了控件，值是否发生了变化，或者值是否变得无效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40trsy5uy1e6hyi00i37qsssj\"><em>NgModel</em> 指令不仅跟踪状态；它还会使用特殊的 Angular CSS 类更新控件，这些类反映了状态。 你可以利用这些类名来改变控件的外观。</p>\n<table>\n  <tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59h74h9o1ix9aozvtqv4jqlor\">状态</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r5aea8hlnll90ng5sy8k9y5g\">如果为 true，则为该类</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b95zmwaaewrrs5gg4vtvrtf68\">如果为 false，则为该类</th>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3sjsylw7agkfki5q5fqqbcia9\">控件已被访问。</td>\n    <td>\n      <code>ng-touched</code>\n    </td>\n    <td>\n      <code>ng-untouched</code>\n    </td>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19koybulff6ia4uxanb3hlev2\">控件的值已更改。</td>\n    <td>\n      <code>ng-dirty</code>\n    </td>\n    <td>\n      <code>ng-pristine</code>\n    </td>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vvdb57t6n4d3491rbcf95yd3\">控件的值有效。</td>\n    <td>\n      <code>ng-valid</code>\n    </td>\n    <td>\n      <code>ng-invalid</code>\n    </td>\n  </tr>\n</tbody></table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aixlb64z4bqt183xv8o50fovf\">暂时向 \n<em>Name</em> \n<code>&lt;input&gt;</code> 标签添加一个名为 \n<code>spy</code> 的 \n<a href=\"guide/template-syntax#ref-vars\">模板引用变量</a>， 并使用它来显示输入的 CSS 类。</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"ngModelName-2\">\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n  required\n  [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n  #spy&gt;\n&lt;br&gt;TODO: remove this: {{spy.className}}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8t1u0cptyd2c4688kcurwo5yj\">现在运行应用，看看 \n<em>Name</em> 输入框。 \n<em>精确地</em>按照以下步骤操作：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r7qpusrwu16i3nempihfcxk\">看看，但不要碰。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eiiu0tutzkt7rygvouq1wbegw\">点击名称框内部，然后点击框外部。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9foxd5pvmwas6wtvl5jdtv2dx\">在名称末尾添加斜杠。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq44xo9yl1emhro71phdgzmjk\">擦除名称。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tkpz6j3prh3guui9xpac8kus\">操作和效果如下：</p>\n<figure>\n  <img src=\"generated/images/guide/forms/control-state-transitions-anim.gif\" alt=\"Control State Transition\" width=\"540\" height=\"72\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8habfkbclzhgdguk0byqirm6d\">你应该看到以下转换和类名：</p>\n<figure>\n  <img src=\"generated/images/guide/forms/ng-control-class-changes.png\" alt=\"Control state transitions\" width=\"600\" height=\"311\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iaps36l9ips804m0dka9m2sh\"><code>ng-valid</code>/\n<code>ng-invalid</code> 对是最有趣的，因为你想要在值无效时发出强烈的视觉信号。你还要标记必填字段。 要创建这种视觉反馈，请为 \n<code>ng-*</code> CSS 类添加定义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bie12kksysukihs6xan6o26xd\"><em>删除</em> \n<code>#spy</code> 模板引用变量和 \n<code>TODO</code>，因为它们已经完成了它们的用途。</p>\n<h2 id=\"add-custom-css-for-visual-feedback\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clbrmtl99u4sqbq28qlqh165t\"><i class=\"material-icons\">link</i>添加自定义 CSS 以获得视觉反馈</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yxlo51n4aasvldl44la0spdg\">你可以使用输入框左侧的彩色条同时标记必填字段和无效数据：</p>\n<figure>\n  <img src=\"generated/images/guide/forms/validity-required-indicator.png\" alt=\"Invalid Form\" width=\"600\" height=\"171\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y2pj41xk3x95a48v492897us\">你可以通过将这些类定义添加到一个新的 \n<code>forms.css</code> 文件中来实现这种效果， 你将此文件作为 \n<code>index.html</code> 的同级文件添加到项目中：</p>\n<code-example path=\"forms/src/assets/forms.css\" title=\"src/assets/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gax1c2rhkdt6kckcmtgq769\">更新 \n<code>index.html</code> 的 \n<code>&lt;head&gt;</code> 以包含此样式表：</p>\n<code-example path=\"forms/src/index.html\" linenums=\"false\" title=\"src/index.html (styles)\" region=\"styles\">\n&lt;link rel=\"stylesheet\" href=\"assets/forms.css\"&gt;\n\n</code-example>\n<h2 id=\"show-and-hide-validation-error-messages\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx9vr55xoukmze8vkmrpf4d7o\"><i class=\"material-icons\">link</i>显示和隐藏验证错误消息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eu3jxtoueqge4o22hg5ukblt6\">你可以改进此表单。\n<em>姓名</em>输入框是必填项，清除它会使条形变为红色。 这表明有错误，但用户不知道\n<em>哪里</em>错了，也不知道该怎么办。 利用控件的状态来显示一条有用的消息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wpjoykuxssmmx59ff2hgnxy5\">当用户删除姓名时，表单应如下所示：</p>\n<figure>\n  <img src=\"generated/images/guide/forms/name-required-error.png\" alt=\"Name required\" width=\"400\" height=\"108\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c55k8a1o6c00ihj8x8cawa5m3\">要实现此效果，请使用以下内容扩展 \n<code>&lt;input&gt;</code> 标签：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1ecgoytiasj24tv0nuqjg5jj\">一个 \n<a href=\"guide/template-syntax#ref-vars\">模板引用变量</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20q9axu9op6wdy7i57ujzoppz\">在附近的 \n<code>&lt;div&gt;</code> 中显示“\n<em>必填</em>”消息，仅当控件无效时显示。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n0pz19gejvsx4ly6l0avvlye\">以下是一个向\n<em>姓名</em>输入框添加错误消息的示例：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"name-with-error-msg\">\n&lt;label for=\"name\"&gt;Name&lt;/label&gt;\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n       #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n&lt;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\"&gt;\n  Name is required\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dq2s531xuju4h6y1x4q2l4fc4\">你需要一个模板引用变量，以便从模板内部访问输入框的 Angular 控件。 在这里，你创建了一个名为 \n<code>name</code> 的变量，并将其值设置为“ngModel”。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8njaj61q7m7mfdqd8lne4vvl\">为什么是“ngModel”？ 指令的 \n<a href=\"api/core/Directive\">exportAs</a> 属性 告诉 Angular 如何将引用变量链接到指令。 你将 \n<code>name</code> 设置为 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>，因为 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令的 \n<code>exportAs</code> 属性恰好是“ngModel”。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9250qsvlovbqq0z5fhfjfvjca\">你可以通过将 \n<code>name</code> 控件的属性绑定到消息 \n<code>&lt;div&gt;</code> 元素的 \n<code>hidden</code> 属性来控制姓名错误消息的可见性。</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (hidden-error-msg)\" region=\"hidden-error-msg\">\n&lt;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2jbyly7xkrw5iuparb4bp3i8\">在此示例中，当控件有效或原始时，你隐藏了消息； “原始”表示用户自此表单中显示该值以来未更改过该值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1k3oifanr799rpb6mzgikqp2j\">这种用户体验是开发人员的选择。有些开发人员希望消息始终显示。 如果你忽略 \n<code>pristine</code> 状态，你只会当值有效时隐藏消息。 如果你带着一个新的（空白）英雄或一个无效的英雄进入此组件， 你将立即看到错误消息，在你做任何事情之前。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3uvbudxcevi78mw7ukdrluo05\">有些开发人员希望消息仅在用户进行无效更改时显示。 在控件为“原始”时隐藏消息可以实现此目标。 当你向表单添加一个新的英雄时，你会看到这种选择的意义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bv7taw9fif1ibpnj9cvq0c81\">英雄的\n<em>化名</em>是可选的，所以你可以保留它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bmrj5vahrssf136pald42fro\">英雄的\n<em>力量</em>选择是必填项。 如果你愿意，可以向 \n<code>&lt;select&gt;</code> 添加相同类型的错误处理， 但这不是必须的，因为选择框已经将力量限制为有效值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"386hs0tcsh2uxccym8kz5sbs8\">现在，你将在此表单中添加一个新的英雄。 将一个\n<em>新建英雄</em>按钮放在表单底部，并将它的点击事件绑定到 \n<code>newHero</code> 组件方法。</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"new-hero-button-no-reset\" title=\"src/app/hero-form/hero-form.component.html (New Hero button)\">\n&lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero()\"&gt;New Hero&lt;/button&gt;\n\n</code-example>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"new-hero\" title=\"src/app/hero-form/hero-form.component.ts (New Hero method)\" linenums=\"false\">\nnewHero() {\n  this.model = new Hero(42, '', '');\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2dwmpm9w8608rtgvobzz26q\">再次运行应用程序，点击\n<em>新建英雄</em>按钮，表单就会清除。 输入框左侧的\n<em>必填</em>条形变为红色，表示 \n<code>name</code> 和 \n<code>power</code> 属性无效。 这是可以理解的，因为这些是必填字段。 错误消息被隐藏，因为表单是原始的；你还没有进行任何更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pjq68aczvmcuam49w1962d0h\">输入一个姓名，然后再次点击\n<em>新建英雄</em>。 应用程序显示\n<em>姓名必填</em>错误消息。 你不想在创建新的（空的）英雄时出现错误消息。 为什么现在会收到错误消息？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"961l8dknhddn1tv7aj6butnxz\">在浏览器工具中检查元素显示，\n<em>姓名</em>输入框\n<em>不再是原始的</em>。 表单记得你在点击\n<em>新建英雄</em>之前输入了一个姓名。 替换英雄对象\n<em>没有恢复表单控件的原始状态</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82khfpiqa4oc09rv0floazfex\">你必须以命令式的方式清除所有标志，你可以通过在调用 \n<code>newHero()</code> 方法后调用表单的 \n<code>reset()</code> 方法来实现。</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"new-hero-button-form-reset\" title=\"src/app/hero-form/hero-form.component.html (Reset the form)\">\n&lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\"&gt;New Hero&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elar70ptx362gj7vh3192cg1y\">现在，点击“新建英雄”会重置表单及其控制标志。</p>\n<h2 id=\"submit-the-form-with-ngsubmit\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajhzyzv3rant0kymwbvfl4iay\"><i class=\"material-icons\">link</i>使用 \n<em>ngSubmit</em> 提交表单</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2bvmslnwr41ko7ij2tszg7w2\">用户在填写完表单后应该能够提交它。 表单底部的\n<em>提交</em>按钮 本身什么也不做，但由于它的类型（\n<code>type=\"submit\"</code>），它会 触发表单提交。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cenhiaevo5uu959mq5lytopa\">目前，“表单提交”毫无用处。 要使其有用，请将表单的 \n<code>ngSubmit</code> 事件属性 绑定到英雄表单组件的 \n<code>onSubmit()</code> 方法：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (ngSubmit)\" region=\"ngSubmit\">\n&lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o7bt97fqstiyewn8d0nju7oj\">你已经定义了一个模板引用变量， \n<code>#heroForm</code>，并将其初始化为“ngForm”。 现在，使用该变量通过提交按钮访问表单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ysehi21t0ygh62g8y11osik8\">你将通过 \n<code>heroForm</code> 变量将表单的整体有效性绑定到按钮的 \n<code>disabled</code> 属性 使用事件绑定。以下是代码：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (submit-button)\" region=\"submit-button\">\n&lt;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\"&gt;Submit&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jsx76kxglv2bx9pbyjk5m2wl\">如果你现在运行应用程序，你会发现按钮是启用的，尽管 它还没有做任何有用的事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5rt2vyogqrxu9s30p4m6g9kp\">现在，如果你删除姓名，你就会违反“必填”规则，这 会在错误消息中得到记录。 \n<em>提交</em>按钮也被禁用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r9vggh71n836ievcu27rg2qn\">不满意？想一想。如果没有 Angular 的帮助，你将如何 将按钮的启用/禁用状态连接到表单的有效性？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmpy3u03axh1aln1fjxkx38z3\">对你来说，它就这么简单：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1utddrii3a98ve2ocs9ivbd9x\">在（增强后的）表单元素上定义一个模板引用变量。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39v4gs6bcyayo4g689nlv9zvi\">在许多行之外的按钮中引用该变量。</li>\n</ol>\n<h2 id=\"toggle-two-form-regions-extra-credit\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21tkow4rvr7xjp8trvcey7b4u\"><i class=\"material-icons\">link</i>切换两个表单区域（额外奖励）</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8aem29q1bz5iab9440smdvp3n\">目前，提交表单并没有什么戏剧性。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnfv6t6ww85j2u9xfs55kp9vf\">对于演示来说，这是一个毫不奇怪的观察结果。说实话， 把它变得更有趣不会教你任何关于表单的新知识。 但这是一个练习你新获得的 绑定技能的机会。 如果你不感兴趣，请跳到本页的结论。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnccuh3budn4dnuu9ro73t4z9\">为了获得更醒目的视觉效果， 隐藏数据输入区域并显示其他内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6y6nylxx27puq92pv0gjx9o9\">将表单包装在一个 \n<code>&lt;div&gt;</code> 中，并将 它的 \n<code>hidden</code> 属性绑定到 \n<code>HeroFormComponent.submitted</code> 属性。</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"edit-div\">\n&lt;div [hidden]=\"submitted\"&gt;\n  &lt;h1&gt;Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&lt;/h1&gt;\n  &lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n     &lt;!-- ... all of the form ... --&gt;\n\n  &lt;/form&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rj50zxr99g1q15sky5qur48g\">主表单从一开始就可见，因为 \n<code>submitted</code> 属性在提交表单之前为 false， 正如 \n<code>HeroFormComponent</code> 中的这段代码所示：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.ts\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.ts (submitted)\" region=\"submitted\">\nsubmitted = false;\n\nonSubmit() { this.submitted = true; }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lj6wwd6uwnxo36aj8sqpomlc\">当你点击\n<em>提交</em>按钮时，\n<code>submitted</code> 标志变为 true，表单就会消失 如计划的那样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g9c85h05rmiimo3js55o2u1i\">现在，应用程序需要在表单处于提交状态时显示其他内容。 在刚刚编写的 \n<code>&lt;div&gt;</code> 包装器下方添加以下 HTML：</p>\n<code-example path=\"forms/src/app/hero-form/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form/hero-form.component.html (excerpt)\" region=\"submitted\">\n&lt;div [hidden]=\"!submitted\"&gt;\n  &lt;h2&gt;You submitted the following:&lt;/h2&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Name&lt;/div&gt;\n    &lt;div class=\"col-xs-9  pull-left\"&gt;{{ model.name }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Alter Ego&lt;/div&gt;\n    &lt;div class=\"col-xs-9 pull-left\"&gt;{{ model.alterEgo }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Power&lt;/div&gt;\n    &lt;div class=\"col-xs-9 pull-left\"&gt;{{ model.power }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;br&gt;\n  &lt;button class=\"btn btn-primary\" (click)=\"submitted=false\"&gt;Edit&lt;/button&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acw167tcf6a3ij1f1sn1053r5\">英雄又出现了，以只读方式显示，并使用插值绑定。 此 \n<code>&lt;div&gt;</code> 仅在组件处于提交状态时显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vuwalztyzeyahr8zvaq6w49a\">HTML 包含一个\n<em>编辑</em>按钮，它的点击事件绑定到一个表达式 该表达式清除 \n<code>submitted</code> 标志。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etl3z0j8dv6rcd510geecp1sa\">当你点击\n<em>编辑</em>按钮时，此块就会消失，可编辑的表单就会重新出现。</p>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpb0c6r7p1o7h14s7qzwma32s\">本页中讨论的 Angular 表单利用以下 框架特性来提供对数据修改、验证等的支持：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2d2gy6rsropx7wvw0jk9qoqa\">一个 Angular HTML 表单模板。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azay4msgr8zilqt5xg5re5ub7\">一个带有 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的表单组件类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnkrptupa0tmiofpyv5xry2jj\">通过绑定到 \n<code><a href=\"api/forms/NgForm#ngSubmit\" class=\"code-anchor\">NgForm.ngSubmit</a></code> 事件属性来处理表单提交。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fhmqmifdgvb8c5kgkrv0ersu\">模板引用变量，例如 \n<code>#heroForm</code> 和 \n<code>#name</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnf01oy44301pwtsdnxwx3wjc\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法用于双向数据绑定。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qaojc5im38ol1x0ks8xpii4e\">使用 \n<code>name</code> 属性进行验证和表单元素更改跟踪。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bmofdb6gzxoahs206phsis6u\">输入控件上的引用变量的 \n<code>valid</code> 属性，用于检查控件是否有效，并显示/隐藏错误消息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qu2yvumw96woy15apzd2w9og\">通过绑定到 \n<code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 的有效性来控制“提交”按钮的启用状态。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19dc46yvy5bi2mkvliebgc3s7\">自定义 CSS 类，为用户提供有关无效控件的视觉反馈。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rmu2hz28n1q1u3gzpka9skt1\">以下是应用程序最终版本的代码：</p>\n<code-tabs>\n\n  <code-pane title=\"hero-form/hero-form.component.ts\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"final\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero }    from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-form',\n  templateUrl: './hero-form.component.html',\n  styleUrls: ['./hero-form.component.css']\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  newHero() {\n    this.model = new Hero(42, '', '');\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"hero-form/hero-form.component.html\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"final\">\n&lt;div class=\"container\"&gt;\n  &lt;div [hidden]=\"submitted\"&gt;\n    &lt;h1&gt;Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&lt;/h1&gt;\n    &lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n               required\n               [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n               #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n        &lt;div [hidden]=\"name.valid || name.pristine\"\n             class=\"alert alert-danger\"&gt;\n          Name is required\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"alterEgo\"\n               [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.alterEgo\" name=\"alterEgo\"&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n        &lt;select class=\"form-control\" id=\"power\"\n                required\n                [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.power\" name=\"power\"\n                #power=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n          &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n        &lt;/select&gt;\n        &lt;div [hidden]=\"power.valid || power.pristine\" class=\"alert alert-danger\"&gt;\n          Power is required\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\"&gt;Submit&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\"&gt;New Hero&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/div&gt;\n\n  &lt;div [hidden]=\"!submitted\"&gt;\n    &lt;h2&gt;You submitted the following:&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Name&lt;/div&gt;\n      &lt;div class=\"col-xs-9  pull-left\"&gt;{{ model.name }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Alter Ego&lt;/div&gt;\n      &lt;div class=\"col-xs-9 pull-left\"&gt;{{ model.alterEgo }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Power&lt;/div&gt;\n      &lt;div class=\"col-xs-9 pull-left\"&gt;{{ model.power }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;button class=\"btn btn-primary\" (click)=\"submitted=false\"&gt;Edit&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-pane>\n\n  <code-pane title=\"hero.ts\" path=\"forms/src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app.module.ts\" path=\"forms/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\nimport { HeroFormComponent } from './hero-form/hero-form.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"app.component.html\" path=\"forms/src/app/app.component.html\">\n&lt;app-hero-form&gt;&lt;/app-hero-form&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"app.component.ts\" path=\"forms/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"main.ts\" path=\"forms/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n  <code-pane title=\"forms.css\" path=\"forms/src/assets/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-pane>\n\n</code-tabs>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/change-log\n - guide/form-validation\n - guide/glossary\n - guide/npm-packages\n - guide/reactive-forms\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/core/Component\n - api/core/Directive\n - api/core/NgModule\n - api/core/enableProdMode\n - api/forms/Form\n - api/forms/FormControl\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgForm#ngSubmit\n - api/forms/NgModel\n - api/forms/NgSelectOption\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - guide/displaying-data\n - guide/forms#add-custom-css-for-visual-feedback\n - guide/forms#add-powers-with-ngfor\n - guide/forms#create-a-form-component\n - guide/forms#create-an-initial-html-form-template\n - guide/forms#create-the-hero-model-class\n - guide/forms#forms\n - guide/forms#ngForm\n - guide/forms#revise-appcomponenthtml\n - guide/forms#revise-appmodulets\n - guide/forms#setup\n - guide/forms#show-and-hide-validation-error-messages\n - guide/forms#submit-the-form-with-ngsubmit\n - guide/forms#summary\n - guide/forms#template-driven-forms\n - guide/forms#the-ngform-directive\n - guide/forms#toggle-two-form-regions-extra-credit\n - guide/forms#track-control-state-and-validity-with-ngmodel\n - guide/forms#two-way-data-binding-with-ngmodel\n - guide/template-syntax\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#ngModel\n - guide/template-syntax#ref-vars\n - guide/user-input\n - http://getbootstrap.com/css/\n-->"
}