{
  "id" : "guide/entry-components",
  "title" : "入口组件",
  "contents" : "<div class=\"content\">\n<h1 id=\"entry-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55uj82hwp4ad7jyuknbxx5ido\"><i class=\"material-icons\">link</i>入口组件</h1>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvushkv2hv9s5ejwrr6i4rhvb\"><i class=\"material-icons\">link</i>先决条件：</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wtw65w7vo9ysndhyuq3y2kie\">对以下概念的基本理解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t22zgv8ykbwmu1loddo1606h\"><a href=\"guide/bootstrapping\">引导</a>。</li>\n</ul>\n<hr>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dj9k1jcmji1lmxi3elg96lq9\">入口组件是 Angular 按类型强制加载的任何组件（这意味着你没有在模板中引用它）。你通过在 NgModule 中引导入口组件或将其包含在路由定义中来指定入口组件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evqt9tvn3uyw3fyjurbo4aizq\">为了对比这两种类型的组件，有包含在模板中的组件，它们是声明式的。此外，还有你强制加载的组件；也就是说，入口组件。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f7e7mth82uo1y0cn4wnbjtsv\">入口组件主要有两种：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpsy9oraa0ey6i63tj30rc07k\">引导的根组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gscrcxfgaazqbd6y4ve2yo6b\">在路由定义中指定的组件。</li>\n</ul>\n<h2 id=\"a-bootstrapped-entry-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8azzq58rdvvnqgr99uygcj1vu\"><i class=\"material-icons\">link</i>引导的入口组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sdbw6qgy7k8sn1s6oxhsfuuu\">以下是在基本 \n<code>app.module.ts</code> 中指定引导组件 \n<code>AppComponent</code> 的示例：</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent] // bootstrapped entry component\n})\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4wa8xbxf3r9dvhpss1ntk0pu\">引导组件是 Angular 在引导过程中（应用程序启动）加载到 DOM 中的入口组件。 其他入口组件通过其他方式动态加载，例如使用路由器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52vw4wgo5hht513d4moex0bg3\">Angular 动态加载根 \n<code>AppComponent</code>，因为它在 \n<code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> 中按类型列出。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amc3l43x5bc06gstytipaprff\">也可以在模块的 \n<code>ngDoBootstrap()</code> 方法中强制引导组件。 \n<code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> 属性告诉编译器这是一个入口组件， 并且应该生成代码以使用此组件引导应用程序。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"744ro0fancp6z5zm9pto87cb0\">引导组件必然是入口组件，因为引导是一个强制过程，因此它需要一个入口组件。</p>\n<h2 id=\"a-routed-entry-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l22jkwlse7mxhve20axy63i6\"><i class=\"material-icons\">link</i>路由的入口组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29bk10jsx4afoyp6pb96aqpvf\">第二种入口组件出现在路由定义中，如下所示：</p>\n<code-example language=\"typescript\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CustomerListComponent\n  }\n];\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jzv4vey492to3olyl2o9g9oe\">路由定义通过 \n<code>component: CustomerListComponent</code> 按类型引用组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv6fpsprirp1gv6c09m2yljot\">所有路由组件都必须是入口组件。因为这将要求你在两个地方添加组件（路由器和 \n<code>entryComponents</code>），所以编译器足够智能，可以识别这是一个路由定义，并自动将路由组件添加到 \n<code>entryComponents</code> 中。</p>\n<h2 id=\"the-entrycomponents-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uxww61k20x69l1il5lrwj9v5\"><i class=\"material-icons\">link</i><code>entryComponents</code> 数组</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n59wrhtl1op790i69sc9atvg\">虽然 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器有一个 \n<code>entryComponents</code> 数组，但大多数情况下 你无需显式设置任何入口组件，因为 Angular 会自动将 \n<code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> 中列出的组件和路由定义中的组件添加到入口组件中。虽然这两种机制占了大多数入口组件，但如果你的应用程序恰好通过类型强制引导或动态加载组件， 则必须将其显式添加到 \n<code>entryComponents</code> 中。</p>\n<h3 id=\"entrycomponents-and-the-compiler\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxhsq1ejb9my3cvb0rrfo95ch\"><i class=\"material-icons\">link</i><code>entryComponents</code> 和编译器</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2lrtiytn99bnokk10wg4fkxn\">对于生产环境的应用，你希望加载尽可能小的代码。 代码应该只包含你实际需要的类， 并排除从未使用的组件。为此，Angular 编译器只为从 \n<code>entryComponents</code> 可达的组件生成代码；这意味着，向 \n<code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 添加更多引用并不意味着它们一定会包含在最终的捆绑包中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1yhdvg5lyst1c2zoopo8t3i3\">事实上，许多库声明并导出了你永远不会使用的组件。 例如，一个 Material Design 库会导出所有组件，因为它不知道你会使用哪些。然而，你不太可能使用它们全部。 对于你没有引用的那些组件，摇树优化会将它们从最终的代码包中删除。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cx1eecaq43vvurgrh9v57foku\">如果某个组件不是\n<em>入口组件</em>，并且在模板中找不到， 摇树优化会将其丢弃。因此，最好只添加真正作为入口组件的组件，以帮助你的应用尽可能精简。</p>\n<hr>\n<h2 id=\"more-on-angular-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzmpnagmv50kbck7ffuyo1adv\"><i class=\"material-icons\">link</i>关于 Angular 模块的更多信息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"320pd4quk21g01cifflgmc0pj\">你可能还会对以下内容感兴趣：</p>\n<ul>\n<li><a href=\"guide/module-types\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c4fu4x6con6h24blx2al74hsq\">NgModule 的分类</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4o11nawiki9kz1ug8z0lzy1ho\"><a href=\"guide/lazy-loading-ngmodules\">使用 Angular 路由器惰性加载模块</a>.</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg213zznp5hwjyrbbmmmf2q3n\"><a href=\"guide/providers\">提供者</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"butlft4l8qas614b21oe50py7\"><a href=\"guide/ngmodule-faq\">NgModules 常见问题解答</a>.</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodules\n-->\n<!-- links from this doc:\n - api/core/NgModule\n - api/core/NgModule#bootstrap\n - api/core/NgModule#declarations\n - api/forms/FormsModule\n - api/http/HttpModule\n - api/platform-browser/BrowserModule\n - api/router/Routes\n - guide/bootstrapping\n - guide/entry-components#a-bootstrapped-entry-component\n - guide/entry-components#a-routed-entry-component\n - guide/entry-components#entry-components\n - guide/entry-components#entrycomponents-and-the-compiler\n - guide/entry-components#more-on-angular-modules\n - guide/entry-components#prerequisites\n - guide/entry-components#the-entrycomponents-array\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-faq\n - guide/providers\n-->"
}