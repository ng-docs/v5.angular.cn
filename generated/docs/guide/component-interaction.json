{
  "id" : "guide/component-interaction",
  "title" : "组件交互",
  "contents" : "<div class=\"content\">\n<h1 id=\"component-interaction\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eiailko9itntgwgogve441e1u\"><i class=\"material-icons\">link</i>组件交互</h1>\n<a id=\"top\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d95yw180h7w62ustu58jwurr7\">此指南包含一些常见组件通信场景的方案，这些场景中两个或多个组件共享信息。 \n<a id=\"toc\"></a></p>\n<!--\n\n# Contents\n\n* [Pass data from parent to child with input binding](guide/component-interaction#parent-to-child)\n* [Intercept input property changes with a setter](guide/component-interaction#parent-to-child-setter)\n* [Intercept input property changes with `ngOnChanges()`](guide/component-interaction#parent-to-child-on-changes)\n* [Parent calls an `@ViewChild()`](guide/component-interaction#parent-to-view-child)\n* [Parent and children communicate via a service](guide/component-interaction#bidirectional-service)\n\n-->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1nwq36q7soen69lfz1fiwb6q\"><strong>查看 \n <live-example name=\"component-interaction\"></live-example></strong>。</p>\n<a id=\"parent-to-child\"></a>\n<h2 id=\"pass-data-from-parent-to-child-with-input-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ax6epdcrjlh2rifhq4p4hi7vi\"><i class=\"material-icons\">link</i>使用输入绑定将数据从父组件传递到子组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj56mtprbdammmacdm2t2o05n\"><code>HeroChildComponent</code> 有两个\n<strong><em>输入属性</em></strong>， 通常用 \n<a href=\"guide/template-syntax#inputs-outputs\">@Input 装饰器</a> 修饰。</p>\n<code-example path=\"component-interaction/src/app/hero-child.component.ts\" title=\"component-interaction/src/app/hero-child.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-child',\n  template: `\n    &lt;h3&gt;{{hero.name}} says:&lt;/h3&gt;\n    &lt;p&gt;I, {{hero.name}}, am at your service, {{masterName}}.&lt;/p&gt;\n  `\n})\nexport class HeroChildComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('master') masterName: string;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axmr0vnu79mah3ugm2ajp9ejg\">第二个 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 将子组件属性名 \n<code>masterName</code> 作为别名 \n<code>'master'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"av5w9xjt4u3yy2h3ixtwws8jk\"><code>HeroParentComponent</code> 将子组件 \n<code>HeroChildComponent</code> 嵌套在 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 重复器中， 将它的 \n<code>master</code> 字符串属性绑定到子组件的 \n<code>master</code> 别名， 并将每次迭代的 \n<code>hero</code> 实例绑定到子组件的 \n<code>hero</code> 属性。</p>\n<code-example path=\"component-interaction/src/app/hero-parent.component.ts\" title=\"component-interaction/src/app/hero-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { HEROES } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-parent',\n  template: `\n    &lt;h2&gt;{{master}} controls {{heroes.length}} heroes&lt;/h2&gt;\n    &lt;app-hero-child *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n      [hero]=\"hero\"\n      [master]=\"master\"&gt;\n    &lt;/app-hero-child&gt;\n  `\n})\nexport class HeroParentComponent {\n  heroes = HEROES;\n  master = 'Master';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exxq3hminlei5uzhfcom3tub3\">运行的应用程序显示三个英雄：</p>\n<figure>\n  <img src=\"generated/images/guide/component-interaction/parent-to-child.png\" alt=\"Parent-to-child\" width=\"272\" height=\"267\">\n</figure>\n<h3 class=\"no-toc\" id=\"test-it\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jfs5cjanyvbfyv3euvwb8lsa\"><i class=\"material-icons\">link</i>测试它</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vwo12lk6nc0mh4jounmpwwuz\">端到端测试，验证所有子组件都已实例化并按预期显示：</p>\n<code-example path=\"component-interaction/e2e/app.e2e-spec.ts\" region=\"parent-to-child\" title=\"component-interaction/e2e/app.e2e-spec.ts\">\n// ...\nlet _heroNames = ['Mr. IQ', 'Magneta', 'Bombasto'];\nlet _masterName = 'Master';\n\nit('should pass properties to children properly', function () {\n  let parent = element.all(by.tagName('app-hero-parent')).get(0);\n  let heroes = parent.all(by.tagName('app-hero-child'));\n\n  for (let i = 0; i &lt; _heroNames.length; i++) {\n    let childTitle = heroes.get(i).element(by.tagName('h3')).getText();\n    let childDetail = heroes.get(i).element(by.tagName('p')).getText();\n    expect(childTitle).toEqual(_heroNames[i] + ' says:');\n    expect(childDetail).toContain(_masterName);\n  }\n});\n// ...\n\n</code-example>\n<p><a href=\"guide/component-interaction#top\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"parent-to-child-setter\"></a>\n<h2 id=\"intercept-input-property-changes-with-a-setter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fec4jw8wtsghfi8zl8q2mlkz\"><i class=\"material-icons\">link</i>使用 setter 拦截输入属性更改</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66vum4qsiri3pnk8xijlgcaqq\">使用输入属性 setter 拦截来自父组件的值并对其进行操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jmf8145kroncu2uyosa5fv8a\">子组件 \n<code>NameChildComponent</code> 中 \n<code>name</code> 输入属性的 setter 会从名称中修剪空格，并将空值替换为默认文本。</p>\n<code-example path=\"component-interaction/src/app/name-child.component.ts\" title=\"component-interaction/src/app/name-child.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-name-child',\n  template: '&lt;h3&gt;\"{{name}}\"&lt;/h3&gt;'\n})\nexport class NameChildComponent {\n  private _name = '';\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n  set name(name: string) {\n    this._name = (name &amp;&amp; name.trim()) || '&lt;no name set&gt;';\n  }\n\n  get name(): string { return this._name; }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bpbkjpreoacehxf91ef4pr3l\">以下是 \n<code>NameParentComponent</code>，它演示了名称的各种形式，包括一个全为空格的名称：</p>\n<code-example path=\"component-interaction/src/app/name-parent.component.ts\" title=\"component-interaction/src/app/name-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-name-parent',\n  template: `\n  &lt;h2&gt;Master controls {{names.length}} names&lt;/h2&gt;\n  &lt;app-name-child *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let name of names\" [name]=\"name\"&gt;&lt;/app-name-child&gt;\n  `\n})\nexport class NameParentComponent {\n  // Displays 'Mr. IQ', '&lt;no name set&gt;', 'Bombasto'\n  names = ['Mr. IQ', '   ', '  Bombasto  '];\n}\n\n</code-example>\n<figure>\n  <img src=\"generated/images/guide/component-interaction/setter.png\" alt=\"Parent-to-child-setter\" width=\"322\" height=\"193\">\n</figure>\n<h3 class=\"no-toc\" id=\"test-it-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jfs5cjanyvbfyv3euvwb8lsa\"><i class=\"material-icons\">link</i>测试它</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lu40g6lf2mlup6mb3v89vyk9\">端到端测试输入属性 setter，包括空名称和非空名称：</p>\n<code-example path=\"component-interaction/e2e/app.e2e-spec.ts\" region=\"parent-to-child-setter\" title=\"component-interaction/e2e/app.e2e-spec.ts\">\n// ...\nit('should display trimmed, non-empty names', function () {\n  let _nonEmptyNameIndex = 0;\n  let _nonEmptyName = '\"Mr. IQ\"';\n  let parent = element.all(by.tagName('app-name-parent')).get(0);\n  let hero = parent.all(by.tagName('app-name-child')).get(_nonEmptyNameIndex);\n\n  let displayName = hero.element(by.tagName('h3')).getText();\n  expect(displayName).toEqual(_nonEmptyName);\n});\n\nit('should replace empty name with default name', function () {\n  let _emptyNameIndex = 1;\n  let _defaultName = '\"&lt;no name set&gt;\"';\n  let parent = element.all(by.tagName('app-name-parent')).get(0);\n  let hero = parent.all(by.tagName('app-name-child')).get(_emptyNameIndex);\n\n  let displayName = hero.element(by.tagName('h3')).getText();\n  expect(displayName).toEqual(_defaultName);\n});\n// ...\n\n</code-example>\n<p><a href=\"guide/component-interaction#top\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"parent-to-child-on-changes\"></a>\n<h2 id=\"intercept-input-property-changes-with-ngonchanges\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alpjrasv3000kzjjdadk0uxne\"><i class=\"material-icons\">link</i>使用 \n<em>ngOnChanges()</em> 拦截输入属性更改</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21hk54yol7a0po54sdwurgob9\">使用 \n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> 生命周期钩子接口的 \n<code>ngOnChanges()</code> 方法检测并对输入属性值的更改进行操作。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6uxfofg9q6584fse7j9spjmv5\">当监视多个相互作用的输入属性时，你可能更喜欢这种方法而不是属性 setter。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ppia5qfuwo0ewd31w0o5jzqj\">在 \n<a href=\"guide/lifecycle-hooks\">生命周期钩子</a> 章节中了解 \n<code>ngOnChanges()</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqmhoyoqtljg1cvviruezod87\">此 \n<code>VersionChildComponent</code> 检测 \n<code>major</code> 和 \n<code>minor</code> 输入属性的更改，并组合一条日志消息来报告这些更改：</p>\n<code-example path=\"component-interaction/src/app/version-child.component.ts\" title=\"component-interaction/src/app/version-child.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a>, <a href=\"api/core/SimpleChange\" class=\"code-anchor\">SimpleChange</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-version-child',\n  template: `\n    &lt;h3&gt;<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> {{major}}.{{minor}}&lt;/h3&gt;\n    &lt;h4&gt;Change log:&lt;/h4&gt;\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let change of changeLog\"&gt;{{change}}&lt;/li&gt;\n    &lt;/ul&gt;\n  `\n})\nexport class VersionChildComponent implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() major: number;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() minor: number;\n  changeLog: string[] = [];\n\n  ngOnChanges(changes: {[propKey: string]: <a href=\"api/core/SimpleChange\" class=\"code-anchor\">SimpleChange</a>}) {\n    let log: string[] = [];\n    for (let propName in changes) {\n      let changedProp = changes[propName];\n      let to = JSON.stringify(changedProp.currentValue);\n      if (changedProp.isFirstChange()) {\n        log.push(`Initial value of ${propName} set to ${to}`);\n      } else {\n        let from = JSON.stringify(changedProp.previousValue);\n        log.push(`${propName} changed from ${from} to ${to}`);\n      }\n    }\n    this.changeLog.push(log.join(', '));\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3w6t4pihvepx1qnvaa0rjxxio\"><code>VersionParentComponent</code> 提供 \n<code>minor</code> 和 \n<code>major</code> 值，并将按钮绑定到更改这些值的方法。</p>\n<code-example path=\"component-interaction/src/app/version-parent.component.ts\" title=\"component-interaction/src/app/version-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-version-parent',\n  template: `\n    &lt;h2&gt;Source code version&lt;/h2&gt;\n    &lt;button (click)=\"newMinor()\"&gt;New minor version&lt;/button&gt;\n    &lt;button (click)=\"newMajor()\"&gt;New major version&lt;/button&gt;\n    &lt;app-version-child [major]=\"major\" [minor]=\"minor\"&gt;&lt;/app-version-child&gt;\n  `\n})\nexport class VersionParentComponent {\n  major = 1;\n  minor = 23;\n\n  newMinor() {\n    this.minor++;\n  }\n\n  newMajor() {\n    this.major++;\n    this.minor = 0;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3d8kdidawp46fb913ovvbpz4u\">以下是按钮点击序列的输出：</p>\n<figure>\n  <img src=\"generated/images/guide/component-interaction/parent-to-child-on-changes.gif\" alt=\"Parent-to-child-onchanges\" width=\"481\" height=\"264\">\n</figure>\n<h3 class=\"no-toc\" id=\"test-it-2\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jfs5cjanyvbfyv3euvwb8lsa\"><i class=\"material-icons\">link</i>测试它</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54l8z9f9627nsrmijducxszd2\">测试\n<strong><em>两个</em></strong>输入属性是否都已初始设置，以及按钮点击是否会触发预期的 \n<code>ngOnChanges</code> 调用和值：</p>\n<code-example path=\"component-interaction/e2e/app.e2e-spec.ts\" region=\"parent-to-child-onchanges\" title=\"component-interaction/e2e/app.e2e-spec.ts\">\n// ...\n// Test must all execute in this exact order\nit('should set expected initial values', function () {\n  let actual = getActual();\n\n  let initialLabel = '<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> 1.23';\n  let initialLog = 'Initial value of major set to 1, Initial value of minor set to 23';\n\n  expect(actual.label).toBe(initialLabel);\n  expect(actual.count).toBe(1);\n  expect(actual.logs.get(0).getText()).toBe(initialLog);\n});\n\nit('should set expected values after clicking \\'Minor\\' twice', function () {\n  let repoTag = element(by.tagName('app-version-parent'));\n  let newMinorButton = repoTag.all(by.tagName('button')).get(0);\n\n  newMinorButton.click().then(function() {\n    newMinorButton.click().then(function() {\n      let actual = getActual();\n\n      let labelAfter2Minor = '<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> 1.25';\n      let logAfter2Minor = 'minor changed from 24 to 25';\n\n      expect(actual.label).toBe(labelAfter2Minor);\n      expect(actual.count).toBe(3);\n      expect(actual.logs.get(2).getText()).toBe(logAfter2Minor);\n    });\n  });\n});\n\nit('should set expected values after clicking \\'Major\\' once', function () {\n  let repoTag = element(by.tagName('app-version-parent'));\n  let newMajorButton = repoTag.all(by.tagName('button')).get(1);\n\n  newMajorButton.click().then(function() {\n    let actual = getActual();\n\n    let labelAfterMajor = '<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> 2.0';\n    let logAfterMajor = 'major changed from 1 to 2, minor changed from 25 to 0';\n\n    expect(actual.label).toBe(labelAfterMajor);\n    expect(actual.count).toBe(4);\n    expect(actual.logs.get(3).getText()).toBe(logAfterMajor);\n  });\n});\n\nfunction getActual() {\n  let versionTag = element(by.tagName('app-version-child'));\n  let label = versionTag.element(by.tagName('h3')).getText();\n  let ul = versionTag.element((by.tagName('ul')));\n  let logs = ul.all(by.tagName('li'));\n\n  return {\n    label: label,\n    logs: logs,\n    count: logs.count()\n  };\n}\n// ...\n\n</code-example>\n<p><a href=\"guide/component-interaction#top\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"child-to-parent\"></a>\n<h2 id=\"parent-listens-for-child-event\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ivp0xaegmuozitolyhnwghjo\"><i class=\"material-icons\">link</i>父组件监听子组件事件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a64grh8f4y44eyuurf2p8nzar\">子组件公开了一个 \n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 属性，它在发生某些事情时会 \n<code>emit</code> 事件。 父组件绑定到该事件属性并对这些事件做出反应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwc00pahzr7lcsi3dsj5r4fg2\">子组件的 \n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 属性是一个\n<strong><em>输出属性</em></strong>， 通常用 \n<a href=\"guide/template-syntax#inputs-outputs\">@Output 装饰器</a> 修饰， 如以下 \n<code>VoterComponent</code> 中所示：</p>\n<code-example path=\"component-interaction/src/app/voter.component.ts\" title=\"component-interaction/src/app/voter.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-voter',\n  template: `\n    &lt;h4&gt;{{name}}&lt;/h4&gt;\n    &lt;button (click)=\"vote(true)\"  [disabled]=\"voted\"&gt;Agree&lt;/button&gt;\n    &lt;button (click)=\"vote(false)\" [disabled]=\"voted\"&gt;Disagree&lt;/button&gt;\n  `\n})\nexport class VoterComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()  name: string;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onVoted = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;boolean&gt;();\n  voted = false;\n\n  vote(agreed: boolean) {\n    this.onVoted.emit(agreed);\n    this.voted = true;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5isjq5pafxbo34tuypyigkjs\">点击按钮会触发 \n<code>true</code> 或 \n<code>false</code> 的发射，即布尔型\n<em>有效载荷</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bz6lkmyp1y21sjtlgcri9fz8\">父组件 \n<code>VoteTakerComponent</code> 绑定了一个名为 \n<code>onVoted()</code> 的事件处理程序，该处理程序响应子组件事件 有效载荷 \n<code>$event</code> 并更新计数器。</p>\n<code-example path=\"component-interaction/src/app/votetaker.component.ts\" title=\"component-interaction/src/app/votetaker.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }      from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-vote-taker',\n  template: `\n    &lt;h2&gt;Should mankind colonize the Universe?&lt;/h2&gt;\n    &lt;h3&gt;Agree: {{agreed}}, Disagree: {{disagreed}}&lt;/h3&gt;\n    &lt;app-voter *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let voter of voters\"\n      [name]=\"voter\"\n      (onVoted)=\"onVoted($event)\"&gt;\n    &lt;/app-voter&gt;\n  `\n})\nexport class VoteTakerComponent {\n  agreed = 0;\n  disagreed = 0;\n  voters = ['Mr. IQ', 'Ms. Universe', 'Bombasto'];\n\n  onVoted(agreed: boolean) {\n    agreed ? this.agreed++ : this.disagreed++;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4egjcam8q6g01k0xld5eat6q\">框架将事件参数（由 \n<code>$event</code> 表示）传递给处理程序方法， 该方法会处理它：</p>\n<figure>\n  <img src=\"generated/images/guide/component-interaction/child-to-parent.gif\" alt=\"Child-to-parent\" width=\"418\" height=\"342\">\n</figure>\n<h3 class=\"no-toc\" id=\"test-it-3\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jfs5cjanyvbfyv3euvwb8lsa\"><i class=\"material-icons\">link</i>测试它</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39hc44nk3uk3k48ypk105ja60\">测试点击\n<em>同意</em>和\n<em>不同意</em>按钮是否会更新相应的计数器：</p>\n<code-example path=\"component-interaction/e2e/app.e2e-spec.ts\" region=\"child-to-parent\" title=\"component-interaction/e2e/app.e2e-spec.ts\">\n// ...\nit('should not emit the event initially', function () {\n  let voteLabel = element(by.tagName('app-vote-taker'))\n    .element(by.tagName('h3')).getText();\n  expect(voteLabel).toBe('Agree: 0, Disagree: 0');\n});\n\nit('should process Agree vote', function () {\n  let agreeButton1 = element.all(by.tagName('app-voter')).get(0)\n    .all(by.tagName('button')).get(0);\n  agreeButton1.click().then(function() {\n    let voteLabel = element(by.tagName('app-vote-taker'))\n      .element(by.tagName('h3')).getText();\n    expect(voteLabel).toBe('Agree: 1, Disagree: 0');\n  });\n});\n\nit('should process Disagree vote', function () {\n  let agreeButton1 = element.all(by.tagName('app-voter')).get(1)\n    .all(by.tagName('button')).get(1);\n  agreeButton1.click().then(function() {\n    let voteLabel = element(by.tagName('app-vote-taker'))\n      .element(by.tagName('h3')).getText();\n    expect(voteLabel).toBe('Agree: 1, Disagree: 1');\n  });\n});\n// ...\n\n</code-example>\n<p><a href=\"guide/component-interaction#top\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<h2 id=\"parent-interacts-with-child-via-local-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpf8ubq5rz868g7uimzz3cdop\"><i class=\"material-icons\">link</i>父组件通过\n<em>局部变量</em>与子组件交互</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dq21ju8sj461pkro0fpu87il\">父组件不能使用数据绑定来读取子组件属性 或调用子组件方法。你可以通过 为子组件元素创建模板引用变量来实现这两种操作， 然后在\n<em>父组件模板中</em>引用该变量， 如以下示例所示。</p>\n<a id=\"countdown-timer-example\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dempkiic9erwcwnu8zgma7t2\">以下是一个子组件 \n<code>CountdownTimerComponent</code>，它会重复倒计时到零并发射火箭。 它有 \n<code>start</code> 和 \n<code>stop</code> 方法来控制时钟，并在自己的模板中显示一个 倒计时状态消息。</p>\n<code-example path=\"component-interaction/src/app/countdown-timer.component.ts\" title=\"component-interaction/src/app/countdown-timer.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-countdown-timer',\n  template: '&lt;p&gt;{{message}}&lt;/p&gt;'\n})\nexport class CountdownTimerComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n\n  intervalId = 0;\n  message = '';\n  seconds = 11;\n\n  clearTimer() { clearInterval(this.intervalId); }\n\n  ngOnInit()    { this.start(); }\n  ngOnDestroy() { this.clearTimer(); }\n\n  start() { this.countDown(); }\n  stop()  {\n    this.clearTimer();\n    this.message = `Holding at T-${this.seconds} seconds`;\n  }\n\n  private countDown() {\n    this.clearTimer();\n    this.intervalId = window.setInterval(() =&gt; {\n      this.seconds -= 1;\n      if (this.seconds === 0) {\n        this.message = 'Blast off!';\n      } else {\n        if (this.seconds &lt; 0) { this.seconds = 10; } // reset\n        this.message = `T-${this.seconds} seconds and counting`;\n      }\n    }, 1000);\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95kbbmyons8mpalz5crkl55s9\">托管计时器组件的 \n<code>CountdownLocalVarParentComponent</code> 如下所示：</p>\n<code-example path=\"component-interaction/src/app/countdown-parent.component.ts\" region=\"lv\" title=\"component-interaction/src/app/countdown-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }                from '@angular/core';\nimport { CountdownTimerComponent }  from './countdown-timer.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-countdown-parent-lv',\n  template: `\n  &lt;h3&gt;Countdown to Liftoff (via local variable)&lt;/h3&gt;\n  &lt;button (click)=\"timer.start()\"&gt;Start&lt;/button&gt;\n  &lt;button (click)=\"timer.stop()\"&gt;Stop&lt;/button&gt;\n  &lt;div class=\"seconds\"&gt;{{timer.seconds}}&lt;/div&gt;\n  &lt;app-countdown-timer #timer&gt;&lt;/app-countdown-timer&gt;\n  `,\n  styleUrls: ['../assets/demo.css']\n})\nexport class CountdownLocalVarParentComponent { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dziwjvwotoys5cv5ywchf800b\">父组件不能数据绑定到子组件的 \n<code>start</code> 和 \n<code>stop</code> 方法，也不能绑定到它的 \n<code>seconds</code> 属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5qogmqizc6cq9seefa9xuiu3\">你可以在代表子组件的标签 \n<code>&lt;countdown-timer&gt;</code> 上放置一个局部变量 \n<code>#timer</code>。 这会给你一个对子组件的引用，并使你能够从父组件模板中 \n<em>访问它的任何属性或方法</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gloibkf00tb7fi23asmwr1oh\">此示例将父组件按钮连接到子组件的 \n<code>start</code> 和 \n<code>stop</code>，并 使用插值来显示子组件的 \n<code>seconds</code> 属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dttz56k45r7vv0xj06urpy0z7\">在这里，我们看到父组件和子组件协同工作。</p>\n<figure>\n  <img src=\"generated/images/guide/component-interaction/countdown-timer-anim.gif\" alt=\"countdown timer\" width=\"212\" height=\"172\">\n</figure>\n<a id=\"countdown-tests\"></a>\n<h3 class=\"no-toc\" id=\"test-it-4\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jfs5cjanyvbfyv3euvwb8lsa\"><i class=\"material-icons\">link</i>测试它</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pjv953pgw23vqdsq7f1bthdg\">测试父组件模板中显示的秒数 是否与子组件状态消息中显示的秒数匹配。 还要测试点击\n<em>停止</em>按钮是否会暂停倒计时器：</p>\n<code-example path=\"component-interaction/e2e/app.e2e-spec.ts\" region=\"countdown-timer-tests\" title=\"component-interaction/e2e/app.e2e-spec.ts\">\n// ...\nit('timer and parent seconds should match', function () {\n  let parent = element(by.tagName(parentTag));\n  let message = parent.element(by.tagName('app-countdown-timer')).getText();\n  browser.sleep(10); // give `seconds` <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> chance to catchup with `message`\n  let seconds = parent.element(by.className('seconds')).getText();\n  expect(message).toContain(seconds);\n});\n\nit('should stop the countdown', function () {\n  let parent = element(by.tagName(parentTag));\n  let stopButton = parent.all(by.tagName('button')).get(1);\n\n  stopButton.click().then(function() {\n    let message = parent.element(by.tagName('app-countdown-timer')).getText();\n    expect(message).toContain('Holding');\n  });\n});\n// ...\n\n</code-example>\n<p><a href=\"guide/component-interaction#top\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"parent-to-view-child\"></a>\n<h2 id=\"parent-calls-an-viewchild\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35gcbd2m25j95jifhjl7j112b\"><i class=\"material-icons\">link</i>父组件调用 \n<em>@ViewChild()</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clwzi0qje15g6g9nkeks0on1g\"><em>局部变量</em>方法很简单易用。但它也有局限性，因为 父组件-子组件的连接必须完全在父组件模板中完成。 父组件\n<em>本身</em>无法访问子组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4lp68xl7lgtx935jxzvf0bg8z\">如果你需要父组件实例读取或写入子组件的值，或者需要调用子组件方法，那么你就不能使用\n<em>局部变量</em>技术。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wbapjcnxqzqlc1npv1bsj5k2\">当父组件\n<em>类</em>需要这种访问权限时，\n<strong><em>注入</em></strong>子组件到父组件中，作为\n<em>ViewChild</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xb5tpsln1enpya95fj1i4t2d\">以下示例使用相同的 \n<a href=\"guide/component-interaction#countdown-timer-example\">倒计时器</a> 示例来说明此技术。 它的外观和行为都不会改变。 子 \n<a href=\"guide/component-interaction#countdown-timer-example\">CountdownTimerComponent</a> 也是一样的。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9s0xt2yyumbippjwmrs66t0h7\">从\n<em>局部变量</em>技术切换到\n<em>ViewChild</em> 技术仅仅是为了演示目的。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"409i49crqq7s7h2p27autkmss\">以下是父组件 \n<code>CountdownViewChildParentComponent</code>：</p>\n<code-example path=\"component-interaction/src/app/countdown-parent.component.ts\" region=\"vc\" title=\"component-interaction/src/app/countdown-parent.component.ts\">\nimport { <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a>, <a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a> } from '@angular/core';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }                from '@angular/core';\nimport { CountdownTimerComponent }  from './countdown-timer.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-countdown-parent-vc',\n  template: `\n  &lt;h3&gt;Countdown to Liftoff (via <a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>)&lt;/h3&gt;\n  &lt;button (click)=\"start()\"&gt;Start&lt;/button&gt;\n  &lt;button (click)=\"stop()\"&gt;Stop&lt;/button&gt;\n  &lt;div class=\"seconds\"&gt;{{ seconds() }}&lt;/div&gt;\n  &lt;app-countdown-timer&gt;&lt;/app-countdown-timer&gt;\n  `,\n  styleUrls: ['../assets/demo.css']\n})\nexport class CountdownViewChildParentComponent implements <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a> {\n\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(CountdownTimerComponent)\n  private timerComponent: CountdownTimerComponent;\n\n  seconds() { return 0; }\n\n  ngAfterViewInit() {\n    // Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ...\n    // but wait <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a> first to avoid one-time devMode\n    // unidirectional-data-flow-violation error\n    setTimeout(() =&gt; this.seconds = () =&gt; this.timerComponent.seconds, 0);\n  }\n\n  start() { this.timerComponent.start(); }\n  stop() { this.timerComponent.stop(); }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x0gd3zyqvkihopjjnuvv4ltp\">将子视图放入父组件\n<em>类</em>中需要多做一些工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq79m6u55mkh5kmvqxj5o3zur\">首先，你需要导入对 \n<code><a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> 装饰器和 \n<code><a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a></code> 生命周期钩子的引用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kcil5lqhdllv4mtfplfczgto\">接下来，通过 \n<code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> 属性装饰器，将子 \n<code>CountdownTimerComponent</code> 注入到私有 \n<code>timerComponent</code> 属性中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f1af7nc2vc2hdovsx0xaxg6m\">组件元数据中不再有 \n<code>#timer</code> 局部变量。 相反，将按钮绑定到父组件自己的 \n<code>start</code> 和 \n<code>stop</code> 方法，并在父组件的 \n<code>seconds</code> 方法周围的插值中显示滴答的秒数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4pd07nc3r174depav4ax4mho\">这些方法直接访问注入的计时器组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btah6uv1frokf2wlhvcovhwp2\"><code>ngAfterViewInit()</code> 生命周期钩子是一个重要的细节。 计时器组件在 Angular 显示父视图\n<em>之后</em>才可用。 因此，它最初显示 \n<code>0</code> 秒。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17dxinb2uzci9sg948nrldg6a\">然后 Angular 调用 \n<code>ngAfterViewInit</code> 生命周期钩子，此时\n<em>为时已晚</em> 更新父视图的倒计时秒数显示。 Angular 的单向数据流规则阻止在同一周期内更新父视图。 应用程序必须\n<em>等待一个周期</em>才能显示秒数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dna94qxy2l5bvz63019ns71co\">使用 \n<code>setTimeout()</code> 等待一个周期，然后修改 \n<code>seconds()</code> 方法，使其从计时器组件获取未来的值。</p>\n<h3 class=\"no-toc\" id=\"test-it-5\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jfs5cjanyvbfyv3euvwb8lsa\"><i class=\"material-icons\">link</i>测试它</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"595hijzla738d683vx1pfttcp\">使用与之前相同的 \n<a href=\"guide/component-interaction#countdown-tests\">倒计时器测试</a>。</p>\n<p><a href=\"guide/component-interaction#top\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n<a id=\"bidirectional-service\"></a>\n<h2 id=\"parent-and-children-communicate-via-a-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28ymef6bdy2fz2pgdbu3r4tb0\"><i class=\"material-icons\">link</i>父组件和子组件通过服务进行通信</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwgd9ubp6uiz6gwcm5p9d9p2e\">父组件及其子组件共享一个服务，该服务的接口允许\n<em>在家庭内部</em>进行双向通信。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fdubmooebuf2n9awntqp5c43\">服务实例的范围是父组件及其子组件。 此组件子树之外的组件无法访问该服务或其通信。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c69b6dhtqo8k4e2axoss257dg\">此 \n<code>MissionService</code> 将 \n<code>MissionControlComponent</code> 连接到多个 \n<code>AstronautComponent</code> 子组件。</p>\n<code-example path=\"component-interaction/src/app/mission.service.ts\" title=\"component-interaction/src/app/mission.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Subject }    from 'rxjs/Subject';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class MissionService {\n\n  // Observable string sources\n  private missionAnnouncedSource = new Subject&lt;string&gt;();\n  private missionConfirmedSource = new Subject&lt;string&gt;();\n\n  // Observable string streams\n  missionAnnounced$ = this.missionAnnouncedSource.asObservable();\n  missionConfirmed$ = this.missionConfirmedSource.asObservable();\n\n  // Service message commands\n  announceMission(mission: string) {\n    this.missionAnnouncedSource.next(mission);\n  }\n\n  confirmMission(astronaut: string) {\n    this.missionConfirmedSource.next(astronaut);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rs6ebjcxejo77mcsd59yssjx\"><code>MissionControlComponent</code> 既提供它与子组件共享的服务实例（通过 \n<code>providers</code> 元数据数组），又通过其构造函数将其注入自身：</p>\n<code-example path=\"component-interaction/src/app/missioncontrol.component.ts\" title=\"component-interaction/src/app/missioncontrol.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }          from '@angular/core';\n\nimport { MissionService }     from './mission.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-mission-control',\n  template: `\n    &lt;h2&gt;Mission Control&lt;/h2&gt;\n    &lt;button (click)=\"announce()\"&gt;Announce mission&lt;/button&gt;\n    &lt;app-astronaut *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let astronaut of astronauts\"\n      [astronaut]=\"astronaut\"&gt;\n    &lt;/app-astronaut&gt;\n    &lt;h3&gt;History&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let event of history\"&gt;{{event}}&lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  providers: [MissionService]\n})\nexport class MissionControlComponent {\n  astronauts = ['Lovell', 'Swigert', 'Haise'];\n  history: string[] = [];\n  missions = ['Fly to the moon!',\n              'Fly to mars!',\n              'Fly to Vegas!'];\n  nextMission = 0;\n\n  constructor(private missionService: MissionService) {\n    missionService.missionConfirmed$.subscribe(\n      astronaut =&gt; {\n        this.history.push(`${astronaut} confirmed the mission`);\n      });\n  }\n\n  announce() {\n    let mission = this.missions[this.nextMission++];\n    this.missionService.announceMission(mission);\n    this.history.push(`Mission \"${mission}\" announced`);\n    if (this.nextMission &gt;= this.missions.length) { this.nextMission = 0; }\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52rdmeqh0zxyzrcvlt7jdsydx\"><code>AstronautComponent</code> 也在其构造函数中注入服务。 每个 \n<code>AstronautComponent</code> 都是 \n<code>MissionControlComponent</code> 的子组件，因此会收到其父组件的服务实例：</p>\n<code-example path=\"component-interaction/src/app/astronaut.component.ts\" title=\"component-interaction/src/app/astronaut.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> } from '@angular/core';\n\nimport { MissionService } from './mission.service';\nimport { Subscription }   from 'rxjs/Subscription';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-astronaut',\n  template: `\n    &lt;p&gt;\n      {{astronaut}}: &lt;strong&gt;{{mission}}&lt;/strong&gt;\n      &lt;button\n        (click)=\"confirm()\"\n        [disabled]=\"!announced || confirmed\"&gt;\n        Confirm\n      &lt;/button&gt;\n    &lt;/p&gt;\n  `\n})\nexport class AstronautComponent implements <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() astronaut: string;\n  mission = '&lt;no mission announced&gt;';\n  confirmed = false;\n  announced = false;\n  subscription: Subscription;\n\n  constructor(private missionService: MissionService) {\n    this.subscription = missionService.missionAnnounced$.subscribe(\n      mission =&gt; {\n        this.mission = mission;\n        this.announced = true;\n        this.confirmed = false;\n    });\n  }\n\n  confirm() {\n    this.confirmed = true;\n    this.missionService.confirmMission(this.astronaut);\n  }\n\n  ngOnDestroy() {\n    // prevent memory leak when component destroyed\n    this.subscription.unsubscribe();\n  }\n}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akigwd5o6lflghsuwdduojw1f\">请注意，此示例在 \n<code>AstronautComponent</code> 被销毁时捕获了 \n<code>subscription</code> 和 \n<code>unsubscribe()</code>。 这是一个防止内存泄漏的步骤。 在这个应用程序中没有实际风险，因为 \n<code>AstronautComponent</code> 的生命周期与应用程序本身的生命周期相同。 在更复杂的应用程序中，情况\n<em>并非总是如此</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"873ajq37yvdc2hz581espjqcn\">你不需要在 \n<code>MissionControlComponent</code> 中添加此保护，因为作为父组件， 它控制着 \n<code>MissionService</code> 的生命周期。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44l41xpnbf2ry42svg3islfvw\"><em>历史</em>日志表明，消息在父 \n<code>MissionControlComponent</code> 和 \n<code>AstronautComponent</code> 子组件之间双向传递， 由服务促成：</p>\n<figure>\n  <img src=\"generated/images/guide/component-interaction/bidirectional-service.gif\" alt=\"bidirectional-service\" width=\"310\" height=\"346\">\n</figure>\n<h3 class=\"no-toc\" id=\"test-it-6\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jfs5cjanyvbfyv3euvwb8lsa\"><i class=\"material-icons\">link</i>测试它</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5m5hxpnkqn6km4dadrlynztn0\">测试点击父 \n<code>MissionControlComponent</code> 和 \n<code>AstronautComponent</code> 子组件的按钮， 并验证历史记录是否符合预期：</p>\n<code-example path=\"component-interaction/e2e/app.e2e-spec.ts\" region=\"bidirectional-service\" title=\"component-interaction/e2e/app.e2e-spec.ts\">\n// ...\nit('should announce <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> mission', function () {\n  let missionControl = element(by.tagName('app-mission-control'));\n  let announceButton = missionControl.all(by.tagName('button')).get(0);\n  announceButton.click().then(function () {\n    let history = missionControl.all(by.tagName('li'));\n    expect(history.count()).toBe(1);\n    expect(history.get(0).getText()).toMatch(/Mission.* announced/);\n  });\n});\n\nit('should confirm the mission by Lovell', function () {\n  testConfirmMission(1, 2, 'Lovell');\n});\n\nit('should confirm the mission by Haise', function () {\n  testConfirmMission(3, 3, 'Haise');\n});\n\nit('should confirm the mission by Swigert', function () {\n  testConfirmMission(2, 4, 'Swigert');\n});\n\nfunction testConfirmMission(buttonIndex: number, expectedLogCount: number, astronaut: string) {\n  let _confirmedLog = ' confirmed the mission';\n  let missionControl = element(by.tagName('app-mission-control'));\n  let confirmButton = missionControl.all(by.tagName('button')).get(buttonIndex);\n  confirmButton.click().then(function () {\n    let history = missionControl.all(by.tagName('li'));\n    expect(history.count()).toBe(expectedLogCount);\n    expect(history.get(expectedLogCount - 1).getText()).toBe(astronaut + _confirmedLog);\n  });\n}\n// ...\n\n</code-example>\n<p><a href=\"guide/component-interaction#top\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/core/AfterViewInit\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Injectable\n - api/core/Input\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Output\n - api/core/SimpleChange\n - api/core/Version\n - api/core/ViewChild\n - api/core/testing/tick\n - api/router/RouterLinkWithHref\n - guide/component-interaction#component-interaction\n - guide/component-interaction#countdown-tests\n - guide/component-interaction#countdown-timer-example\n - guide/component-interaction#intercept-input-property-changes-with-a-setter\n - guide/component-interaction#intercept-input-property-changes-with-ngonchanges\n - guide/component-interaction#parent-and-children-communicate-via-a-service\n - guide/component-interaction#parent-calls-an-viewchild\n - guide/component-interaction#parent-interacts-with-child-via-local-variable\n - guide/component-interaction#parent-listens-for-child-event\n - guide/component-interaction#pass-data-from-parent-to-child-with-input-binding\n - guide/component-interaction#test-it\n - guide/component-interaction#test-it-1\n - guide/component-interaction#test-it-2\n - guide/component-interaction#test-it-3\n - guide/component-interaction#test-it-4\n - guide/component-interaction#test-it-5\n - guide/component-interaction#test-it-6\n - guide/component-interaction#top\n - guide/lifecycle-hooks\n - guide/template-syntax#inputs-outputs\n-->"
}