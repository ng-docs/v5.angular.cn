{
  "id" : "guide/bootstrapping",
  "title" : "引导",
  "contents" : "<div class=\"content\">\n<h1 id=\"bootstrapping\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p29plvvbfir7eo01lmju80ab\"><i class=\"material-icons\">link</i>引导</h1>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\"><i class=\"material-icons\">link</i>先决条件</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xq8keqzpcinu80uje7xu3rbf\">对以下内容的基本了解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb4qsq6zvscyfkwgoajja4d9x\"><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 模块与 NgModules</a>。</li>\n</ul>\n<hr>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x2m753c4d4mt8ba9vk7olmm1\">NgModule 描述了应用程序各部分如何组合在一起。 每个应用程序至少有一个 Angular 模块，即\n<em>根</em>模块， 你引导它来启动应用程序。 按照惯例，它通常被称为 \n<code>AppModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5d2s31m3ynerxmyr6fcfsrojn\">如果你使用 CLI 生成应用程序，默认的 \n<code>AppModule</code> 如下所示：</p>\n<code-example language=\"typescript\">\n/* JavaScript imports */\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a> } from '@angular/http';\n\nimport { AppComponent } from './app.component';\n\n/* the AppModule class with the @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> decorator */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17j7yi8vqezbdzs1is7iwguw0\">在导入语句之后是一个带有 \n<strong><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></strong> \n<a href=\"guide/glossary#decorator\" title=\"&quot;Decorator&quot; explained\">装饰器</a> 的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69n1bu36ebc6tshwn7r4qvp15\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器将 \n<code>AppModule</code> 标识为一个 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类。 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 接受一个元数据对象，告诉 Angular 如何编译和启动应用程序。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rlzsyyf7tztmk8nc8587xq3p\"><strong><em>declarations</em></strong>—此应用程序的唯一组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85pha8w4vdwse4l4mur0td3je\"><strong><em>imports</em></strong>—导入 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 以获得浏览器特定的服务，例如 DOM 渲染、清理和位置。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"125gxosycc7dbj92oywz05nao\"><strong><em>providers</em></strong>—服务提供者。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e3zqoys71uys0kqn5ag5vzp1\"><strong><em>bootstrap</em></strong>—Angular 创建并插入到 \n<code>index.html</code> 宿主网页中的\n<em>根</em>组件。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"806fwgwr8w0ha1apqabb2qwvk\">默认的 CLI 应用程序只有一个组件，\n<code>AppComponent</code>，因此它 同时出现在 \n<code>declarations</code> 和 \n<code>bootstrap</code> 数组中。</p>\n<a id=\"declarations\"></a>\n<h2 id=\"the-declarations-array\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"aw3bqt30ptntvnhw1ftlh0k1l\"><i class=\"material-icons\">link</i><code>declarations</code> 数组</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8l3epl4r8j46rcy1o8vigdxpk\">该模块的 <code>declarations</code> 数组告诉 Angular 哪些组件属于该模块。当你创建更多组件时，也要把它们添加到 <code>declarations</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg7efbkwy8kp1ul9xqjwo9grr\">你必须在恰好一个 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类中声明每个组件。 如果你使用未声明的组件，Angular 会返回一个 错误消息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3tgsijlbt4owon4qsvf16mvq\"><code>declarations</code> 数组只接受可声明对象。可声明对象 是组件、\n<a href=\"guide/attribute-directives\">指令</a> 和 \n<a href=\"guide/pipes\">管道</a>。 模块的所有可声明对象都必须在 \n<code>declarations</code> 数组中。 可声明对象必须属于恰好一个模块。如果尝试在多个模块中声明同一个类，编译器会发出 错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxufecsol5tnmq2cbba3thqru\">这些声明的类在模块内可见，但在不同模块中的组件不可见，除非它们从 此模块导出，而另一个模块导入此模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csw0xqx5ijyl4bwo9vs457epe\">以下是一个 declarations 数组中包含内容的示例：</p>\n<code-example language=\"typescript\">\n  declarations: [\n    YourComponent,\n    YourPipe,\n    YourDirective\n  ],\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6x22xwlb4muyv1gt7cp4higg6\">可声明对象只能属于一个模块，因此只在一个 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中声明它。当你需要它在其他地方使用时， 导入包含你需要声明对象的模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60e5706yjwowjwaqsl8y8mt67\"><strong>只有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 引用</strong>才能放在 \n<code>imports</code> 数组中。</p>\n<h3 id=\"using-directives-with-ngmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7i4y5yjioo4u2bbq49bhepyr3\"><i class=\"material-icons\">link</i>在 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中使用指令</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5f4q7nevr7v4uud9vpt345eki\">使用 <code>declarations</code> 数组声明指令。在模块中使用指令、组件或管道的步骤如下：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n0ewwepb872xhwxbxrwoe5fe\">从你编写它的文件中导出它。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"890umz36owqtusliwth5dl2u1\">将它导入到相应的模块中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqrj6jkff6s24oev7js4bo21u\">在 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 \n<code>declarations</code> 数组中声明它。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qqves76ygmcjes66x8vd3lke\">这三个步骤看起来像下面这样。在创建指令的文件中，导出它。 以下示例名为 \n<code>ItemDirective</code>，是 CLI 在其自己的文件 \n<code>item.directive.ts</code> 中生成的默认指令结构：</p>\n<code-example path=\"bootstrapping/src/app/item.directive.ts\" region=\"directive\" title=\"src/app/item.directive.ts\" linenums=\"false\">\n\n\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appItem]'\n})\nexport class ItemDirective {\n// code goes here\n  constructor() { }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"uptiuj3n7wqhuzerq3itlgsf\">这里的关键点是，你必须导出它，以便你可以在其他地方导入它。接下来，使用 JavaScript 导入语句将它 导入到 NgModule 中，在本例中为 \n<code>app.module.ts</code>：</p>\n<code-example path=\"bootstrapping/src/app/app.module.ts\" region=\"directive-import\" title=\"src/app/app.module.ts\" linenums=\"false\">\nimport { ItemDirective } from './item.directive';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70n1qunhszqucw6wtrap2g5l5\">在同一个文件中，将其添加到 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 \n<code>declarations</code> 数组中：</p>\n<code-example path=\"bootstrapping/src/app/app.module.ts\" region=\"declarations\" title=\"src/app/app.module.ts\" linenums=\"false\">\ndeclarations: [\n  AppComponent,\n  ItemDirective\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atoyt9nb329gp8ad9yx08t8eo\">现在你可以在组件中使用 \n<code>ItemDirective</code>。此示例使用 \n<code>AppModule</code>，但你对特性模块的操作方式相同。有关指令的更多信息，请参阅 \n<a href=\"guide/attribute-directives\">属性指令</a> 和 \n<a href=\"guide/structural-directives\">结构指令</a>。你也可以对 \n<a href=\"guide/pipes\">管道</a> 和组件使用相同的技术。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5mtko3ed23v923msqmdqvufr\">请记住，组件、指令和管道只属于一个模块。你只需要在应用程序中声明它们一次，因为你可以通过导入必要的模块来共享它们。这可以节省你的时间，并帮助你的应用程序保持精简。</p>\n<a id=\"imports\"></a>\n<h2 id=\"the-imports-array\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bi6b3mmlsz6ksv2xyjagejgi2\"><i class=\"material-icons\">link</i><code>imports</code> 数组</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8t8a513hliwjnvwbxz6foodu\">模块的 \n<code>imports</code> 数组只出现在 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据对象中。 它告诉 Angular 此特定模块需要哪些其他 NgModule 才能正常运行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebrrnhaibov8lxgke1fc5mud6\">此模块列表是那些导出组件、指令或管道的模块， 此模块中的组件模板引用了这些组件、指令或管道。在本例中，组件是 \n<code>AppComponent</code>，它引用了 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>、 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 或 \n<code><a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a></code> 中的组件、指令或管道。 组件模板可以引用另一个组件、指令 或管道，前提是引用的类在此模块中声明，或者 该类是从另一个模块导入的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7rgio7vy0oaptx17wbvlf72h\">你还没有任何要提供的服务。 但你很快就会创建一些，你可能会选择在这里提供其中许多服务。</p>\n<a id=\"bootstrap-array\"></a>\n<h2 id=\"the-providers-array\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"40cz07amhewuja5cvaroai04k\"><i class=\"material-icons\">link</i><code>providers</code> 数组</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsbg9k8qngvzbhbve2colad3i\">providers 数组是列出应用程序需要的服务的数组。当你 在这里列出服务时，它们在整个应用程序中可用。你可以在使用特性模块和惰性加载时对它们进行范围限定。有关更多信息，请参阅 \n<a href=\"guide/providers\">提供者</a>。</p>\n<h2 id=\"the-bootstrap-array\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"a3xc1opqzima0ua6pv7ddm4wf\"><i class=\"material-icons\">link</i><code>bootstrap</code> 数组</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7nouefb5hhpy6xk0o6ku6jje\">应用程序通过引导根 \n<code>AppModule</code> 来启动，它 也被称为 \n<code>entryComponent</code>。 除了其他操作之外，引导过程还会创建 \n<code>bootstrap</code> 数组中列出的组件， 并将每个组件插入到浏览器 DOM 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1a130v4uk13swxzpxvswq2sgt\">每个引导的组件都是其自身组件树的根。 插入引导的组件通常会触发一系列 组件创建，这些组件创建会填充该树。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sjjwtkgfpm5hr2i1js0yxktt\">虽然你可以在宿主网页上放置多个组件树， 但大多数应用程序只有一个组件树，并且只引导一个根组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aophk3d3x46hio5ll14pm9me4\">此根组件通常被称为 \n<code>AppComponent</code>，它位于 根模块的 \n<code>bootstrap</code> 数组中。</p>\n<h2 id=\"more-about-angular-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yrlh3gck8640ceyk45u61sjw\"><i class=\"material-icons\">link</i>有关 Angular 模块的更多信息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba0dkvcuuuc626urueclvu0q4\">有关你可能在应用程序中经常看到的 NgModule 的更多信息， 请参阅 \n<a href=\"guide/bootstrapping#\">常用模块</a>。</p>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-modules\n - guide/dependency-injection\n - guide/entry-components\n - guide/feature-modules\n - guide/frequent-ngmodules\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodule-vs-jsmodule\n - guide/ngmodules\n - guide/providers\n - guide/quickstart\n - guide/setup\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/core/Directive\n - api/core/NgModule\n - api/forms/FormsModule\n - api/http/HttpModule\n - api/platform-browser/BrowserModule\n - guide/attribute-directives\n - guide/bootstrapping#\n - guide/bootstrapping#bootstrapping\n - guide/bootstrapping#more-about-angular-modules\n - guide/bootstrapping#prerequisites\n - guide/bootstrapping#the-bootstrap-array\n - guide/bootstrapping#the-declarations-array\n - guide/bootstrapping#the-imports-array\n - guide/bootstrapping#the-providers-array\n - guide/bootstrapping#using-directives-with-ngmodule\n - guide/glossary#decorator\n - guide/ngmodule-vs-jsmodule\n - guide/pipes\n - guide/providers\n - guide/structural-directives\n-->"
}