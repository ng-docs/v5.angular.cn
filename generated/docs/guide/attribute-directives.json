{
  "id" : "guide/attribute-directives",
  "title" : "属性指令",
  "contents" : "<div class=\"content\">\n<h1 id=\"attribute-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cc44rlyljjp94lg85on7hxlh\"><i class=\"material-icons\">link</i>属性指令</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fy7zlhurrsmsqyqa3hfalbp\"><strong>属性</strong>指令会更改 DOM 元素的外观或行为。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jsg9ywo8v59jtbkw5gn08uac\">尝试使用 \n<live-example title=\"Attribute Directive example\"></live-example>。</p>\n<a id=\"directive-overview\"></a>\n<h2 id=\"directives-overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cg6lgowztbsx7rdzpkllnkxih\"><i class=\"material-icons\">link</i>指令概述</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50bc6g05c4dkv6gzz3197985d\">Angular 中有三种指令：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dk9jvayqu8qpi4a1sgnfhuo89\">组件——带有模板的指令。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1w8ylzg22j960oq1ebitola4v\">结构型指令——通过添加和删除 DOM 元素来更改 DOM 布局。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5o47gb6qvd892cg35xox9wyf\">属性指令——更改元素、组件或其他指令的外观或行为。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuazwxe5d9f0sw2ffk63u95j6\"><em>组件</em>是三种指令中最常见的。 在 \n<a href=\"guide/quickstart\">快速入门</a> 指南中，你第一次看到了组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5l6qsctrf6nyx70tk6z5pwwv1\"><em>结构型指令</em>会更改视图的结构。 两个例子是 \n<a href=\"guide/template-syntax#ngFor\">NgFor</a> 和 \n<a href=\"guide/template-syntax#ngIf\">NgIf</a>。 在 \n<a href=\"guide/structural-directives\">结构型指令</a> 指南中了解它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ar3jdtg48nu1jkrah6poclpwg\"><em>属性指令</em>用作元素的属性。 例如，\n<a href=\"guide/template-syntax\">模板语法</a> 指南中的内置 \n<a href=\"guide/template-syntax#ngStyle\">NgStyle</a> 指令可以同时更改多个元素样式。</p>\n<h2 id=\"build-a-simple-attribute-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ziv251i7nobcu7lpa1ealu0y\"><i class=\"material-icons\">link</i>构建简单的属性指令</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88bou5hm3cx7rko7d64flr8x3\">属性指令至少需要构建一个用 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 注解的控制器类，该注解指定标识属性的选择器。 控制器类实现所需的指令行为。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"872qajdrfzg7ci98637e3rkaa\">此页面演示了构建一个简单的 \n<em>appHighlight</em> 属性指令，以便在用户将鼠标悬停在该元素上时设置元素的背景颜色。可以像这样应用它：</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" linenums=\"false\" title=\"src/app/app.component.html (applied)\" region=\"applied\">\n&lt;p appHighlight&gt;Highlight me!&lt;/p&gt;\n\n</code-example>\n<a id=\"write-directive\"></a>\n<h3 id=\"write-the-directive-code\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwnrgy9dsobdweg3mw15fqjb0\"><i class=\"material-icons\">link</i>编写指令代码</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ekyjxrfgo8bj0tm4sbsbn3rv\">在终端窗口中使用以下 CLI 命令创建指令类文件。</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng generate directive highlight\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caxsxfzaankq8f1m3923dzou2\">CLI 创建 \n<code>src/app/highlight.directive.ts</code>，一个相应的测试文件（\n<code>.../spec.ts</code>，并在根 \n<code>AppModule</code> 中\n<em>声明</em>指令类。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmx2twsc2eb5aa63vol9fbi6v\"><em>指令</em>必须在 \n<a href=\"guide/ngmodules\">Angular 模块</a> 中声明，方式与\n<em>组件</em>相同。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9w5jx0a2c72ws4xl86dv8khhz\">生成的 \n<code>src/app/highlight.directive.ts</code> 如下所示：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.0.ts\" title=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor() { }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e0fbwja228hpcxgh6rkhbl48\">导入的 \n<code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 符号为 Angular 提供了 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anzip4ytzk883zysu2mb9rpcx\"><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器的唯一配置属性指定了指令的 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\">CSS 属性选择器</a>，\n<code>[appHighlight]</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uxx6iaviqbgnp1kc41fwvyz4\">方括号 (\n<code>[]</code>) 使其成为属性选择器。 Angular 会在模板中找到每个具有名为 \n<code>appHighlight</code> 的属性的元素，并将此指令的逻辑应用于该元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"336ljl660xn5fa37a85ano9q7\"><em>属性选择器</em>模式解释了这种指令的名称。</p>\n<div class=\"l-sub-section\">\n<h4 id=\"why-not-highlight\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7g5zp0ftwjq9eei0sirn54emn\"><i class=\"material-icons\">link</i>为什么不是“highlight”？</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtma46f76dz6j84uclzq6a551\">虽然 \n<em>highlight</em> 比 \n<em>appHighlight</em> 更简洁的选择器，并且它可以工作， 但最佳实践是为选择器名称添加前缀，以确保它们不会与标准 HTML 属性冲突。 这也降低了与第三方指令名称冲突的风险。 CLI 为你添加了 \n<code>app</code> 前缀。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cj9pubn2lhzvq0pcnpfkn34bh\">确保你\n<strong>不要</strong>在 \n<strong><code>ng</code></strong> 前缀之前添加 \n<code>highlight</code> 指令名称，因为 该前缀是为 Angular 保留的，使用它可能会导致难以诊断的错误。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nvsxxj09a32gxx66gqmin36d\">在 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 元数据之后是指令的控制器类， 名为 \n<code>HighlightDirective</code>，它包含指令的（当前为空的）逻辑。 导出 \n<code>HighlightDirective</code> 使指令可访问。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wrsh5nwk606bxcnvmg32i9yf\">现在编辑生成的 \n<code>src/app/highlight.directive.ts</code>，使其如下所示：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.1.ts\" title=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n    constructor(el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {\n       el.nativeElement.style.backgroundColor = 'yellow';\n    }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ldzd3pmxtpn8xdtdha82l72k\"><code>import</code> 语句指定了 Angular \n<code>core</code> 库中的另一个 \n<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 符号：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el564ktdpgx7w32un5bysd2cz\">在指令的构造函数中使用 \n<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 来 \n<a href=\"guide/dependency-injection\">注入</a> 对宿主 DOM 元素的引用， 即应用了 \n<code>appHighlight</code> 的元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sf4st9d0e8cumu4lrltakb5g\"><code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 通过其 \n<code>nativeElement</code> 属性直接访问宿主 DOM 元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fuj1x5774cob70n03bf84z6t\">此第一个实现将宿主元素的背景颜色设置为黄色。</p>\n<a id=\"apply-directive\"></a>\n<h2 id=\"apply-the-attribute-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2p1tmaiusry1hkgujvqck9hcd\"><i class=\"material-icons\">link</i>应用属性指令</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c843lpytz8yhtr70cjagyc1lz\">要使用新的 \n<code>HighlightDirective</code>，请将一个段落 (\n<code>&lt;p&gt;</code>) 元素添加到根 \n<code>AppComponent</code> 的模板中，并将指令作为属性应用。</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" title=\"src/app/app.component.html\" region=\"applied\">\n&lt;p appHighlight&gt;Highlight me!&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bt6ff89lf4iyauehhu1mvskel\">现在运行应用程序以查看 \n<code>HighlightDirective</code> 的实际效果。</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng serve\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1619kisha8helx5x9mvzhzyzz\">总而言之，Angular 在 \n<strong>宿主</strong> \n<code>&lt;p&gt;</code> 元素上找到了 \n<code>appHighlight</code> 属性。 它创建了 \n<code>HighlightDirective</code> 类的实例，并将对 \n<code>&lt;p&gt;</code> 元素的引用注入到指令的构造函数中， 该构造函数将 \n<code>&lt;p&gt;</code> 元素的背景样式设置为黄色。</p>\n<a id=\"respond-to-user\"></a>\n<h2 id=\"respond-to-user-initiated-events\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1md0mbblf0im38dpf7d37fcy7\"><i class=\"material-icons\">link</i>响应用户发起的事件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9l898522ybucn2bivlwi3pkg\">目前，\n<code>appHighlight</code> 只是设置元素颜色。 指令可以更动态。 它可以检测用户何时将鼠标移入或移出元素， 并通过设置或清除突出显示颜色来响应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bh60vcnjjo64r3gwqvpm1dgt\">首先，将 \n<code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 添加到导入符号列表中。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (imports)\" region=\"imports\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82k856r5cbmofl28qvcurx6s5\">然后添加两个事件处理程序，它们在鼠标进入或离开时响应， 每个事件处理程序都用 \n<code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 装饰器装饰。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (mouse-methods)\" region=\"mouse-methods\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight('yellow');\n}\n\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n  this.highlight(null);\n}\n\nprivate highlight(color: string) {\n  this.el.nativeElement.style.backgroundColor = color;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4en8f78z3n1kmb94tcutyspug\"><code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 装饰器允许你订阅托管属性指令的 DOM 元素的事件，在本例中为 \n<code>&lt;p&gt;</code>。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6reyrtys3guy6pjkhe3dnq4jx\">当然，你可以使用标准的 JavaScript 访问 DOM 并手动添加事件监听器。 这种方法至少有三个问题：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rcocqgax3izuo4ao43o2aurp\">你必须正确编写监听器。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93849njmzbqonw1erxk5m29do\">代码必须在指令销毁时\n<em>分离</em>监听器，以避免内存泄漏。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23t8c0czs2y65smec8ffwgk7c\">直接与 DOM API 交互不是最佳实践。</li>\n</ol>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9wbkddx22gl2rzwi4cmo5li2\">处理程序委托给一个辅助方法，该方法在宿主 DOM 元素 \n<code>el</code> 上设置颜色。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3515met0cokjlc4ruy4bobx82\">辅助方法 \n<code>highlight</code> 从构造函数中提取出来。 修改后的构造函数只声明了注入的 \n<code>el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (constructor)\" region=\"ctor\">\nconstructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c489gk79ll997xgomyou30g0v\">以下是完整的更新后的指令：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" title=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight('yellow');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ww12cqkmft1nigpaqxf6qzhs\">运行应用程序并确认当鼠标悬停在 \n<code>p</code> 上时背景颜色出现，当鼠标移出时消失。</p>\n<figure>\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-anim.gif\" alt=\"Second Highlight\" width=\"204\" height=\"72\">\n</figure>\n<a id=\"bindings\"></a>\n<h2 id=\"pass-values-into-the-directive-with-an-input-data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b71np4jp5n6n0q6hp0b03p36w\"><i class=\"material-icons\">link</i>使用\n<em>@Input</em> 数据绑定将值传递到指令中</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tk8b7xzrz6t8yhz8m1jgnhqx\">目前，高亮颜色是\n<em>在</em>指令\n<em>内部</em>硬编码的。这很死板。 在本节中，你将赋予开发者在应用指令时设置高亮颜色的能力。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmmm1qfwhgq1wg8vjdq79rkyr\">首先，将 \n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 添加到从 \n<code>@angular/core</code> 导入的符号列表中。 \n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (imports)\" region=\"imports\">\n  import { \n <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, \n <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, \n <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, \n <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core'; \n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yj9vq2pkqj7o84pxn9oq3n7l\">向指令类添加一个 \n<code>highlightColor</code> 属性，如下所示：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (highlightColor)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() highlightColor: string;\n\n</code-example>\n<a id=\"input\"></a>\n<h3 id=\"binding-to-an-input-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qkufqnvuvsa00d8e6maerjss\"><i class=\"material-icons\">link</i>绑定到\n<em>@Input</em> 属性</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"574kilk7410rw2veh2cp0k6fp\">注意 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。它向类添加元数据，使指令的 \n<code>highlightColor</code> 属性可用于绑定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43mcunnlp6rto62yot45knm8y\">它被称为\n<em>输入</em>属性，因为数据从绑定表达式\n<em>流入</em>指令。 如果没有该输入元数据，Angular 会拒绝绑定；有关更多信息，请参见\n<a href=\"guide/attribute-directives#why-input\" title=\"Why add @Input?\">下面</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1aq729efuya4aytsfgtto1fck\">尝试通过将以下指令绑定变体添加到 \n<code>AppComponent</code> 模板中：</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" linenums=\"false\" title=\"src/app/app.component.html (excerpt)\" region=\"color-1\">\n&lt;p appHighlight highlightColor=\"yellow\"&gt;Highlighted in yellow&lt;/p&gt;\n&lt;p appHighlight [highlightColor]=\"'orange'\"&gt;Highlighted in orange&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ojjjr6abmb5f7jlugqzggypt\">向 \n<code>AppComponent</code> 添加一个 \n<code>color</code> 属性。</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  color = 'yellow';\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2l4wgmi76i9st5labmg8dwgxk\">使用属性绑定让它控制高亮颜色。</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" linenums=\"false\" title=\"src/app/app.component.html (excerpt)\" region=\"color-2\">\n&lt;p appHighlight [highlightColor]=\"color\"&gt;Highlighted with parent component's color&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13aiybgfeyr3g6rnesr3l7jn6\">这很好，但如果能\n<em>同时</em>应用指令并\n<em>在同一个属性</em>中设置颜色，那就更好了，就像这样。</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (color)\" region=\"color\">\n&lt;p [appHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deyq9pj0s1vrl3sm5ebfqmx5k\"><code>[appHighlight]</code> 属性绑定将高亮指令应用于 \n<code>&lt;p&gt;</code> 元素， 并使用属性绑定设置指令的高亮颜色。 你正在重复使用指令的属性选择器（\n<code>[appHighlight]</code>）来完成这两项工作。 这是一个简洁、紧凑的语法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnozoty5d63etkhcd0500t1sj\">你必须将指令的 \n<code>highlightColor</code> 属性重命名为 \n<code>appHighlight</code>，因为这现在是颜色属性绑定名称。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (renamed to match directive selector)\" region=\"color-2\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() appHighlight: string;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exiyz6hxm5lyqym3sj2kdl2hh\">这不太好。\n<code>appHighlight</code> 这个词是一个糟糕的属性名称，它没有传达属性的意图。</p>\n<a id=\"input-alias\"></a>\n<h3 id=\"bind-to-an-input-alias\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aur2asbblx3nokpqheo328ggn\"><i class=\"material-icons\">link</i>绑定到\n<em>@Input</em> 别名</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ap0q4dppjeuif4u1ysvfc40cp\">幸运的是，你可以随意命名指令属性，并为绑定目的\n<strong><em>为其指定别名</em></strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"531tlxhgeb15oaq5b0i7b2qxy\">恢复原始属性名称，并在 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 的参数中指定选择器作为别名。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (color property with alias)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"189l172k5edv20hlbwwwqvcp0\"><em>在</em>指令\n<em>内部</em>，属性被称为 \n<code>highlightColor</code>。 \n<em>在</em>指令\n<em>外部</em>，你在绑定它的地方，它被称为 \n<code>appHighlight</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9386q9pq24ddk9qjtva59smzv\">你得到了两全其美：你想要的属性名称和你想要的绑定语法：</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (color)\" region=\"color\">\n&lt;p [appHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94afwf7nmfngts3z4ymtjl9m9\">现在你通过别名绑定到 \n<code>highlightColor</code>，修改 \n<code>onMouseEnter()</code> 方法以使用该属性。 如果有人忽略了绑定到 \n<code>appHighlightColor</code>，则以红色高亮显示宿主元素：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (mouse enter)\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.highlightColor || 'red');\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x3p0ceko6kwsqtlmxe5bkbvl\">以下是指令类的最新版本。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (excerpt)\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || 'red');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}\n\n\n</code-example>\n<h2 id=\"write-a-harness-to-try-it\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1gzbt8drn91d3xijtzj39y1d\"><i class=\"material-icons\">link</i>编写一个工具来尝试它</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9idry7ti45wjpccb5hrvsfja\">你可能很难想象这个指令是如何工作的。 在本节中，你将把 \n<code>AppComponent</code> 变成一个工具， 让你可以使用单选按钮选择高亮颜色，并将你的颜色选择绑定到指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3owpg8y56uwdtleo4blikayk\">更新 \n<code>app.component.html</code>，如下所示：</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (v2)\" region=\"v2\">\n&lt;h1&gt;My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&lt;/h1&gt;\n\n&lt;h4&gt;Pick <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> highlight color&lt;/h4&gt;\n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\"&gt;Green\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\"&gt;Yellow\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\"&gt;Cyan\n&lt;/div&gt;\n&lt;p [appHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4cjehlfvsff0muh442bkqtm0q\">修改 <code>AppComponent.color</code>，使其没有初始值。</p>\n<code-example path=\"attribute-directives/src/app/app.component.ts\" linenums=\"false\" title=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  color: string;\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqr8pa2dwtqoeaz0o7jubww9k\">以下是工具和指令的实际效果。</p>\n<figure>\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-v2-anim.gif\" alt=\"Highlight v.2\" width=\"432\" height=\"172\">\n</figure>\n<a id=\"second-property\"></a>\n<h2 id=\"bind-to-a-second-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27lbeo9hcmz41f89oqe6dvtuu\"><i class=\"material-icons\">link</i>绑定到第二个属性</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zln9wpz173pkw0br7ghjnbgv\">这个高亮指令只有一个可自定义的属性。在实际应用中，它可能需要更多属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h58ndg69v50x58yil5cdn7cl\">目前，默认颜色（在用户选择高亮颜色之前生效的颜色）被硬编码为 \"red\"。 让模板开发者设置默认颜色。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1aa0sqwzq73bi1n2h4ateuid\">向 \n<code>HighlightDirective</code> 添加第二个\n<strong>输入</strong>属性，名为 \n<code>defaultColor</code>：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (defaultColor)\" region=\"defaultColor\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() defaultColor: string;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"581jkpr0mxn8j9b6jt6ef4xht\">修改指令的 \n<code>onMouseEnter</code>，使其首先尝试使用 \n<code>highlightColor</code> 高亮显示， 然后使用 \n<code>defaultColor</code> 高亮显示，如果两个属性都未定义，则回退到 \"red\"。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (mouse-enter)\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.highlightColor || this.defaultColor || 'red');\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ays0q06dyy510lsvsax4uyyy2\">当你已经绑定到 \n<code>appHighlight</code> 属性名称时，如何绑定到第二个属性？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gb9mlhm1gotn41uzqk3848g\">与组件一样，你可以通过在模板中将它们串联起来，添加任意数量的指令属性绑定。 开发者应该能够编写以下模板 HTML 来同时绑定到 \n<code>AppComponent.color</code> 并以 \"violet\" 作为默认颜色。</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (defaultColor)\" region=\"defaultColor\">\n&lt;p [appHighlight]=\"color\" defaultColor=\"violet\"&gt;\n  Highlight me too!\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"629tqotoflv2za7piitt00arw\">Angular 知道 \n<code>defaultColor</code> 绑定属于 \n<code>HighlightDirective</code>， 因为你使用 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器将其设为\n<em>公开</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajxampt5xr5h4w8k8eyorxtk3\">以下是完成编码后工具的工作方式。</p>\n<figure>\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-final-anim.gif\" alt=\"Final Highlight\" width=\"440\" height=\"212\">\n</figure>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vhmy2q8ck9f4grwy1cwwoe00\">本页介绍了如何：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"badh7y2iw10xmof9n8ktrdmnw\"><a href=\"guide/attribute-directives#write-directive\">构建一个<strong>属性指令</strong></a>，它可以修改元素的行为。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8x7a6j71ozikwh08sjzrkrlhg\"><a href=\"guide/attribute-directives#apply-directive\">将指令</a>应用于模板中的元素。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u4roum6lnyln7osta1u82v2x\"><a href=\"guide/attribute-directives#respond-to-user\">响应<strong>事件</strong></a>，这些事件会改变指令的行为。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18we11z1ta5ax1iu4duupjtvr\"><a href=\"guide/attribute-directives#bindings\">将值<strong>绑定</strong>到指令</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ex20b8c5gard94hzzukw4qvit\">最后的源代码如下：</p>\n<code-tabs>\n  <code-pane title=\"app/app.component.ts\" path=\"attribute-directives/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  color: string;\n}\n\n\n</code-pane>\n  <code-pane title=\"app/app.component.html\" path=\"attribute-directives/src/app/app.component.html\">\n&lt;h1&gt;My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&lt;/h1&gt;\n\n&lt;h4&gt;Pick <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> highlight color&lt;/h4&gt;\n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\"&gt;Green\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\"&gt;Yellow\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\"&gt;Cyan\n&lt;/div&gt;\n&lt;p [appHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n\n&lt;p [appHighlight]=\"color\" defaultColor=\"violet\"&gt;\n  Highlight me too!\n&lt;/p&gt;\n\n</code-pane>\n  <code-pane title=\"app/highlight.directive.ts\" path=\"attribute-directives/src/app/highlight.directive.ts\">\n/* tslint:disable:member-ordering */\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() defaultColor: string;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || this.defaultColor || 'red');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"app/app.module.ts\" path=\"attribute-directives/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { HighlightDirective } from './highlight.directive';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [\n    AppComponent,\n    HighlightDirective\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane title=\"main.ts\" path=\"attribute-directives/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n  <code-pane title=\"index.html\" path=\"attribute-directives/src/index.html\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;<a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> Directives&lt;/title&gt;\n    &lt;base href=\"/\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;app-root&gt;&lt;/app-root&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clzitkxy9orcyufdpdu4hcwab\">你也可以体验和下载\n<live-example title=\"Attribute Directive example\"></live-example>。</p>\n<a id=\"why-input\"></a>\n<h3 id=\"appendix-why-add-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xoo0qskudvondecvtgjf5xyy\"><i class=\"material-icons\">link</i>附录：为什么要添加\n<em>@Input</em>？</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hjz6wrms5qan5gppuy81ju2u\">在此演示中，\n<code>highlightColor</code> 属性是 \n<code>HighlightDirective</code> 的\n<strong><em>输入</em></strong>属性。你已经看到它在没有别名的情况下被应用了：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (color)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() highlightColor: string;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ylqnxn1fl2ghl43b8u94a0lx\">你已经看到它带有别名了：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (color)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53l26q8n3nvlle7wj48oycfig\">无论哪种方式，\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器都告诉 Angular 此属性是\n<em>公开</em>的，并且可供父组件绑定。 如果没有 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>，Angular 拒绝绑定到此属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kvuhywo2w65aiztjxpqwh9f2\">你之前已经将模板 HTML 绑定到组件属性，并且从未使用过 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。 有什么不同呢？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1n6snnvkt6j9g0f00r3dymosk\">区别在于信任问题。 Angular 将组件的模板视为\n<em>属于</em>该组件。 组件及其模板之间隐式地相互信任。 因此，组件自己的模板可以绑定到该组件的\n<em>任何</em>属性， 无论是否使用 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"buceqvd4oq1on86hpbjnzvg48\">但是，组件或指令不应该盲目地信任\n<em>其他</em>组件和指令。 默认情况下，组件或指令的属性对其他组件和指令的绑定是隐藏的。 从 Angular 绑定的角度来看，它们是\n<em>私有</em>的。 当使用 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器修饰时，该属性从 Angular 绑定的角度来看就变成了\n<em>公开</em>的。 只有这样，它才能被其他组件或指令绑定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3si0amixb2n739rt35rk9fwzc\">你可以通过绑定中属性名称的位置来判断是否需要 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az76bkmwvsyy0jxbhpl8ywci\">当它出现在模板表达式中，位于等号 (=) 的\n<strong><em>右侧</em></strong>时， 它属于模板的组件，不需要 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37wxjuk6osaaoovfv8976ud2t\">当它出现在\n<strong>方括号</strong> ([ ]) 中，位于等号 (=) 的\n<strong>左侧</strong>时， 该属性属于某个\n<em>其他</em>组件或指令； 该属性必须使用 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器修饰。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ifej5mftuxz8bx4sgwl4riht\">现在将此推理应用于以下示例：</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (color)\" region=\"color\">\n&lt;p [appHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jbuzl1jq17emmikxkdb9yzz7\">表达式右侧的 \n<code>color</code> 属性属于模板的组件。 模板及其组件之间相互信任。 \n<code>color</code> 属性不需要 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dqyhw5vwojqoqt9tkvigp2ge\">左侧的 \n<code>appHighlight</code> 属性指的是 \n<code>HighlightDirective</code> 的\n<em>别名</em>属性， 而不是模板组件的属性。存在信任问题。 因此，指令属性必须使用 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器修饰。</p>\n</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/dependency-injection-in-action\n - guide/glossary\n - guide/structural-directives\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/core/Attribute\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/HostListener\n - api/core/Input\n - api/core/NgModule\n - api/core/enableProdMode\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - guide/attribute-directives#appendix-why-add-input\n - guide/attribute-directives#apply-directive\n - guide/attribute-directives#apply-the-attribute-directive\n - guide/attribute-directives#attribute-directives\n - guide/attribute-directives#bind-to-a-second-property\n - guide/attribute-directives#bind-to-an-input-alias\n - guide/attribute-directives#binding-to-an-input-property\n - guide/attribute-directives#bindings\n - guide/attribute-directives#build-a-simple-attribute-directive\n - guide/attribute-directives#directives-overview\n - guide/attribute-directives#pass-values-into-the-directive-with-an-input-data-binding\n - guide/attribute-directives#respond-to-user\n - guide/attribute-directives#respond-to-user-initiated-events\n - guide/attribute-directives#summary\n - guide/attribute-directives#why-input\n - guide/attribute-directives#why-not-highlight\n - guide/attribute-directives#write-a-harness-to-try-it\n - guide/attribute-directives#write-directive\n - guide/attribute-directives#write-the-directive-code\n - guide/dependency-injection\n - guide/ngmodules\n - guide/quickstart\n - guide/structural-directives\n - guide/template-syntax\n - guide/template-syntax#ngFor\n - guide/template-syntax#ngIf\n - guide/template-syntax#ngStyle\n - https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\n-->"
}