{
  "id": "guide/attribute-directives",
  "title": "Attribute Directives",
  "contents": "\n<div class=\"content\">\n<h1 id=\"attribute-directives\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#attribute-directives\"><i class=\"material-icons\">link</i></a>Attribute Directives</h1>\n<p>An <strong>Attribute</strong> directive changes the appearance or behavior of a DOM element.</p>\n<p>Try the <live-example title=\"Attribute Directive example\"></live-example>.</p>\n<a id=\"directive-overview\"></a>\n<h2 id=\"directives-overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#directives-overview\"><i class=\"material-icons\">link</i></a>Directives overview</h2>\n<p>There are three kinds of directives in Angular:</p>\n<ol>\n<li>Components—directives with a template.</li>\n<li>Structural directives—change the DOM layout by adding and removing DOM elements.</li>\n<li>Attribute directives—change the appearance or behavior of an element, component, or another directive.</li>\n</ol>\n<p><em>Components</em> are the most common of the three directives.\nYou saw a component for the first time in the <a href=\"guide/quickstart\">QuickStart</a> guide.</p>\n<p><em>Structural Directives</em> change the structure of the view.\nTwo examples are <a href=\"guide/template-syntax#ngFor\">NgFor</a> and <a href=\"guide/template-syntax#ngIf\">NgIf</a>.\nLearn about them in the <a href=\"guide/structural-directives\">Structural Directives</a> guide.</p>\n<p><em>Attribute directives</em> are used as attributes of elements.\nThe built-in <a href=\"guide/template-syntax#ngStyle\">NgStyle</a> directive in the\n<a href=\"guide/template-syntax\">Template Syntax</a> guide, for example,\ncan change several element styles at the same time.</p>\n<h2 id=\"build-a-simple-attribute-directive\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#build-a-simple-attribute-directive\"><i class=\"material-icons\">link</i></a>Build a simple attribute directive</h2>\n<p>An attribute directive minimally requires building a controller class annotated with\n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, which specifies the selector that identifies\nthe attribute.\nThe controller class implements the desired directive behavior.</p>\n<p>This page demonstrates building a simple <em>appHighlight</em> attribute\ndirective to set an element's background color\nwhen the user hovers over that element. You can apply it like this:</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" linenums=\"false\" title=\"src/app/app.component.html (applied)\" region=\"applied\">\n&#x3C;p appHighlight>Highlight me!&#x3C;/p>\n\n</code-example>\n<a id=\"write-directive\"></a>\n<h3 id=\"write-the-directive-code\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#write-the-directive-code\"><i class=\"material-icons\">link</i></a>Write the directive code</h3>\n<p>Create the directive class file in a terminal window with this CLI command.</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng generate directive highlight\n</code-example>\n<p>The CLI creates <code>src/app/highlight.directive.ts</code>, a corresponding test file (<code>.../spec.ts</code>, and <em>declares</em> the directive class in the root <code>AppModule</code>.</p>\n<div class=\"l-sub-section\">\n<p><em>Directives</em> must be declared in <a href=\"guide/ngmodules\">Angular Modules</a> in the same manner as <em>components</em>.</p>\n</div>\n<p>The generated <code>src/app/highlight.directive.ts</code> is as follows:</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.0.ts\" title=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor() { }\n}\n\n\n</code-example>\n<p>The imported <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> symbol provides the Angular the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> decorator.</p>\n<p>The <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> decorator's lone configuration property specifies the directive's\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\">CSS attribute selector</a>, <code>[appHighlight]</code>.</p>\n<p>It's the brackets (<code>[]</code>) that make it an attribute selector.\nAngular locates each element in the template that has an attribute named <code>appHighlight</code> and applies the logic of this directive to that element.</p>\n<p>The <em>attribute selector</em> pattern explains the name of this kind of directive.</p>\n<div class=\"l-sub-section\">\n<h4 id=\"why-not-highlight\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#why-not-highlight\"><i class=\"material-icons\">link</i></a>Why not \"highlight\"?</h4>\n<p>Though <em>highlight</em> would be a more concise selector than <em>appHighlight</em> and it would work,\nthe best practice is to prefix selector names to ensure\nthey don't conflict with standard HTML attributes.\nThis also reduces the risk of colliding with third-party directive names.\nThe CLI added the <code>app</code> prefix for you.</p>\n<p>Make sure you do <strong>not</strong> prefix the <code>highlight</code> directive name with <strong><code>ng</code></strong> because\nthat prefix is reserved for Angular and using it could cause bugs that are difficult to diagnose.</p>\n</div>\n<p>After the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> metadata comes the directive's controller class,\ncalled <code>HighlightDirective</code>, which contains the (currently empty) logic for the directive.\nExporting <code>HighlightDirective</code> makes the directive accessible.</p>\n<p>Now edit the generated <code>src/app/highlight.directive.ts</code> to look as follows:</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.1.ts\" title=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n    constructor(el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {\n       el.nativeElement.style.backgroundColor = 'yellow';\n    }\n}\n\n\n</code-example>\n<p>The <code>import</code> statement specifies an additional <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> symbol from the Angular <code>core</code> library:</p>\n<p>You use the <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>in the directive's constructor\nto <a href=\"guide/dependency-injection\">inject</a> a reference to the host DOM element,\nthe element to which you applied <code>appHighlight</code>.</p>\n<p><code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> grants direct access to the host DOM element\nthrough its <code>nativeElement</code> property.</p>\n<p>This first implementation sets the background color of the host element to yellow.</p>\n<a id=\"apply-directive\"></a>\n<h2 id=\"apply-the-attribute-directive\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#apply-the-attribute-directive\"><i class=\"material-icons\">link</i></a>Apply the attribute directive</h2>\n<p>To use the new <code>HighlightDirective</code>, add a paragraph (<code>&#x3C;p></code>) element to the template of the root <code>AppComponent</code> and apply the directive as an attribute.</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" title=\"src/app/app.component.html\" region=\"applied\">\n&#x3C;p appHighlight>Highlight me!&#x3C;/p>\n\n</code-example>\n<p>Now run the application to see the <code>HighlightDirective</code> in action.</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng serve\n</code-example>\n<p>To summarize, Angular found the <code>appHighlight</code> attribute on the <strong>host</strong> <code>&#x3C;p></code> element.\nIt created an instance of the <code>HighlightDirective</code> class and\ninjected a reference to the <code>&#x3C;p></code> element into the directive's constructor\nwhich sets the <code>&#x3C;p></code> element's background style to yellow.</p>\n<a id=\"respond-to-user\"></a>\n<h2 id=\"respond-to-user-initiated-events\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#respond-to-user-initiated-events\"><i class=\"material-icons\">link</i></a>Respond to user-initiated events</h2>\n<p>Currently, <code>appHighlight</code> simply sets an element color.\nThe directive could be more dynamic.\nIt could detect when the user mouses into or out of the element\nand respond by setting or clearing the highlight color.</p>\n<p>Begin by adding <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> to the list of imported symbols.</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (imports)\" region=\"imports\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n</code-example>\n<p>Then add two eventhandlers that respond when the mouse enters or leaves,\neach adorned by the <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> decorator.</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (mouse-methods)\" region=\"mouse-methods\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight('yellow');\n}\n\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n  this.highlight(null);\n}\n\nprivate highlight(color: string) {\n  this.el.nativeElement.style.backgroundColor = color;\n}\n\n</code-example>\n<p>The <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> decorator lets you subscribe to events of the DOM\nelement that hosts an attribute directive, the <code>&#x3C;p></code> in this case.</p>\n<div class=\"l-sub-section\">\n<p>Of course you could reach into the DOM with standard JavaScript and attach event listeners manually.\nThere are at least three problems with <em>that</em> approach:</p>\n<ol>\n<li>You have to write the listeners correctly.</li>\n<li>The code must <em>detach</em> the listener when the directive is destroyed to avoid memory leaks.</li>\n<li>Talking to DOM API directly isn't a best practice.</li>\n</ol>\n</div>\n<p>The handlers delegate to a helper method that sets the color on the host DOM element, <code>el</code>.</p>\n<p>The helper method, <code>highlight</code>, was extracted from the constructor.\nThe revised constructor simply declares the injected <code>el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>.</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (constructor)\" region=\"ctor\">\nconstructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n</code-example>\n<p>Here's the updated directive in full:</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" title=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight('yellow');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n\n</code-example>\n<p>Run the app and confirm that the background color appears when\nthe mouse hovers over the <code>p</code> and disappears as it moves out.</p>\n<figure>\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-anim.gif\" alt=\"Second Highlight\" width=\"204\" height=\"72\">\n</figure>\n<a id=\"bindings\"></a>\n<h2 id=\"pass-values-into-the-directive-with-an-input-data-binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#pass-values-into-the-directive-with-an-input-data-binding\"><i class=\"material-icons\">link</i></a>Pass values into the directive with an <em>@Input</em> data binding</h2>\n<p>Currently the highlight color is hard-coded <em>within</em> the directive. That's inflexible.\nIn this section, you give the developer the power to set the highlight color while applying the directive.</p>\n<p>Begin by adding <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> to the list of symbols imported from <code>@angular/core</code>.\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (imports)\" region=\"imports\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example></p>\n<p>Add a <code>highlightColor</code> property to the directive class like this:</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (highlightColor)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() highlightColor: string;\n\n</code-example>\n<a id=\"input\"></a>\n<h3 id=\"binding-to-an-input-property\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#binding-to-an-input-property\"><i class=\"material-icons\">link</i></a>Binding to an <em>@Input</em> property</h3>\n<p>Notice the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator. It adds metadata to the class that makes the directive's <code>highlightColor</code> property available for binding.</p>\n<p>It's called an <em>input</em> property because data flows from the binding expression <em>into</em> the directive.\nWithout that input metadata, Angular rejects the binding; see <a href=\"guide/attribute-directives#why-input\" title=\"Why add @Input?\">below</a> for more about that.</p>\n<p>Try it by adding the following directive binding variations to the <code>AppComponent</code> template:</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" linenums=\"false\" title=\"src/app/app.component.html (excerpt)\" region=\"color-1\">\n&#x3C;p appHighlight highlightColor=\"yellow\">Highlighted in yellow&#x3C;/p>\n&#x3C;p appHighlight [highlightColor]=\"'orange'\">Highlighted in orange&#x3C;/p>\n\n</code-example>\n<p>Add a <code>color</code> property to the <code>AppComponent</code>.</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  color = 'yellow';\n}\n\n\n</code-example>\n<p>Let it control the highlight color with a property binding.</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" linenums=\"false\" title=\"src/app/app.component.html (excerpt)\" region=\"color-2\">\n&#x3C;p appHighlight [highlightColor]=\"color\">Highlighted with parent component's color&#x3C;/p>\n\n</code-example>\n<p>That's good, but it would be nice to <em>simultaneously</em> apply the directive and set the color <em>in the same attribute</em> like this.</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (color)\" region=\"color\">\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<p>The <code>[appHighlight]</code> attribute binding both applies the highlighting directive to the <code>&#x3C;p></code> element\nand sets the directive's highlight color with a property binding.\nYou're re-using the directive's attribute selector (<code>[appHighlight]</code>) to do both jobs.\nThat's a crisp, compact syntax.</p>\n<p>You'll have to rename the directive's <code>highlightColor</code> property to <code>appHighlight</code> because that's now the color property binding name.</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (renamed to match directive selector)\" region=\"color-2\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() appHighlight: string;\n\n</code-example>\n<p>This is disagreeable. The word, <code>appHighlight</code>, is a terrible property name and it doesn't convey the property's intent.</p>\n<a id=\"input-alias\"></a>\n<h3 id=\"bind-to-an-input-alias\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#bind-to-an-input-alias\"><i class=\"material-icons\">link</i></a>Bind to an <em>@Input</em> alias</h3>\n<p>Fortunately you can name the directive property whatever you want <em>and</em> <strong><em>alias it</em></strong> for binding purposes.</p>\n<p>Restore the original property name and specify the selector as the alias in the argument to <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>.</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (color property with alias)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n</code-example>\n<p><em>Inside</em> the directive the property is known as <code>highlightColor</code>.\n<em>Outside</em> the directive, where you bind to it, it's known as <code>appHighlight</code>.</p>\n<p>You get the best of both worlds: the property name you want and the binding syntax you want:</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (color)\" region=\"color\">\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<p>Now that you're binding via the alias to the <code>highlightColor</code>, modify the <code>onMouseEnter()</code> method to use that property.\nIf someone neglects to bind to <code>appHighlightColor</code>, highlight the host element in red:</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (mouse enter)\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.highlightColor || 'red');\n}\n\n</code-example>\n<p>Here's the latest version of the directive class.</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (excerpt)\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || 'red');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}\n\n\n</code-example>\n<h2 id=\"write-a-harness-to-try-it\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#write-a-harness-to-try-it\"><i class=\"material-icons\">link</i></a>Write a harness to try it</h2>\n<p>It may be difficult to imagine how this directive actually works.\nIn this section, you'll turn <code>AppComponent</code> into a harness that\nlets you pick the highlight color with a radio button and bind your color choice to the directive.</p>\n<p>Update <code>app.component.html</code> as follows:</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (v2)\" region=\"v2\">\n&#x3C;h1>My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&#x3C;/h1>\n\n&#x3C;h4>Pick <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> highlight color&#x3C;/h4>\n&#x3C;div>\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan\n&#x3C;/div>\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<p>Revise the <code>AppComponent.color</code> so that it has no initial value.</p>\n<code-example path=\"attribute-directives/src/app/app.component.ts\" linenums=\"false\" title=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  color: string;\n}\n\n\n</code-example>\n<p>Here are the harness and directive in action.</p>\n<figure>\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-v2-anim.gif\" alt=\"Highlight v.2\" width=\"432\" height=\"172\">\n</figure>\n<a id=\"second-property\"></a>\n<h2 id=\"bind-to-a-second-property\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#bind-to-a-second-property\"><i class=\"material-icons\">link</i></a>Bind to a second property</h2>\n<p>This highlight directive has a single customizable property. In a real app, it may need more.</p>\n<p>At the moment, the default color—the color that prevails until\nthe user picks a highlight color—is hard-coded as \"red\".\nLet the template developer set the default color.</p>\n<p>Add a second <strong>input</strong> property to <code>HighlightDirective</code> called <code>defaultColor</code>:</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (defaultColor)\" region=\"defaultColor\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() defaultColor: string;\n\n</code-example>\n<p>Revise the directive's <code>onMouseEnter</code> so that it first tries to highlight with the <code>highlightColor</code>,\nthen with the <code>defaultColor</code>, and falls back to \"red\" if both properties are undefined.</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (mouse-enter)\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.highlightColor || this.defaultColor || 'red');\n}\n\n</code-example>\n<p>How do you bind to a second property when you're already binding to the <code>appHighlight</code> attribute name?</p>\n<p>As with components, you can add as many directive property bindings as you need by stringing them along in the template.\nThe developer should be able to write the following template HTML to both bind to the <code>AppComponent.color</code>\nand fall back to \"violet\" as the default color.</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (defaultColor)\" region=\"defaultColor\">\n&#x3C;p [appHighlight]=\"color\" defaultColor=\"violet\">\n  Highlight me too!\n&#x3C;/p>\n\n</code-example>\n<p>Angular knows that the <code>defaultColor</code> binding belongs to the <code>HighlightDirective</code>\nbecause you made it <em>public</em> with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n<p>Here's how the harness should work when you're done coding.</p>\n<figure>\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-final-anim.gif\" alt=\"Final Highlight\" width=\"440\" height=\"212\">\n</figure>\n<h2 id=\"summary\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#summary\"><i class=\"material-icons\">link</i></a>Summary</h2>\n<p>This page covered how to:</p>\n<ul>\n<li><a href=\"guide/attribute-directives#write-directive\">Build an <strong>attribute directive</strong></a> that modifies the behavior of an element.</li>\n<li><a href=\"guide/attribute-directives#apply-directive\">Apply the directive</a> to an element in a template.</li>\n<li><a href=\"guide/attribute-directives#respond-to-user\">Respond to <strong>events</strong></a> that change the directive's behavior.</li>\n<li><a href=\"guide/attribute-directives#bindings\"><strong>Bind</strong> values to the directive</a>.</li>\n</ul>\n<p>The final source code follows:</p>\n<code-tabs>\n  <code-pane title=\"app/app.component.ts\" path=\"attribute-directives/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  color: string;\n}\n\n\n</code-pane>\n  <code-pane title=\"app/app.component.html\" path=\"attribute-directives/src/app/app.component.html\">\n&#x3C;h1>My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&#x3C;/h1>\n\n&#x3C;h4>Pick <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> highlight color&#x3C;/h4>\n&#x3C;div>\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan\n&#x3C;/div>\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n&#x3C;p [appHighlight]=\"color\" defaultColor=\"violet\">\n  Highlight me too!\n&#x3C;/p>\n\n</code-pane>\n  <code-pane title=\"app/highlight.directive.ts\" path=\"attribute-directives/src/app/highlight.directive.ts\">\n/* tslint:disable:member-ordering */\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() defaultColor: string;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || this.defaultColor || 'red');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"app/app.module.ts\" path=\"attribute-directives/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { HighlightDirective } from './highlight.directive';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [\n    AppComponent,\n    HighlightDirective\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane title=\"main.ts\" path=\"attribute-directives/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n  <code-pane title=\"index.html\" path=\"attribute-directives/src/index.html\">\n&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;title><a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> Directives&#x3C;/title>\n    &#x3C;base href=\"/\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;app-root>&#x3C;/app-root>\n  &#x3C;/body>\n&#x3C;/html>\n\n\n</code-pane>\n</code-tabs>\n<p>You can also experience and download the <live-example title=\"Attribute Directive example\"></live-example>.</p>\n<a id=\"why-input\"></a>\n<h3 id=\"appendix-why-add-input\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#appendix-why-add-input\"><i class=\"material-icons\">link</i></a>Appendix: Why add <em>@Input</em>?</h3>\n<p>In this demo, the <code>highlightColor</code> property is an <strong><em>input</em></strong> property of\nthe <code>HighlightDirective</code>. You've seen it applied without an alias:</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (color)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() highlightColor: string;\n\n</code-example>\n<p>You've seen it with an alias:</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (color)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n</code-example>\n<p>Either way, the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator tells Angular that this property is\n<em>public</em> and available for binding by a parent component.\nWithout  <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>, Angular refuses to bind to the property.</p>\n<p>You've bound template HTML to component properties before and never used <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>.\nWhat's different?</p>\n<p>The difference is a matter of trust.\nAngular treats a component's template as <em>belonging</em> to the component.\nThe component and its template trust each other implicitly.\nTherefore, the component's own template may bind to <em>any</em> property of that component,\nwith or without the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n<p>But a component or directive shouldn't blindly trust <em>other</em> components and directives.\nThe properties of a component or directive are hidden from binding by default.\nThey are <em>private</em> from an Angular binding perspective.\nWhen adorned with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator, the property becomes <em>public</em> from an Angular binding perspective.\nOnly then can it be bound by some other component or directive.</p>\n<p>You can tell if <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> is needed by the position of the property name in a binding.</p>\n<ul>\n<li>\n<p>When it appears in the template expression to the <strong><em>right</em></strong> of the equals (=),\nit belongs to the template's component and does not require the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n</li>\n<li>\n<p>When it appears in <strong>square brackets</strong> ([ ]) to the <strong>left</strong> of the equals (=),\nthe property belongs to some <em>other</em> component or directive;\nthat property must be adorned with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n</li>\n</ul>\n<p>Now apply that reasoning to the following example:</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (color)\" region=\"color\">\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<ul>\n<li>\n<p>The <code>color</code> property in the expression on the right belongs to the template's component.\nThe template and its component trust each other.\nThe <code>color</code> property doesn't require the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n</li>\n<li>\n<p>The <code>appHighlight</code> property on the left refers to an <em>aliased</em> property of the <code>HighlightDirective</code>,\nnot a property of the template's component. There are trust issues.\nTherefore, the directive property must carry the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/dependency-injection-in-action\n - guide/glossary\n - guide/structural-directives\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/core/Attribute\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/HostListener\n - api/core/Input\n - api/core/NgModule\n - api/core/enableProdMode\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - guide/attribute-directives#appendix-why-add-input\n - guide/attribute-directives#apply-directive\n - guide/attribute-directives#apply-the-attribute-directive\n - guide/attribute-directives#attribute-directives\n - guide/attribute-directives#bind-to-a-second-property\n - guide/attribute-directives#bind-to-an-input-alias\n - guide/attribute-directives#binding-to-an-input-property\n - guide/attribute-directives#bindings\n - guide/attribute-directives#build-a-simple-attribute-directive\n - guide/attribute-directives#directives-overview\n - guide/attribute-directives#pass-values-into-the-directive-with-an-input-data-binding\n - guide/attribute-directives#respond-to-user\n - guide/attribute-directives#respond-to-user-initiated-events\n - guide/attribute-directives#summary\n - guide/attribute-directives#why-input\n - guide/attribute-directives#why-not-highlight\n - guide/attribute-directives#write-a-harness-to-try-it\n - guide/attribute-directives#write-directive\n - guide/attribute-directives#write-the-directive-code\n - guide/dependency-injection\n - guide/ngmodules\n - guide/quickstart\n - guide/structural-directives\n - guide/template-syntax\n - guide/template-syntax#ngFor\n - guide/template-syntax#ngIf\n - guide/template-syntax#ngStyle\n - https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\n-->"
}