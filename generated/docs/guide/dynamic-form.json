{
  "id": "guide/dynamic-form",
  "title": "Dynamic Forms",
  "contents": "\n<div class=\"content\">\n<h1 id=\"dynamic-forms\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#dynamic-forms\"><i class=\"material-icons\">link</i></a>Dynamic Forms</h1>\n<a id=\"top\"></a>\n<p>Building handcrafted forms can be costly and time-consuming,\nespecially if you need a great number of them, they're similar to each other, and they change frequently\nto meet rapidly changing business and regulatory requirements.</p>\n<p>It may be more economical to create the forms dynamically, based on\nmetadata that describes the business object model.</p>\n<p>This cookbook shows you how to use <code>formGroup</code> to dynamically\nrender a simple form with different control types and validation.\nIt's a primitive start.\nIt might evolve to support a much richer variety of questions, more graceful rendering, and superior user experience.\nAll such greatness has humble beginnings.</p>\n<p>The example in this cookbook is a dynamic form to build an\nonline application experience for heroes seeking employment.\nThe agency is constantly tinkering with the application process.\nYou can create the forms on the fly <em>without changing the application code</em>.\n<a id=\"toc\"></a></p>\n<p>See the <live-example name=\"dynamic-form\"></live-example>.</p>\n<a id=\"bootstrap\"></a>\n<h2 id=\"bootstrap\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#bootstrap\"><i class=\"material-icons\">link</i></a>Bootstrap</h2>\n<p>Start by creating an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> called <code>AppModule</code>.</p>\n<p>This cookbook uses <a href=\"guide/reactive-forms\">reactive forms</a>.</p>\n<p>Reactive forms belongs to a different <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> called <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>,\nso in order to access any reactive forms directives, you have to import\n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> from the <code>@angular/forms</code> library.</p>\n<p>Bootstrap the <code>AppModule</code> in <code>main.ts</code>.</p>\n<code-tabs>\n\n  <code-pane title=\"app.module.ts\" path=\"dynamic-form/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }                from '@angular/platform-browser';\nimport { <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> }          from '@angular/forms';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }                     from '@angular/core';\n\nimport { AppComponent }                 from './app.component';\nimport { DynamicFormComponent }         from './dynamic-form.component';\nimport { DynamicFormQuestionComponent } from './dynamic-form-question.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> ],\n  declarations: [ AppComponent, DynamicFormComponent, DynamicFormQuestionComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n  constructor() {\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"main.ts\" path=\"dynamic-form/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n</code-tabs>\n<a id=\"object-model\"></a>\n<h2 id=\"question-model\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#question-model\"><i class=\"material-icons\">link</i></a>Question model</h2>\n<p>The next step is to define an object model that can describe all scenarios needed by the form functionality.\nThe hero application process involves a form with a lot of questions.\nThe <em>question</em> is the most fundamental object in the model.</p>\n<p>The following <code>QuestionBase</code> is a fundamental question class.</p>\n<code-example path=\"dynamic-form/src/app/question-base.ts\" title=\"src/app/question-base.ts\">\nexport class QuestionBase&#x3C;T>{\n  value: T;\n  key: string;\n  label: string;\n  required: boolean;\n  order: number;\n  controlType: string;\n\n  constructor(options: {\n      value?: T,\n      key?: string,\n      label?: string,\n      required?: boolean,\n      order?: number,\n      controlType?: string\n    } = {}) {\n    this.value = options.value;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.required = !!options.required;\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n  }\n}\n\n\n</code-example>\n<p>From this base you can derive two new classes in <code>TextboxQuestion</code> and <code>DropdownQuestion</code>\nthat represent textbox and dropdown questions.\nThe idea is that the form will be bound to specific question types and render the\nappropriate controls dynamically.</p>\n<p><code>TextboxQuestion</code> supports multiple HTML5 types such as text, email, and url\nvia the <code>type</code> property.</p>\n<code-example path=\"dynamic-form/src/app/question-textbox.ts\" title=\"src/app/question-textbox.ts\" linenums=\"false\">\nimport { QuestionBase } from './question-base';\n\nexport class TextboxQuestion extends QuestionBase&#x3C;string> {\n  controlType = 'textbox';\n  type: string;\n\n  constructor(options: {} = {}) {\n    super(options);\n    this.type = options['type'] || '';\n  }\n}\n\n\n</code-example>\n<p><code>DropdownQuestion</code> presents a list of choices in a select box.</p>\n<code-example path=\"dynamic-form/src/app/question-dropdown.ts\" title=\"src/app/question-dropdown.ts\" linenums=\"false\">\nimport { QuestionBase } from './question-base';\n\nexport class DropdownQuestion extends QuestionBase&#x3C;string> {\n  controlType = 'dropdown';\n  options: {key: string, value: string}[] = [];\n\n  constructor(options: {} = {}) {\n    super(options);\n    this.options = options['options'] || [];\n  }\n}\n\n\n</code-example>\n<p>Next is <code>QuestionControlService</code>, a simple service for transforming the questions to a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.\nIn a nutshell, the form group consumes the metadata from the question model and\nallows you to specify default values and validation rules.</p>\n<code-example path=\"dynamic-form/src/app/question-control.service.ts\" title=\"src/app/question-control.service.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }   from '@angular/core';\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class QuestionControlService {\n  constructor() { }\n\n  toFormGroup(questions: QuestionBase&#x3C;any>[] ) {\n    let <a href=\"api/animations/group\" class=\"code-anchor\">group</a>: any = {};\n\n    questions.forEach(question => {\n      <a href=\"api/animations/group\" class=\"code-anchor\">group</a>[question.key] = question.required ? new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(question.value || '', Validators.required)\n                                              : new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(question.value || '');\n    });\n    return new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>(<a href=\"api/animations/group\" class=\"code-anchor\">group</a>);\n  }\n}\n\n\n</code-example>\n<a id=\"form-component\"></a>\n<h2 id=\"question-form-components\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#question-form-components\"><i class=\"material-icons\">link</i></a>Question form components</h2>\n<p>Now that you have defined the complete model you are ready\nto create components to represent the dynamic form.</p>\n<p><code>DynamicFormComponent</code> is the entry point and the main container for the form.</p>\n<code-tabs>\n\n  <code-pane title=\"dynamic-form.component.html\" path=\"dynamic-form/src/app/dynamic-form.component.html\">\n&#x3C;div>\n  &#x3C;form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n\n    &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let question of questions\" class=\"form-row\">\n      &#x3C;app-question [question]=\"question\" [form]=\"form\">&#x3C;/app-question>\n    &#x3C;/div>\n\n    &#x3C;div class=\"form-row\">\n      &#x3C;button type=\"submit\" [disabled]=\"!form.valid\">Save&#x3C;/button>\n    &#x3C;/div>\n  &#x3C;/form>\n\n  &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"payLoad\" class=\"form-row\">\n    &#x3C;strong>Saved the following values&#x3C;/strong>&#x3C;br>{{payLoad}}\n  &#x3C;/div>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane title=\"dynamic-form.component.ts\" path=\"dynamic-form/src/app/dynamic-form.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> }  from '@angular/core';\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> }                 from '@angular/forms';\n\nimport { QuestionBase }              from './question-base';\nimport { QuestionControlService }    from './question-control.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [ QuestionControlService ]\n})\nexport class DynamicFormComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() questions: QuestionBase&#x3C;any>[] = [];\n  form: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  payLoad = '';\n\n  constructor(private qcs: QuestionControlService) {  }\n\n  ngOnInit() {\n    this.form = this.qcs.toFormGroup(this.questions);\n  }\n\n  onSubmit() {\n    this.payLoad = JSON.stringify(this.form.value);\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p>It presents a list of questions, each bound to a <code>&#x3C;app-question></code> component element.\nThe <code>&#x3C;app-question></code> tag matches the <code>DynamicFormQuestionComponent</code>,\nthe component responsible for rendering the details of each <em>individual</em>\nquestion based on values in the data-bound question object.</p>\n<code-tabs>\n\n  <code-pane title=\"dynamic-form-question.component.html\" path=\"dynamic-form/src/app/dynamic-form-question.component.html\">\n&#x3C;div [formGroup]=\"form\">\n  &#x3C;label [attr.for]=\"question.key\">{{question.label}}&#x3C;/label>\n\n  &#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"question.controlType\">\n\n    &#x3C;input *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'textbox'\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"question.key\"\n            [id]=\"question.key\" [type]=\"question.type\">\n\n    &#x3C;select [id]=\"question.key\" *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'dropdown'\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"question.key\">\n      &#x3C;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let opt of question.options\" [value]=\"opt.key\">{{opt.value}}&#x3C;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>>\n    &#x3C;/select>\n\n  &#x3C;/div> \n\n  &#x3C;div class=\"errorMessage\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!isValid\">{{question.label}} is required&#x3C;/div>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane title=\"dynamic-form-question.component.ts\" path=\"dynamic-form/src/app/dynamic-form-question.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> }        from '@angular/forms';\n\nimport { QuestionBase }     from './question-base';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-question',\n  templateUrl: './dynamic-form-question.component.html'\n})\nexport class DynamicFormQuestionComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() question: QuestionBase&#x3C;any>;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() form: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  get isValid() { return this.form.controls[this.question.key].valid; }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p>Notice this component can present any type of question in your model.\nYou only have two types of questions at this point but you can imagine many more.\nThe <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> determines which type of question to display.</p>\n<p>In both components  you're relying on Angular's <strong>formGroup</strong> to connect the template HTML to the\nunderlying control objects, populated from the question model with display and validation rules.</p>\n<p><code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> and <code>formGroup</code> are directives defined in\n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>. The templates can access these directives\ndirectly since you imported <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> from <code>AppModule</code>.\n<a id=\"questionnaire-data\"></a></p>\n<h2 id=\"questionnaire-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#questionnaire-data\"><i class=\"material-icons\">link</i></a>Questionnaire data</h2>\n<p><code>DynamicFormComponent</code> expects the list of questions in the form of an array bound to <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() questions</code>.</p>\n<p> The set of questions you've defined for the job application is returned from the <code>QuestionService</code>.\nIn a real app you'd retrieve these questions from storage.</p>\n<p> The key point is that you control the hero job application questions\nentirely through the objects returned from <code>QuestionService</code>.\nQuestionnaire maintenance is a simple matter of adding, updating,\nand removing objects from the <code>questions</code> array.</p>\n<code-example path=\"dynamic-form/src/app/question.service.ts\" title=\"src/app/question.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }       from '@angular/core';\n\nimport { DropdownQuestion } from './question-dropdown';\nimport { QuestionBase }     from './question-base';\nimport { TextboxQuestion }  from './question-textbox';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class QuestionService {\n\n  // TODO: get from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> remote source of question metadata\n  // TODO: make asynchronous\n  getQuestions() {\n\n    let questions: QuestionBase&#x3C;any>[] = [\n\n      new DropdownQuestion({\n        key: 'brave',\n        label: 'Bravery Rating',\n        options: [\n          {key: 'solid',  value: 'Solid'},\n          {key: 'great',  value: 'Great'},\n          {key: 'good',   value: 'Good'},\n          {key: 'unproven', value: 'Unproven'}\n        ],\n        order: 3\n      }),\n\n      new TextboxQuestion({\n        key: 'firstName',\n        label: 'First name',\n        value: 'Bombasto',\n        required: true,\n        order: 1\n      }),\n\n      new TextboxQuestion({\n        key: 'emailAddress',\n        label: 'Email',\n        type: '<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>',\n        order: 2\n      })\n    ];\n\n    return questions.sort((<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>, b) => a.order - b.order);\n  }\n}\n\n\n</code-example>\n<p>Finally, display an instance of the form in the <code>AppComponent</code> shell.</p>\n<code-example path=\"dynamic-form/src/app/app.component.ts\" title=\"app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }       from '@angular/core';\n\nimport { QuestionService } from './question.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &#x3C;div>\n      &#x3C;h2>Job Application for Heroes&#x3C;/h2>\n      &#x3C;app-dynamic-form [questions]=\"questions\">&#x3C;/app-dynamic-form>\n    &#x3C;/div>\n  `,\n  providers:  [QuestionService]\n})\nexport class AppComponent {\n  questions: any[];\n\n  constructor(service: QuestionService) {\n    this.questions = service.getQuestions();\n  }\n}\n\n\n</code-example>\n<a id=\"dynamic-template\"></a>\n<h2 id=\"dynamic-template\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#dynamic-template\"><i class=\"material-icons\">link</i></a>Dynamic Template</h2>\n<p>Although in this example you're modelling a job application for heroes, there are\nno references to any specific hero question\noutside the objects returned by <code>QuestionService</code>.</p>\n<p>This is very important since it allows you to repurpose the components for any type of survey\nas long as it's compatible with the <em>question</em> object model.\nThe key is the dynamic data binding of metadata used to render the form\nwithout making any hardcoded assumptions about specific questions.\nIn addition to control metadata, you are also adding validation dynamically.</p>\n<p>The <em>Save</em> button is disabled until the form is in a valid state.\nWhen the form is valid, you can click <em>Save</em> and the app renders the current form values as JSON.\nThis proves that any user input is bound back to the data model.\nSaving and retrieving the data is an exercise for another time.</p>\n<p>The final form looks like this:</p>\n<figure>\n  <img src=\"generated/images/guide/dynamic-form/dynamic-form.png\" alt=\"Dynamic-Form\" width=\"316\" height=\"230\">\n</figure>\n<p><a href=\"guide/dynamic-form#top\">Back to top</a></p>\n\n</div>\n<!-- links to this doc:\n - guide/security\n-->\n<!-- links from this doc:\n - api/animations/group\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/core/enableProdMode\n - api/forms/EmailValidator\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/NgSelectOption\n - api/forms/ReactiveFormsModule\n - api/forms/Validators\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - guide/dynamic-form#bootstrap\n - guide/dynamic-form#dynamic-forms\n - guide/dynamic-form#dynamic-template\n - guide/dynamic-form#question-form-components\n - guide/dynamic-form#question-model\n - guide/dynamic-form#questionnaire-data\n - guide/dynamic-form#top\n - guide/reactive-forms\n-->"
}