{
  "id" : "guide/dynamic-form",
  "title" : "动态表单",
  "contents" : "<div class=\"content\">\n<h1 id=\"dynamic-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayivdho2a843m2si83r35dabt\"><i class=\"material-icons\">link</i>动态表单</h1>\n<a id=\"top\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bnfmtc2teawq89lqh4vls7tz\">构建手工制作的表单可能成本高昂且耗时，尤其是在你需要大量表单、它们彼此相似且经常更改以满足快速变化的业务和监管要求的情况下。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nvteqhfj3bnm4efka7ivo7ng\">根据描述业务对象模型的元数据动态创建表单可能更经济。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40ddxy83ydfx6fllspp0b77yh\">本指南展示了如何使用 \n<code>formGroup</code> 动态渲染一个包含不同控件类型和验证的简单表单。这是一个简单的开始。它可能会发展到支持更多样化的问题、更优雅的渲染和更出色的用户体验。所有这些伟大都始于微不足道的开始。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1e0u672k1nqv11n97l2vndho\">本指南中的示例是一个动态表单，用于为寻求工作的英雄构建在线应用程序体验。该机构不断调整申请流程。你可以\n<em>无需更改应用程序代码</em>即可动态创建表单。 \n<a id=\"toc\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zyqrkx2stlg7xx1sbs50qvq0\">查看 \n<live-example name=\"dynamic-form\"></live-example>。</p>\n<a id=\"bootstrap\"></a>\n<h2 id=\"bootstrap\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62o8jtgtf2mdfz17vjpiduudt\"><i class=\"material-icons\">link</i>引导</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zwg77mx0wgnktau9jj8er8b3\">首先创建一个名为 \n<code>AppModule</code> 的 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mzo5uvxz3kkl6uq31rnoaxyg\">此指南使用 \n<a href=\"guide/reactive-forms\">响应式表单</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eukkit1ao7pezqosn8jmbtfqu\">响应式表单属于另一个名为 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>， 因此，为了访问任何响应式表单指令，你必须从 \n<code>@angular/forms</code> 库中导入 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bi8yn3rmr96yz4cv0ae5tq1l7\">在 \n<code>main.ts</code> 中引导 \n<code>AppModule</code>。</p>\n<code-tabs>\n\n  <code-pane title=\"app.module.ts\" path=\"dynamic-form/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }                from '@angular/platform-browser';\nimport { <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> }          from '@angular/forms';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }                     from '@angular/core';\n\nimport { AppComponent }                 from './app.component';\nimport { DynamicFormComponent }         from './dynamic-form.component';\nimport { DynamicFormQuestionComponent } from './dynamic-form-question.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> ],\n  declarations: [ AppComponent, DynamicFormComponent, DynamicFormQuestionComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n  constructor() {\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"main.ts\" path=\"dynamic-form/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n</code-tabs>\n<a id=\"object-model\"></a>\n<h2 id=\"question-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ilyaczqiqh2xgvjp789qbxyk\"><i class=\"material-icons\">link</i>问题模型</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2enbpew5wup6etpwm7x47vrpz\">下一步是定义一个对象模型，该模型可以描述表单功能所需的所有场景。 英雄应用程序流程包含一个包含许多问题的表单。 \n<em>问题</em> 是模型中最基本的对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"autbuhv23i2rvosiiz3dkwfca\">以下 \n<code>QuestionBase</code> 是一个基本的问题类。</p>\n<code-example path=\"dynamic-form/src/app/question-base.ts\" title=\"src/app/question-base.ts\">\nexport class QuestionBase&lt;T&gt;{\n  value: T;\n  key: string;\n  label: string;\n  required: boolean;\n  order: number;\n  controlType: string;\n\n  constructor(options: {\n      value?: T,\n      key?: string,\n      label?: string,\n      required?: boolean,\n      order?: number,\n      controlType?: string\n    } = {}) {\n    this.value = options.value;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.required = !!options.required;\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apz5k4g58hef9v1f341kn38j2\">从这个基础上，你可以派生出 \n<code>TextboxQuestion</code> 和 \n<code>DropdownQuestion</code> 中的两个新类， 它们分别代表文本框和下拉列表问题。 其理念是，表单将绑定到特定问题类型，并动态渲染相应的控件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ycgdlip47nuva35b2a5o0571\"><code>TextboxQuestion</code> 通过 \n<code>type</code> 属性支持多种 HTML5 类型，例如 text、email 和 url。</p>\n<code-example path=\"dynamic-form/src/app/question-textbox.ts\" title=\"src/app/question-textbox.ts\" linenums=\"false\">\nimport { QuestionBase } from './question-base';\n\nexport class TextboxQuestion extends QuestionBase&lt;string&gt; {\n  controlType = 'textbox';\n  type: string;\n\n  constructor(options: {} = {}) {\n    super(options);\n    this.type = options['type'] || '';\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xx9slrrao5erph1adddm7vx4\"><code>DropdownQuestion</code> 在选择框中显示一个选项列表。</p>\n<code-example path=\"dynamic-form/src/app/question-dropdown.ts\" title=\"src/app/question-dropdown.ts\" linenums=\"false\">\nimport { QuestionBase } from './question-base';\n\nexport class DropdownQuestion extends QuestionBase&lt;string&gt; {\n  controlType = 'dropdown';\n  options: {key: string, value: string}[] = [];\n\n  constructor(options: {} = {}) {\n    super(options);\n    this.options = options['options'] || [];\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jqqbzoe0rqif97f2bmv3dewk\">接下来是 \n<code>QuestionControlService</code>，这是一个简单的服务，用于将问题转换为 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>。 简而言之，表单组使用问题模型中的元数据，并允许你指定默认值和验证规则。</p>\n<code-example path=\"dynamic-form/src/app/question-control.service.ts\" title=\"src/app/question-control.service.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }   from '@angular/core';\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class QuestionControlService {\n  constructor() { }\n\n  toFormGroup(questions: QuestionBase&lt;any&gt;[] ) {\n    let <a href=\"api/animations/group\" class=\"code-anchor\">group</a>: any = {};\n\n    questions.forEach(question =&gt; {\n      <a href=\"api/animations/group\" class=\"code-anchor\">group</a>[question.key] = question.required ? new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(question.value || '', Validators.required)\n                                              : new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(question.value || '');\n    });\n    return new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>(<a href=\"api/animations/group\" class=\"code-anchor\">group</a>);\n  }\n}\n\n\n</code-example>\n<a id=\"form-component\"></a>\n<h2 id=\"question-form-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wxa8tlhu7c1ynf3x4q0f9lcs\"><i class=\"material-icons\">link</i>问题表单组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azp91dn5kahj8yuswui15b03f\">现在你已经定义了完整的模型，就可以 创建组件来表示动态表单了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2i1bvjq6z3cl0bcfi00l7d3eg\"><code>DynamicFormComponent</code> 是表单的入口点和主容器。</p>\n<code-tabs>\n\n  <code-pane title=\"dynamic-form.component.html\" path=\"dynamic-form/src/app/dynamic-form.component.html\">\n&lt;div&gt;\n  &lt;form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\"&gt;\n\n    &lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let question of questions\" class=\"form-row\"&gt;\n      &lt;app-question [question]=\"question\" [form]=\"form\"&gt;&lt;/app-question&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-row\"&gt;\n      &lt;button type=\"submit\" [disabled]=\"!form.valid\"&gt;Save&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n\n  &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"payLoad\" class=\"form-row\"&gt;\n    &lt;strong&gt;Saved the following values&lt;/strong&gt;&lt;br&gt;{{payLoad}}\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"dynamic-form.component.ts\" path=\"dynamic-form/src/app/dynamic-form.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> }  from '@angular/core';\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> }                 from '@angular/forms';\n\nimport { QuestionBase }              from './question-base';\nimport { QuestionControlService }    from './question-control.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [ QuestionControlService ]\n})\nexport class DynamicFormComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() questions: QuestionBase&lt;any&gt;[] = [];\n  form: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  payLoad = '';\n\n  constructor(private qcs: QuestionControlService) {  }\n\n  ngOnInit() {\n    this.form = this.qcs.toFormGroup(this.questions);\n  }\n\n  onSubmit() {\n    this.payLoad = JSON.stringify(this.form.value);\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68uy5tue2ly8qfbaluzlwb11x\">它呈现一个问题列表，每个问题都绑定到一个 \n<code>&lt;app-question&gt;</code> 组件元素。 \n<code>&lt;app-question&gt;</code> 标签与 \n<code>DynamicFormQuestionComponent</code> 匹配， 该组件负责根据数据绑定问题对象中的值渲染每个\n<em>单独</em> 问题的详细信息。</p>\n<code-tabs>\n\n  <code-pane title=\"dynamic-form-question.component.html\" path=\"dynamic-form/src/app/dynamic-form-question.component.html\">\n&lt;div [formGroup]=\"form\"&gt;\n  &lt;label [attr.for]=\"question.key\"&gt;{{question.label}}&lt;/label&gt;\n\n  &lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"question.controlType\"&gt;\n\n    &lt;input *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'textbox'\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"question.key\"\n            [id]=\"question.key\" [type]=\"question.type\"&gt;\n\n    &lt;select [id]=\"question.key\" *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'dropdown'\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"question.key\"&gt;\n      &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let opt of question.options\" [value]=\"opt.key\"&gt;{{opt.value}}&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n    &lt;/select&gt;\n\n  &lt;/div&gt; \n\n  &lt;div class=\"errorMessage\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!isValid\"&gt;{{question.label}} is required&lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"dynamic-form-question.component.ts\" path=\"dynamic-form/src/app/dynamic-form-question.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> }        from '@angular/forms';\n\nimport { QuestionBase }     from './question-base';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-question',\n  templateUrl: './dynamic-form-question.component.html'\n})\nexport class DynamicFormQuestionComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() question: QuestionBase&lt;any&gt;;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() form: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  get isValid() { return this.form.controls[this.question.key].valid; }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94vkr00yeut9k2txxoz1fxg7b\">请注意，此组件可以呈现模型中的任何类型的问题。 目前你只有两种类型的问题，但你可以想象还有更多。 \n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 确定要显示哪种类型的问题。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5955fnzo4ymtqw21xgex2if50\">在这两个组件中，你都依赖于 Angular 的 \n<strong>formGroup</strong> 将模板 HTML 连接到 底层控件对象，这些对象由问题模型填充，并包含显示和验证规则。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sukjrzltwumwtemwvy8cyz0d\"><code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> 和 \n<code>formGroup</code> 是在 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 中定义的指令。模板可以直接访问这些指令， 因为你从 \n<code>AppModule</code> 中导入了 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>。 \n<a id=\"questionnaire-data\"></a></p>\n<h2 id=\"questionnaire-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7twzwh80upkucaoy6wm5tghqa\"><i class=\"material-icons\">link</i>问卷数据</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dnb170ykjsaz0ua60u6b75p1\"><code>DynamicFormComponent</code> 期望以数组的形式提供问题列表，并绑定到 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() questions</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dl101o18dmy0651olaj3obmpr\">你为工作申请定义的一组问题是从 \n<code>QuestionService</code> 返回的。 在实际应用中，你将从存储中检索这些问题。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52exwcx8cu32af8tp3lfdrbh5\">关键点在于，你完全通过 \n<code>QuestionService</code> 返回的对象来控制英雄工作申请问题。 问卷维护只需在 \n<code>questions</code> 数组中添加、更新和删除对象即可。</p>\n<code-example path=\"dynamic-form/src/app/question.service.ts\" title=\"src/app/question.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }       from '@angular/core';\n\nimport { DropdownQuestion } from './question-dropdown';\nimport { QuestionBase }     from './question-base';\nimport { TextboxQuestion }  from './question-textbox';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class QuestionService {\n\n  // TODO: get from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> remote source of question metadata\n  // TODO: make asynchronous\n  getQuestions() {\n\n    let questions: QuestionBase&lt;any&gt;[] = [\n\n      new DropdownQuestion({\n        key: 'brave',\n        label: 'Bravery Rating',\n        options: [\n          {key: 'solid',  value: 'Solid'},\n          {key: 'great',  value: 'Great'},\n          {key: 'good',   value: 'Good'},\n          {key: 'unproven', value: 'Unproven'}\n        ],\n        order: 3\n      }),\n\n      new TextboxQuestion({\n        key: 'firstName',\n        label: 'First name',\n        value: 'Bombasto',\n        required: true,\n        order: 1\n      }),\n\n      new TextboxQuestion({\n        key: 'emailAddress',\n        label: 'Email',\n        type: '<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>',\n        order: 2\n      })\n    ];\n\n    return questions.sort((<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>, b) =&gt; a.order - b.order);\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxs4yqm3kylus7my40lr1anqr\">最后，在 \n<code>AppComponent</code> 外壳中显示表单实例。</p>\n<code-example path=\"dynamic-form/src/app/app.component.ts\" title=\"app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }       from '@angular/core';\n\nimport { QuestionService } from './question.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Job Application for Heroes&lt;/h2&gt;\n      &lt;app-dynamic-form [questions]=\"questions\"&gt;&lt;/app-dynamic-form&gt;\n    &lt;/div&gt;\n  `,\n  providers:  [QuestionService]\n})\nexport class AppComponent {\n  questions: any[];\n\n  constructor(service: QuestionService) {\n    this.questions = service.getQuestions();\n  }\n}\n\n\n</code-example>\n<a id=\"dynamic-template\"></a>\n<h2 id=\"dynamic-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci7krwyaus9bxbzn309rj439r\"><i class=\"material-icons\">link</i>动态模板</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iqtll5c4f9bwzszluygjmbvb\">虽然在本例中，你正在为英雄建模工作申请，但除了 \n<code>QuestionService</code> 返回的对象之外， 没有任何对特定英雄问题的引用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ry46czsu0hw6r5fu8s0ysenp\">这一点非常重要，因为它允许你将组件重新用于任何类型的调查， 只要它与\n<em>问题</em> 对象模型兼容即可。 关键是动态数据绑定元数据，用于渲染表单， 而无需对特定问题做出任何硬编码假设。 除了控件元数据之外，你还在动态添加验证。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wnj6mz541r2ab616iuopwi2x\"><em>保存</em> 按钮在表单处于有效状态之前处于禁用状态。 当表单有效时，你可以点击\n<em>保存</em>，应用程序会将当前表单值渲染为 JSON。 这证明任何用户输入都绑定回数据模型。 保存和检索数据留待以后再做。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zr5qu97n1qiqtbu00s5apalc\">最终的表单如下所示：</p>\n<figure>\n  <img src=\"generated/images/guide/dynamic-form/dynamic-form.png\" alt=\"Dynamic-Form\" width=\"316\" height=\"230\">\n</figure>\n<p><a href=\"guide/dynamic-form#top\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvz5yqa4940l7hg3h0kx4epp\">返回顶部</a></p>\n\n</div>\n<!-- links to this doc:\n - guide/security\n-->\n<!-- links from this doc:\n - api/animations/group\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/core/enableProdMode\n - api/forms/EmailValidator\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/NgSelectOption\n - api/forms/ReactiveFormsModule\n - api/forms/Validators\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - guide/dynamic-form#bootstrap\n - guide/dynamic-form#dynamic-forms\n - guide/dynamic-form#dynamic-template\n - guide/dynamic-form#question-form-components\n - guide/dynamic-form#question-model\n - guide/dynamic-form#questionnaire-data\n - guide/dynamic-form#top\n - guide/reactive-forms\n-->"
}