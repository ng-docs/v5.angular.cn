{
  "id" : "guide/typescript-configuration",
  "title" : "TypeScript 配置",
  "contents" : "<div class=\"content\">\n<h1 id=\"typescript-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"df89x8qgnk521r0qzelfixqyi\"><i class=\"material-icons\">link</i>TypeScript 配置</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5fy3421h5dmbvtbd39asptfj\">TypeScript 是 Angular 应用程序开发的主要语言。它是 JavaScript 的超集，具有对类型安全和工具的设计时支持。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dymhpzhhq8dgm57uh4b8ebcnd\">浏览器无法直接执行 TypeScript。TypeScript 必须使用 \n<em>tsc</em> 编译器“转译”为 JavaScript，这需要一些配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6b3gza38ee2js6acocgywc2g5\">本页介绍了 TypeScript 配置和 TypeScript 环境中对 Angular 开发人员很重要的某些方面，包括有关以下文件的详细信息：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed7y3eue7fhpst4rj6ntfsajk\"><a href=\"guide/typescript-configuration#tsconfig\">tsconfig.json</a> — TypeScript 编译器配置。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xhtfv9a9qnhhqhkgd6nd0lc1\"><a href=\"guide/typescript-configuration#typings\">typings</a> — Typescript 声明文件。</li>\n</ul>\n<a id=\"tsconfig\"></a>\n<h2 id=\"tsconfigjson\"><em>tsconfig.json</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20h930v2f50j8qgdjh92qgqt7\">通常，你会将一个名为 \n<code>tsconfig.json</code> 的 TypeScript 配置文件添加到你的项目中，以在编译器生成 JavaScript 文件时对其进行指导。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4mzst47b3w9pmxpapa22xqpn\">有关 \n<code>tsconfig.json</code> 的详细信息，请参阅官方 \n<a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript wiki</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65qyxxis6d73crl208p0ikjxd\"><a href=\"guide/setup\">设置</a> 指南使用以下 \n<code>tsconfig.json</code>：</p>\n<code-example path=\"quickstart/src/tsconfig.1.json\" title=\"tsconfig.json\" linenums=\"false\">\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [ \"es2015\", \"dom\" ],\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxb5733kqca1eb0lf4yoayp9w\">此文件包含对 Angular 应用程序至关重要的选项和标志。</p>\n<a id=\"noImplicitAny\"></a>\n<h3 id=\"noimplicitany-and-suppressimplicitanyindexerrors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duki4e0r1tea2ezz03gkgdqbj\"><i class=\"material-icons\">link</i><em>noImplicitAny</em> 和 \n<em>suppressImplicitAnyIndexErrors</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cavxev203qmku0ubclbfjh77q\">TypeScript 开发人员对 \n<code>noImplicitAny</code> 标志应该为 \n<code>true</code> 还是 \n<code>false</code> 持不同意见。没有正确答案，你以后可以更改此标志。但你现在做出的选择可能会对大型项目产生影响，因此值得讨论。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16eqf4sqc95idxasfd6aqx2i6\">当 \n<code>noImplicitAny</code> 标志为 \n<code>false</code>（默认值）时，如果编译器无法根据变量的使用方式推断出变量类型，则编译器会将类型默认设置为 \n<code>any</code>。这就是 \n<em>隐式 <code>any</code></em> 的含义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9t5llgk2rj655zzyn6c8qswq0\">文档设置将 \n<code>noImplicitAny</code> 标志设置为 \n<code>true</code>。当 \n<code>noImplicitAny</code> 标志为 \n<code>true</code> 且 TypeScript 编译器无法推断出类型时，它仍然会生成 JavaScript 文件，但也会\n<strong>报告错误</strong>。许多经验丰富的开发人员更喜欢这种更严格的设置，因为类型检查会在编译时捕获更多意外错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv14cu3kpp7vj7n79q8xnt28d\">即使 \n<code>noImplicitAny</code> 标志为 \n<code>true</code>，你也可以将变量的类型设置为 \n<code>any</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eji03pxeidldr96rq2d0tclie\">当 \n<code>noImplicitAny</code> 标志为 \n<code>true</code> 时，你可能会遇到 \n<em>隐式索引错误</em>。大多数开发人员认为 \n<em>这种特定错误</em> 比有帮助更令人讨厌。你可以使用以下附加标志来抑制它们：</p>\n<code-example format=\".\">\n  \"suppressImplicitAnyIndexErrors\":true\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9za4x4l9boeub2gqkzve943gj\">文档设置也将此标志设置为 \n<code>true</code>。</p>\n<a id=\"typings\"></a>\n<h2 id=\"typescript-typings\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qa4wkbhkm75oqcw4rry3l54e\"><i class=\"material-icons\">link</i>TypeScript 类型</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egafdmkbhvrwbnyb91t6w6w46\">许多 JavaScript 库（例如 jQuery、Jasmine 测试库和 Angular）使用 TypeScript 编译器无法原生识别的特性和语法扩展了 JavaScript 环境。当编译器无法识别某些内容时，它会抛出错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1moicggtrteln3dyuz5xt0vu6\">使用 \n<a href=\"https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\">TypeScript 类型定义文件</a> — \n<code>d.ts 文件</code> — 来告诉编译器有关你加载的库的信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsqg7h9geny6l9yx0lwz3bnse\">支持 TypeScript 的编辑器利用这些相同的定义文件来显示有关库特性的类型信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brt4nfnoqhd2uc1o8i2niqfmf\">许多库在其 npm 包中包含定义文件，TypeScript 编译器和编辑器都可以在其中找到它们。Angular 就是这样的一个库。任何 Angular 应用程序的 \n<code>node_modules/@angular/core/</code> 文件夹都包含几个描述 Angular 部分的 \n<code>d.ts</code> 文件。</p>\n<p><strong data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13ej6twcx14g2srcfiyid5jn3\">对于包含 \n<code>d.ts</code> 文件的库包，你无需执行任何操作即可获取 \n<em>typings</em> 文件。Angular 包已经包含它们。</strong></p>\n<h3 id=\"libdts\">lib.d.ts</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6x9v68kk9ar9awx32hx1zee6h\">TypeScript 包含一个名为 \n<code>lib.d.ts</code> 的特殊声明文件。此文件包含存在于 JavaScript 运行时和 DOM 中的各种常见 JavaScript 结构的全局声明。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lv9kqnq8dkbenmv723d7m1ej\">根据 \n<code>--target</code>，TypeScript 会添加 \n<em>其他</em> 全局声明，例如，如果目标是 \n<code>es6</code>，则添加 \n<code>Promise</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg85ipc4fjxzo9gzgpseirbk2\">由于 QuickStart 的目标是 \n<code>es5</code>，因此你可以覆盖要包含的声明文件列表：</p>\n<code-example format=\".\">\n  \"lib\": [\"es2015\", \"dom\"]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee0k7ewxx7q9o955kjypsdloj\">因此，即使目标是 \n<code>es5</code>，你也可以获得所有 \n<code>es6</code> 类型。</p>\n<h3 id=\"installable-typings-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qq2dnur0jnwljkm10yc68nfp\"><i class=\"material-icons\">link</i>可安装的类型文件</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ax3bgz0vb7r50lqu8wj6nflrc\">许多库（包括 jQuery、Jasmine 和 Lodash）\n<em>不</em>在其 npm 包中包含 \n<code>d.ts</code> 文件。幸运的是，它们的作者或社区贡献者已经为这些库创建了单独的 \n<code>d.ts</code> 文件，并在众所周知的位置发布了它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cw8rabklndbzewt8m2v3i1bpd\">你可以使用 \n<a href=\"http://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\"><code>@types/*</code> 范围包</a> 通过 \n<code>npm</code> 安装这些类型，从 2.0 开始，Typescript 会自动识别它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7a6eaic0j9tixpbq4yv139340\">例如，要安装 \n<code>jasmine</code> 的类型，你可以执行 \n<code>npm install @types/jasmine --save-dev</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fbh8p8sclmo16kho48szk640\">QuickStart 识别出两个 \n<em>typings</em> 或 \n<code>d.ts</code> 文件：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1uz13f08qslcqya68mt98t0gw\"><a href=\"http://jasmine.github.io/\">Jasmine</a> 测试框架的类型定义。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cuor73r880wmbup1m9kpehe8\"><a href=\"https://www.npmjs.com/package/@types/node\">node</a> 用于引用 \n<em>nodejs</em> 环境中对象的代码； 你可以在 \n<a href=\"guide/webpack\">webpack</a> 页面中查看示例。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qi31u3xrgr1070d5ogdq9qu2\">快速入门不需要这些类型定义，但许多示例需要。</p>\n<a id=\"target\"></a>\n<h3 id=\"target\"><em>target</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70a3t8zbhyqc83vstjx50h7wn\">默认情况下，目标是 \n<code>es5</code>，如果你只想将应用程序部署到 es6 兼容的浏览器，你可以将目标配置为 \n<code>es6</code>。但如果你在某些旧浏览器（如 \n<code>IE</code>）中将目标配置为 \n<code>es6</code>，则会抛出 \n<code>Syntax Error</code> 错误。</p>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/upgrade\n - guide/webpack\n-->\n<!-- links from this doc:\n - guide/setup\n - guide/typescript-configuration#installable-typings-files\n - guide/typescript-configuration#libdts\n - guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\n - guide/typescript-configuration#target\n - guide/typescript-configuration#tsconfig\n - guide/typescript-configuration#tsconfigjson\n - guide/typescript-configuration#typescript-configuration\n - guide/typescript-configuration#typescript-typings\n - guide/typescript-configuration#typings\n - guide/webpack\n - http://jasmine.github.io/\n - http://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\n - http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n - https://www.npmjs.com/package/@types/node\n - https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\n-->"
}