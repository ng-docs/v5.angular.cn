{
  "id" : "guide/architecture-components",
  "title" : "组件简介",
  "contents" : "<div class=\"content\">\n<h1 id=\"introduction-to-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drltfs89cl4xwbzo17vaetgk7\"><i class=\"material-icons\">link</i>组件简介</h1>\n<img src=\"generated/images/guide/architecture/hero-component.png\" alt=\"Component\" class=\"left\" width=\"200\" height=\"115\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lj9e5jk31hno3af5ds63dtrf\"><em>组件</em>控制称为\n<em>视图</em>的屏幕的一部分。例如，各个组件定义和控制来自 \n<a href=\"tutorial/index\">教程</a> 的以下每个视图：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67ukr25ln3bbtvh7moouwjn47\">带有导航链接的应用程序根目录。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39qrx6azx55pqdovtk1xaod7m\">英雄列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17nguoib8wmm9m3z18hx4mzhf\">英雄编辑器。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6f6vknabdu42jea4gs89pee7\">你在一个类中定义组件的应用程序逻辑——它为支持视图所做的工作。该类通过属性和方法的 API 与视图交互。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fejddocmtbvlacqa9f4pi3tl\">例如，\n<code>HeroListComponent</code> 具有一个 \n<code>heroes</code> 属性，该属性返回一个英雄数组，它从服务中获取这些英雄。\n<code>HeroListComponent</code> 还具有一个 \n<code>selectHero()</code> 方法，当用户点击从该列表中选择英雄时，该方法会设置一个 \n<code>selectedHero</code> 属性。</p>\n<code-example path=\"architecture/src/app/hero-list.component.ts\" linenums=\"false\" title=\"src/app/hero-list.component.ts (class)\" region=\"class\">\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n  selectedHero: Hero;\n\n  constructor(private service: HeroService) { }\n\n  ngOnInit() {\n    this.heroes = this.service.getHeroes();\n  }\n\n  selectHero(hero: Hero) { this.selectedHero = hero; }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"545c9mgs6fxny6ge6w4u2zi3g\">当用户在应用程序中移动时，Angular 会创建、更新和销毁组件。你的应用程序可以通过可选的 \n<a href=\"guide/lifecycle-hooks\">生命周期钩子</a>（如 \n<code>ngOnInit()</code>）在生命周期的每个时刻采取行动。</p>\n<hr>\n<h2 id=\"component-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1owbxmdfgsar7noccjg983nhy\"><i class=\"material-icons\">link</i>组件元数据</h2>\n<img src=\"generated/images/guide/architecture/metadata.png\" alt=\"Metadata\" class=\"left\" width=\"170\" height=\"48\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"diwfkbtbolgeea5znfi31zrn7\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器将紧随其后的类标识为组件类，并指定其元数据。在下面的示例代码中，你可以看到 \n<code>HeroListComponent</code> 只是一个类，没有任何特殊的 Angular 符号或语法。它不是组件，直到你使用 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器将其标记为组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evhd0n9uwtatw48bpck7fwt4i\">组件的元数据告诉 Angular 从哪里获取创建和呈现组件及其视图所需的主要构建块。特别是，它将\n<em>模板</em>与组件关联起来，要么直接使用内联代码，要么通过引用。组件及其模板共同描述了一个\n<em>视图</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yxb2ox0dia2fb30goeysc807\">除了包含或指向模板之外，\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据还配置了例如组件如何在 HTML 中被引用以及它需要哪些服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45qcqu2fkrsmz9ikybdxryfdo\">以下是如何为 \n<code>HeroListComponent</code> 设置基本元数据的示例：</p>\n<code-example path=\"architecture/src/app/hero-list.component.ts\" linenums=\"false\" title=\"src/app/hero-list.component.ts (metadata)\" region=\"metadata\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector:    'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  providers:  [ HeroService ]\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n/* . . . */\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o3pfum6yeccv6ormyngky66m\">此示例展示了一些最常用的 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 配置选项：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alk00z58eluv8zj22r17j3i6j\"><code>selector</code>：一个 CSS 选择器，它告诉 Angular 在模板 HTML 中找到相应标签的任何地方创建并插入此组件的实例。例如，如果应用程序的 HTML 包含 \n<code>&lt;app-hero-list&gt;&lt;/app-hero-list&gt;</code>，则 Angular 会在这些标签之间插入 \n<code>HeroListComponent</code> 视图的实例。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38er1l9rytt9vu59vcrumlz7d\"><code>templateUrl</code>：此组件的 HTML 模板的模块相对地址。或者，你可以提供内联的 HTML 模板，作为 \n<code>template</code> 属性的值。此模板定义了组件的\n<em>宿主视图</em>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dxt8knbtidhade1g31vpst1v\"><code>providers</code>：组件所需服务的\n<strong>依赖注入提供者</strong>数组。在本例中，这告诉 Angular 组件的构造函数需要一个 \n<code>HeroService</code> 实例 才能获取要显示的英雄列表。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"templates-and-views\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v5skfae5hw7r9icom2gw4tek\"><i class=\"material-icons\">link</i>模板和视图</h2>\n<img src=\"generated/images/guide/architecture/template.png\" alt=\"Template\" class=\"left\" width=\"200\" height=\"114\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3linz8fdz95ebenkppi5rn1po\">你使用其配套模板来定义组件的视图。模板是一种 HTML 表单，它告诉 Angular 如何渲染组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8idaoyrsctn6mm4a4xijfin6\">视图通常以层次结构排列，允许你修改或显示和隐藏整个 UI 部分或页面作为一个单元。与组件直接关联的模板定义了该组件的\n<em>宿主视图</em>。该组件还可以定义一个\n<em>视图层次结构</em>，其中包含由其他组件托管的\n<em>嵌入视图</em>。</p>\n<figure>\n<img src=\"generated/images/guide/architecture/component-tree.png\" alt=\"Component tree\" class=\"left\" width=\"300\" height=\"231\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sp11kkk5y1wj3plmqwdmem3\">视图层次结构可以包含来自同一 NgModule 中组件的视图，但它也可以（而且通常确实）包含来自不同 NgModule 中定义的组件的视图。</p>\n<h2 id=\"template-syntax\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"5w5kqvgmi0o4l4z6rjt7db87s\"><i class=\"material-icons\">link</i>模板语法</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50zpdec1iac4rc2ta0zuxli36\">模板看起来像普通的 HTML，除了它还包含 Angular \n<a href=\"guide/template-syntax\">模板语法</a>，它根据你的应用程序的逻辑以及应用程序和 DOM 数据的状态来更改 HTML。你的模板可以使用\n<em>数据绑定</em>来协调应用程序和 DOM 数据，使用\n<em>管道</em>在数据显示之前对其进行转换，以及使用\n<em>指令</em>将应用程序逻辑应用于要显示的内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1jqnnzp8srvxxrgnmhie7avb\">例如，以下是教程中 \n<code>HeroListComponent</code> 的模板：</p>\n<code-example path=\"architecture/src/app/hero-list.component.html\" title=\"src/app/hero-list.component.html\">\n&lt;h2&gt;Hero List&lt;/h2&gt;\n\n&lt;p&gt;&lt;i&gt;Pick <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> hero from the list&lt;/i&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" (click)=\"selectHero(hero)\"&gt;\n    {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\" [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m7u76i2jmm1f2d99i4cifv2s\">此模板使用典型的 HTML 元素，例如 \n<code>&lt;h2&gt;</code> 和 \n<code>&lt;p&gt;</code>，还包括 Angular 模板语法元素，\n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>、\n<code>{{hero.name}}</code>、\n<code>(click)</code>、\n<code>[hero]</code> 和 \n<code>&lt;app-hero-detail&gt;</code>。模板语法元素告诉 Angular 如何使用程序逻辑和数据将 HTML 渲染到屏幕上。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cq6hy54bf559gsz9l5cenus3m\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令告诉 Angular 迭代列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eui9qtsow7c3fbdhuexwdvo6\"><code>{{hero.name}}</code>、\n<code>(click)</code> 和 \n<code>[hero]</code> 将程序数据绑定到 DOM，并从 DOM 中获取数据，响应用户输入。有关更多信息，请参阅下面的 \n<a href=\"guide/architecture-components#data-binding\">数据绑定</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wko4g2j9zmirqpo9oh39pc6s\">示例中的 \n<code>&lt;app-hero-detail&gt;</code> 标签是一个表示新组件 \n<code>HeroDetailComponent</code> 的元素。\n<code>HeroDetailComponent</code>（代码未显示）是 \n<code>HeroListComponent</code> 的子组件，它定义了英雄详情视图。请注意，此类自定义组件如何与相同布局中的原生 HTML 无缝混合。</li>\n</ul>\n<h3 id=\"data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dep77znovb7x0wl9uhcyc1rph\"><i class=\"material-icons\">link</i>数据绑定</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emw2ykzjsb6pwsymautqg8lf2\">如果没有框架，你将负责将数据值推送到 HTML 控件中，并将用户响应转换为操作和值更新。手动编写此类推拉逻辑既繁琐又容易出错，而且难以阅读，任何有经验的 jQuery 程序员都可以证明这一点。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5szwkh8bz211521t5ym0y0qso\">Angular 支持\n<em>双向数据绑定</em>，这是一种协调模板部分与组件部分的机制。将绑定标记添加到模板 HTML 中，以告诉 Angular 如何连接两侧。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er4hgxx89psm7y63cyt3r6top\">下图显示了四种形式的数据绑定标记。每种形式都有一个方向——到 DOM、从 DOM 或双向。</p>\n<figure>\n<img src=\"generated/images/guide/architecture/databinding.png\" alt=\"Data Binding\" class=\"left\" width=\"220\" height=\"205\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"borewcbntsd3azlxy5hijfl4w\">以下来自 \n<code>HeroListComponent</code> 模板的示例使用了其中三种形式：</p>\n<code-example path=\"architecture/src/app/hero-list.component.1.html\" linenums=\"false\" title=\"src/app/hero-list.component.html (binding)\" region=\"binding\">\n&lt;li&gt;{{hero.name}}&lt;/li&gt;\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n&lt;li (click)=\"selectHero(hero)\"&gt;&lt;/li&gt;\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bpha2lp2k68gijumvftk4zyx\"><code>{{hero.name}}</code> \n<a href=\"guide/displaying-data#interpolation\"><em>插值</em></a> 在 \n<code>&lt;li&gt;</code> 元素中显示组件的 \n<code>hero.name</code> 属性值。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ewqs7i0a3r9os31y3q3i47ya\"><code>[hero]</code> \n<a href=\"guide/template-syntax#property-binding\"><em>属性绑定</em></a> 将 \n<code>selectedHero</code> 的值从 父 \n<code>HeroListComponent</code> 传递到子 \n<code>HeroDetailComponent</code> 的 \n<code>hero</code> 属性。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5l7ko2eq4ad5c5yh5i0fk0btn\"><code>(click)</code> \n<a href=\"guide/user-input#binding-to-user-input-events\"><em>事件绑定</em></a> 在用户点击英雄姓名时调用组件的 \n<code>selectHero</code> 方法。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3084eu3pu2w71xiqb7mbry8g8\"><strong>双向数据绑定</strong> 是一种重要的第四种形式，它将属性绑定和事件绑定组合在一个表示法中。以下来自 \n<code>HeroDetailComponent</code> 模板的示例使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令进行双向数据绑定：</p>\n<code-example path=\"architecture/src/app/hero-detail.component.html\" linenums=\"false\" title=\"src/app/hero-detail.component.html (ngModel)\" region=\"ngModel\">\n&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91a0hed2tc1v0m01zoa9cn6ct\">在双向绑定中，数据属性值从组件流向输入框，就像属性绑定一样。 用户的更改也会流回组件，将属性重置为最新值， 就像事件绑定一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kxcnu7c09d1rhrs00az847yi\">Angular 在每个 JavaScript 事件循环中处理\n<em>所有</em>数据绑定， 从应用程序组件树的根部到所有子组件。</p>\n<figure>\n  <img src=\"generated/images/guide/architecture/component-databinding.png\" alt=\"Data Binding\" class=\"left\" width=\"358\" height=\"219\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6s0jo2mf3xtbgvanb6g083x2\">数据绑定在模板与其组件之间的通信中起着重要作用，对于父组件和子组件之间的通信也很重要。</p>\n<figure>\n  <img src=\"generated/images/guide/architecture/parent-child-binding.png\" alt=\"Parent/Child binding\" class=\"left\" width=\"358\" height=\"171\">\n</figure>\n<h3 id=\"pipes\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4c1vv1rgp7phpgpk7rg59bjk0\"><i class=\"material-icons\">link</i>管道</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zc821jnrp32yqbxvi943c4qy\">Angular 管道允许你在模板 HTML 中声明显示值转换。带有 \n<code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code> 装饰器的类定义一个函数，该函数将输入值转换为输出值，以便在视图中显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nx52w57re8yd2qyk15t1a4o9\">Angular 定义了各种管道，例如 \n<a href=\"https://angular.io/api/common/DatePipe\">日期</a> 管道和 \n<a href=\"https://angular.io/api/common/CurrencyPipe\">货币</a> 管道；有关完整列表，请参阅 \n<a href=\"https://angular.io/api?type=pipe\">管道 API 列表</a>。你也可以定义新的管道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rlrhtpm4qh4ax49sgwiumivl\">要在 HTML 模板中指定值转换，请使用 \n<a href=\"https://angular.io/guide/template-syntax#pipe\">管道运算符 (|)</a>：</p>\n<p> <code>{{interpolated_value | pipe_name}}</code></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfqczxq51kqk7ax3vnmr9evl1\">你可以链接管道，将一个管道函数的输出发送到另一个管道函数进行转换。管道还可以接受控制其转换方式的参数。例如，你可以将所需的格式传递给 \n<code>date</code> 管道：</p>\n<code-example>\n &lt;!-- Default format: output 'Jun 15, 2015'--&gt;\n &lt;p&gt;Today is {{today | date}}&lt;/p&gt;\n\n&lt;!-- fullDate format: output 'Monday, June 15, 2015'--&gt;\n&lt;p&gt;The date is {{today | date:'fullDate'}}&lt;/p&gt;\n\n &lt;!-- shortTime format: output '9:43 AM'--&gt;\n &lt;p&gt;The time is {{today | date:'shortTime'}}&lt;/p&gt;\n</code-example>\n<hr>\n<h3 id=\"directives\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\"><i class=\"material-icons\">link</i>指令</h3>\n<img src=\"generated/images/guide/architecture/directive.png\" alt=\"Directives\" class=\"left\" width=\"150\" height=\"147\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"af25hwmyqtyhsszcj11yl73v5\">Angular 模板是\n<em>动态的</em>。当 Angular 渲染它们时，它会根据\n<em>指令</em>给出的指令转换 DOM。指令是一个带有 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8z6mtwi2f7yu2cb61oj6ciat7\">组件在技术上是一种指令——但组件在 Angular 应用程序中非常独特且核心，因此 Angular 定义了 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器，它扩展了 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 装饰器，并添加了面向模板的特性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clcsnsxj0x7ox2o7uix0htgw1\">除了组件之外，还有两种类型的指令：\n<em>结构型</em>指令和\n<em>属性型</em>指令。与组件一样，指令的元数据将类与一个 \n<code>selector</code> 相关联，你可以使用它将指令插入 HTML 中。在模板中，指令通常作为属性出现在元素标签中，无论是通过名称还是作为赋值或绑定的目标。</p>\n<h4 id=\"structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"59lj2adjv35bjs3nghyd6twal\"><i class=\"material-icons\">link</i>结构型指令</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jbxj6htnm54tbb34we875bik\">结构型指令通过在 DOM 中添加、删除和替换元素来改变布局。示例模板使用两个内置结构型指令将应用程序逻辑添加到视图的渲染方式：</p>\n<code-example path=\"architecture/src/app/hero-list.component.1.html\" linenums=\"false\" title=\"src/app/hero-list.component.html (structural)\" region=\"structural\">\n&lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;&lt;/li&gt;\n&lt;app-hero-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97e3cbr92ke3xqggwaf6jxwnp\"><a href=\"guide/displaying-data#ngFor\"><code>*ngFor</code></a> 是一个迭代器；它告诉 Angular 为 \n<code>heroes</code> 列表中的每个英雄生成一个 \n<code>&lt;li&gt;</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clk2j2tla73o01qk0s93a8ej6\"><a href=\"guide/displaying-data#ngIf\"><code>*ngIf</code></a> 是一个条件；它仅在存在选定英雄时才包含 \n<code>HeroDetail</code> 组件。</li>\n</ul>\n<h4 id=\"attribute-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdzt47k44s3ld0g2lsx3frsix\"><i class=\"material-icons\">link</i>属性型指令</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctepvm4ha9q0kogwu531ce78g\">属性型指令改变现有元素的外观或行为。 在模板中，它们看起来像普通的 HTML 属性，因此得名。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnszrt1th8s0xbbgwiw05kunk\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令实现了双向数据绑定，它是一个属性型指令的示例。\n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 通过设置现有元素（通常是 \n<code>&lt;input&gt;</code>）的显示值属性并响应更改事件来修改其行为。</p>\n<code-example path=\"architecture/src/app/hero-detail.component.html\" linenums=\"false\" title=\"src/app/hero-detail.component.html (ngModel)\" region=\"ngModel\">\n&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fprqrs7g2kpgrpdry8zhbfry\">Angular 还有更多预定义的指令，它们要么改变布局结构 （例如，\n<a href=\"guide/template-syntax#ngSwitch\">ngSwitch</a>） 要么修改 DOM 元素和组件的各个方面 （例如，\n<a href=\"guide/template-syntax#ngStyle\">ngStyle</a> 和 \n<a href=\"guide/template-syntax#ngClass\">ngClass</a>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wvh2cmhlmywa5ad3amq5zy5h\">你也可以编写自己的指令。像 \n<code>HeroListComponent</code> 这样的组件是一种自定义指令。你也可以创建自定义结构型指令和属性型指令。</p>\n<!-- PENDING: link to where to learn more about other kinds! -->\n\n</div>\n<!-- links to this doc:\n - guide/architecture\n - guide/architecture-modules\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/Directive\n - api/core/OnInit\n - api/core/Pipe\n - api/forms/NgModel\n - api/router/RouterLinkWithHref\n - guide/architecture-components#attribute-directives\n - guide/architecture-components#component-metadata\n - guide/architecture-components#data-binding\n - guide/architecture-components#directives\n - guide/architecture-components#introduction-to-components\n - guide/architecture-components#pipes\n - guide/architecture-components#structural-directives\n - guide/architecture-components#template-syntax\n - guide/architecture-components#templates-and-views\n - guide/displaying-data#interpolation\n - guide/displaying-data#ngFor\n - guide/displaying-data#ngIf\n - guide/lifecycle-hooks\n - guide/template-syntax\n - guide/template-syntax#ngClass\n - guide/template-syntax#ngStyle\n - guide/template-syntax#ngSwitch\n - guide/template-syntax#property-binding\n - guide/user-input#binding-to-user-input-events\n - tutorial/index\n - https://angular.io/api/common/CurrencyPipe\n - https://angular.io/api/common/DatePipe\n - https://angular.io/api?type=pipe\n - https://angular.io/guide/template-syntax#pipe\n-->"
}