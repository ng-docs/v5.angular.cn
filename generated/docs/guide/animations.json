{
  "id" : "guide/animations",
  "title" : "动画",
  "contents" : "<div class=\"content\">\n<h1 id=\"animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"918qr7iz61wsi82g2kwh1t9k\"><i class=\"material-icons\">link</i>动画</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53ed8ozkv7iz0y1nn04yoxpj7\">运动是现代 Web 应用程序设计中的一个重要方面。良好的 用户界面在状态之间平滑过渡，并使用引人入胜的动画 来吸引人们的注意力。精心设计的动画不仅可以使 UI 更有趣，还可以使其更易于使用。</p>\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"w7lh5mh6z6yyt71cpd0xebbp\">Angular 的动画系统使你能够构建与纯 CSS 动画 具有相同原生性能的动画。你还可以将动画逻辑与 应用程序代码的其余部分紧密集成，以便于控制。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5tl7cyb90i9oo0zbeeu4gna2\">Angular 动画构建在标准 \n<a href=\"https://w3c.github.io/web-animations/\">Web 动画 API</a> 之上，并在 \n<a href=\"http://caniuse.com/#feat=web-animation\">支持它的浏览器</a> 上原生运行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8hrkgahz0k83vz3o802y3r7d3\">对于其他浏览器，需要使用腻子脚本。从 \n<code>polyfills.ts</code> 文件中取消对 \n<code>web-animations-js</code> 腻子脚本的注释。</p>\n</div>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20x0uuau3d0mjijcw8ovytwez\">此页面中的示例可作为 \n<live-example></live-example> 使用。</p>\n</div>\n<h2 id=\"setup\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a90a9lk5ukrzn7bkuyktmp1zv\"><i class=\"material-icons\">link</i>设置</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7dullxawkz9m53aoaqbn9ioy\">在将动画添加到应用程序之前，你需要 将一些特定于动画的模块和函数导入到根应用程序模块中。</p>\n<code-example path=\"animations/src/app/app.module.ts\" region=\"animations-module\" title=\"app.module.ts (animation module import excerpt)\" linenums=\"false\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> ],\n  // ... more stuff ...\n})\nexport class AppModule { }\n\n</code-example>\n<h4 id=\"example-basics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jet7uni6qb70msenh8yksm63\"><i class=\"material-icons\">link</i>示例基础</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18fut80ndzb4mje22pwatufg7\">本指南中的动画示例对英雄列表进行动画处理。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yjdyy6s62y3ib0ibnr56s0je\"><code>Hero</code> 类具有一个 \n<code>name</code> 属性，一个 \n<code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> 属性，该属性指示英雄是否处于活动状态， 以及一个 \n<code>toggleState()</code> 方法，用于在状态之间切换。</p>\n<code-example path=\"animations/src/app/hero.service.ts\" region=\"hero\" title=\"hero.service.ts (Hero class)\" linenums=\"false\">\nexport class Hero {\n  constructor(public name: string, public <a href=\"api/animations/state\" class=\"code-anchor\">state</a> = 'inactive') { }\n\n  toggleState() {\n    this.state = this.state === 'active' ? 'inactive' : 'active';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5slewnhf1jj1hr3nfn23irs6x\">在屏幕顶部（\n<code>app.hero-team-builder.component.ts</code>） 是一系列按钮，这些按钮通过（\n<code>HeroService</code>）将英雄添加到列表中或从列表中删除英雄。 这些按钮会触发对列表的更改，所有示例组件都会同时看到这些更改。</p>\n<a id=\"example-transitioning-between-states\"></a>\n<h2 id=\"transitioning-between-two-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfo191bqnuwyior4parkrg7bt\"><i class=\"material-icons\">link</i>在两个状态之间过渡</h2>\n<img src=\"generated/images/guide/animations/animation_basic_click.gif\" alt=\"A simple transition animation\" class=\"right\" width=\"253\" height=\"129\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76kje59i56eppj29uyl6lh9tm\">你可以构建一个简单的动画，该动画在由模型属性驱动的两个状态之间过渡元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vxah55lcao7smecwam31yydk\">动画可以在 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据中定义。</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" region=\"imports\" title=\"hero-list-basic.component.ts\" linenums=\"false\">\nimport {\n  <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>,\n  <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>\n} from '@angular/core';\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>,\n  <a href=\"api/animations/state\" class=\"code-anchor\">state</a>,\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>,\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>\n} from '@angular/animations';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9s2ojfm5c0vuapce9wvytrs8b\">使用这些，你可以在组件 元数据中定义一个名为 \n<code>heroState</code> 的\n<em>动画触发器</em>。它使用动画在两个状态之间过渡：\n<code>active</code> 和 \n<code>inactive</code>。当 英雄处于活动状态时，元素以稍微更大的尺寸和更浅的颜色显示。</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" region=\"animationdef\" title=\"hero-list-basic.component.ts (@Component excerpt)\" linenums=\"false\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('heroState', [\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('inactive', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      backgroundColor: '#eee',\n      transform: 'scale(1)'\n    })),\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('active',   <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      backgroundColor: '#cfd8dc',\n      transform: 'scale(1.1)'\n    })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('inactive =&gt; active', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-in')),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('active =&gt; inactive', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-out'))\n  ])\n]\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ao41irro47hnslbc8g3hs893d\">在此示例中，你正在动画元数据中内联定义动画样式（颜色和变换）。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co7t1t0wq4z3lpqrzhlfi3sbx\">现在，使用 \n<code>[@triggerName]</code> 语法，将刚刚定义的动画附加到 组件模板中的一个或多个元素。</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" region=\"template\" title=\"hero-list-basic.component.ts (excerpt)\" linenums=\"false\">\ntemplate: `\n  &lt;ul&gt;\n    &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n        [@heroState]=\"hero.state\"\n        (click)=\"hero.toggleState()\"&gt;\n      {{hero.name}}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n`,\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6uccxzkw9hnfpeqfrigz9ict\">在此，动画触发器适用于 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 重复的每个元素。每个 重复的元素都会独立地进行动画处理。该属性的值绑定到表达式 \n<code>hero.state</code>，并且始终为 \n<code>active</code> 或 \n<code>inactive</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9i35x7fwbdwi8kd73m6cr46ip\">通过这种设置，每当英雄对象更改状态时，都会出现动画过渡。 以下是完整的组件实现：</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" title=\"hero-list-basic.component.ts\">\nimport {\n  <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>,\n  <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>\n} from '@angular/core';\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>,\n  <a href=\"api/animations/state\" class=\"code-anchor\">state</a>,\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>,\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>\n} from '@angular/animations';\n\nimport { Hero } from './hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-list-basic',\n  template: `\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n          [@heroState]=\"hero.state\"\n          (click)=\"hero.toggleState()\"&gt;\n        {{hero.name}}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  styleUrls: ['./hero-list.component.css'],\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('heroState', [\n      <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('inactive', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        backgroundColor: '#eee',\n        transform: 'scale(1)'\n      })),\n      <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('active',   <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        backgroundColor: '#cfd8dc',\n        transform: 'scale(1.1)'\n      })),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('inactive =&gt; active', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-in')),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('active =&gt; inactive', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-out'))\n    ])\n  ]\n})\nexport class HeroListBasicComponent {\n   @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() heroes: Hero[];\n}\n\n\n</code-example>\n<h2 id=\"states-and-transitions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fc7of1xgjir1gr7704gs9fgf\"><i class=\"material-icons\">link</i>状态和过渡</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kbkgdpherzh884cjce59uexk\">Angular 动画定义为逻辑\n<strong>状态</strong>和状态之间的\n<strong>过渡</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3d8u3aolse6064lu82m5d4bis\">动画状态是在应用程序代码中定义的字符串值。在上面的示例中，状态 \n<code>'active'</code> 和 \n<code>'inactive'</code> 基于 英雄对象的逻辑状态。状态的来源可以是简单的对象属性（如本例所示）， 也可以是方法中计算的值。重要的是，你可以将其读入 组件的模板中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jdg0mk50q07sg7vdbp8ufyty\">你可以为每个动画状态定义\n<em>样式</em>：</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" region=\"states\" title=\"src/app/hero-list-basic.component.ts\" linenums=\"false\">\n<a href=\"api/animations/state\" class=\"code-anchor\">state</a>('inactive', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n  backgroundColor: '#eee',\n  transform: 'scale(1)'\n})),\n<a href=\"api/animations/state\" class=\"code-anchor\">state</a>('active',   <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n  backgroundColor: '#cfd8dc',\n  transform: 'scale(1.1)'\n})),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2km71rww1gvspg6z83nncovww\">这些 \n<code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> 定义指定了每个状态的\n<em>结束样式</em>。 它们在元素过渡到该状态后应用于该元素，并且\n<em>只要它保持在该状态</em>，就会一直存在。实际上，你正在定义元素在不同状态下的样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b22v6meuxyiw0mh4kr417g4jy\">定义状态后，你可以定义状态之间的\n<em>过渡</em>。每个过渡 控制从一组样式切换到下一组样式的时间安排：</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" region=\"transitions\" title=\"src/app/hero-list-basic.component.ts\" linenums=\"false\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('inactive =&gt; active', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-in')),\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('active =&gt; inactive', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-out'))\n\n</code-example>\n<figure>\n  <img src=\"generated/images/guide/animations/ng_animate_transitions_inactive_active.png\" alt=\"In Angular animations you define states and transitions between states\" width=\"400\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6b9cddbnjtnm7lauin5arn0wp\">如果多个过渡具有相同的时间配置，则可以将它们组合 到同一个 \n<code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a></code> 定义中：</p>\n<code-example path=\"animations/src/app/hero-list-combined-transitions.component.ts\" region=\"transitions\" title=\"src/app/hero-list-combined-transitions.component.ts\" linenums=\"false\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('inactive =&gt; active, active =&gt; inactive',\n <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-out'))\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vv3bkaosrgf9tkklw4llppf5\">当过渡的两个方向具有相同的时间安排时（如前面的 示例所示），可以使用简写语法 \n<code>&lt;=&gt;</code>：</p>\n<code-example path=\"animations/src/app/hero-list-twoway.component.ts\" region=\"transitions\" title=\"src/app/hero-list-twoway.component.ts\" linenums=\"false\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('inactive &lt;=&gt; active', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-out'))\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yri5idse0hyzg39va5dggr52\">你也可以在动画期间应用样式，但不要在动画结束后保留它。你可以在 \n<code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a></code> 中内联定义此类样式。在此示例中， 元素会立即接收一组样式，然后动画过渡到下一组样式。 当过渡完成后，不会保留任何这些样式，因为它们没有 在 \n<code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> 中定义。</p>\n<code-example path=\"animations/src/app/hero-list-inline-styles.component.ts\" region=\"transitions\" title=\"src/app/hero-list-inline-styles.component.ts\" linenums=\"false\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('inactive =&gt; active', [\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n    backgroundColor: '#cfd8dc',\n    transform: 'scale(1.3)'\n  }),\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('80ms ease-in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n    backgroundColor: '#eee',\n    transform: 'scale(1)'\n  }))\n]),\n\n</code-example>\n<h3 id=\"the-wildcard-state-\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17tbgddg7n7qydl64d2fxyfw\"><i class=\"material-icons\">link</i>通配符状态 \n<code>*</code></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ypl0r6zzwej7fy5hdefezzub\"><code>*</code>（通配符）状态匹配\n<em>任何</em>动画状态。这对于定义无论动画处于哪个状态都适用的样式和过渡非常有用。例如：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avd20hjup6vxd0bx16cetwzj1\"><code>active =&gt; *</code> 过渡在元素状态从 \n<code>active</code> 更改为其他任何状态时应用。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o63ntxqbby1vg5k1xlfmj3ru\"><code>* =&gt; *</code> 过渡在\n<em>任何</em>两个状态之间的更改发生时应用。</li>\n</ul>\n<figure>\n  <img src=\"generated/images/guide/animations/ng_animate_transitions_inactive_active_wildcards.png\" alt=\"The wildcard state can be used to match many different transitions at once\" width=\"400\">\n</figure>\n<h3 id=\"the-void-state\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yx126kfjzdgy0idwg2tm2l7x\"><i class=\"material-icons\">link</i><code>void</code> 状态</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91224r8w04aofdzwr27c92yuj\">名为 \n<code>void</code> 的特殊状态可以应用于任何动画。它在元素\n<em>未</em>附加到视图时应用，可能是因为它尚未添加或因为它已被删除。\n<code>void</code> 状态对于定义进入和离开动画很有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gez46zuo5aimpqli67gksfjm\">例如，\n<code>* =&gt; void</code> 过渡在元素离开视图时应用，无论它在离开之前处于什么状态。</p>\n<figure>\n  <img src=\"generated/images/guide/animations/ng_animate_transitions_void_in.png\" alt=\"The void state can be used for enter and leave transitions\" width=\"400\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22af33utqlfgi5gfuyl3dywjv\">通配符状态 \n<code>*</code> 也匹配 \n<code>void</code>。</p>\n<h2 id=\"example-entering-and-leaving\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec1obnfq4fftxiij45litdlij\"><i class=\"material-icons\">link</i>示例：进入和离开</h2>\n<img src=\"generated/images/guide/animations/animation_enter_leave.gif\" alt=\"Enter and leave animations\" class=\"right\" width=\"250\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rlzpq0zf1lpxr0i71lp519o8\">使用 \n<code>void</code> 和 \n<code>*</code> 状态，你可以定义动画元素进入和离开的过渡：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akcvku4d670y2jy9wwhgrhj55\">进入：\n<code>void =&gt; *</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"507yziw2d5zhjtpfftvot1rtr\">离开：\n<code>* =&gt; void</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctmm9bfkilba7dkvkugb8gnau\">例如，在下面的 \n<code>animations</code> 数组中，有两个过渡使用 \n<code>void =&gt; *</code> 和 \n<code>* =&gt; void</code> 语法来动画元素进出视图。</p>\n<code-example path=\"animations/src/app/hero-list-enter-leave.component.ts\" region=\"animationdef\" title=\"hero-list-enter-leave.component.ts (excerpt)\" linenums=\"false\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('flyInOut', [\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateX(0)'})),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('void =&gt; *', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateX(-100%)'}),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(100)\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(100, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateX(100%)'}))\n    ])\n  ])\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71u8aidmzwe5ir94c3lrtsy2\">请注意，在这种情况下，样式直接在过渡定义中应用于 void 状态，而不是在单独的 \n<code><a href=\"api/animations/state\" class=\"code-anchor\">state</a>(void)</code> 定义中。因此，进入和离开时的变换不同：元素从左侧进入，从右侧离开。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cppuhitdnmna9lh8id9jjckgc\">这两个常见的动画有自己的别名：</p>\n<code-example language=\"typescript\">\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter', [ ... ]); // void =&gt; *\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':leave', [ ... ]); // * =&gt; void\n</code-example>\n</div>\n<h2 id=\"example-entering-and-leaving-from-different-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7maubothtczouijjcz3op0727\"><i class=\"material-icons\">link</i>示例：从不同状态进入和离开</h2>\n<img src=\"generated/images/guide/animations/animation_enter_leave_states.gif\" alt=\"Enter and leave animations combined with state animations\" class=\"right\" width=\"200\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bafuw1soiriy2k3nfaq3golmp\">你还可以通过使用英雄状态作为动画状态，将此动画与之前的状态过渡动画结合起来。这使你能够根据英雄状态配置不同的进入和离开过渡：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwbhn0ldjvbmuwh7lw8ur6mil\">非活动英雄进入：\n<code>void =&gt; inactive</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1iwy9imxzjapiv2wpq63at7nl\">活动英雄进入：\n<code>void =&gt; active</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdspm24rkjffr0ekqex7o7pot\">非活动英雄离开：\n<code>inactive =&gt; void</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90naxoq6gksigy8dobggs6g6c\">活动英雄离开：\n<code>active =&gt; void</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ieq07rbemgww571urni9213o\">这使你能够对每个过渡进行细粒度控制：</p>\n<figure>\n  <img src=\"generated/images/guide/animations/ng_animate_transitions_inactive_active_void.png\" alt=\"This example transitions between active, inactive, and void states\" width=\"400\">\n</figure>\n<code-example path=\"animations/src/app/hero-list-enter-leave-states.component.ts\" region=\"animationdef\" title=\"hero-list-enter-leave.component.ts (excerpt)\" linenums=\"false\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('heroState', [\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('inactive', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateX(0) scale(1)'})),\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('active',   <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateX(0) scale(1.1)'})),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('inactive =&gt; active', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-in')),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('active =&gt; inactive', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms ease-out')),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('void =&gt; inactive', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateX(-100%) scale(1)'}),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(100)\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('inactive =&gt; void', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(100, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateX(100%) scale(1)'}))\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('void =&gt; active', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateX(0) scale(0)'}),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(200)\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('active =&gt; void', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(200, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateX(0) scale(0)'}))\n    ])\n  ])\n]\n\n</code-example>\n<h2 id=\"animatable-properties-and-units\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nb97xhda2075r49dyi7er1pj\"><i class=\"material-icons\">link</i>可动画属性和单位</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ls4cxsgwcnpa0ujzicxb5spp\">由于 Angular 的动画支持建立在 Web 动画之上，因此你可以动画化浏览器认为\n<em>可动画</em>的任何属性。这包括位置、大小、变换、颜色、边框等等。W3C 在其 \n<a href=\"https://www.w3.org/TR/css3-transitions\">CSS Transitions 页面</a> 上维护着 \n<a href=\"https://www.w3.org/TR/css3-transitions/#animatable-properties\">可动画属性列表</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"577tow0tuyde71jnk7oad4gq9\">对于具有数值的定位属性，你可以通过提供带有适当后缀的字符串形式的值来定义单位：</p>\n<ul>\n<li><code>'50px'</code></li>\n<li><code>'3em'</code></li>\n<li><code>'100%'</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xyht0yfk4xmdwbb8do7aoo6m\">如果你在指定尺寸时没有提供单位，Angular 假设默认值为 \n<code>px</code>：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7wediuuzsx3x2jaf29zfx7i7\"><code>50</code> 等同于 \n<code>'50px'</code></li>\n</ul>\n<h2 id=\"automatic-property-calculation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3jb0n1xeju3623bwhzxm00e9\"><i class=\"material-icons\">link</i>自动属性计算</h2>\n<img src=\"generated/images/guide/animations/animation_auto.gif\" alt=\"Animation with automated height calculation\" class=\"right\" width=\"220\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6uootnc0m01rnjh3c32p95zmx\">有时，你直到运行时才知道尺寸样式属性的值。例如，元素的宽度和高度通常取决于其内容和屏幕大小。这些属性通常难以用 CSS 动画化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4widmpo4nyomfrjxdrba7cz7j\">在这些情况下，你可以使用特殊的 \n<code>*</code> 属性值，以便在运行时计算属性的值，然后将其插入动画中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xt5ilj7ebngki8fi311mabs6\">在此示例中，离开动画将获取元素在离开之前具有的高度，并从该高度动画到零：</p>\n<code-example path=\"animations/src/app/hero-list-auto.component.ts\" region=\"animationdef\" title=\"src/app/hero-list-auto.component.ts\" linenums=\"false\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('shrinkOut', [\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({height: '*'})),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({height: '*'}),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(250, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({height: 0}))\n    ])\n  ])\n]\n\n</code-example>\n<h2 id=\"animation-timing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wjwb596dbs91rm8dd8x63x08\"><i class=\"material-icons\">link</i>动画时序</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cp47xnh2regojspa0ojppal55\">你可以为每个动画过渡调整三个时序属性：持续时间、延迟和缓动函数。它们都组合成一个单独的过渡\n<em>时序字符串</em>。</p>\n<h3 id=\"duration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9s8ip40ask0w9agjtbo2ft36\"><i class=\"material-icons\">link</i>持续时间</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wy8i5ghlgu1kvgotctoqbul3\">持续时间控制动画从开始到结束运行需要多长时间。你可以通过三种方式定义持续时间：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6q81p48vb0xisqq9qkcbybu1\">以毫秒为单位的纯数字：\n<code>100</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5h53zcf3ekl41cmfjihqa3pcq\">以毫秒为单位的字符串：\n<code>'100ms'</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bks975wwp5ifcaeepoeq47h9\">以秒为单位的字符串：\n<code>'0.1s'</code></li>\n</ul>\n<h3 id=\"delay\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8hdw1zkmye596fn5fxtnzaum5\"><i class=\"material-icons\">link</i>延迟</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a54xrsndhngevo3s57o196t2b\">延迟控制动画触发器和过渡开始之间的时长。你可以通过将其添加到与持续时间相同的字符串中来定义它，该字符串位于持续时间之后。它还具有与持续时间相同的格式选项：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bqno0hba7nyn7hmborne2kt0y\">等待 100 毫秒，然后运行 200 毫秒表示为：<code>'0.2s 100ms'</code></li>\n</ul>\n<h3 id=\"easing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z606ykolgxlyul6qb549h1dn\"><i class=\"material-icons\">link</i>缓动</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5bb1l2vvc4nccv1yigntmph7k\">缓动函数控制动画在其运行期间如何加速和减速。例如，\n<code>ease-in</code> 函数会导致动画开始时相对缓慢，但随着动画的进行会加速。你可以通过将其作为字符串中的\n<em>第三个</em>值添加到持续时间和延迟之后（或者在没有延迟时作为\n<em>第二个</em>值）来控制缓动：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52u404o6issrkabf7awoyq39u\">等待 100 毫秒，然后运行 200 毫秒，并使用缓动：\n<code>'0.2s 100ms ease-out'</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbfo0id6ngqzte3j3fq7goam2\">运行 200 毫秒，并使用缓动：\n<code>'0.2s ease-in-out'</code></li>\n</ul>\n<img src=\"generated/images/guide/animations/animation_timings.gif\" alt=\"Animations with specific timings\" class=\"right\" width=\"220\">\n<h3 id=\"example\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\"><i class=\"material-icons\">link</i>范例</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzbf7fuvh330ddd6d0au5uv51\">以下是一些自定义时序的实际应用。进入和离开都持续 200 毫秒，即 \n<code>0.2s</code>，但它们具有不同的缓动。离开在 \n<code>'0.2s 10 ease-out'</code> 中指定的 10 毫秒的轻微延迟后开始：</p>\n<code-example path=\"animations/src/app/hero-list-timings.component.ts\" region=\"animationdef\" title=\"hero-list-timings.component.ts (excerpt)\" linenums=\"false\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('flyInOut', [\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({opacity: 1, transform: 'translateX(0)'})),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('void =&gt; *', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        opacity: 0,\n        transform: 'translateX(-100%)'\n      }),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.2s ease-in')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.2s 0.1s ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        opacity: 0,\n        transform: 'translateX(100%)'\n      }))\n    ])\n  ])\n]\n\n</code-example>\n<h2 id=\"multi-step-animations-with-keyframes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"esq48n48nv36ghb9es7r2jixc\"><i class=\"material-icons\">link</i>使用关键帧的多步动画</h2>\n<img src=\"generated/images/guide/animations/animation_multistep.gif\" alt=\"Animations with some bounce implemented with keyframes\" class=\"right\" width=\"220\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dor0t9jjq6afehpqt0akjk5hs\">动画\n<em>关键帧</em>超越了简单的过渡，而是更复杂的动画，在过渡两个样式集之间时会经过一个或多个中间样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14o52v611jc4u1gcfnljo6hms\">对于每个关键帧，你都会指定一个\n<em>偏移量</em>，该偏移量定义关键帧在动画中的哪个点应用。偏移量是一个介于零（标记动画开始）和一（标记动画结束）之间的数字。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4df5u5ekoiaujkl7ri92dtgx1\">此示例使用关键帧为进入和离开动画添加一些“弹跳”效果：</p>\n<code-example path=\"animations/src/app/hero-list-multistep.component.ts\" region=\"animationdef\" title=\"hero-list-multistep.component.ts (excerpt)\" linenums=\"false\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('flyInOut', [\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({transform: 'translateX(0)'})),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('void =&gt; *', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(300, <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({opacity: 0, transform: 'translateX(-100%)', offset: 0}),\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({opacity: 1, transform: 'translateX(15px)',  offset: 0.3}),\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({opacity: 1, transform: 'translateX(0)',     offset: 1.0})\n      ]))\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(300, <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({opacity: 1, transform: 'translateX(0)',     offset: 0}),\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({opacity: 0, transform: 'translateX(100%)',  offset: 1.0})\n      ]))\n    ])\n  ])\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43tt4uhgfy02dbtm1xt8p22s1\">请注意，偏移量\n<em>不是</em>以绝对时间定义的。它们是相对于零到一的度量。动画的最终时间线基于关键帧偏移量、持续时间、延迟和缓动的组合。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm60zuxdfml4bzu06xq3yjcr4\">为关键帧定义偏移量是可选的。如果你省略它们，将自动分配具有均匀间距的偏移量。例如，三个没有预定义偏移量的关键帧将分别接收偏移量 \n<code>0</code>、\n<code>0.5</code> 和 \n<code>1</code>。</p>\n<h2 id=\"parallel-animation-groups\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewp1ggvah1fo9ldq0diq6kek5\"><i class=\"material-icons\">link</i>并行动画组</h2>\n<img src=\"generated/images/guide/animations/animation_groups.gif\" alt=\"Parallel animations with different timings, implemented with groups\" class=\"right\" width=\"220px\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8q2lk8avbt20pgxcws62vibmw\">你已经了解了如何同时对多个样式属性进行动画：只需将它们全部放入同一个 \n<code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 定义中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kk4di0cv7hzuiq1k9kbidie\">但你可能还想为并行发生的动画配置不同的\n<em>时序</em>。例如，你可能想要对两个 CSS 属性进行动画，但对每个属性使用不同的缓动函数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a05041h1s3v3d4najbt0em7jk\">为此，你可以使用动画\n<em>组</em>。在此示例中，在进入和离开时都使用组，可以实现两种不同的时序配置。两者都并行应用于同一个元素，但彼此独立运行：</p>\n<code-example path=\"animations/src/app/hero-list-groups.component.ts\" region=\"animationdef\" title=\"hero-list-groups.component.ts (excerpt)\" linenums=\"false\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('flyInOut', [\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({width: 120, transform: 'translateX(0)', opacity: 1})),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('void =&gt; *', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({width: 10, transform: 'translateX(50px)', opacity: 0}),\n      <a href=\"api/animations/group\" class=\"code-anchor\">group</a>([\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s 0.1s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          transform: 'translateX(0)',\n          width: 120\n        })),\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          opacity: 1\n        }))\n      ])\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/group\" class=\"code-anchor\">group</a>([\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          transform: 'translateX(50px)',\n          width: 10\n        })),\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s 0.2s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          opacity: 0\n        }))\n      ])\n    ])\n  ])\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dw6z8cb13rvu4avzg7pnhjb9\">一个组对元素的变换和宽度进行动画；另一个组对不透明度进行动画。</p>\n<h2 id=\"animation-callbacks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aaojbe0ae7jpe3r5elsd7t93a\"><i class=\"material-icons\">link</i>动画回调</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7r2jpzdeot5zxmy4ek1ayk5j9\">当动画开始和结束时，都会触发一个回调。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4s05b25laerkec71gqsp98nfs\">在关键帧示例中，你有一个名为 \n<code>@flyInOut</code> 的 \n<code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a></code>。你可以像这样挂钩这些回调：</p>\n<code-example path=\"animations/src/app/hero-list-multistep.component.ts\" region=\"template\" title=\"hero-list-multistep.component.ts (excerpt)\" linenums=\"false\">\ntemplate: `\n  &lt;ul&gt;\n    &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n        (@flyInOut.start)=\"animationStarted($event)\"\n        (@flyInOut.done)=\"animationDone($event)\"\n        [@flyInOut]=\"'in'\"&gt;\n      {{hero.name}}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n`,\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jgfvlle0jxl3ufqkwpcujrdv\">回调会接收一个 \n<code><a href=\"api/animations/AnimationEvent\" class=\"code-anchor\">AnimationEvent</a></code>，其中包含有用的属性，例如 \n<code>fromState</code>、\n<code>toState</code> 和 \n<code>totalTime</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cc9jxnxu22jqwti4qwpmk39ar\">无论是否拾取动画，这些回调都会触发。</p>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/browser-support\n - guide/npm-packages\n - guide/router\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/animations/AnimationEvent\n - api/animations/animate\n - api/animations/group\n - api/animations/keyframes\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/NgForOf\n - api/core/Component\n - api/core/Input\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - guide/animations#animatable-properties-and-units\n - guide/animations#animation-callbacks\n - guide/animations#animation-timing\n - guide/animations#animations\n - guide/animations#automatic-property-calculation\n - guide/animations#delay\n - guide/animations#duration\n - guide/animations#easing\n - guide/animations#example\n - guide/animations#example-basics\n - guide/animations#example-entering-and-leaving\n - guide/animations#example-entering-and-leaving-from-different-states\n - guide/animations#multi-step-animations-with-keyframes\n - guide/animations#overview\n - guide/animations#parallel-animation-groups\n - guide/animations#setup\n - guide/animations#states-and-transitions\n - guide/animations#the-void-state\n - guide/animations#the-wildcard-state-\n - guide/animations#transitioning-between-two-states\n - http://caniuse.com/#feat=web-animation\n - http://easings.net/\n - https://w3c.github.io/web-animations/\n - https://www.w3.org/TR/css3-transitions\n - https://www.w3.org/TR/css3-transitions/#animatable-properties\n-->"
}