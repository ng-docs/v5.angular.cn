{
  "id" : "guide/ngmodule-api",
  "title" : "NgModule API",
  "contents" : "<div class=\"content\">\n<h1 id=\"ngmodule-api\">NgModule API</h1>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\"><i class=\"material-icons\">link</i>先决条件</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wtw65w7vo9ysndhyuq3y2kie\">对以下概念的基本理解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t22zgv8ykbwmu1loddo1606h\"><a href=\"guide/bootstrapping\">引导</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb4qsq6zvscyfkwgoajja4d9x\"><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 模块与 NgModules</a>。</li>\n</ul>\n<hr>\n<h2 id=\"purpose-of-ngmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmanbkhnocyjxnkcgwl9wkwz\"><i class=\"material-icons\">link</i><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的目的</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n1ze9z01p5e7u2sa55ejv70y\">从高层次上讲，NgModules 是组织 Angular 应用的一种方式，它们通过 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器中的元数据来实现这一点。元数据分为三类：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zd5cs4ua7sb6qy9uzehc9jat\"><strong>静态：</strong>编译器配置，它告诉编译器有关指令选择器的信息，以及指令应通过选择器匹配在模板中的何处应用。这通过 \n<code>declarations</code> 数组配置。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dbbh0wm9emu3zm5npouxkmic\"><strong>运行时：</strong>通过 \n<code>providers</code> 数组进行注入器配置。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6ezbvov0otmq6xiqwr1fppse\"><strong>可组合性/分组：</strong>将 NgModules 结合在一起，并通过 \n<code>imports</code> 和 \n<code>exports</code> 数组使它们可用。</li>\n</ul>\n<code-example language=\"typescript\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  // Static, that is compiler configuration\n  declarations: [], // Configure the selectors\n  entryComponents: [], // Generate the host factory\n\n  // Runtime, or injector configuration\n  providers: [], // Runtime injector configuration\n\n  // Composability / Grouping\n  imports: [], // composing NgModules together\n  exports: [] // making NgModules available to other parts of the app\n})\n</code-example>\n<h2 id=\"ngmodule-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rthghpdhexwk9futbcldgcvm\"><i class=\"material-icons\">link</i><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayvcen8eaq04t9npfno6tpyz8\">下表总结了 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据属性。</p>\n<table>\n  <tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8inopazehx1bfxu8m1odt9y8v\">属性</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c1zh7m7zz0q1ywb7182og533b\">说明</th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>declarations</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arynfm4k8lko854wj6s8144gn\">一个 \n<a href=\"guide/ngmodule-faq#q-declarable\">可声明</a> 类列表，（\n<em>组件</em>、\n<em>指令</em>和\n<em>管道</em>），它们\n<em>属于此模块</em>。</p>\n      <ol>\n        <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8siqw4liahxmyikwgk9wr8bdz\">编译模板时，需要确定一组选择器，这些选择器应用于触发其相应的指令。</li>\n        <li>\n          The template is compiled within the context of an NgModule—the NgModule within which the template's component is declared—which determines the set of selectors using the following rules:\n          <ul>\n            <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yflbgwyci4v2m9przdfkxb0p\"><code>declarations</code> 中列出的所有指令的选择器。</li>\n            <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tmcf3z5cvad6mrnf80f64s5j\">从导入的 NgModules 中导出的所有指令的选择器。</li>\n          </ul>\n        </li>\n      </ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5uvukfeex6ormtjz00pwmapbt\">组件、指令和管道必须\n<em>完全</em>属于一个模块。如果你尝试在多个模块中声明同一个类，编译器会发出错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dwnlcn44p31kn5j0v45lhbeh\">不要重新声明从另一个模块导入的类。</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>providers</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ewbsfgzqixxwriyyfpmbs0wi\">一个依赖注入提供者列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20seqw6c8llnxqr42qc7a6xee\">Angular 将这些提供者注册到 NgModule 的注入器。如果它是用于引导的 NgModule，那么它是根注入器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y9lihm32cziuviyj4pfldx9q\">这些服务可用于注入到任何组件、指令、管道或服务中，这些组件、指令、管道或服务是此注入器的子级。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vy49rvq7mehezyqtdmg0w60h\">惰性加载的模块有自己的注入器，它通常是应用程序根注入器的子级。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d44iyojvr4dhptkxd2yxubb9d\">惰性加载的服务的作用域是惰性模块的注入器。如果惰性加载的模块也提供 \n<code>UserService</code>，则在该模块的上下文中创建的任何组件（例如通过路由导航）都会获得服务的本地实例，而不是根应用程序注入器中的实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eoqtu8mmfeglwbz6p6140h4my\">外部模块中的组件继续接收其注入器提供的实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qzhj6403bkfe7jcuzzjns7sh\">有关注入器层次结构和作用域的更多信息，请参阅 \n<a href=\"guide/providers\">提供者</a>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>imports</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"832uoj1jy4f2hkwe0uhop2654\">应该折叠到此模块中的模块列表。折叠意味着就好像所有导入的 NgModule 的导出属性都在这里声明一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39l0qc00ak198laqhdg3hjjha\">具体来说，就好像组件模板引用的导出组件、指令或管道所在的模块列表在此模块中声明一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2ob1reqwii7sd34tc41f8nbf\">组件模板可以在此模块中声明引用或导入的模块已导出引用时，\n<a href=\"guide/ngmodule-faq#q-template-reference\">引用</a>另一个组件、指令或管道。 例如，组件只能在模块导入 Angular \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>（可能通过导入 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 间接导入）的情况下使用 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 \n<code>NgFor</code> 指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnkpuzk8xobwiwpy4xpg299dq\">你可以从 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 导入许多标准指令，但一些熟悉的指令属于其他模块。 例如，只有在导入 Angular \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 后，你才能使用 \n<code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>exports</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1d8qbpxmzsd76dshsqhq4wshs\">导入模块可以使用的一组声明——\n<em>组件</em>、\n<em>指令</em>和\n<em>管道</em>类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zfvzv0vjhr0s39p696wz62sw\">导出的声明是模块的\n<em>公共 API</em>。 另一个模块中的组件可以在导入此模块且此模块导出 \n<code>UserComponent</code> 的情况下，\n<a href=\"guide/ngmodule-faq#q-template-reference\">使用</a>\n<em>此</em>模块的 \n<code>UserComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avnvczoi8c2ryuyffuarku1gp\">声明默认情况下是私有的。 如果此模块\n<em>不</em>导出 \n<code>UserComponent</code>，则只有\n<em>此</em>模块中的组件可以使用 \n<code>UserComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c5v3g38ql6mf3ins5z42907q\">导入模块\n<em>不会</em>自动重新导出导入模块的导入。 模块 'B' 不能使用 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，仅仅因为它导入的模块 'A' 导入了 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。 模块 'B' 必须自己导入 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tht7t8s4kbz55waib4r82bgy\">模块可以在其 \n<code>exports</code> 中列出另一个模块，在这种情况下，该模块的所有公共组件、指令和管道都会被导出。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o2o3z96fia3oro0801w5bwki\"><a href=\"guide/ngmodule-faq#q-reexport\">重新导出</a> 使模块传递性变得明确。 如果模块 'A' 重新导出 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 且模块 'B' 导入模块 'A'， 模块 'B' 的组件可以使用 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，即使 'B' 本身没有导入 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>bootstrap</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2e8t4wu5lx06bfydnm42hheyi\">自动引导的一组组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfn4uxnj3n91nyquenjvw0i84\">通常此列表中只有一个组件，即应用程序的\n<em>根组件</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edo3ejwm2ra75fiwehavm1djl\">Angular 可以使用多个引导组件启动， 每个组件在宿主网页中都有自己的位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dx7z4hfvu0z5w64kp9libmql\">引导组件会自动添加到 \n<code>entryComponents</code> 中。</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>entryComponents</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4jpxhckw68ym1puqaxananv9\">可以动态加载到视图中的组件列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44f2mozsbotvtnpkuvuk9wm3u\">默认情况下，Angular 应用始终至少有一个入口组件，即根组件 \n<code>AppComponent</code>。它的作用是作为应用的入口点，也就是说，你引导它来启动应用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wnabrh85hwemqfigpyqy878f\">路由组件也是\n<em>入口组件</em>，因为它们需要动态加载。 路由器创建它们并将它们放到 \n<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 附近的 DOM 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erfrfsbswaw21amm3hrd3kx36\">虽然引导组件和路由组件是\n<em>入口组件</em>， 但你无需将它们添加到模块的 \n<code>entryComponents</code> 列表中， 因为它们会隐式添加。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1wmwf7cr3cyyfoo09r7oss2r\">Angular 会自动将模块的 \n<code>bootstrap</code> 和路由定义中的组件添加到 \n<code>entryComponents</code> 列表中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85oj7d2xy84et0q43wv8utkfn\">这使得仅使用某些命令式技术（例如 \n<a href=\"https://angular.io/api/core/ViewContainerRef#createComponent\"><code>ViewComponentRef.createComponent()</code></a>）引导的组件无法被发现。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecz6f59x2rsjyf65nuukea9wp\">除了路由器之外，大多数应用中并不常见动态组件加载。如果你需要动态加载组件，则必须自己将这些组件添加到 \n<code>entryComponents</code> 列表中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd6pzcxmharojhvytg9h514mw\">有关更多信息，请参阅 \n<a href=\"guide/entry-components\">入口组件</a>。</p>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\"><i class=\"material-icons\">link</i>关于 NgModules 的更多信息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"320pd4quk21g01cifflgmc0pj\">你可能还会对以下内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy2an3vxrjhdg4mjgf59h805c\"><a href=\"guide/feature-modules\">特性模块</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfi3jry8ngl0qndh8quap6m0s\"><a href=\"guide/entry-components\">入口组件</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg213zznp5hwjyrbbmmmf2q3n\"><a href=\"guide/providers\">提供者</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nnruzlsgv0xcfh59t3yuw9zb\"><a href=\"guide/module-types\">特性模块类型</a>。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgIf\n - api/core/NgModule\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/RouterOutlet\n - guide/bootstrapping\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-api#more-on-ngmodules\n - guide/ngmodule-api#ngmodule-api\n - guide/ngmodule-api#ngmodule-metadata\n - guide/ngmodule-api#prerequisites\n - guide/ngmodule-api#purpose-of-ngmodule\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-faq#q-reexport\n - guide/ngmodule-faq#q-template-reference\n - guide/ngmodule-vs-jsmodule\n - guide/providers\n - https://angular.io/api/core/ViewContainerRef#createComponent\n-->"
}