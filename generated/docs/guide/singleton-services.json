{
  "id" : "guide/singleton-services",
  "title" : "单例服务",
  "contents" : "<div class=\"content\">\n<h1 id=\"singleton-services\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"essl9gfrqg45g47n7kl5z0gxp\"><i class=\"material-icons\">link</i>单例服务</h1>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvushkv2hv9s5ejwrr6i4rhvb\"><i class=\"material-icons\">link</i>先决条件：</h4>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aizpbk74mi09a722ys7yun79v\">对 \n<a href=\"guide/bootstrapping\">引导</a> 的基本了解。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d78v5psx9q9j3eqdr9qop0tlr\">熟悉 \n<a href=\"guide/providers\">提供者</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zpedy9jmfsl2ibib91g0szfv\">有关使用此页面描述的应用程序范围单例服务的示例应用程序，请参阅 \n<live-example name=\"ngmodules\"></live-example>，它展示了 NgModules 的所有已记录特性。</p>\n<hr>\n<h2 id=\"providing-a-singleton-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8sl670sylcg1vukn5ecj4wovf\"><i class=\"material-icons\">link</i>提供单例服务</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bi3jki2ts12fnfo2kcgplkkkq\">从模块定义创建的注入器将拥有相对于该注入器而言是单例的服务。要控制服务的生命周期，需要控制注入器的创建和销毁。例如，路由将拥有一个关联的模块。当路由被激活时，将从该模块创建一个注入器，作为当前注入器的子级。当你从路由导航离开时，注入器将被销毁。这意味着在路由模块中声明的服务将拥有与路由相同的使用寿命。类似地，在应用程序模块中提供的服务将拥有与应用程序相同的生命周期，因此是单例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95qf213o8fwklo09iusms2r0a\">以下示例模块按照惯例称为 \n<code>CoreModule</code>。此 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的使用创建了组织基础结构，并为你提供了一种从指定 NgModule 提供服务的方法。</p>\n<code-example path=\"ngmodules/src/app/core/core.module.ts\" region=\"user-service\" title=\"src/app/core/core.module.ts\" linenums=\"false\">\nimport { UserService } from './user.service';\n/* . . . */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n/* . . . */\n  providers:    [ UserService ]\n})\nexport class CoreModule {\n/* . . . */\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adtlukyadlt6my5g8ksu7r7pf\">这里，\n<code>CoreModule</code> 提供了 \n<code>UserService</code>，并且由于 \n<code>AppModule</code> 导入了 \n<code>CoreModule</code>，因此 \n<code>CoreModule</code> 提供的任何服务都可以在整个应用程序中使用，因为它是在注入器树的根部。它也将是单例，因为 \n<code>AppModule</code> 的注入器生命周期与应用程序的持续时间相同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8q1s7nj3s9w24555q0frci48h\">Angular 将 \n<code>UserService</code> 提供者注册到应用程序根注入器，使 \n<code>UserService</code> 的单例实例可供任何需要它的组件使用，无论该组件是急切加载还是惰性加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mkty9upxrd7gfbyaz3uiew8\">根 \n<code>AppModule</code> 可以直接注册 \n<code>UserService</code>，但随着应用程序的增长，它可能会有其他服务和组件，例如加载动画、模态框等等。为了保持应用程序的组织性，请考虑使用 \n<code>CoreModule</code> 等模块。此技术简化了根 \n<code>AppModule</code> 作为整个应用程序协调者的功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22r88mmlbnt0w04n8slebdr6v\">现在，你可以根据需要将这些服务注入到组件中。就 Angular NgModules 而言，你只需要在一个 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中定义服务。有关如何区分两者，请参阅 \n<a href=\"guide/ngmodule-vs-jsmodule\">JS 模块与 NgModules</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iut1j2cgwy5r83jle79i3txs\">一般来说，\n<em>只导入一次</em>带有提供者的模块，最好是在应用程序的\n<em>根模块</em>中。这通常也是配置、包装和覆盖它们的最佳位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyhwqgi0jc0m6qjdxy6h12r4s\">有关服务的更多详细信息，请参阅 \n<a href=\"tutorial/toh-pt4\">服务</a>，它是 \n<a href=\"tutorial\">英雄之旅教程</a> 的一部分。</p>\n<h2 id=\"forroot\"><code>forRoot()</code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4o2suofw0ic5axk1tknrrtcj8\">如果模块同时提供提供者和声明（组件、指令、管道），那么在子注入器（例如路由）中加载它会导致提供者实例的重复。提供者的重复会导致问题，因为它们会遮蔽根实例，而根实例可能应该为单例。为此，Angular 提供了一种将提供者从模块中分离出来的方法，以便同一个模块可以导入到根模块中，带有 \n<code>providers</code>，而子模块则不带 \n<code>providers</code>。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hyr5gur5k1vofvsimkvkbv5c\">在模块上创建一个静态方法 \n<code>forRoot()</code>（按照惯例）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18aoizhrj0ynl776u8cdmfwpl\">将提供者放置到 \n<code>forRoot</code> 方法中，如下所示。</li>\n</ol>\n<!-- MH: show a simple example how to do that without going to deep into it. -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76byd9h05sp1k91tml6nfsup6\">为了更具体地说明这一点，请考虑 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 作为示例。\n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 需要提供 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务以及 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 指令。\n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 必须由根应用程序模块导入，以便应用程序拥有 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>，并且应用程序至少拥有一个 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>。它还必须由各个路由组件导入，以便它们可以将 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 指令放置到其模板中，用于子路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fx9vdmis5dwcj90sz6tnk9m7\">如果 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 没有 \n<code>forRoot()</code>，那么每个路由组件都会实例化一个新的 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 实例，这会导致应用程序崩溃，因为只能有一个 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。为此，\n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 拥有 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 声明，以便它在任何地方都可用，但 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 提供者只存在于 \n<code>forRoot()</code> 中。结果是，根应用程序模块导入 \n<code>RouterModule.forRoot(...)</code> 并获得 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>，而所有路由组件都导入 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，其中不包含 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c39wepxmwa27bhhy5wlqjs1x7\">如果你有一个模块同时提供提供者和声明，请使用此模式将它们分离。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ei2jog5b5clm5kffkqgt41b67\">向应用程序添加提供者的模块还可以通过 \n<code>forRoot()</code> 方法提供配置这些提供者的功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy84w4fhviq66kjgtczkbnk5h\"><code>forRoot()</code> 接受一个服务配置对象并返回一个 \n<a href=\"api/core/ModuleWithProviders\">ModuleWithProviders</a>，它是一个具有以下属性的简单对象：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9catuq4iav5w7m130oex692t5\"><code>ngModule</code>：在本例中，为 \n<code>CoreModule</code> 类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rl8qtnjmjzjhr1h38f5rw6ta\"><code>providers</code>：已配置的提供者。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d0h1d1ipd90oi4jprje15ix4\">在 \n<live-example name=\"ngmodules\">\n 动态示例\n</live-example> 中，根 \n<code>AppModule</code> 导入 \n<code>CoreModule</code> 并将 \n<code>providers</code> 添加到 \n<code>AppModule</code> 提供者中。具体来说，Angular 会在追加 \n<code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> 中列出的条目之前，累积所有导入的提供者。此顺序确保你显式添加到 \n<code>AppModule</code> 提供者的任何内容都优先于导入模块的提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h6du0esdydx0xv9cv69fcumk\">在 \n<code>AppModule</code> 中只导入一次 \n<code>CoreModule</code> 并使用其 \n<code>forRoot()</code> 方法，因为它注册服务，而你只希望在应用程序中注册一次这些服务。如果你注册多次，最终可能会得到多个服务实例，并导致运行时错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpb06vzgnar0a7aoarbbfy305\">你也可以在 \n<code>CoreModule</code> 中添加一个 \n<code>forRoot()</code> 方法，用于配置核心 \n<code>UserService</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9n98f6w8hq5qcec88aory6z4\">在以下示例中，可选的注入 \n<code>UserServiceConfig</code> 扩展了核心 \n<code>UserService</code>。如果存在 \n<code>UserServiceConfig</code>，则 \n<code>UserService</code> 会从该配置中设置用户名。</p>\n<code-example path=\"ngmodules/src/app/core/user.service.ts\" region=\"ctor\" title=\"src/app/core/user.service.ts (constructor)\" linenums=\"false\">\nconstructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() config: UserServiceConfig) {\n  if (config) { this._userName = config.userName; }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"aw17be10ps7ht9yd3btrmmgts\">下面是一个接受 <code>UserServiceConfig</code> 参数的 <code>forRoot()</code> 方法：</p>\n<code-example path=\"ngmodules/src/app/core/core.module.ts\" region=\"for-root\" title=\"src/app/core/core.module.ts (forRoot)\" linenums=\"false\">\n<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: UserServiceConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a> {\n  return {\n    ngModule: CoreModule,\n    providers: [\n      {provide: UserServiceConfig, useValue: config }\n    ]\n  };\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4bqtwfxuo4yx23gxsp0pswbk\">最后，在 \n<code>AppModule</code> 的 \n<code>imports</code> 列表中调用它。</p>\n<code-example path=\"ngmodules/src/app/app.module.ts\" region=\"import-for-root\" title=\"src/app/app.module.ts (imports)\" linenums=\"false\">\nimport { CoreModule } from './core/core.module';\n/* . . . */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    ContactModule,\n    CoreModule.forRoot({userName: 'Miss Marple'}),\n    AppRoutingModule\n  ],\n/* . . . */\n})\nexport class AppModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahyiyfocuggxrgy0qqe5fc1uf\">应用程序显示 \"Miss Marple\" 作为用户，而不是默认的 \"Sherlock Holmes\"。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzhi4fi7gtsnyg13fabyomktt\">请记住，在文件顶部以 Javascript 导入的方式\n<em>导入</em> \n<code>CoreModule</code>；不要将其添加到多个 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 \n<code>imports</code> 列表中。</p>\n<!-- KW--Does this mean that if we need it elsewhere we only import it at the top? I thought the services would all be available since we were importing it into `AppModule` in `providers`. -->\n<h2 id=\"prevent-reimport-of-the-coremodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47j9yl5du5emzopoe0h4powgj\"><i class=\"material-icons\">link</i>防止重新导入 \n<code>CoreModule</code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cec2o4cnoia0r7g508p2kbqhe\">只有根 \n<code>AppModule</code> 应该导入 \n<code>CoreModule</code>。如果惰性加载的模块也导入它，应用程序可能会生成 \n<a href=\"guide/ngmodule-faq#q-why-bad\">多个服务实例</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pq1p9jhy5nxhk6cq6hkacg1b\">为了防止惰性加载的模块重新导入 \n<code>CoreModule</code>，请添加以下 \n<code>CoreModule</code> 构造函数。</p>\n<code-example path=\"ngmodules/src/app/core/core.module.ts\" region=\"ctor\" title=\"src/app/core/core.module.ts\" linenums=\"false\">\nconstructor (@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parentModule: CoreModule) {\n  if (parentModule) {\n    throw new Error(\n      'CoreModule is already loaded. Import it in the AppModule only');\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dmxm4lcjs68ysfw0p2kijesk\">构造函数告诉 Angular 将 \n<code>CoreModule</code> 注入到自身中。如果 Angular 在\n<em>当前</em>注入器中查找 \n<code>CoreModule</code>，则注入将是循环的。\n<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a></code> 装饰器意味着 \"在祖先注入器中查找 \n<code>CoreModule</code>，在我所在的注入器层次结构之上\"。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mi3g6eqhkdomms2z2033jkq7\">如果构造函数按预期在 \n<code>AppModule</code> 中执行，则不会有祖先注入器可以提供 \n<code>CoreModule</code> 的实例，并且注入器应该放弃。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"w5qpopo0nbzxiotc2p3hyjrs\">默认情况下，当注入器找不到请求的提供者时，它会抛出错误。\n<code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a></code> 装饰器意味着找不到服务是可以的。注入器返回 \n<code>null</code>，\n<code>parentModule</code> 参数为 null，并且构造函数顺利结束。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ky139kf30fvbi1drvcggnyxi\">如果你不正确地将 \n<code>CoreModule</code> 导入到惰性加载的模块（例如 \n<code>CustomersModule</code>）中，情况就不同了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erep8l6eaoarww1sld14z5vio\">Angular 创建了一个惰性加载的模块，该模块拥有自己的注入器，它是根注入器的\n<em>子</em>注入器。 \n<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a></code> 导致 Angular 在父注入器中查找 \n<code>CoreModule</code>，这次是根注入器。 当然，它找到了由根 \n<code>AppModule</code> 导入的实例。 现在 \n<code>parentModule</code> 存在，构造函数抛出了错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m50t7f8nvybl5x6afb19lenh\">以下是两个文件的完整内容，供参考：</p>\n<code-tabs linenums=\"false\">\n <code-pane title=\"app.module.ts\" path=\"ngmodules/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a> } from '@angular/http';\n\n/* App Root */\nimport { AppComponent } from './app.component';\n\n/* Feature Modules */\nimport { ContactModule } from './contact/contact.module';\nimport { CoreModule } from './core/core.module';\n\n/* Routing Module */\nimport { AppRoutingModule } from './app-routing.module';\n\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    ContactModule,\n    CoreModule.forRoot({userName: 'Miss Marple'}),\n    AppRoutingModule\n  ],\n  providers: [],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n <code-pane title=\"core.module.ts\" region=\"whole-core-module\" path=\"ngmodules/src/app/core/core.module.ts\">\nimport { <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>, <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>, <a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>, <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a> } from '@angular/core';\n\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\nimport { TitleComponent } from './title.component';\nimport { UserService } from './user.service';\nimport { UserServiceConfig } from './user.service';\n\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> ],\n  declarations: [ TitleComponent ],\n  exports:      [ TitleComponent ],\n  providers:    [ UserService ]\n})\nexport class CoreModule {\n  constructor (@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error(\n        'CoreModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: UserServiceConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a> {\n    return {\n      ngModule: CoreModule,\n      providers: [\n        {provide: UserServiceConfig, useValue: config }\n      ]\n    };\n  }\n}\n\n</code-pane>\n</code-tabs>\n<hr>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\"><i class=\"material-icons\">link</i>关于 NgModules 的更多信息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ho2p43rev7e4non44xvp10gw\">你可能还会对以下内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66oag0qfp6dxkf5r12gka9dh5\"><a href=\"guide/sharing-ngmodules\">共享模块</a>，它详细阐述了本页介绍的概念。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f30wia94vx6kxdwffucf239vf\"><a href=\"guide/lazy-loading-ngmodules\">惰性加载模块</a>.</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2en5q93gvb8jstpcmn3xn0gdc\"><a href=\"guide/ngmodule-faq\">NgModule 常见问题解答</a>.</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/ngmodule-faq\n - guide/providers\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/core/NgModule#providers\n - api/core/Optional\n - api/core/SkipSelf\n - api/forms/FormsModule\n - api/http/HttpModule\n - api/platform-browser/BrowserModule\n - api/router/Router\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/upgrade/static\n - guide/bootstrapping\n - guide/lazy-loading-ngmodules\n - guide/ngmodule-faq\n - guide/ngmodule-faq#q-why-bad\n - guide/ngmodule-vs-jsmodule\n - guide/providers\n - guide/sharing-ngmodules\n - guide/singleton-services#forroot\n - guide/singleton-services#more-on-ngmodules\n - guide/singleton-services#prerequisites\n - guide/singleton-services#prevent-reimport-of-the-coremodule\n - guide/singleton-services#providing-a-singleton-service\n - guide/singleton-services#singleton-services\n - tutorial\n - tutorial/toh-pt4\n-->"
}