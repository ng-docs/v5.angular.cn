{
  "id" : "guide/displaying-data",
  "title" : "显示数据",
  "contents" : "<div class=\"content\">\n<h1 id=\"displaying-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70mr52xmv7jayjy06kmozg6ok\"><i class=\"material-icons\">link</i>显示数据</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6d8dvtfd7dg3u3b6k2amebdn\">你可以通过将 HTML 模板中的控件绑定到 Angular 组件的属性来显示数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4oskd0hyvnqmbmt41ayxy2hoi\">在此页面中，你将创建一个包含英雄列表的组件。你将显示英雄名称列表，并在列表下方有条件地显示一条消息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vqo762vgn00l7jzjpin0twtq\">最终的 UI 如下所示：</p>\n<figure>\n  <img src=\"generated/images/guide/displaying-data/final.png\" alt=\"Final UI\" width=\"374\" height=\"290\">\n</figure>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yd6htm6hfsu3ayw3vqa44orx\">此 \n<live-example></live-example> 演示了此页面中描述的所有语法和代码片段。</p>\n</div>\n<a id=\"interpolation\"></a>\n<h2 id=\"showing-component-properties-with-interpolation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czu9b8ku2rzimdi16albugpr5\"><i class=\"material-icons\">link</i>使用插值显示组件属性</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfly33ta2iujup0ufhst9qpu4\">显示组件属性的最简单方法是通过插值绑定属性名称。使用插值，你将属性名称放在视图模板中，并用双花括号括起来：\n<code>{{myHero}}</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6mlm05eay3ikedw1y09pqrv0\">按照 \n<a href=\"guide/quickstart\">快速入门</a> 指示创建一个名为 \n<code>displaying-data</code> 的新项目。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69690xaw4sffv0ytrovz29zvw\">删除 \n<code>app.component.html</code> 文件。此示例不需要它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rrd4klzmshhwp92ryx2tpvz7\">然后通过更改模板和组件主体来修改 \n<code>app.component.ts</code> 文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51g1ls7o053nn5rnrb3kgnen6\">完成后，它应该如下所示：</p>\n<code-example path=\"displaying-data/src/app/app.component.1.ts\" title=\"src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;h2&gt;My favorite hero is: {{myHero}}&lt;/h2&gt;\n    `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  myHero = 'Windstorm';\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqxadbgbdaaf14eengiygfck8\">你向以前为空的组件添加了两个属性：\n<code>title</code> 和 \n<code>myHero</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enxe2m1feo09y171x84yi0l8w\">模板使用双花括号插值显示这两个组件属性：</p>\n<code-example path=\"displaying-data/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My favorite hero is: {{myHero}}&lt;/h2&gt;\n  `\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"786u84g94tkdur0u7vq0daoi3\">模板是 ECMAScript 2015 反引号（\n<code>`</code>）中的多行字符串。反引号（\n<code>`</code>）（与单引号（\n<code>'</code>）不同）允许你在多行上组合字符串，这使得 HTML 更易读。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a58c4ccxqwn8qaaxytllqmuuk\">Angular 会自动从组件中提取 \n<code>title</code> 和 \n<code>myHero</code> 属性的值，并将这些值插入到浏览器中。当这些属性发生变化时，Angular 会更新显示。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1fyx4lgclt9u6lgo0lrnfldo\">更准确地说，重新显示发生在与视图相关的某种异步事件之后，例如按键、计时器完成或对 HTTP 请求的响应。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zd7x49o3ir589x97jdsbjig9\">请注意，你没有调用 \n<strong>new</strong> 来创建 \n<code>AppComponent</code> 类的实例。Angular 正在为你创建实例。如何创建？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cwe38n7j49cle4ga59z13l1v\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器中的 CSS \n<code>selector</code> 指定了一个名为 \n<code>&lt;app-root&gt;</code> 的元素。该元素是 \n<code>index.html</code> 文件主体中的占位符：</p>\n<code-example path=\"displaying-data/src/index.html\" linenums=\"false\" title=\"src/index.html (body)\" region=\"body\">\n&lt;body&gt;\n  &lt;app-root&gt;&lt;/app-root&gt;\n&lt;/body&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d63ktnumvbuc61pga393zl2mg\">当你使用 \n<code>AppComponent</code> 类引导（在 \n<code>main.ts</code> 中）时，Angular 会在 \n<code>index.html</code> 中查找 \n<code>&lt;app-root&gt;</code>，找到它，实例化 \n<code>AppComponent</code> 的实例，并在 \n<code>&lt;app-root&gt;</code> 标签内渲染它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ektmtkbeib06gk7j74xm8qdvg\">现在运行应用程序。它应该显示标题和英雄名称：</p>\n<figure>\n  <img src=\"generated/images/guide/displaying-data/title-and-hero.png\" alt=\"Title and Hero\" width=\"348\" height=\"108\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxyrae8yrhr738b066zr0go8c\">接下来的几节将回顾应用程序中的一些编码选择。</p>\n<h2 id=\"template-inline-or-template-file\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h0vbqqhmwwp61r22nzji9dcw\"><i class=\"material-icons\">link</i>模板内联还是模板文件？</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6w4enojqxirlhlsg3nrckr383\">你可以将组件的模板存储在两个位置之一。你可以使用 \n<code>template</code> 属性\n<em>内联</em>定义它，也可以在单独的 HTML 文件中定义模板，并在组件元数据中使用 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 \n<code>templateUrl</code> 属性链接到它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1quneh8lxowtf4yzr8nbvrh0s\">内联和单独 HTML 之间的选择取决于个人喜好、情况和组织策略。这里应用程序使用内联 HTML，因为模板很小，并且在没有额外 HTML 文件的情况下，演示更简单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bven4joof1y5vz7dfou4bn1q\">无论哪种风格，模板数据绑定都具有相同的访问组件属性的权限。</p>\n<div class=\"alert is-helpful\">\n  \n  By default, the Angular CLI generates components with a template file. You can override that with:\n  <code-example hidecopy=\"\" language=\"sh\" class=\"code-shell\">\n    ng generate component hero -it\n  </code-example>\n</div>\n<h2 id=\"constructor-or-variable-initialization\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8cansk0u46sig8emuadhkw9i\"><i class=\"material-icons\">link</i>构造函数还是变量初始化？</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32idr8sog9llk8430cv8whuhx\">虽然此示例使用变量赋值来初始化组件，但你也可以使用构造函数来声明和初始化属性：</p>\n<code-example path=\"displaying-data/src/app/app-ctor.component.ts\" linenums=\"false\" region=\"class\">\nexport class AppCtorComponent {\n  title: string;\n  myHero: string;\n\n  constructor() {\n    this.title = 'Tour of Heroes';\n    this.myHero = 'Windstorm';\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jicv6fi458o6f59shc58ta4l\">此应用程序使用更简洁的“变量赋值”风格，仅仅是为了简洁。</p>\n<a id=\"ngFor\"></a>\n<h2 id=\"showing-an-array-property-with-ngfor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"606jqy9pwgrmh53w8xr7wuul9\"><i class=\"material-icons\">link</i>使用 \n<strong>*ngFor</strong> 显示数组属性</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2s91bgm9lklyt15mr1x3vgsc\">要显示英雄列表，首先将英雄名称数组添加到组件中，并将 \n<code>myHero</code> 重新定义为数组中的第一个名称。</p>\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" linenums=\"false\" title=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  myHero = this.heroes[0];\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5d9pfqx1qn8x7b4m3mexk19g3\">现在在模板中使用 Angular \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令来显示 \n<code>heroes</code> 列表中的每个条目。</p>\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" linenums=\"false\" title=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My favorite hero is: {{myHero}}&lt;/h2&gt;\n  &lt;p&gt;Heroes:&lt;/p&gt;\n  &lt;ul&gt;\n    &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n      {{ hero }}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n`\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rzocp9agd307mz0lx1pqkxv5\">此 UI 使用带有 \n<code>&lt;ul&gt;</code> 和 \n<code>&lt;li&gt;</code> 标签的 HTML 无序列表。\n<code>&lt;li&gt;</code> 元素中的 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 是 Angular 的“重复器”指令。它将 \n<code>&lt;li&gt;</code> 元素（及其子元素）标记为“重复器模板”：</p>\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" linenums=\"false\" title=\"src/app/app.component.ts (li)\" region=\"li\">\n&lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n  {{ hero }}\n&lt;/li&gt;\n\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32lw4f5xh4rr4ysynfqz7dguy\">不要忘记 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 中的星号 (*)。它是语法中必不可少的一部分。有关更多信息，请参阅 \n<a href=\"guide/template-syntax#ngFor\">模板语法</a> 页面。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfzuty4ye6g2wbbzd23j3q7su\">请注意 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 双引号指令中的 \n<code>hero</code>；它是一个模板输入变量的示例。在 \n<a href=\"guide/template-syntax#microsyntax\">微语法</a> 部分的 \n<a href=\"guide/template-syntax\">模板语法</a> 页面中阅读有关模板输入变量的更多信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3husitkbcaqr3pxhz1c5jr3vv\">Angular 为列表中的每个条目复制 \n<code>&lt;li&gt;</code>，将 \n<code>hero</code> 变量设置为当前迭代中的条目（英雄）。Angular 使用该变量作为双花括号中插值的上下文。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53zlh4kb5trsed5b23zxxjcic\">在本例中，\n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 显示的是一个数组，但 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 可以为任何 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">可迭代</a> 对象重复条目。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwcsofbx0w8e48bxg44haisfw\">现在英雄出现在无序列表中。</p>\n<figure>\n  <img src=\"generated/images/guide/displaying-data/hero-names-list.png\" alt=\"After ngfor\" width=\"350\" height=\"239\">\n</figure>\n<h2 id=\"creating-a-class-for-the-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1otu69bgzta0um1igdh1mdz3m\"><i class=\"material-icons\">link</i>创建数据类</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1h2re6f8h9smh7e5vuq3n1qin\">应用程序的代码直接在组件内部定义数据，这不是最佳实践。但是，在简单的演示中，这很好。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7m36l4hwc00tnxn7svt5oklul\">目前，绑定的是字符串数组。在实际应用中，大多数绑定都是针对更专门的对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btk9zdlzc68mqf7fahmk7o17t\">要将此绑定转换为使用专门的对象，请将英雄名称数组转换为 \n<code>Hero</code> 对象数组。为此，你需要一个 \n<code>Hero</code> 类：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate class hero\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ozrkdgh5lbd4kcaa9ad0w4b6\">使用以下代码：</p>\n<code-example path=\"displaying-data/src/app/hero.ts\" linenums=\"false\" title=\"src/app/hero.ts\">\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3a5xhgnkh0wlyl8ihjoa3n0f2\">你定义了一个带有构造函数和两个属性的类：\n<code>id</code> 和 \n<code>name</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b01nadyn9u7hlpry9965vp5uv\">它可能看起来不像类具有属性，但它确实有。构造函数参数的声明利用了 TypeScript 的快捷方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7haf39rm6827daz578ebr0kq\">考虑第一个参数：</p>\n<code-example path=\"displaying-data/src/app/hero.ts\" linenums=\"false\" title=\"src/app/hero.ts (id)\" region=\"id\">\npublic id: number,\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aoqphvoml3yjl0f6knboer0j5\">这种简短的语法做了很多事情：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8a9f6s2icgijtitsiabplsli3\">声明构造函数参数及其类型。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38cr1gybyvzuz3q7bvelruqjv\">声明一个同名公共属性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bcbpg1ynvpt1qm52pwz48bhf\">在创建类实例时，使用相应的参数初始化该属性。</li>\n</ul>\n<h3 id=\"using-the-hero-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g61ga4i79hsjrhmdscuoneus\"><i class=\"material-icons\">link</i>使用 Hero 类</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54f8no5t42pfqboxzmglz7vy1\">导入 \n<code>Hero</code> 类后，\n<code>AppComponent.heroes</code> 属性可以返回一个 \n<em>类型化</em> 的 \n<code>Hero</code> 对象数组：</p>\n<code-example path=\"displaying-data/src/app/app.component.3.ts\" linenums=\"false\" title=\"src/app/app.component.ts (heroes)\" region=\"heroes\">\nheroes = [\n  new Hero(1, 'Windstorm'),\n  new Hero(13, 'Bombasto'),\n  new Hero(15, 'Magneta'),\n  new Hero(20, 'Tornado')\n];\nmyHero = this.heroes[0];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wvuhx2mv0azmhk6098pkluiy\">接下来，更新模板。目前它显示了英雄的 \n<code>id</code> 和 \n<code>name</code>。修复它以仅显示英雄的 \n<code>name</code> 属性。</p>\n<code-example path=\"displaying-data/src/app/app.component.3.ts\" linenums=\"false\" title=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My favorite hero is: {{myHero.name}}&lt;/h2&gt;\n  &lt;p&gt;Heroes:&lt;/p&gt;\n  &lt;ul&gt;\n    &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n      {{ hero.name }}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n`\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlkhc7r5r9of3hni6d15a0fay\">显示看起来相同，但代码更清晰。</p>\n<a id=\"ngIf\"></a>\n<h2 id=\"conditional-display-with-ngif\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1b8hctfgcsodnthq0omx0jxpo\"><i class=\"material-icons\">link</i>使用 NgIf 进行条件显示</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu0ko0h2krxssip216ctcinar\">有时，应用程序需要仅在特定情况下显示视图或视图的一部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1n14fgas0lhzriihh7x3an0zt\">让我们更改示例，如果英雄超过三个，则显示一条消息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ae7e1rri82jzrmj5iztuw0i9\">Angular 的 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令根据 \n<em>真值/假值</em> 条件插入或删除元素。要查看它的实际效果，请在模板底部添加以下段落：</p>\n<code-example path=\"displaying-data/src/app/app.component.ts\" linenums=\"false\" title=\"src/app/app.component.ts (message)\" region=\"message\">\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes.length &gt; 3\"&gt;There are many heroes!&lt;/p&gt;\n\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qoyqp2cew73qhsbh0760i6bg\">不要忘记 \n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 中的星号 (*)。它是语法中必不可少的一部分。在 \n<a href=\"guide/template-syntax#ngIf\">ngIf 部分</a> 的 \n<a href=\"guide/template-syntax\">模板语法</a> 页面中阅读有关 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 \n<code>*</code> 的更多信息。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmy6i6v1s0z5024cgyzeiuz52\">双引号内的模板表达式 \n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes.length &gt; 3\"</code> 看起来和行为都非常像 TypeScript。当组件的英雄列表超过三个项目时，Angular 会将段落添加到 DOM 中，并且消息会显示出来。如果只有三个或更少的项目，Angular 会省略段落，因此不会显示任何消息。有关更多信息，请参阅 \n<a href=\"guide/template-syntax#template-expressions\">模板表达式</a> 部分的 \n<a href=\"guide/template-syntax\">模板语法</a> 页面。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qm9g4uy6ouqgspdyn2xe9u6o\">Angular 不会显示和隐藏消息。它是在 DOM 中添加和删除段落元素。这会提高性能，尤其是在大型项目中，当有条件地包含或排除包含许多数据绑定的大型 HTML 块时。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5za9qig4u3wqmrzeiinqi7y9b\">试试看。由于数组有四个项目，因此应该显示消息。回到 \n<code>app.component.ts\"</code> 中，删除或注释掉英雄数组中的一个元素。浏览器应该自动刷新，并且消息应该消失。</p>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amhqklqftykuj0uvsrg7oev7f\">现在你知道了如何使用：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2h0u8ze7bevl3rzb8vpuqwlr7\">使用双花括号的 \n<strong>插值</strong> 来显示组件属性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcjbm3npeyred9rwm4jtgadts\"><strong>ngFor</strong> 来显示项目数组。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mt291mjxkkpmgj68ud1gcx5w\">TypeScript 类来塑造组件的 \n<strong>模型数据</strong> 并显示该模型的属性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cl8f23zuqgaed6vwabsf6av1x\"><strong>ngIf</strong> 根据布尔表达式有条件地显示 HTML 块。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6goz9394qj8g8hvgbpf2s77in\">这是最终代码：</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"displaying-data/src/app/app.component.ts\" region=\"final\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My favorite hero is: {{myHero.name}}&lt;/h2&gt;\n  &lt;p&gt;Heroes:&lt;/p&gt;\n  &lt;ul&gt;\n    &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n      {{ hero.name }}\n      &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes.length &gt; 3\"&gt;There are many heroes!&lt;/p&gt;\n`\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = [\n    new Hero(1, 'Windstorm'),\n    new Hero(13, 'Bombasto'),\n    new Hero(15, 'Magneta'),\n    new Hero(20, 'Tornado')\n  ];\n  myHero = this.heroes[0];\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero.ts\" path=\"displaying-data/src/app/hero.ts\">\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"displaying-data/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"main.ts\" path=\"displaying-data/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n</code-tabs>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-components\n - guide/forms\n - guide/user-input\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/NgModule\n - api/core/enableProdMode\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - guide/displaying-data#conditional-display-with-ngif\n - guide/displaying-data#constructor-or-variable-initialization\n - guide/displaying-data#creating-a-class-for-the-data\n - guide/displaying-data#displaying-data\n - guide/displaying-data#showing-an-array-property-with-ngfor\n - guide/displaying-data#showing-component-properties-with-interpolation\n - guide/displaying-data#summary\n - guide/displaying-data#template-inline-or-template-file\n - guide/displaying-data#using-the-hero-class\n - guide/quickstart\n - guide/template-syntax\n - guide/template-syntax#microsyntax\n - guide/template-syntax#ngFor\n - guide/template-syntax#ngIf\n - guide/template-syntax#template-expressions\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n-->"
}