{
  "id" : "guide/universal",
  "title" : "Angular Universal：服务器端渲染",
  "contents" : "<div class=\"content\">\n<h1 id=\"angular-universal-server-side-rendering\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bbmgwn5scxt4gj400d9t7pmp\"><i class=\"material-icons\">link</i>Angular Universal：服务器端渲染</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26l77asr9czl0horhfgal0g5n\">本指南介绍了 \n<strong>Angular Universal</strong>，这是一种在服务器上运行 Angular 应用程序的技术。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeeuyair0c1vxagby1j34dy4d\">一个普通的 Angular 应用程序在 \n<em>浏览器</em> 中执行，在响应用户操作时在 DOM 中渲染页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33rwiwipnl6d89dd6ijoxmorp\"><strong>Angular Universal</strong> 通过称为 \n<strong>服务器端渲染 (SSR)</strong> 的过程在 \n<em>服务器</em> 上生成 \n<em>静态</em> 应用程序页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bfbyxdzoha7s63s2jaxafamj\">它可以生成这些页面并响应来自浏览器的请求进行服务。 它还可以预先生成 HTML 文件形式的页面，以便你稍后提供服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81f4md4tfi0wmwe8q1tlnrppn\">本指南介绍了一个 Universal 示例应用程序，它可以快速启动为服务器渲染的页面。 同时，浏览器会下载完整的客户端版本，并在代码加载后自动切换到该版本。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dotz2h73rn5rui2mv6d3jbt1a\"><a href=\"generated/zips/universal/universal.zip\">下载完成的示例代码</a>， 它在一个 \n<a href=\"https://expressjs.com/\">node express</a> 服务器上运行。</p>\n</div>\n<a id=\"why-do-it\"></a>\n<h3 id=\"why-universal\">Why Universal</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2n9ozjqr3zlm5rcj5huqudjjn\">创建应用程序的 Universal 版本主要有三个原因。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nhqfcgkcjzqafipka3ab0v67\">方便网络爬虫（SEO）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fve04zw4w5c210cbkvvllj5h\">提高移动设备和低性能设备的性能</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yzrxugvzdi8gs9zfoyl8pizi\">快速显示第一个页面</li>\n</ol>\n<a id=\"seo\"></a>\n<a id=\"web-crawlers\"></a>\n<h4 id=\"facilitate-web-crawlers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ilwzai1kmrpcmmuq9zc8966k\"><i class=\"material-icons\">link</i>方便网络爬虫</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qyaolsxkl8pmmok90hk133xy\">Google、Bing、Facebook、Twitter 和其他社交媒体网站依赖于网络爬虫来索引你的应用程序内容，并使该内容在网络上可搜索。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nwm2dzlmwxnimh6ytr4h7b9g\">这些网络爬虫可能无法像人类用户那样导航和索引你的高度交互式 Angular 应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cslxe4nx1ilqx2s6w0mthic9v\">Angular Universal 可以生成应用程序的静态版本，该版本易于搜索、链接和导航，无需 JavaScript。 它还使网站预览可用，因为每个 URL 都返回一个完全渲染的页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xlknwy7eaw907wiu89fuoj6p\">启用网络爬虫通常被称为 \n<a href=\"https://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf\">搜索引擎优化 (SEO)</a>。</p>\n<a id=\"no-javascript\"></a>\n<h4 id=\"performance-on-mobile-and-low-performance-devices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14hfh1e1edbwox4qaszoda2uz\"><i class=\"material-icons\">link</i>移动设备和低性能设备的性能</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54zpal954425zws9pe7yzsels\">某些设备不支持 JavaScript 或执行 JavaScript 的效率很低，以至于用户体验无法接受。 对于这些情况，你可能需要应用程序的服务器渲染的无 JavaScript 版本。 这个版本虽然有限，但可能是唯一实用的替代方案，因为 否则人们根本无法使用该应用程序。</p>\n<a id=\"startup-performance\"></a>\n<h4 id=\"show-the-first-page-quickly\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yzrxugvzdi8gs9zfoyl8pizi\"><i class=\"material-icons\">link</i>快速显示第一个页面</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mt2qe1gvp5089prn1z3sm3wh\">快速显示第一个页面对于用户参与度至关重要。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f19wl2npwm8nnj2zhlk9yyd20\"><a href=\"https://www.doubleclickbygoogle.com/articles/mobile-speed-matters/\">如果页面加载时间超过 3 秒，53% 的移动网站访问会被放弃</a>。 你的应用程序可能需要更快地启动，以便在用户决定做其他事情之前吸引他们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b28fzlr8rstyfdglq4ry4z2kk\">使用 Angular Universal，你可以生成看起来像完整应用程序的应用程序登录页面。 这些页面是纯 HTML，即使禁用 JavaScript 也可以显示。 这些页面不处理浏览器事件，但它们 \n<em>确实</em> 支持使用 \n<a href=\"guide/router.html#router-link\">routerLink</a> 在网站中导航。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3w4d7jevc3j5kxz0bwvpfpcrd\">在实践中，你会提供登录页面的静态版本来吸引用户的注意力。 同时，你会在它后面加载完整的 Angular 应用程序，方式如 \n<a href=\"guide/universal#transition\">下面所述</a>。 用户会从登录页面感受到近乎即时的性能，并在完整应用程序加载后获得完整的交互式体验。</p>\n<a id=\"how-does-it-work\"></a>\n<h3 id=\"how-it-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gzj52d14rjscz4pktlc7xfw0\"><i class=\"material-icons\">link</i>工作原理</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bic987r7azih1wdfjfmgxpzp\">要创建一个 Universal 应用程序，你需要安装 \n<code>platform-server</code> 包。 \n<code>platform-server</code> 包具有 DOM、\n<code>XMLHttpRequest</code> 和其他不依赖于浏览器的低级功能的服务器实现。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aljuekt5qpt2tjjl657inca64\">你使用 \n<code>platform-server</code> 模块而不是 \n<code>platform-browser</code> 模块编译客户端应用程序。 并在 Web 服务器上运行生成的 Universal 应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c29tjhbkzkm3l68a58vs6vj04\">服务器（本指南示例中的 \n<a href=\"https://expressjs.com/\">Node Express</a> 服务器） 将客户端对应用程序页面的请求传递给 Universal 的 \n<code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a></code> 函数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qifaax32ppy44pjyn7txuwmm\"><code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a></code> 函数将 \n<em>模板</em> HTML 页面（通常是 \n<code>index.html</code>）、 包含组件的 Angular \n<em>模块</em> 和 确定要显示哪些组件的 \n<em>路由</em> 作为输入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edoba9bz1sgzm3chh0dgipdu7\">路由来自客户端对服务器的请求。 每个请求都会生成与请求路由相对应的视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89ehdxz7adenvx6b6wsa0ufms\"><code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a></code> 在模板的 \n<code>&lt;app&gt;</code> 标签内渲染该视图，为客户端创建一个完成的 HTML 页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d26f9td0v7fp3cgc4nyn1zsqt\">最后，服务器将渲染后的页面返回给客户端。</p>\n<h3 id=\"working-around-the-browser-apis\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1e669kj8tiek02olqvl3utjkb\"><i class=\"material-icons\">link</i>解决浏览器 API 问题</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19oje63lctin7gp161tjjln08\">因为 Universal \n<code>platform-server</code> 应用程序不在浏览器中执行，所以你可能需要解决服务器上缺少的一些浏览器 API 和功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5iv55rrs0d8fsrsjyh2wmmt41\">你将无法引用仅限浏览器的本机对象，例如 \n<code>window</code>、\n<code>document</code>、\n<code>navigator</code> 或 \n<code>location</code>。 如果你在服务器渲染的页面上不需要它们，请使用条件逻辑绕过它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2p06blkop65tbgdpd94nvc7qp\">或者，寻找你需要的对象的可注入 Angular 抽象，例如 \n<code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 或 \n<code>Document</code>； 它可能可以替代你调用的特定 API。 如果 Angular 没有提供它，你可能可以编写自己的抽象，在浏览器中委托给浏览器 API，而在服务器上委托给令人满意的替代实现。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24bwkia9l5otd6qy4ilb0bjty\">如果没有鼠标或键盘事件，通用应用程序就不能依赖用户单击按钮来显示组件。 通用应用程序应该仅根据传入的客户端请求来确定要渲染的内容。 这是一个让应用程序 \n<a href=\"guide/router\">可路由</a> 的好理由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gaot5k39cf17yw0zz1gnuqwm\">因为服务器渲染页面的用户除了单击链接之外不能做太多事情， 所以你应该尽快 \n<a href=\"guide/universal#transition\">替换为真正的客户端应用程序</a>，以获得适当的交互式体验。</p>\n<a id=\"the-example\"></a>\n<h2 id=\"the-example\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kftrcd5cs84360l13s0hf2zw\"><i class=\"material-icons\">link</i>示例</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uj2ijakigp8cy7i9zidtijo4\"><em>Tour of Heroes</em> 教程是本指南中描述的 Universal 示例的基础。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"140iljy22eikjjc36ho9htqyn\">核心应用程序文件大部分保持不变，但有一些例外，将在下面介绍。 你将添加更多文件来支持使用 Universal 进行构建和服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yfilyjl4c7casp4qf2i8go1k\">在本示例中，Angular CLI 使用 \n<a href=\"guide/aot-compiler\">AOT（预先编译）编译器</a> 编译和捆绑应用程序的 Universal 版本。 一个 node/express Web 服务器将客户端请求转换为 Universal 渲染的 HTML 页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25nsjn5e4a12n2cbi44gvrzv5\">你将创建：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6u19rdcgarch4j7en6m2h59m\">一个服务器端应用程序模块，\n<code>app.server.module.ts</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zkjee4l6j786odjtt1c90p63\">一个服务器端的入口点，\n<code>main.server.ts</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ttwwq852k2hflofo0zem003z\">一个用于处理请求的 express Web 服务器，\n<code>server.ts</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csrldb2uqi4ucruunoghjraxa\">一个 TypeScript 配置文件，\n<code>tsconfig.server.json</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17lzwvqvulkfzblscjsxtbl4l\">一个用于服务器的 Webpack 配置文件，\n<code>webpack.server.config.js</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtvngmlf2t15n93d8kk9mv8j8\">完成后，文件夹结构将如下所示：</p>\n<code-example format=\".\" language=\"none\" linenums=\"false\">\nsrc/\n  index.html                 <i>app web page</i>\n  main.ts                    <i>bootstrapper for client app</i>\n  main.server.ts             <i>* bootstrapper for server app</i>\n  tsconfig.app.json          <i>TypeScript client configuration</i>\n  tsconfig.server.json       <i>* TypeScript server configuration</i>\n  tsconfig.spec.json         <i>TypeScript spec configuration</i>\n  style.css                  <i>styles for the app</i>\n  app/ ...                   <i>application code</i>\n    app.server.module.ts     <i>* server-side application module</i>\nserver.ts                    <i>* express web server</i>\ntsconfig.json                <i>TypeScript client configuration</i>\npackage.json                 <i>npm configuration</i>\nwebpack.server.config.js     <i>* Webpack server configuration</i>\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7ciknniyus7vaqhblzriv6ok\">标有 \n<code>*</code> 的文件是新增的，不在原始教程示例中。本指南将在以下部分介绍这些文件。</p>\n<a id=\"preparation\"></a>\n<h2 id=\"preparation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"950c8mg85fl94yevwp15mppan\"><i class=\"material-icons\">link</i>准备工作</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33vwg7mc588ryurz4z5gk533x\">下载 \n<a href=\"generated/zips/toh-pt6/toh-pt6.zip\">英雄之旅</a> 项目并安装其依赖项。</p>\n<a id=\"install-the-tools\"></a>\n<h3 id=\"install-the-tools\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vsrth34a8i87bgtp271nrcvy\"><i class=\"material-icons\">link</i>安装工具</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nngz0r4q7e5gehvdfcgnb105\">首先，安装这些包。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y43gcshkejwehpffaepubux1\"><code>@angular/platform-server</code> - Universal 服务器端组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qnl073iikfvmol6p2ow4ymlg\"><code>@nguniversal/module-map-ngfactory-loader</code> — 用于处理服务器渲染环境下的惰性加载。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8umgnqnqyizsstn2ao49i9l25\"><code>@nguniversal/express-engine</code> — 用于 Universal 应用的 Express 引擎。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crktkkpx154gsch1j3u6zts6j\"><code>ts-loader</code> - 用于编译服务器应用程序</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2q3q0ksz3fhiuih09rlva5lv\">使用以下命令安装它们：</p>\n<code-example format=\".\" language=\"bash\">\nnpm install --save @angular/platform-server @nguniversal/module-map-ngfactory-loader ts-loader @nguniversal/express-engine\n</code-example>\n<a id=\"transition\"></a>\n<h3 id=\"modify-the-client-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecfiq1ggizdtecoa717xjo91\"><i class=\"material-icons\">link</i>修改客户端应用</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c76p4h2b5zrvj8xz1ho8ntb8a\">通用应用可以充当一个动态的、内容丰富的“启动画面”，吸引用户。它给人的感觉是应用程序几乎是瞬间启动的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qxgmpwlca03hn0rgq2i6oyr2\">与此同时，浏览器在后台下载客户端应用脚本。脚本加载完成后，Angular 会从静态服务器渲染的页面过渡到交互式客户端应用的动态渲染视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fj30vh39m3p6x7inl7lqc7rb\">你需要对你的应用代码进行一些修改，以支持服务器端渲染和向客户端应用的过渡。</p>\n<h4 id=\"the-root-appmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hed31snjg8mbyld8mkkvyika\"><i class=\"material-icons\">link</i>根 \n<code>AppModule</code></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91yzppsltcatwkpuwe925l52k\">打开 \n<code>src/app/app.module.ts</code> 文件，找到 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 导入，它位于 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据中。用以下导入替换它：</p>\n<code-example path=\"universal/src/app/app.module.ts\" region=\"browsermodule\" title=\"src/app/app.module.ts (withServerTransition)\">\nBrowserModule.withServerTransition({ appId: 'tour-of-heroes' }),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed5859e2z5d7zitl0oznwoa8p\">Angular 会将 \n<code>appId</code> 值（可以是\n<em>任何</em>字符串）添加到服务器渲染页面的样式名称中，以便在客户端应用启动时识别并移除这些样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47vtphhbj0wb1duih5ktghpq2\">你可以通过注入来获取有关当前平台和 \n<code>appId</code> 的运行时信息。</p>\n<code-example path=\"universal/src/app/app.module.ts\" region=\"platform-detection\" title=\"src/app/app.module.ts (platform detection)\">\nimport { <a href=\"api/core/PLATFORM_ID\" class=\"code-anchor\">PLATFORM_ID</a>, <a href=\"api/core/APP_ID\" class=\"code-anchor\">APP_ID</a>, <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> } from '@angular/core';\nimport { <a href=\"api/common/isPlatformBrowser\" class=\"code-anchor\">isPlatformBrowser</a> } from '@angular/common';\n\n  constructor(\n    @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/core/PLATFORM_ID\" class=\"code-anchor\">PLATFORM_ID</a>) private platformId: Object,\n    @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/core/APP_ID\" class=\"code-anchor\">APP_ID</a>) private appId: string) {\n    const platform = <a href=\"api/common/isPlatformBrowser\" class=\"code-anchor\">isPlatformBrowser</a>(platformId) ?\n      'in the <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>' : 'on the server';\n    console.log(`Running ${platform} with appId=${appId}`);\n  }\n\n</code-example>\n<a id=\"http-urls\"></a>\n<h4 id=\"absolute-http-urls\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2i20enkszxxfoiefh0orwok6\"><i class=\"material-icons\">link</i>绝对 HTTP URL</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85ggqjojmtmn5xocoqtpw5wur\">本教程的 \n<code>HeroService</code> 和 \n<code>HeroSearchService</code> 委托给 Angular 的 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 模块来获取应用程序数据。 这些服务向\n<em>相对</em> URL（例如 \n<code>api/heroes</code>）发送请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bx4kete8g62kmqrxq5kpjsfo\">在 Universal 应用中，HTTP URL 必须是\n<em>绝对</em>的，例如 \n<code>https://my-server.com/api/heroes</code>，即使 Universal 网页服务器能够处理这些请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pe7xru7yh50j6e6fi4lvoajf\">你需要修改服务，以便在服务器上运行时使用绝对 URL，在浏览器中运行时使用相对 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hcpyvjd1ri92c9t7ft4lnt71\">一种解决方案是在 Angular 的 \n<a href=\"api/common/APP_BASE_HREF\"><code>APP_BASE_HREF</code> 令牌</a> 下提供服务器的运行时来源，将其注入到服务中，并将来源添加到请求 URL 的开头。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lxofkymtupfz9fvh1q54m0am\">首先，修改 \n<code>HeroService</code> 构造函数，使其接受第二个 \n<code>origin</code> 参数，该参数可通过 \n<code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> 令牌进行可选注入。</p>\n<code-example path=\"universal/src/app/hero.service.ts\" region=\"ctor\" title=\"src/app/hero.service.ts (constructor with optional origin)\">\nconstructor(\n  private http: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n  private messageService: MessageService,\n  @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a>) origin: string) {\n    this.heroesUrl = `${origin}${this.heroesUrl}`;\n  }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"engjpxf3i0qqfvcey1tv9wnqk\">注意构造函数如何将来源（如果存在）添加到 \n<code>heroesUrl</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5tkn92pdo60atdus46ckj2av\">你在浏览器版本中没有提供 \n<code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code>，因此 \n<code>heroesUrl</code> 仍然是相对路径。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9owwxeo4n3hs2id95zrqsb1tc\">如果你在 \n<code>index.html</code> 中指定了 \n<code>&lt;base href=\"/\"&gt;</code> 来满足路由对基本地址的需求（就像教程示例那样），那么你就可以忽略浏览器中的 \n<code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code>。</p>\n</div>\n<a id=\"server-code\"></a>\n<h2 id=\"server-code\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfiinclqhw4o2x58q1urr3niq\"><i class=\"material-icons\">link</i>服务器代码</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z9zfk3li8vapd2we5agbtm6o\">要运行 Angular Universal 应用，你需要一个服务器来接收客户端请求并返回渲染后的页面。</p>\n<a id=\"app-server-module\"></a>\n<h3 id=\"app-server-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1aemxha466pg2jgqdw6gijue5\"><i class=\"material-icons\">link</i>应用服务器模块</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4s0ekni9rbaaufkhe2n4z0y3\">应用服务器模块类（通常命名为 \n<code>AppServerModule</code>）是一个 Angular 模块，它包装了应用程序的根模块（\n<code>AppModule</code>），以便 Universal 可以在你的应用程序和服务器之间进行协调。 \n<code>AppServerModule</code> 还告诉 Angular 如何在运行为 Universal 应用时引导你的应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1n0qb0fsiv7sce6ns8mk67uj1\">在 \n<code>src/app/</code> 目录中创建一个名为 \n<code>app.server.module.ts</code> 的文件，并在其中添加以下 \n<code>AppServerModule</code> 代码：</p>\n<code-example path=\"universal/src/app/app.server.module.ts\" title=\"src/app/app.server.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-server/ServerModule\" class=\"code-anchor\">ServerModule</a> } from '@angular/platform-server';\nimport { ModuleMapLoaderModule } from '@nguniversal/module-map-ngfactory-loader';\n\nimport { AppModule } from './app.module';\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    AppModule,\n    <a href=\"api/platform-server/ServerModule\" class=\"code-anchor\">ServerModule</a>,\n    ModuleMapLoaderModule\n  ],\n  providers: [\n    // Add universal-only providers here\n  ],\n  bootstrap: [ AppComponent ],\n})\nexport class AppServerModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kel1r7vpihox4zmiouhokvh4\">注意，它首先导入客户端应用的 \n<code>AppModule</code>、Angular Universal 的 \n<code><a href=\"api/platform-server/ServerModule\" class=\"code-anchor\">ServerModule</a></code> 和 \n<code>ModuleMapLoaderModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tvebq23qqv845isy2biwztcs\"><code>ModuleMapLoaderModule</code> 是一个服务器端模块，允许惰性加载路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnxdchonvxj4tkcib5cfgsmri\">这也是注册特定于在 Universal 下运行你的应用的提供者的位置。</p>\n<a id=\"web-server\"></a>\n<h3 id=\"universal-web-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20csjz39r36kf8zg328iv0eze\"><i class=\"material-icons\">link</i>通用 Web 服务器</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8obf33ilusk14x587pk3xbv5i\">一个 \n<em>Universal</em> 网页服务器使用由 \n<a href=\"guide/universal#universal-engine\">Universal 模板引擎</a> 渲染的静态 HTML 来响应应用程序 \n<em>页面</em> 请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arg4rmt0dnm6ol51lzpprc2ge\">它接收来自客户端（通常是浏览器）的 HTTP 请求并做出响应。 它提供静态资源，例如脚本、CSS 和图像。 它可能响应数据请求，可能是直接响应，也可能是作为代理转发到单独的数据服务器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qweb5s2c43x34m4g9mm8576v\">本指南的示例 Web 服务器基于流行的 \n<a href=\"https://expressjs.com/\">Express</a> 框架。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rhhme4apmbfl2m5hkrrxu8bx\">只要能够调用 Universal 的 \n<code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a></code>，任何 Web 服务器技术都可以提供 Universal 应用。 以下讨论的原则和决策点适用于你选择的任何 Web 服务器技术。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blxwtq7t4fjxq1m7ozph3cm0e\">在根目录下创建一个名为 \n<code>server.ts</code> 的文件，并添加以下代码：</p>\n<code-example path=\"universal/server.ts\" title=\"server.ts\">\n// These are important and needed before anything else\nimport 'zone.js/dist/zone-node';\nimport 'reflect-metadata';\n\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\n\nimport * as express from 'express';\nimport { join } from 'path';\n\n// Faster server renders w/ Prod mode (dev mode never needed)\n<a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n\n// Express server\nconst app = express();\n\nconst PORT = process.env.PORT || 4000;\nconst DIST_FOLDER = join(process.cwd(), 'dist');\n\n// * NOTE :: leave this as require() since this file is built Dynamically from webpack\nconst { AppServerModuleNgFactory, LAZY_MODULE_MAP } = require('./dist/server/main.bundle');\n\n// Express Engine\nimport { ngExpressEngine } from '@nguniversal/express-engine';\n// Import module map for lazy loading\nimport { provideModuleMap } from '@nguniversal/module-map-ngfactory-loader';\n\napp.engine('html', ngExpressEngine({\n  bootstrap: AppServerModuleNgFactory,\n  providers: [\n    provideModuleMap(LAZY_MODULE_MAP)\n  ]\n}));\n\napp.set('view engine', 'html');\napp.set('views', join(DIST_FOLDER, '<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>'));\n\n// TODO: implement data requests securely\napp.get('/api/*', (req, res) =&gt; {\n  res.status(404).send('data requests are not supported');\n});\n\n// Server <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> files from /<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>\napp.get('*.*', express.static(join(DIST_FOLDER, '<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>')));\n\n// All regular routes use the Universal engine\napp.get('*', (req, res) =&gt; {\n  res.render(join(DIST_FOLDER, '<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>', 'index.html'), { req });\n});\n\n// Start up the Node server\napp.listen(PORT, () =&gt; {\n  console.log(`Node server listening on http://localhost:${PORT}`);\n});\n\n\n</code-example>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5levi9kcp8f6u89y734y0gewi\"><strong>此示例服务器不安全！</strong> 请务必添加中间件来验证和授权用户，就像你为普通 Angular 应用服务器所做的那样。</p>\n</div>\n<a id=\"universal-engine\"></a>\n<h4 id=\"universal-template-engine\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1g0r85qk68t5jdmeqm4jekj1y\"><i class=\"material-icons\">link</i>通用模板引擎</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3783um32gia531zfa15yhovum\">此文件中的重要部分是 \n<code>ngExpressEngine</code> 函数：</p>\n<code-example path=\"universal/server.ts\" title=\"server.ts\" region=\"ngExpressEngine\">\napp.engine('html', ngExpressEngine({\n  bootstrap: AppServerModuleNgFactory,\n  providers: [\n    provideModuleMap(LAZY_MODULE_MAP)\n  ]\n}));\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ye6vbdx02tc1k04vrf6vp3s\"><code>ngExpressEngine</code> 是对 universal 的 \n<code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a></code> 函数的包装器，它将客户端的请求转换为服务器渲染的 HTML 页面。 你将在适合你的服务器栈的\n<em>模板引擎</em>中调用此函数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lhp2tnxmbuh23mzdcht39cxd\">第一个参数是你之前编写的 \n<code>AppServerModule</code>（\n<a href=\"guide/universal#app-server-module\">参见此处</a>）。它是 Universal 服务器端渲染器与你的应用程序之间的桥梁。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87wbxc6bq7kimag3iigyrhvyo\">第二个参数是 \n<code>extraProviders</code>。它是一个可选的 Angular 依赖注入提供者，在该服务器上运行时适用。</p>\n<a id=\"provide-origin\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bmsl5wsq9ye2j19a9au6kpa1\">当你的应用需要只能由当前运行的服务器实例确定的信息时，你需要提供 \n<code>extraProviders</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhiazsslizv42714p8uvwg3hn\">在这种情况下，所需的信息是正在运行的服务器的来源，它在 \n<code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> 令牌下提供，以便应用可以 \n<a href=\"guide/universal#http-urls\">计算绝对 HTTP URL</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4odbhj55zq02ntuqd6p6ole1r\"><code>ngExpressEngine</code> 函数返回一个 \n<em>promise</em>，它求解为渲染后的页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agfxhp51i87j2oepxkijiryqt\">由你的引擎决定如何处理该页面。 \n<em>此引擎的</em> promise 回调将渲染后的页面返回给 \n<a href=\"guide/universal#web-server\">Web 服务器</a>， 然后 Web 服务器将其转发到 HTTP 响应中的客户端。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acglqwtothrfqg9mkgdi5t9t\">这些包装器非常有用，可以隐藏 \n<code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a></code> 的复杂性。在 \n<a href=\"https://github.com/angular/universal\">Universal 仓库</a> 中有更多针对不同后端技术的包装器。</p>\n</div>\n<h4 id=\"filter-request-urls\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etjt5jl9anlu0f3td8e79ilsb\"><i class=\"material-icons\">link</i>过滤请求 URL</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92j104xfnhesnwffcoukg0uzi\">Web 服务器必须区分 \n<em>应用页面请求</em> 和其他类型的请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40zeclm8lftyozmppmku4jex\">这并不像拦截对根地址 \n<code>/</code> 的请求那样简单。 浏览器可能会请求应用路由中的一个，例如 \n<code>/dashboard</code>、\n<code>/heroes</code> 或 \n<code>/detail:12</code>。 事实上，如果应用 \n<em>仅</em> 由服务器渲染，则点击的 \n<em>每个</em> 应用链接都会到达服务器， 作为用于路由器的导航 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anrsofy9f5wfdhlfbrevv3j7c\">幸运的是，应用路由有一些共同点：它们的 URL 缺少文件扩展名。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c258jma2uohbmd46n7fxlfiqu\">数据请求也缺少扩展名，但它们很容易识别，因为它们总是以 \n<code>/api</code> 开头。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ls57rxtupbyvmgn4td59t2yk\">所有静态资产请求都有文件扩展名（例如，\n<code>main.js</code> 或 \n<code>/node_modules/zone.js/dist/zone.js</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83x7gyahfc3fko4ajkhn8pe6l\">因此，我们可以轻松识别三种类型的请求并以不同的方式处理它们。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbdycuyy3t6da5q3tfcw01jtl\">数据请求 - 以 \n<code>/api</code> 开头的请求 URL</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6junil7fa0n371jcimy0luzov\">应用导航 - 没有文件扩展名的请求 URL</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1b5anjq48pvqoyixolaat04wc\">静态资产 - 所有其他请求。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ffh7anpje5f1qb6ijcheux1g\">Express 服务器是一个中间件管道，它按顺序过滤和处理 URL 请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zx5k92vmfv2muzjusz308izo\">你可以使用对 \n<code>app.get()</code> 的调用来配置 Express 服务器管道，例如针对数据请求的调用。</p>\n<code-example path=\"universal/server.ts\" title=\"server.ts (data URL)\" region=\"data-request\" linenums=\"false\">\n// TODO: implement data requests securely\napp.get('/api/*', (req, res) =&gt; {\n  res.status(404).send('data requests are not supported');\n});\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aedyk1ao5zeq8zvz6c1d9rnkg\">此示例服务器不处理数据请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnkjx7ovcg2tlwq47a4xuccru\">本教程的“内存中 Web API”模块（一个演示和开发工具）拦截所有 HTTP 调用， 并模拟远程数据服务器的行为。 在实践中，你将删除该模块，并在服务器上注册你的 Web API 中间件。</p>\n</div>\n<div class=\"alert is-critical\">\n<p><strong data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qy9is7n0yrhf03k2m2wqrc56\">Universal HTTP 请求具有不同的安全要求</strong></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dh701wwoezx53n1p9cnie31yh\">从浏览器应用发出的 HTTP 请求与从服务器上的 Universal 应用发出的 HTTP 请求不同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfg94weqbp1pb1txxj41k62hw\">当浏览器发出 HTTP 请求时，服务器可以对 cookie、XSRF 标头等做出假设。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47tlh88oe54g0wpnin8sujist\">例如，浏览器会自动发送当前用户的身份验证 cookie。 Angular Universal 无法将这些凭据转发到单独的数据服务器。 如果你的服务器处理 HTTP 请求，则必须添加你自己的安全管道。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d38pxtt1e1e9xt3y56k15hvuw\">以下代码过滤没有扩展名的请求 URL，并将它们视为导航请求。</p>\n<code-example path=\"universal/server.ts\" title=\"server.ts (navigation)\" region=\"navigation-request\" linenums=\"false\">\n// All regular routes use the Universal engine\napp.get('*', (req, res) =&gt; {\n  res.render(join(DIST_FOLDER, '<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>', 'index.html'), { req });\n});\n\n</code-example>\n<h4 id=\"serve-static-files-safely\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"et5vakta1c3kuo9f121ta1nxf\"><i class=\"material-icons\">link</i>安全地提供静态文件</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89c60s1j9rzk3gvgf9zybe0la\">单个 \n<code>app.use()</code> 将所有其他 URL 视为对静态资产的请求， 例如 JavaScript、图像和样式文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9t4y3cu6ghp2kh6jg5pzuh5se\">为了确保客户端只能下载他们 \n<em>被允许</em> 查看的文件，你将 \n<a href=\"guide/universal#universal-webpack-configuration\">将所有面向客户端的资产文件放在 <code>/dist</code> 文件夹中</a>， 并且只接受对 \n<code>/dist</code> 文件夹中文件的请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alyct2nbaecjpjm8qd9n6x0z2\">以下 Express 代码将所有剩余的请求路由到 \n<code>/dist</code>；如果找不到文件，它将返回 \n<code>404 - NOT FOUND</code>。</p>\n<code-example path=\"universal/server.ts\" title=\"server.ts (static files)\" region=\"static\" linenums=\"false\">\n// Server <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> files from /<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>\napp.get('*.*', express.static(join(DIST_FOLDER, '<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>')));\n\n</code-example>\n<a id=\"universal-configuration\"></a>\n<h2 id=\"configure-for-universal\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efp2xg3p38u58jzb1uxbivscb\"><i class=\"material-icons\">link</i>为 Universal 配置</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ha5ob1sgxz3154k34ucq4p0y\">服务器应用程序需要它自己的构建配置。</p>\n<a id=\"universal-typescript-configuration\"></a>\n<h3 id=\"universal-typescript-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpxgkhl51oa40xzd1nllrn36c\"><i class=\"material-icons\">link</i>Universal TypeScript 配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1qg3ndwzkv0lmagpdh8pvw9l\">在项目根目录中创建一个 \n<code>tsconfig.server.json</code> 文件，以配置 TypeScript 和 Universal 应用的 AOT 编译。</p>\n<code-example path=\"universal/src/tsconfig.server.json\" title=\"src/tsconfig.server.json\">\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../out-tsc/app\",\n    \"baseUrl\": \"./\",\n    \"module\": \"commonjs\",\n    \"types\": []\n  },\n  \"exclude\": [\n    \"test.ts\",\n    \"**/*.spec.ts\"\n  ],\n  \"angularCompilerOptions\": {\n    \"entryModule\": \"app/app.server.module#AppServerModule\"\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqrnfls767u2hq1ac6zpv31kx\">此配置从根目录的 \n<code>tsconfig.json</code> 文件扩展而来。某些设置因其差异而值得注意。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eakgsb50jadq0g0nz7aqqyj19\"><code>module</code> 属性必须为 \n<strong>commonjs</strong>，它可以被我们的服务器应用程序引入。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12gk6x9pv0fyaqcrcnjxk3sq4\"><code>angularCompilerOptions</code> 部分指导 AOT 编译器：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8w4ieuoogfowmerf170ye27o5\"><code>entryModule</code> - 服务器应用程序的根模块，表示为 \n<code>path/to/file#ClassName</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"universal-webpack-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"853k5dbzyym7jivhoovfoui29\"><i class=\"material-icons\">link</i>Universal Webpack 配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qirmn19etan39ddvalohp5ah\">Universal 应用程序不需要任何额外的 Webpack 配置，CLI 会为你处理， 但由于服务器是一个 TypeScript 应用程序，你将使用 Webpack 来转译它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wfa9peax1h8um8sjkf7t21eg\">在项目根目录中创建一个 \n<code>webpack.server.config.js</code> 文件，其中包含以下代码。</p>\n<code-example path=\"universal/webpack.server.config.js\" title=\"webpack.server.config.js\">\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: { server: './server.ts' },\n  resolve: { extensions: ['.js', '.ts'] },\n  target: 'node',\n  // this makes sure we include node_modules and other 3rd party libraries\n  externals: [/(node_modules|main\\..*\\.js)/],\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name].js'\n  },\n  module: {\n    rules: [{ test: /\\.ts$/, loader: 'ts-loader' }]\n  },\n  plugins: [\n    // Temporary Fix for issue: https://github.com/angular/angular/issues/11580\n    // for 'WARNING Critical dependency: the request of <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> dependency is an expression'\n    new webpack.ContextReplacementPlugin(\n      /(.+)?angular(\\\\|\\/)core(.+)?/,\n      path.join(__dirname, 'src'), // location of your src\n      {} // <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> map of your routes\n    ),\n    new webpack.ContextReplacementPlugin(\n      /(.+)?express(\\\\|\\/)(.+)?/,\n      path.join(__dirname, 'src'),\n      {}\n    )\n  ]\n};\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8hhgs7ww95kk3yrnxnhnungs\"><strong>Webpack 配置</strong>是一个丰富的主题，超出了本指南的范围。</p>\n<h2 id=\"build-and-run-with-universal\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekyv21qxtvdmhq8nea81sfty9\"><i class=\"material-icons\">link</i>使用 Universal 构建和运行</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ei4wo7e8jwvoinnc730mwoxb2\">现在你已经创建了 TypeScript 和 Webpack 配置文件，你可以构建和运行 Universal 应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9br9rao5v9mjqrktq1vkv2nb6\">首先将 \n<em>build</em> 和 \n<em>serve</em> 命令添加到 \n<code>package.json</code> 的 \n<code>scripts</code> 部分：</p>\n<code-example format=\".\" language=\"ts\">\n\"scripts\": {\n    ...\n    \"build:universal\": \"npm run build:client-and-server-bundles &amp;&amp; npm run webpack:server\",\n    \"serve:universal\": \"node dist/server.js\",\n    \"build:client-and-server-bundles\": \"ng build --prod &amp;&amp; ng build --prod --app 1 --output-hashing=false\",\n    \"webpack:server\": \"webpack --config webpack.server.config.js --progress --colors\"\n    ...\n}\n</code-example>\n<a id=\"build\"></a>\n<h4 id=\"build\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsrct0ap6zzo4pz8hl7bxa7yo\"><i class=\"material-icons\">link</i>构建</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ktotri6na060oroh5w8tz3kg\">从命令提示符中，键入</p>\n<code-example format=\".\" language=\"bash\">\nnpm run build:universal\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b826gn8t3my1fzvv87cprai65\">Angular CLI 将 Universal 应用编译并捆绑到两个不同的文件夹中，\n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 和 \n<code>server</code>。 Webpack 将 \n<code>server.ts</code> 文件转译为 Javascript。</p>\n<a id=\"serve\"></a>\n<h4 id=\"serve\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5ytb8vaq6j2qkd9gehse5yws\"><i class=\"material-icons\">link</i>提供服务</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j7nsbknzsaof0qrc7vbqtbrj\">构建应用程序后，启动服务器。</p>\n<code-example format=\".\" language=\"bash\">\nnpm run serve:universal\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k4wdtns62jv00w4nrr78vtge\">控制台窗口应该显示</p>\n<code-example format=\".\" language=\"bash\">\nNode server listening on http://localhost:4000\n</code-example>\n<h2 id=\"universal-in-action\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"db5wbhs4n2j2hn8w72uepdhq8\"><i class=\"material-icons\">link</i>Universal 在行动</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qwnrerb40fjtxj617q44h3nt\">打开浏览器访问 \n<a href=\"http://localhost:4000/\">http://localhost:4000/</a>。你应该会看到熟悉的 Tour of Heroes 仪表盘页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"br78sb1j945ij8iylyx6n69b2\">通过 \n<code>routerLinks</code> 进行导航正常工作。你可以从仪表盘页面导航到英雄页面，再返回。你可以在仪表盘页面点击某个英雄，以显示其详情页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ufiyw5l4hp9btdii1dbresng\">但是点击、鼠标移动和键盘输入都无效。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5m9rmwz141gljr4luq9nyobl9\">点击英雄页面上的某个英雄没有任何反应。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btoen9retl11tlpx5n3rnl09c\">你无法添加或删除英雄。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cikxli0q67ufuucse26inf2xj\">仪表盘页面上的搜索框被忽略。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mqz0vgzpliajzm9gt3foq5mw\">详情页面上的 \n<em>返回</em> 和 \n<em>保存</em> 按钮不起作用。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28ik2x6magflmzzn3rmn3kqxy\">除了 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 点击之外，其他用户事件不受支持。用户必须等待完整的客户端应用到达。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xakd5t17jr2pmmacgu5djiax\">它永远不会到达，除非你编译客户端应用并将输出移动到 \n<code>dist/</code> 文件夹中，这是你将在稍后进行的一步。</p>\n<h2 id=\"throttling\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wn8zutdgpe79kh4ujle952fj\"><i class=\"material-icons\">link</i>节流</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8to6qix9m6m0c4j7u0dqf9zm9\">从服务器渲染的应用到客户端应用的过渡在开发机器上很快。你可以模拟一个较慢的网络，以便更清楚地看到过渡过程，并更好地了解在低功耗、连接不良的设备上运行的通用应用的启动速度优势。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e06w51eyfunjxc8nr40n550fk\">打开 Chrome 开发者工具，然后转到 Network 选项卡。找到菜单栏最右侧的 \n<a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling\">Network Throttling</a> 下拉菜单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ca6ufzp4bjgyd9hfi7cp22gen\">尝试使用其中一个 \"3G\" 速度。服务器渲染的应用仍然可以快速启动，但完整的客户端应用可能需要几秒钟才能加载。</p>\n<a id=\"summary\"></a>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2q0g352su1gbnqlu88cajb5g9\">本指南向你展示了如何将现有的 Angular 应用转换为进行服务器端渲染的通用应用。它还解释了进行此操作的一些关键原因。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nhqfcgkcjzqafipka3ab0v67\">方便网络爬虫（SEO）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xzhv636tm64nkqajplq3b6xf\">支持低带宽或低功耗设备</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qjmyn7w6uobmangz3xab5ioj\">快速首屏加载</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5m74cda477b89geyhvya3juo\">Angular Universal 可以极大地提高应用的感知启动性能。网络越慢，使用 Universal 向用户显示首屏就越有利。</p>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-next-steps\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/common/APP_BASE_HREF\n - api/common/Location\n - api/common/http/HttpClient\n - api/common/isPlatformBrowser\n - api/core/APP_ID\n - api/core/Inject\n - api/core/NgModule\n - api/core/Optional\n - api/core/PLATFORM_ID\n - api/core/enableProdMode\n - api/platform-browser/BrowserModule\n - api/platform-server/ServerModule\n - api/platform-server/renderModuleFactory\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - api/upgrade/static\n - generated/zips/toh-pt6/toh-pt6.zip\n - generated/zips/universal/universal.zip\n - guide/aot-compiler\n - guide/router\n - guide/router.html#router-link\n - guide/universal#absolute-http-urls\n - guide/universal#angular-universal-server-side-rendering\n - guide/universal#app-server-module\n - guide/universal#build\n - guide/universal#build-and-run-with-universal\n - guide/universal#configure-for-universal\n - guide/universal#facilitate-web-crawlers\n - guide/universal#filter-request-urls\n - guide/universal#how-it-works\n - guide/universal#http-urls\n - guide/universal#install-the-tools\n - guide/universal#modify-the-client-app\n - guide/universal#performance-on-mobile-and-low-performance-devices\n - guide/universal#preparation\n - guide/universal#serve\n - guide/universal#serve-static-files-safely\n - guide/universal#server-code\n - guide/universal#show-the-first-page-quickly\n - guide/universal#summary\n - guide/universal#the-example\n - guide/universal#the-root-appmodule\n - guide/universal#throttling\n - guide/universal#transition\n - guide/universal#universal-engine\n - guide/universal#universal-in-action\n - guide/universal#universal-template-engine\n - guide/universal#universal-typescript-configuration\n - guide/universal#universal-web-server\n - guide/universal#universal-webpack-configuration\n - guide/universal#web-server\n - guide/universal#why-universal\n - guide/universal#working-around-the-browser-apis\n - http://localhost:4000/\n - https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling\n - https://expressjs.com/\n - https://github.com/angular/universal\n - https://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf\n - https://www.doubleclickbygoogle.com/articles/mobile-speed-matters/\n-->"
}