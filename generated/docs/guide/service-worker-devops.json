{
  "id" : "guide/service-worker-devops",
  "title" : "生产环境中的服务工作者",
  "contents" : "<div class=\"content\">\n<h1 id=\"service-worker-in-production\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsw3a3w4jwe2a12gg6enp7uxj\"><i class=\"material-icons\">link</i>生产环境中的服务工作者</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i4lp7bxxdw4nzbj5sdqm619w\">此页面是有关部署和支持使用 Angular 服务工作者的生产应用程序的参考。它解释了 Angular 服务工作者如何融入更大的生产环境，服务工作者在各种条件下的行为以及可用的资源和故障保护。</p>\n<h4 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\"><i class=\"material-icons\">link</i>先决条件</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xq8keqzpcinu80uje7xu3rbf\">对以下内容的基本了解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7khjuuf2x445mxabilz4svpn\"><a href=\"guide/service-worker-communications\">服务工作者通信</a>。</li>\n</ul>\n<hr>\n<h2 id=\"service-worker-and-caching-of-app-resources\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7jsg252uz6zqcda8ku49ceyi\"><i class=\"material-icons\">link</i>服务工作者和应用程序资源的缓存</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ba1sal3mr6uudfwc0bxxy582\">从概念上讲，你可以将 Angular 服务工作者想象成一个转发缓存或一个安装在最终用户 Web 浏览器中的 CDN 边缘。服务工作者的工作是满足 Angular 应用程序对资源或数据的请求，这些请求来自本地缓存，而无需等待网络。与任何缓存一样，它也有一些关于如何过期和更新内容的规则。</p>\n<a id=\"versions\"></a>\n<h3 id=\"app-versions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o1qnse0al8anhke3zkrs6uvb\"><i class=\"material-icons\">link</i>应用程序版本</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73bduu139m1dx3pzub1ljotyx\">在 Angular 服务工作者的上下文中，“版本”是代表 Angular 应用程序的特定构建的一组资源。每当部署应用程序的新构建时，服务工作者都会将该构建视为应用程序的新版本。即使只更新了一个文件，也是如此。在任何给定时间，服务工作者可能在其缓存中有多个版本的应用程序，并且可能同时提供这些版本。有关更多信息，请参阅下面的 \n<a href=\"guide/service-worker-devops#tabs\">应用程序选项卡</a> 部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqxyf2nzeoqf8jdcxrl6d0uaa\">为了维护应用程序的完整性，Angular 服务工作者将所有文件一起分组到一个版本中。分组到一个版本中的文件通常包括 HTML、JS 和 CSS 文件。这些文件的分组对于完整性至关重要，因为 HTML、JS 和 CSS 文件经常相互引用并依赖于特定内容。例如，\n<code>index.html</code> 文件可能有一个 \n<code>&lt;script&gt;</code> 标签，该标签引用 \n<code>bundle.js</code>，并且它可能尝试从该脚本中调用函数 \n<code>startApp()</code>。每当提供此版本的 \n<code>index.html</code> 时，必须与之一起提供相应的 \n<code>bundle.js</code>。例如，假设在两个文件中都将 \n<code>startApp()</code> 函数重命名为 \n<code>runApp()</code>。在这种情况下，提供调用 \n<code>startApp()</code> 的旧 \n<code>index.html</code> 以及定义 \n<code>runApp()</code> 的新捆绑包是不合法的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cpnf22pv1n66q30993b7lsm0\">此文件完整性在惰性加载模块时尤其重要。 JS 捆绑包可能引用许多惰性块，并且惰性块的文件名对于应用程序的特定构建是唯一的。如果版本为 \n<code>X</code> 的正在运行的应用程序尝试加载惰性块，但服务器已更新到版本 \n<code>X + 1</code>，则惰性加载操作将失败。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71yauk0fepv7f4hs5j8hg6kjq\">应用程序的版本标识符由所有资源的内容决定，如果其中任何一个发生更改，它也会发生更改。实际上，版本由 \n<code>ngsw.json</code> 文件的内容决定，该文件包含所有已知内容的哈希值。如果任何缓存文件发生更改，该文件在 \n<code>ngsw.json</code> 中的哈希值将发生更改，导致 Angular 服务工作者将活动文件集视为新版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2i0k0vyzo5x9ww8xsogcarp6g\">通过 Angular 服务工作者的版本控制行为，应用程序服务器可以确保 Angular 应用程序始终具有一致的文件集。</p>\n<h4 id=\"update-checks\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"amysa1zxmz0ft7ifyf5l96ut3\"><i class=\"material-icons\">link</i>更新检测</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5f3907a8qzqlr3m0ce5ane19\">每当用户打开或刷新应用程序时，Angular 服务工作者都会通过查找 \n<code>ngsw.json</code> 清单的更新来检查应用程序的更新。如果找到更新，它将自动下载并缓存，并在下次加载应用程序时提供。</p>\n<h3 id=\"resource-integrity\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37obfigzne4rvau7emo7yv3um\"><i class=\"material-icons\">link</i>资源完整性</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6h92v1yljae56dw9irjdfnln\">长时间缓存的潜在副作用之一是无意中缓存了无效资源。在正常的 HTTP 缓存中，硬刷新或缓存过期会限制缓存无效文件的负面影响。服务工作者会忽略此类约束，并有效地长时间缓存整个应用程序。因此，服务工作者获取正确的内容至关重要。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37ai60wl9t9a7n912bznvz94c\">为了确保资源完整性，Angular 服务工作者会验证其具有哈希值的所有资源的哈希值。通常对于 CLI 应用程序，这将是 \n<code>dist</code> 目录中的所有内容，这些内容由用户的 \n<code>src/ngsw-config.json</code> 配置覆盖。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aazqjhp0gsfk0erzmk4ty4fh8\">如果特定文件验证失败，Angular 服务工作者会尝试使用“缓存清除”URL 参数重新获取内容，以消除浏览器或中间缓存的影响。如果该内容也验证失败，服务工作者会认为应用程序的整个版本无效，并且它会停止提供应用程序。如果需要，服务工作者会进入安全模式，在这种模式下，请求会回退到网络，如果提供无效、损坏或过时内容的风险很高，则选择不使用其缓存。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"3ngjch7l61brixh4x67t8vr9q\">导致哈希值不匹配的原因有很多：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahl56t4h9l7wfosd5qbnnd3we\">源服务器和最终用户之间的缓存层可能会提供陈旧的内容。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9aqkzhqqgxvwh4yyeyxs95ea9\">非原子部署可能会导致 Angular 服务工作者看到部分更新的内容。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"243wwfnvhh00atv1b8m1sska0\">构建过程中的错误可能会导致更新的资源而没有更新 \n<code>ngsw.json</code>。反之亦然，导致更新的 \n<code>ngsw.json</code> 而没有更新的资源。</li>\n</ul>\n<h4 id=\"unhashed-content\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1culj5eol0vjvud0cudv1zdh9\"><i class=\"material-icons\">link</i>未哈希的内容</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yt5uby3wqkgvbser6ainhzg9\"><code>ngsw.json</code> 清单中只有在构建清单时存在于 \n<code>dist</code> 目录中的资源才具有哈希值。其他资源，尤其是从 CDN 加载的资源，其内容在构建时未知，或者更新频率高于应用程序部署频率。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bqh3skdoevachr71yzujm7bf\">如果 Angular 服务工作者没有哈希值来验证给定资源，它仍然会缓存其内容，但它会通过使用“陈旧时重新验证”策略来遵守 HTTP 缓存标头。也就是说，当缓存资源的 HTTP 缓存标头指示该资源已过期时，Angular 服务工作者会继续提供内容，并尝试在后台刷新该资源。这样，损坏的未哈希资源就不会在其配置的生命周期之外保留在缓存中。</p>\n<a id=\"tabs\"></a>\n<h3 id=\"app-tabs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t1mixl9qzxon251u0k0q22p5\"><i class=\"material-icons\">link</i>应用程序选项卡</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16k3e38tey8yk6ii5xb1vh9s2\">如果应用程序接收到的资源版本突然或无预警地发生更改，可能会出现问题。有关此类问题的描述，请参阅上面的 \n<a href=\"guide/service-worker-devops#versions\">版本</a> 部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6enbq5bk4fadvo5kmacxagy4j\">Angular 服务工作者提供保证：正在运行的应用程序将继续运行应用程序的同一版本。如果在新的 Web 浏览器选项卡中打开应用程序的另一个实例，则会提供应用程序的最新版本。因此，该新选项卡可能运行的应用程序版本与原始选项卡不同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mk9pv5qjpmwe7xuxidxtvd4r\">重要的是要注意，此保证比正常 Web 部署模型提供的保证\n<strong>更强</strong>。如果没有服务工作者，无法保证在运行的应用程序中稍后惰性加载的代码与应用程序的初始代码来自同一版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dh6ovy4m3ge2an9wq2l6sudd\">Angular 服务工作者可能更改正在运行的应用程序版本的几个有限原因。其中一些是错误条件：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ciul68mu0oiev431adkxzr06y\">由于哈希值失败，当前版本变得无效。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4w4f8qfy84q7u3injob8zg4q\">无关错误导致服务工作者进入安全模式；也就是说，暂时停用。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wy6d1sca54zfm6u4tl0qchp7\">Angular 服务工作者知道在任何给定时刻哪些版本正在使用，并且它会在没有选项卡使用它们时清理版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mux46t597fhekbyi9mimb3um\">Angular 服务工作者可能更改正在运行的应用程序版本的其他原因是正常事件：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96rp6ni9ycdkxw59789su38rv\">页面重新加载/刷新。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rfhglps1gfrjd4dumtfmpztn\">页面请求通过 \n<code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a></code> 服务立即激活更新。</li>\n</ul>\n<h3 id=\"service-worker-updates\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"6sx4vyva0fc0p8re7jk9uad10\"><i class=\"material-icons\">link</i>Service Worker 更新</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6gg9tyg9hmsnkpylmwjvb7i6\">Angular 服务工作者是一个在 Web 浏览器中运行的小脚本。 有时，服务工作者会通过错误修复和功能改进进行更新。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvh648oqohnb0l4zigzpcvtlj\">首次打开应用程序以及在应用程序处于非活动状态一段时间后访问应用程序时，会下载 Angular 服务工作者。如果服务工作者已更改，则服务工作者将在后台更新。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9jhclxukh4d5opa38xhgpkb9\">对 Angular 服务工作者的大多数更新对应用程序是透明的——旧的缓存仍然有效，内容仍然正常提供。但是，有时 Angular 服务工作者中的错误修复或功能需要使旧缓存失效。在这种情况下，应用程序将从网络透明地刷新。</p>\n<h2 id=\"debugging-the-angular-service-worker\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u0i3eftdh5oi2q2ijmw3e42q\"><i class=\"material-icons\">link</i>调试 Angular 服务工作者</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg7cfznaubxca8gyjlrrmw0l9\">有时，可能需要检查正在运行状态的 Angular 服务工作者以调查问题或确保其按预期运行。浏览器提供了用于调试服务工作者的内置工具，Angular 服务工作者本身也包含有用的调试功能。</p>\n<h3 id=\"locating-and-analyzing-debugging-information\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b988j1j9ijm47m2mi2amln092\"><i class=\"material-icons\">link</i>定位并分析调试信息</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rteehwli9c0l47j54n1jvtjy\">Angular 服务工作者在 \n<code>ngsw/</code> 虚拟目录下公开调试信息。目前，公开的唯一 URL 是 \n<code>ngsw/<a href=\"api/animations/state\" class=\"code-anchor\">state</a></code>。以下是如何显示此调试页面内容的示例：</p>\n<code-example>\nNGSW Debug Info:\n\nDriver <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: NORMAL ((nominal))\nLatest manifest hash: eea7f5f464f90789b621170af5a569d6be077e5c\nLast update check: never\n\n=== <a href=\"api/core/Version\" class=\"code-anchor\">Version</a> eea7f5f464f90789b621170af5a569d6be077e5c ===\n\nClients: 7b79a015-69af-4d3d-9ae6-95ba90c79486, 5bc08295-aaf2-42f3-a4cc-9e4ef9100f65\n\n=== Idle Task Queue ===\nLast update <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>: 1s496u\nLast update run: never\nTask queue:\n * init post-load (update, cleanup)\n\nDebug log:\n</code-example>\n<h4 id=\"driver-state\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"bomzqghnmiehvwbxvqttt7oew\"><i class=\"material-icons\">link</i>驱动程序的状态</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4yow71m7x554kp4tgav1a4hlh\">第一行表示驱动程序的状态：</p>\n<code-example>\nDriver <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: NORMAL ((nominal))\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"112fp8nadw901aecdkgz2nfur\"><code>NORMAL</code> 表示这个 Service Worker 正在正常运行，并且没有处于降级运行的状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c9l2u9xclnaj8zhfl0ntbbpep\">有两种可能的降级状态：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mp4ezyv5t8a4megwwcxsp73e\"><code>EXISTING_CLIENTS_ONLY</code>：服务工作者没有应用程序最新已知版本的干净副本。较旧的缓存版本是安全的，因此现有选项卡将继续从缓存中运行，但应用程序的新加载将从网络提供。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ymrr8ohq7xghv16a8lqijtmv\"><code>SAFE_MODE</code>：服务工作者无法保证使用缓存数据的安全性。要么发生了意外错误，要么所有缓存版本都无效。所有流量都将从网络提供，并尽可能少地运行服务工作者代码。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"eqgsnca502c193rd8jevbyz37\">在这两种情况下，后面的括号注解中都会提供导致 Service Worker 进入降级状态的错误信息。</p>\n<h4 id=\"latest-manifest-hash\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"a5hghq674h9y5e7ohjd20hfbk\"><i class=\"material-icons\">link</i>最新清单的哈希</h4>\n<code-example>\nLatest manifest hash: eea7f5f464f90789b621170af5a569d6be077e5c\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5weinalcn77d3yhddeqrwm6yr\">这是服务工作者所知晓的应用最新版本的 SHA1 哈希值。</p>\n<h4 id=\"last-update-check\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"7f04u1t9zipd9uxpg0ffm6te0\"><i class=\"material-icons\">link</i>最后一次更新检查</h4>\n<code-example>\nLast update check: never\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6x2zkcw7negze2usfla3mpzov\">这表示服务工作者上次检查应用的新版本或更新的时间。\n<code>never</code> 表示服务工作者从未检查过更新。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ay3br0epdnf9ohvaz5edxpb7n\">在这个调试文件范例中，这次更新检查目前是已排期的，如下一节所述。</p>\n<h4 id=\"version\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34ck2qsr4jsfv24ims2mht0vy\"><i class=\"material-icons\">link</i>版本</h4>\n<code-example>\n=== <a href=\"api/core/Version\" class=\"code-anchor\">Version</a> eea7f5f464f90789b621170af5a569d6be077e5c ===\n\nClients: 7b79a015-69af-4d3d-9ae6-95ba90c79486, 5bc08295-aaf2-42f3-a4cc-9e4ef9100f65\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgyrvb9xhgck60zsoyg9micdi\">在此示例中，服务工作者缓存了应用的一个版本，并使用它来为两个不同的选项卡提供服务。请注意，此版本哈希值是上面列出的“最新清单哈希值”。两个客户端都处于最新版本。每个客户端都通过浏览器中 \n<code>Clients</code> API 的 ID 列出。</p>\n<h4 id=\"idle-task-queue\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"71baiwjkvpc4nrgobmsyrhrcx\"><i class=\"material-icons\">link</i>空闲任务队列</h4>\n<code-example>\n=== Idle Task Queue ===\nLast update <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>: 1s496u\nLast update run: never\nTask queue:\n * init post-load (update, cleanup)\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq3zv88ipe2nrawflnqqoh3k9\">空闲任务队列是服务工作者后台所有待处理任务的队列。如果队列中有任何任务，则会列出其描述。在此示例中，服务工作者安排了一个这样的任务，即一个涉及更新检查和清理陈旧缓存的初始化后操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cp3wk28gmrt2qchyxf04xcp2\">最后一次更新滴答/运行计数器显示自与空闲队列相关的特定事件发生以来的时间。“最后一次更新运行”计数器显示上次实际执行空闲任务的时间。“最后一次更新滴答”显示自上次事件发生以来的时间，此后可能会处理队列。</p>\n<h4 id=\"debug-log\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c64x6ha0w0v4d8hpdaq2k3sjc\"><i class=\"material-icons\">link</i>调试日志</h4>\n<code-example>\nDebug log:\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qila60xcv877rkulalvw35ph\">服务工作者中发生的错误将记录在此处。</p>\n<h3 id=\"developer-tools\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ygtuwpf239b92tkhyptblgzt\"><i class=\"material-icons\">link</i>开发者工具</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f50pjthlo665etdtmgmagg87\">Chrome 等浏览器提供用于与服务工作者交互的开发者工具。这些工具在正确使用时非常强大，但需要注意一些事项。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4654lg32n6glusn3cej9oc0w\">使用开发者工具时，服务工作者将在后台继续运行，并且不会重新启动。这会导致 Dev Tools 打开时的行为与用户可能体验到的行为不同。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2whklsf1jdez2f0iu1h811ph\">如果查看缓存存储查看器，则缓存经常过时。右键单击缓存存储标题并刷新缓存。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"di80ngn89cin34y4uscb4w3nd\">在服务工作者窗格中停止和启动服务工作者会触发更新检查。</p>\n<h2 id=\"fail-safe\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9e3cv7qzw4kfkak3n0fd0n7dt\"><i class=\"material-icons\">link</i>故障保护机制</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eobzwkmsuaft51fm1tvabdxcy\">与任何复杂系统一样，错误或配置错误会导致 Angular 服务工作者以不可预见的方式运行。虽然其设计试图将此类问题的影响降至最低，但 Angular 服务工作者包含一个故障安全机制，以防管理员需要快速停用服务工作者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"df4m41r2ybgkpxwffg0cfpyss\">要停用服务工作者，请删除或重命名 \n<code>ngsw-config.json</code> 文件。当服务工作者对 \n<code>ngsw.json</code> 的请求返回 \n<code>404</code> 时，服务工作者会删除其所有缓存并取消注册自身，从而实现自我销毁。</p>\n<h2 id=\"more-on-angular-service-workers\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"e9jl51v338pdg88lkv1cl8f1i\"><i class=\"material-icons\">link</i>关于 Angular Service Worker 的更多信息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"320pd4quk21g01cifflgmc0pj\">你可能还会对以下内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7zq8vghkhkc0yc6ngxd64njqq\"><a href=\"guide/service-worker-config\">服务工作者配置</a>.</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/service-worker-communications\n - guide/service-worker-config\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/core/Version\n - api/core/testing/tick\n - api/service-worker/SwUpdate\n - guide/service-worker-communications\n - guide/service-worker-config\n - guide/service-worker-devops#app-tabs\n - guide/service-worker-devops#app-versions\n - guide/service-worker-devops#debug-log\n - guide/service-worker-devops#debugging-the-angular-service-worker\n - guide/service-worker-devops#developer-tools\n - guide/service-worker-devops#driver-state\n - guide/service-worker-devops#fail-safe\n - guide/service-worker-devops#idle-task-queue\n - guide/service-worker-devops#last-update-check\n - guide/service-worker-devops#latest-manifest-hash\n - guide/service-worker-devops#locating-and-analyzing-debugging-information\n - guide/service-worker-devops#more-on-angular-service-workers\n - guide/service-worker-devops#prerequisites\n - guide/service-worker-devops#resource-integrity\n - guide/service-worker-devops#service-worker-and-caching-of-app-resources\n - guide/service-worker-devops#service-worker-in-production\n - guide/service-worker-devops#service-worker-updates\n - guide/service-worker-devops#tabs\n - guide/service-worker-devops#unhashed-content\n - guide/service-worker-devops#update-checks\n - guide/service-worker-devops#version\n - guide/service-worker-devops#versions\n-->"
}