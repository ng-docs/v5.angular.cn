{
  "id": "guide/reactive-forms",
  "title": "Reactive Forms",
  "contents": "\n<div class=\"content\">\n<h1 id=\"reactive-forms\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reactive-forms\"><i class=\"material-icons\">link</i></a>Reactive Forms</h1>\n<p><em>Reactive forms</em> is an Angular technique for creating forms in a <em>reactive</em> style.\nThis guide explains reactive forms as you follow the steps to build a \"Hero Detail Editor\" form.</p>\n<a id=\"toc\"></a>\n<p>Try the <live-example stackblitz=\"final\" title=\"Reactive Forms (final) in Stackblitz\">Reactive Forms live-example</live-example>.</p>\n<p>You can also run the <live-example title=\"Reactive Forms Demo in Stackblitz\">Reactive Forms Demo</live-example> version\nand choose one of the intermediate steps from the \"demo picker\" at the top.</p>\n<a id=\"intro\"></a>\n<h2 id=\"introduction-to-reactive-forms\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#introduction-to-reactive-forms\"><i class=\"material-icons\">link</i></a>Introduction to Reactive Forms</h2>\n<p>Angular offers two form-building technologies: <em>reactive</em> forms and <em>template-driven</em> forms.\nThe two technologies belong to the <code>@angular/forms</code> library\nand share a common set of form control classes.</p>\n<p>But they diverge markedly in philosophy, programming style, and technique.\nThey even have their own modules: the <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> and the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n<h3 id=\"reactive-forms-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reactive-forms-1\"><i class=\"material-icons\">link</i></a>Reactive forms</h3>\n<p>Angular <em>reactive</em> forms facilitate a <em>reactive style</em> of programming\nthat favors explicit management of the data flowing between\na non-UI <em>data model</em> (typically retrieved from a server) and a\nUI-oriented <em>form model</em> that retains the states\nand values of the HTML controls on screen. Reactive forms offer the ease\nof using reactive patterns, testing, and validation.</p>\n<p>With <em>reactive</em> forms, you create a tree of Angular form control objects\nin the component class and bind them to native form control elements in the\ncomponent template, using techniques described in this guide.</p>\n<p>You create and manipulate form control objects directly in the\ncomponent class. As the component class has immediate access to both the data\nmodel and the form control structure, you can push data model values into\nthe form controls and pull user-changed values back out. The component can\nobserve changes in form control state and react to those changes.</p>\n<p>One advantage of working with form control objects directly is that value and validity updates\nare <a href=\"guide/reactive-forms#async-vs-sync\" title=\"Async vs sync\">always synchronous and under your control</a>.\nYou won't encounter the timing issues that sometimes plague a template-driven form\nand reactive forms can be easier to unit test.</p>\n<p>In keeping with the reactive paradigm, the component\npreserves the immutability of the <em>data model</em>,\ntreating it as a pure source of original values.\nRather than update the data model directly,\nthe component extracts user changes and forwards them to an external component or service,\nwhich does something with them (such as saving them)\nand returns a new <em>data model</em> to the component that reflects the updated model state.</p>\n<p>Using reactive form directives does not require you to follow all reactive priniciples,\nbut it does facilitate the reactive programming approach should you choose to use it.</p>\n<h3 id=\"template-driven-forms\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#template-driven-forms\"><i class=\"material-icons\">link</i></a>Template-driven forms</h3>\n<p><em>Template-driven</em> forms, introduced in the <a href=\"guide/forms\">Template guide</a>, take a completely different approach.</p>\n<p>You place HTML form controls (such as <code>&#x3C;input></code> and <code>&#x3C;select></code>) in the component template and\nbind them to <em>data model</em> properties in the component, using directives\nlike <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>.</p>\n<p>You don't create Angular form control objects. Angular directives\ncreate them for you, using the information in your data bindings.\nYou don't push and pull data values. Angular handles that for you with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>.\nAngular updates the mutable <em>data model</em> with user changes as they happen.</p>\n<p>For this reason, the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive is not part of the ReactiveFormsModule.</p>\n<p>While this means less code in the component class,\n<a href=\"guide/reactive-forms#async-vs-sync\" title=\"Async vs sync\">template-driven forms are asynchronous</a>\nwhich may complicate development in more advanced scenarios.</p>\n<a id=\"async-vs-sync\"></a>\n<h3 id=\"async-vs-sync\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#async-vs-sync\"><i class=\"material-icons\">link</i></a>Async vs. sync</h3>\n<p>Reactive forms are synchronous while template-driven forms are asynchronous.</p>\n<p>In reactive forms, you create the entire form control tree in code.\nYou can immediately update a value or drill down through the descendants of the parent form\nbecause all controls are always available.</p>\n<p>Template-driven forms delegate creation of their form controls to directives.\nTo avoid \"<em>changed after checked</em>\" errors,\nthese directives take more than one cycle to build the entire control tree.\nThat means you must wait a tick before manipulating any of the controls\nfrom within the component class.</p>\n<p>For example, if you inject the form control with a <code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(<a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a>)</code> query and examine it in the\n<a href=\"guide/lifecycle-hooks#afterview\" title=\"Lifecycle hooks guide: AfterView\"><code>ngAfterViewInit</code> lifecycle hook</a>,\nyou'll discover that it has no children.\nYou must wait a tick, using <code>setTimeout</code>, before you can\nextract a value from a control, test its validity, or set it to a new value.</p>\n<p>The asynchrony of template-driven forms also complicates unit testing.\nYou must wrap your test block in <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> or <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> to\navoid looking for values in the form that aren't there yet.\nWith reactive forms, everything is available when you expect it to be.</p>\n<h3 id=\"choosing-reactive-or-template-driven-forms\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#choosing-reactive-or-template-driven-forms\"><i class=\"material-icons\">link</i></a>Choosing reactive or template-driven forms</h3>\n<p>Reactive and template-driven forms are\ntwo different architectural paradigms,\nwith their own strengths and weaknesses.\nChoose the approach that works best for you.\nYou may decide to use both in the same application.</p>\n<p>The rest of this page explores the <em>reactive</em> paradigm and\nconcentrates exclusively on reactive forms techniques.\nFor information on <em>template-driven forms</em>, see the <a href=\"guide/forms\"><em>Forms</em></a> guide.</p>\n<p>In the next section, you'll set up your project for the reactive form demo.\nThen you'll learn about the <a href=\"guide/reactive-forms#essentials\">Angular form classes</a> and how to use them in a reactive form.</p>\n<a id=\"setup\"></a>\n<h2 id=\"setup\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#setup\"><i class=\"material-icons\">link</i></a>Setup</h2>\n<p>Create a new project named <code>angular-reactive-forms</code>:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng new angular-reactive-forms\n\n</code-example>\n<a id=\"data-model\"></a>\n<h2 id=\"create-a-data-model\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#create-a-data-model\"><i class=\"material-icons\">link</i></a>Create a data model</h2>\n<p>The focus of this guide is a reactive forms component that edits a hero.\nYou'll need a <code>hero</code> class and some hero data.</p>\n<p>Using the CLI, generate a new class named <code>data-model</code>:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate class data-model\n\n</code-example>\n<p>And copy the following into <code>data-model.ts</code>:</p>\n<code-example path=\"reactive-forms/src/app/data-model.ts\" title=\"src/app/data-model.ts\" linenums=\"false\">\nexport class Hero {\n  id = 0;\n  name = '';\n  addresses: Address[];\n}\n\nexport class Address {\n  street = '';\n  city   = '';\n  <a href=\"api/animations/state\" class=\"code-anchor\">state</a>  = '';\n  zip    = '';\n}\n\nexport const heroes: Hero[] = [\n  {\n    id: 1,\n    name: 'Whirlwind',\n    addresses: [\n      {street: '123 Main',  city: 'Anywhere', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'CA',  zip: '94801'},\n      {street: '456 Maple', city: 'Somewhere', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'VA', zip: '23226'},\n    ]\n  },\n  {\n    id: 2,\n    name: 'Bombastic',\n    addresses: [\n      {street: '789 Elm',  city: 'Smallville', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'OH',  zip: '04501'},\n    ]\n  },\n  {\n    id: 3,\n    name: 'Magneta',\n    addresses: [ ]\n  },\n];\n\nexport const states = ['CA', 'MD', 'OH', 'VA'];\n\n\n</code-example>\n<p>The file exports two classes and two constants. The <code>Address</code>\nand <code>Hero</code> classes define the application <em>data model</em>.\nThe <code>heroes</code> and <code>states</code> constants supply the test data.</p>\n<a id=\"create-component\"></a>\n<h2 id=\"create-a-reactive-forms-component\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#create-a-reactive-forms-component\"><i class=\"material-icons\">link</i></a>Create a <em>reactive forms</em> component</h2>\n<p>Generate a new component named <code>HeroDetail</code>:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate component HeroDetail\n\n</code-example>\n<p>And import:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-1.component.ts\" region=\"import\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n</code-example>\n<p>Next, update the <code>HeroDetailComponent</code> class with a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>.\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> is a directive that allows you to create and manage\na <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> instance directly.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-1.component.ts\" region=\"v1\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nexport class HeroDetailComponent1 {\n  name = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>();\n}\n\n\n</code-example>\n<p>This creates a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> called <code>name</code>.\nIt will be bound in the template to an HTML <code>&#x3C;input></code> element for the hero name.</p>\n<p>A <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> constructor accepts three, optional arguments:\nthe initial data value, an array of validators, and an array of async validators.</p>\n<div class=\"l-sub-section\">\n<p>This simple control doesn't have data or validators.\nIn real apps, most form controls have both. For in-depth information on\n<code><a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a></code>, see the <a href=\"guide/form-validation\">Form Validation</a> guide.</p>\n</div>\n<a id=\"create-template\"></a>\n<h2 id=\"create-the-template\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#create-the-template\"><i class=\"material-icons\">link</i></a>Create the template</h2>\n<p>Now update the component's template with the following markup.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-1.component.html\" region=\"simple-control\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&#x3C;h2>Hero Detail&#x3C;/h2>\n&#x3C;h3>&#x3C;i>Just <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;/i>&#x3C;/h3>\n&#x3C;label class=\"center-block\">Name:\n  &#x3C;input class=\"form-control\" [formControl]=\"name\">\n&#x3C;/label>\n\n</code-example>\n<p>To let Angular know that this is the input that you want to\nassociate to the <code>name</code> <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> in the class,\nyou need <code>[formControl]=\"name\"</code> in the template on the <code>&#x3C;input></code>.</p>\n<div class=\"l-sub-section\">\n<p>Disregard the <code>form-control</code> CSS class. It belongs to the\n<a href=\"http://getbootstrap.com/\" title=\"Bootstrap CSS\">Bootstrap CSS library</a>,\nnot Angular, and styles the form but in no way impacts the logic.</p>\n</div>\n<a id=\"import\"></a>\n<h2 id=\"import-the-reactiveformsmodule\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#import-the-reactiveformsmodule\"><i class=\"material-icons\">link</i></a>Import the <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code></h2>\n<p>The <code>HeroDetailComponent</code> template uses the <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code>\ndirective from the <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>.</p>\n<p>Do the following two things in <code>app.module.ts</code>:</p>\n<ol>\n<li>Use a JavaScript <code>import</code> statement to access\nthe <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>.</li>\n<li>Add <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> to the <code>AppModule</code>'s <code>imports</code> list.</li>\n</ol>\n<code-example path=\"reactive-forms/src/app/app.module.ts\" region=\"v1\" title=\"src/app/app.module.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }            from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }       from '@angular/platform-browser';\nimport { <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> } from '@angular/forms';  // &#x3C;-- #1 import module\n\nimport { AppComponent }        from './app.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroDetailComponent,\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> // &#x3C;-- #2 add to @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> imports\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<a id=\"update\"></a>\n<h2 id=\"display-the-herodetailcomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#display-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a>Display the <code>HeroDetailComponent</code></h2>\n<p>Revise the <code>AppComponent</code> template so it displays the <code>HeroDetailComponent</code>.</p>\n<code-example path=\"reactive-forms/src/app/app.component.1.html\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div class=\"container\">\n  &#x3C;h1>Reactive Forms&#x3C;/h1>\n  &#x3C;app-hero-detail>&#x3C;/app-hero-detail>\n&#x3C;/div>\n\n\n</code-example>\n<a id=\"essentials\"></a>\n<h2 id=\"essential-form-classes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#essential-form-classes\"><i class=\"material-icons\">link</i></a>Essential form classes</h2>\n<p>This guide uses four fundamental classes to build a reactive form:</p>\n<table>\n  <tbody><tr>\n    <th>\n      Class\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code>\n    </td>\n    <td>\n<p>      <a href=\"api/forms/AbstractControl\" title=\"API Reference: FormControl\"><code>AbstractControl</code></a> is the abstract base class for the three concrete form control classes;\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>, <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, and <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>.\nIt provides their common behaviors and properties.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>\n    </td>\n    <td>\n<p>      <a href=\"api/forms/FormControl\" title=\"API Reference: FormControl\"><code>FormControl</code></a>\ntracks the value and validity status of an individual form control.\nIt corresponds to an HTML form control such as an <code>&#x3C;input></code> or <code>&#x3C;select></code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>\n    </td>\n    <td>\n<p>      <a href=\"api/forms/FormGroup\" title=\"API Reference: FormGroup\"><code>FormGroup</code></a>\ntracks the value and validity state of a group of <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code> instances.\nThe group's properties include its child controls.\nThe top-level form in your component is a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>\n    </td>\n    <td>\n<p>      <a href=\"api/forms/FormArray\" title=\"API Reference: FormArray\"><code>FormArray</code></a>\ntracks the value and validity state of a numerically indexed array of <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code> instances.</p>\n    </td>\n  </tr>\n</tbody></table>\n<h2 id=\"style-the-app\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#style-the-app\"><i class=\"material-icons\">link</i></a>Style the app</h2>\n<p>To use the bootstrap CSS classes that are in the template HTML of both the <code>AppComponent</code> and the <code>HeroDetailComponent</code>,\nadd the <code>bootstrap</code> CSS stylesheet to the head of <code>styles.css</code>:</p>\n<code-example path=\"reactive-forms/src/styles.1.css\" title=\"styles.css\" linenums=\"false\">\n@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');\n\n\n</code-example>\n<p>Now that everything is wired up, serve the app with:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng serve\n\n</code-example>\n<p>The browser should display something like this:</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/just-formcontrol.png\" alt=\"Single FormControl\" width=\"400\" height=\"133\">\n</figure>\n<a id=\"formgroup\"></a>\n<h2 id=\"add-a-formgroup\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#add-a-formgroup\"><i class=\"material-icons\">link</i></a>Add a FormGroup</h2>\n<p>Usually, if you have multiple <code>FormControls</code>, you register\nthem within a parent <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.\nTo add a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, add it to the imports section\nof <code>hero-detail.component.ts</code>:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-2.component.ts\" region=\"imports\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }              from '@angular/core';\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from '@angular/forms';\n\n</code-example>\n<p>In the class, wrap the <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> in a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> called <code>heroForm</code> as follows:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-2.component.ts\" region=\"v2\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nexport class HeroDetailComponent2 {\n  heroForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> ({\n    name: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()\n  });\n}\n\n</code-example>\n<p>Now that you've made changes in the class, they need to be reflected in the\ntemplate. Update <code>hero-detail.component.html</code> by replacing it with the following.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-2.component.html\" region=\"basic-form\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&#x3C;h2>Hero Detail&#x3C;/h2>\n&#x3C;h3>&#x3C;i><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> in <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>&#x3C;/i>&#x3C;/h3>\n&#x3C;form [formGroup]=\"heroForm\">\n  &#x3C;div class=\"form-group\">\n    &#x3C;label class=\"center-block\">Name:\n      &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"name\">\n    &#x3C;/label>\n  &#x3C;/div>\n&#x3C;/form>\n\n</code-example>\n<p>Notice that now the single <code>&#x3C;input></code> is in a <code>&#x3C;form></code> element.</p>\n<p><code>formGroup</code> is a reactive form directive that takes an existing\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> instance and associates it with an HTML element.\nIn this case, it associates the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> you saved as\n<code>heroForm</code> with the <code>&#x3C;form></code> element.</p>\n<p>Because the class now has a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, you must update the template\nsyntax for associating the <code>&#x3C;input></code> with the corresponding\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> in the component class.\nWithout a parent <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>,\n<code>[formControl]=\"name\"</code> worked earlier because that directive\ncan stand alone, that is, it works without being in a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.\nWith a parent <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, the <code>name</code> <code>&#x3C;input></code> needs the syntax\n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=name</code> in order to be associated\nwith the correct <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>\nin the class. This syntax tells Angular to look for the parent\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, in this case <code>heroForm</code>, and then <em>inside</em> that group\nto look for a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> called <code>name</code>.</p>\n<a id=\"json\"></a>\n<h2 id=\"taking-a-look-at-the-form-model\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#taking-a-look-at-the-form-model\"><i class=\"material-icons\">link</i></a>Taking a look at the form model</h2>\n<p>When the user enters data into an <code>&#x3C;input></code>, the value\ngoes into the <strong><em>form model</em></strong>.\nTo see the form model, add the following line after the\nclosing <code>&#x3C;form></code> tag in the <code>hero-detail.component.html</code>:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-2.component.html\" region=\"form-value-json\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&#x3C;p><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> value: {{ heroForm.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a> }}&#x3C;/p>\n\n</code-example>\n<p>The <code>heroForm.value</code> returns the <em>form model</em>.\nPiping it through the <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code> renders the model as JSON in the browser:</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/json-output.png\" alt=\"JSON output\" width=\"400\" height=\"176\">\n</figure>\n<p>The initial <code>name</code> property value is the empty string.\nType into the name <code>&#x3C;input></code> and watch the keystrokes appear in the JSON.</p>\n<p>In real life apps, forms get big fast.\n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> makes form development and maintenance easier.</p>\n<a id=\"formbuilder\"></a>\n<h2 id=\"introduction-to-formbuilder\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#introduction-to-formbuilder\"><i class=\"material-icons\">link</i></a>Introduction to <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code></h2>\n<p>The <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> class helps reduce repetition and\nclutter by handling details of control creation for you.</p>\n<p>To use <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>, import it into <code>hero-detail.component.ts</code>. You can remove <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-3a.component.ts\" region=\"imports\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }              from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from '@angular/forms';\n\n</code-example>\n<p>Use it to refactor the <code>HeroDetailComponent</code> into something that's easier to read and write,\nby following this plan:</p>\n<ul>\n<li>Explicitly declare the type of the <code>heroForm</code> property to be <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>; you'll initialize it later.</li>\n<li>Inject a <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> into the constructor.</li>\n<li>Add a new method that uses the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> to define the <code>heroForm</code>; call it <code>createForm()</code>.</li>\n<li>Call <code>createForm()</code> in the constructor.</li>\n</ul>\n<p>The revised <code>HeroDetailComponent</code> looks like this:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-3a.component.ts\" region=\"v3a\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nexport class HeroDetailComponent3 {\n  heroForm: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>; // &#x3C;--- heroForm is of type <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>\n\n  constructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) { // &#x3C;--- <a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a> <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>\n    this.createForm();\n  }\n\n  createForm() {\n    this.heroForm = this.fb.group({\n      name: '', // &#x3C;--- the <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> called \"name\"\n    });\n  }\n}\n\n</code-example>\n<p><code>FormBuilder.group</code> is a factory method that creates a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.  \n<code>FormBuilder.group</code> takes an object whose keys and values are <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> names and their definitions.\nIn this example, the <code>name</code> control is defined by its initial data value, an empty string.</p>\n<p>Defining a group of controls in a single object makes your code more compact and readable because you don't have to write repeated <code>new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(...)</code> statements.</p>\n<a id=\"validators\"></a>\n<h3 id=\"validatorsrequired\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#validatorsrequired\"><i class=\"material-icons\">link</i></a><code>Validators.required</code></h3>\n<p>Though this guide doesn't go deeply into validations, here is one example that\ndemonstrates the simplicity of using <code>Validators.required</code> in reactive forms.</p>\n<p>First, import the <code><a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a></code> symbol.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-3.component.ts\" region=\"imports\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }                          from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\n</code-example>\n<p>To make the <code>name</code> <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> required, replace the <code>name</code>\nproperty in the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> with an array.\nThe first item is the initial value for <code>name</code>;\nthe second is the required validator, <code>Validators.required</code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-3.component.ts\" region=\"required\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nthis.heroForm = this.fb.group({\n  name: ['', Validators.required ],\n});\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>Reactive validators are simple, composable functions.\nConfiguring validation is different in template-driven forms in that you must wrap validators in a directive.</p>\n</div>\n<p>Update the diagnostic message at the bottom of the template to display the form's validity status.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-3.component.html\" region=\"form-value-json\" title=\"src/app/hero-detail/hero-detail.component.html (excerpt)\" linenums=\"false\">\n&#x3C;p><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> value: {{ heroForm.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a> }}&#x3C;/p>\n&#x3C;p><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> status: {{ heroForm.status | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a> }}&#x3C;/p>\n\n</code-example>\n<p>The browser displays the following:</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/validators-json-output.png\" alt=\"Single FormControl\" width=\"400\" height=\"223\">\n</figure>\n<p><code>Validators.required</code> is working. The status is <code>INVALID</code> because the <code>&#x3C;input></code> has no value.\nType into the <code>&#x3C;input></code> to see the status change from <code>INVALID</code> to <code>VALID</code>.</p>\n<p>In a real app, you'd replace the diagnosic message with a user-friendly experience.</p>\n<p>Using <code>Validators.required</code> is optional for the rest of the guide.\nIt remains in each of the following examples with the same configuration.</p>\n<p>For more on validating Angular forms, see the\n<a href=\"guide/form-validation\">Form Validation</a> guide.</p>\n<h3 id=\"more-formcontrols\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#more-formcontrols\"><i class=\"material-icons\">link</i></a>More <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>s</h3>\n<p>This section adds additional <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>s for the address, a super power, and a sidekick.</p>\n<p>Additionally, the address has a state property. The user will select a state with a <code>&#x3C;select></code> and you'll populate\nthe <code>&#x3C;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>></code> elements with states. So import <code>states</code> from <code>data-model.ts</code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-4.component.ts\" region=\"imports\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }                          from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\nimport { states } from '../data-model';\n\n</code-example>\n<p>Declare the <code>states</code> property and add some address <code>FormControls</code> to the <code>heroForm</code> as follows.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-4.component.ts\" region=\"v4\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nexport class HeroDetailComponent4 {\n  heroForm: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  states = states;\n\n  constructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.heroForm = this.fb.group({\n      name: ['', Validators.required ],\n      street: '',\n      city: '',\n      <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: '',\n      zip: '',\n      power: '',\n      sidekick: ''\n    });\n  }\n}\n\n</code-example>\n<p>Then add corresponding markup in <code>hero-detail.component.html</code> as follows.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-4.component.html\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&#x3C;h2>Hero Detail&#x3C;/h2>\n&#x3C;h3>&#x3C;i>A <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> with <a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">multiple</a> FormControls&#x3C;/i>&#x3C;/h3>\n&#x3C;form [formGroup]=\"heroForm\">\n  &#x3C;div class=\"form-group\">\n    &#x3C;label class=\"center-block\">Name:\n      &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"name\">\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"form-group\">\n    &#x3C;label class=\"center-block\">Street:\n      &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\">\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"form-group\">\n    &#x3C;label class=\"center-block\">City:\n      &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\">\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"form-group\">\n    &#x3C;label class=\"center-block\">State:\n      &#x3C;select class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\">\n          &#x3C;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of states\" [value]=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\">{{<a href=\"api/animations/state\" class=\"code-anchor\">state</a>}}&#x3C;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>>\n      &#x3C;/select>\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"form-group\">\n    &#x3C;label class=\"center-block\">Zip Code:\n      &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\">\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"form-group radio\">\n    &#x3C;h4>Super power:&#x3C;/h4>\n    &#x3C;label class=\"center-block\">&#x3C;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"flight\">Flight&#x3C;/label>\n    &#x3C;label class=\"center-block\">&#x3C;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"x-ray vision\">X-ray vision&#x3C;/label>\n    &#x3C;label class=\"center-block\">&#x3C;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"strength\">Strength&#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"checkbox\">\n    &#x3C;label class=\"center-block\">\n      &#x3C;input type=\"checkbox\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"sidekick\">I have <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> sidekick.\n    &#x3C;/label>\n  &#x3C;/div>\n&#x3C;/form>\n\n\n&#x3C;p><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> value: {{ heroForm.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a> }}&#x3C;/p>\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p><em>Note</em>: Ignore the many mentions of <code>form-group</code>,\n<code>form-control</code>, <code>center-block</code>, and <code>checkbox</code> in this markup.\nThose are <em>bootstrap</em> CSS classes that Angular itself ignores.\nPay attention to the <code>[formGroup]</code> and <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> attributes.\nThey are the Angular directives that bind the HTML controls to the\nAngular <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> and <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> properties in the component class.</p>\n</div>\n<p>The revised template includes more text <code>&#x3C;input></code> elements, a <code>&#x3C;select></code> for the <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code>, radio buttons for the <code>power</code>,\nand a <code>&#x3C;checkbox></code> for the <code>sidekick</code>.</p>\n<p>You must bind the value property of the <code>&#x3C;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>></code> with <code>[value]=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\"</code>.\nIf you do not bind the value, the select shows the first option from the data model.</p>\n<p>The component <em>class</em> defines control properties without regard for their representation in the template.\nYou define the <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code>, <code>power</code>, and <code>sidekick</code> controls the same way you defined the <code>name</code> control.\nYou tie these controls to the template HTML elements in the same way,\nspecifying the <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> name with the <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> directive.</p>\n<p>See the API reference for more information about\n<a href=\"api/forms/RadioControlValueAccessor\" title=\"API: RadioControlValueAccessor\">radio buttons</a>,\n<a href=\"api/forms/SelectControlValueAccessor\" title=\"API: SelectControlValueAccessor\">selects</a>, and\n<a href=\"api/forms/CheckboxControlValueAccessor\" title=\"API: CheckboxControlValueAccessor\">checkboxes</a>.</p>\n<a id=\"grouping\"></a>\n<h3 id=\"nested-formgroups\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#nested-formgroups\"><i class=\"material-icons\">link</i></a>Nested FormGroups</h3>\n<p>To manage the size of the form more effectively, you can group some of the related <code>FormControls</code>\ninto a nested <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>. For example, the <code>street</code>, <code>city</code>, <code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code>, and <code>zip</code> are ideal properties for an address <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.\nNesting groups and controls in this way allows you to\nmirror the hierarchical structure of the data model\nand helps track validation and state for related sets of controls.</p>\n<p>You used the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> to create one <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> in this component called <code>heroForm</code>.\nLet that be the parent <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.\nUse <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> again to create a child <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> that encapsulates the <code>address</code> controls;\nassign the result to a new <code>address</code> property of the parent <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-5.component.ts\" region=\"v5\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nexport class HeroDetailComponent5 {\n  heroForm: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  states = states;\n\n  constructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.heroForm = this.fb.group({ // &#x3C;-- the parent <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>\n      name: ['', Validators.required ],\n      address: this.fb.group({ // &#x3C;-- the child <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>\n        street: '',\n        city: '',\n        <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: '',\n        zip: ''\n      }),\n      power: '',\n      sidekick: ''\n    });\n  }\n}\n\n</code-example>\n<p>When you change the structure of the form controls in the component class,\nyou must make corresponding adjustments to the component template.</p>\n<p>In <code>hero-detail.component.html</code>, wrap the address-related <code>FormControls</code> in a <code>&#x3C;div></code>.\nAdd a <code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code> directive to the <code>div</code> and bind it to <code>\"address\"</code>.\nThat's the property of the <code>address</code> child <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> within the parent <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> called <code>heroForm</code>. Leave the <code>&#x3C;div></code> with the <code>name</code> <code>&#x3C;input></code>.</p>\n<p>To make this change visually obvious, add an <code>&#x3C;h4></code> header near the top with the text, <em>Secret Lair</em>.\nThe new address HTML looks like this:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-5.component.html\" region=\"add-group\" title=\"src/app/hero-detail/hero-detail.component.html (excerpt)\" linenums=\"false\">\n&#x3C;div <a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>=\"address\" class=\"well well-lg\">\n  &#x3C;h4>Secret Lair&#x3C;/h4>\n  &#x3C;div class=\"form-group\">\n    &#x3C;label class=\"center-block\">Street:\n      &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\">\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"form-group\">\n    &#x3C;label class=\"center-block\">City:\n      &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\">\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"form-group\">\n    &#x3C;label class=\"center-block\">State:\n      &#x3C;select class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\">\n        &#x3C;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of states\" [value]=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\">{{<a href=\"api/animations/state\" class=\"code-anchor\">state</a>}}&#x3C;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>>\n      &#x3C;/select>\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"form-group\">\n    &#x3C;label class=\"center-block\">Zip Code:\n      &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\">\n    &#x3C;/label>\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-example>\n<p>After these changes, the JSON output in the browser shows the revised form model\nwith the nested address <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>:</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/address-group.png\" alt=\"JSON output\" width=\"400\" height=\"55\">\n</figure>\n<p>This shows that the template\nand the form model are talking to one another.</p>\n<a id=\"properties\"></a>\n<h2 id=\"inspect-formcontrol-properties\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#inspect-formcontrol-properties\"><i class=\"material-icons\">link</i></a>Inspect <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> Properties</h2>\n<p>You can inspect an individual <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> within a form by extracting it with the <code>get()</code> method.\nYou can do this within the component class or display it on the\npage by adding the following to the template,\nimmediately after the <code>{{form.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}</code> interpolation as follows:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-5.component.html\" region=\"inspect-value\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&#x3C;p>Name value: {{ heroForm.get('name').value }}&#x3C;/p>\n\n</code-example>\n<p>To get the state of a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> that’s inside a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, use dot notation to traverse to the control.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-5.component.html\" region=\"inspect-child-control\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&#x3C;p>Street value: {{ heroForm.get('address.street').value}}&#x3C;/p>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p><em>Note</em>: If you're coding along, remember to remove this reference to <code>address.street</code> when you get to the section on <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>. In that section, you change the name of address in the component class and it will throw an error if you leave it in the template.</p>\n</div>\n<p>You can use this technique to display any property of a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>\nsuch as one of the following:</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"10%\">\n  \n  <col width=\"90%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Property\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td>\n      <code>myControl.value</code>\n    </td>\n    <td>\n<p>      the value of a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>myControl.status</code>\n    </td>\n    <td>\n<p>      the validity of a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>. Possible values: <code>VALID</code>,\n<code>INVALID</code>, <code>PENDING</code>, or <code>DISABLED</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>myControl.pristine</code>\n    </td>\n    <td>\n<p>      <code>true</code> if the user has <em>not</em> changed the value in the UI.\nIts opposite is <code>myControl.dirty</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>myControl.untouched</code>\n    </td>\n    <td>\n<p>      <code>true</code> if the control user has not yet entered the HTML control\nand triggered its blur event. Its opposite is <code>myControl.touched</code>.</p>\n    </td>\n  </tr>\n</tbody></table>\n<p>Read about other <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> properties in the\n<a href=\"api/forms/AbstractControl\"><em>AbstractControl</em></a> API reference.</p>\n<p>One common reason for inspecting <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> properties is to\nmake sure the user entered valid values.\nRead more about validating Angular forms in the\n<a href=\"guide/form-validation\">Form Validation</a> guide.</p>\n<a id=\"data-model-form-model\"></a>\n<h2 id=\"the-data-model-and-the-form-model\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#the-data-model-and-the-form-model\"><i class=\"material-icons\">link</i></a>The data model and the form model</h2>\n<p>At the moment, the form is displaying empty values.\nThe <code>HeroDetailComponent</code> should display values of a hero,\npossibly a hero retrieved from a remote server.</p>\n<p>In this app, the <code>HeroDetailComponent</code> gets its hero from a parent <code>HeroListComponent</code>.</p>\n<p>The <code>hero</code> from the server is the <strong><em>data model</em></strong>.\nThe <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> structure is the <strong><em>form model</em></strong>.</p>\n<p>The component must copy the hero values in the data model into the form model.\nThere are two important implications:</p>\n<ol>\n<li>\n<p>The developer must understand how the properties of the data model\nmap to the properties of the form model.</p>\n</li>\n<li>\n<p>User changes flow from the DOM elements to the form model, not to the data model.</p>\n</li>\n</ol>\n<p>The form controls never update the <em>data model</em>.</p>\n<p>The form and data model structures don't need to match exactly.\nYou often present a subset of the data model on a particular screen.\nBut it makes things easier if the shape of the form model is close to the shape of the data model.</p>\n<p>In this <code>HeroDetailComponent</code>, the two models are quite close.</p>\n<p>Here are the definitions of <code>Hero</code> and <code>Address</code> in <code>data-model.ts</code>:</p>\n<code-example path=\"reactive-forms/src/app/data-model.ts\" region=\"model-classes\" title=\"src/app/data-model.ts (classes)\" linenums=\"false\">\nexport class Hero {\n  id = 0;\n  name = '';\n  addresses: Address[];\n}\n\nexport class Address {\n  street = '';\n  city   = '';\n  <a href=\"api/animations/state\" class=\"code-anchor\">state</a>  = '';\n  zip    = '';\n}\n\n</code-example>\n<p>Here, again, is the component's <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> definition.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-6.component.ts\" region=\"hero-form-model\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nthis.heroForm = this.fb.group({\n  name: ['', Validators.required ],\n  address: this.fb.group({\n    street: '',\n    city: '',\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: '',\n    zip: ''\n  }),\n  power: '',\n  sidekick: ''\n});\n\n</code-example>\n<p>There are two significant differences between these models:</p>\n<ol>\n<li>\n<p>The <code>Hero</code> has an <code>id</code>. The form model does not because you generally don't show primary keys to users.</p>\n</li>\n<li>\n<p>The <code>Hero</code> has an array of addresses. This form model presents only one address,\nwhich is covered in the section on <a href=\"guide/reactive-forms#form-array\" title=\"Form arrays\"><code>FormArray</code></a> below.</p>\n</li>\n</ol>\n<p>Keeping the two models close in shape facilitates copying the data model properties\nto the form model with the <code>patchValue()</code> and <code>setValue()</code> methods in the next section.</p>\n<p>First, refactor the <code>address</code> <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> definition as follows:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"address-form-group\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nthis.heroForm = this.fb.group({\n  name: ['', Validators.required ],\n  address: this.fb.group(new Address()), // &#x3C;-- <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new address\n  power: '',\n  sidekick: ''\n});\n\n</code-example>\n<p>Also be sure to update the <code>import</code> from <code>data-model</code> so you can reference the <code>Hero</code> and <code>Address</code> classes:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"import-address\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nimport { Address, Hero, states } from '../data-model';\n\n</code-example>\n<a id=\"set-data\"></a>\n<h2 id=\"populate-the-form-model-with-setvalue-and-patchvalue\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#populate-the-form-model-with-setvalue-and-patchvalue\"><i class=\"material-icons\">link</i></a>Populate the form model with <code>setValue()</code> and <code>patchValue()</code></h2>\n<div class=\"alert is-helpful\">\n<p><em>Note</em>: If you're coding along, this section is optional as the rest of the steps do not rely on it.</p>\n</div>\n<p>Previously, you created a control and initialized its value at the same time.\nYou can also initialize or reset the values later with the\n<code>setValue()</code> and <code>patchValue()</code> methods.</p>\n<h3 id=\"setvalue\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#setvalue\"><i class=\"material-icons\">link</i></a><code>setValue()</code></h3>\n<p>With <code>setValue()</code>, you assign every form control value at once\nby passing in a data object whose properties exactly match the form model behind the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"set-value\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\n  this.heroForm.setValue({\n   name:    this.hero.name,\n   address: this.hero.addresses[0] || new Address()\n});\n\n</code-example>\n<p>The <code>setValue()</code> method checks the data object thoroughly before assigning any form control values.</p>\n<p>It will not accept a data object that doesn't match the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> structure or is\nmissing values for any control in the group. This way, it can return helpful\nerror messages if you have a typo or if you've nested controls incorrectly.\nConversely, <code>patchValue()</code> will fail silently.</p>\n<p>Notice that you can almost use the entire <code>hero</code> as the argument to <code>setValue()</code>\nbecause its shape is similar to the component's <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> structure.</p>\n<p>You can only show the hero's first address and you must account for the possibility that the <code>hero</code> has no addresses at all, as in the conditional setting of the <code>address</code> property in the data object argument:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"set-value-address\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\naddress: this.hero.addresses[0] || new Address()\n\n</code-example>\n<h3 id=\"patchvalue\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#patchvalue\"><i class=\"material-icons\">link</i></a><code>patchValue()</code></h3>\n<p>With <strong><code>patchValue()</code></strong>, you can assign values to specific controls in a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>\nby supplying an object of key/value pairs for them.</p>\n<p>This example sets only the form's <code>name</code> control.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-6.component.ts\" region=\"patch-value\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nthis.heroForm.patchValue({\n  name: this.hero.name\n});\n\n</code-example>\n<p>With <code>patchValue()</code> you have more flexibility to cope with divergent data and form models.\nBut unlike <code>setValue()</code>,  <code>patchValue()</code> cannot check for missing control\nvalues and doesn't throw helpful errors.</p>\n<a id=\"hero-list\"></a>\n<h2 id=\"create-the-herolistcomponent-and-heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#create-the-herolistcomponent-and-heroservice\"><i class=\"material-icons\">link</i></a>Create the <code>HeroListComponent</code> and <code>HeroService</code></h2>\n<p>To demonstrate further reactive forms techniques, it is helpful to add more functionality to the example by adding a <code>HeroListComponent</code> and a <code>HeroService</code>.</p>\n<p>The <code>HeroDetailComponent</code> is a nested sub-component of the <code>HeroListComponent</code> in a <em>master/detail</em> view. Together they look like this:</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/hero-list.png\" alt=\"HeroListComponent\" width=\"420\" height=\"264\">\n</figure>\n<p>First, add a <code>HeroListComponent</code> with the following command:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate component HeroList\n\n</code-example>\n<p>Give the <code>HeroListComponent</code> the following contents:</p>\n<code-example path=\"reactive-forms/src/app/hero-list/hero-list.component.ts\" title=\"hero-list.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Observable }        from 'rxjs/Observable';\nimport 'rxjs/add/operator/finally';\n\nimport { Hero }        from '../data-model';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  styleUrls: ['./hero-list.component.css']\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Observable&#x3C;Hero[]>;\n  isLoading = false;\n  selectedHero: Hero;\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() { this.getHeroes(); }\n\n  getHeroes() {\n    this.isLoading = true;\n    this.heroes = this.heroService.getHeroes()\n                      // TODO: error handling\n                      .finally(() => this.isLoading = false);\n    this.selectedHero = undefined;\n  }\n\n  select(hero: Hero) { this.selectedHero = hero; }\n}\n\n\n</code-example>\n<p>Next, add a <code>HeroService</code> using the following command:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate service Hero\n\n</code-example>\n<p>Then, give it the following contents:</p>\n<code-example path=\"reactive-forms/src/app/hero.service.ts\" title=\"hero.service.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of }         from 'rxjs/observable/of';\nimport 'rxjs/add/operator/delay';\n\nimport { Hero, heroes } from './data-model';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n\n  delayMs = 500;\n\n  // Fake server get; assume nothing can go wrong\n  getHeroes(): Observable&#x3C;Hero[]> {\n    return of(heroes).delay(this.delayMs); // simulate latency with delay\n  }\n\n  // Fake server update; assume nothing can go wrong\n  updateHero(hero: Hero): Observable&#x3C;Hero>  {\n    const oldHero = heroes.find(h => h.id === hero.id);\n    const newHero = Object.assign(oldHero, hero); // Demo: mutate cached hero\n    return of(newHero).delay(this.delayMs); // simulate latency with delay\n  }\n}\n\n\n</code-example>\n<p>The <code>HeroListComponent</code> uses an injected <code>HeroService</code> to retrieve heroes from the server\nand then presents those heroes to the user as a series of buttons.\nThe <code>HeroService</code> emulates an HTTP service.\nIt returns an <code>Observable</code> of heroes that resolves after a short delay,\nboth to simulate network latency and to indicate visually\nthe necessarily asynchronous nature of the application.</p>\n<p>When the user clicks on a hero,\nthe component sets its <code>selectedHero</code> property which\nis bound to the <code>hero</code> <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property of the <code>HeroDetailComponent</code>.\nThe <code>HeroDetailComponent</code> detects the changed hero and resets its form\nwith that hero's data values.</p>\n<p>A refresh button clears the hero list and the current selected hero before refetching the heroes.</p>\n<p>Notice that <code>hero-list.component.ts</code> imports <code>Observable</code> and <code>finally</code> while <code>hero.service.ts</code> imports <code>Observable</code>, <code>of</code>,\nand <code>delay</code> from <code>rxjs</code>.</p>\n<p>The remaining <code>HeroListComponent</code> and <code>HeroService</code> implementation details are beyond the scope of this tutorial.\nHowever, the techniques involved are covered elsewhere in the documentation, including the <em>Tour of Heroes</em>\n<a href=\"tutorial/toh-pt3\" title=\"ToH: Multiple Components\">here</a> and <a href=\"tutorial/toh-pt4\" title=\"ToH: Services\">here</a>.</p>\n<p>To use the <code>HeroService</code>, import it into <code>AppModule</code> and add it to the <code>providers</code> array. To use the <code>HeroListComponent</code>, import it, declare it, and export it:</p>\n<code-example path=\"reactive-forms/src/app/app.module.ts\" region=\"hero-service-list\" title=\"app.module.ts (excerpts)\" linenums=\"false\">\n// add JavaScript imports\nimport { HeroListComponent }   from './hero-list/hero-list.component';\nimport { HeroService }         from './hero.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroDetailComponent,\n    HeroListComponent // &#x3C;--declare HeroListComponent\n  ],\n  // ...\n  exports: [\n    AppComponent,\n    HeroDetailComponent,\n    HeroListComponent // &#x3C;-- export HeroListComponent\n  ],\n  providers: [ HeroService ], // &#x3C;-- provide HeroService\n\n</code-example>\n<p>Next, update the <code>HeroListComponent</code> template with the following:</p>\n<code-example path=\"reactive-forms/src/app/hero-list/hero-list.component.html\" title=\"hero-list.component.html\" linenums=\"false\">\n&#x3C;h3 *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isLoading\">&#x3C;i>Loading heroes ... &#x3C;/i>&#x3C;/h3>\n&#x3C;h3 *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!isLoading\">Select <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> hero:&#x3C;/h3>\n\n&#x3C;nav>\n  &#x3C;button (click)=\"getHeroes()\" class=\"btn btn-primary\">Refresh&#x3C;/button>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"select(hero)\">{{hero.name}}&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/nav>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n  &#x3C;hr>\n  &#x3C;h2>Hero Detail&#x3C;/h2>\n  &#x3C;h3>Editing: {{selectedHero.name}}&#x3C;/h3>\n  &#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n&#x3C;/div>\n\n\n</code-example>\n<p>These changes need to be reflected in the <code>AppComponent</code> template. Replace the contents of <code>app.component.html</code> with updated markup to use the <code>HeroListComponent</code>, instead of the <code>HeroDetailComponent</code>:</p>\n<code-example path=\"reactive-forms/src/app/app.component.html\" title=\"app.component.html\" linenums=\"false\">\n&#x3C;div class=\"container\">\n  &#x3C;h1>Reactive Forms&#x3C;/h1>\n  &#x3C;app-hero-list>&#x3C;/app-hero-list>\n&#x3C;/div>\n\n\n</code-example>\n<p>Finally, add an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property to the <code>HeroDetailComponent</code>\nso <code>HeroDetailComponent</code> can receive the data from <code>HeroListComponent</code>. Remember to add the <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> symbol to the <code>@angular/core</code>  <code>import</code> statement in the list of JavaScript imports too.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-6.component.ts\" region=\"hero\" title=\"hero-detail.component.ts (excerpt)\" linenums=\"false\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n</code-example>\n<p>Now you should be able to click on a button for a hero and a form renders.</p>\n<h2 id=\"when-to-set-form-model-values-ngonchanges\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#when-to-set-form-model-values-ngonchanges\"><i class=\"material-icons\">link</i></a>When to set form model values (<code>ngOnChanges</code>)</h2>\n<p>When to set form model values depends upon when the component gets the data model values.</p>\n<p>The <code>HeroListComponent</code> displays hero names to the user.\nWhen the user clicks on a hero, the <code>HeroListComponent</code> passes the selected hero into the <code>HeroDetailComponent</code>\nby binding to its <code>hero</code> <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property.</p>\n<code-example path=\"reactive-forms/src/app/hero-list/hero-list.component.1.html\" title=\"hero-list.component.html (simplified)\" linenums=\"false\">\n&#x3C;nav>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"select(hero)\">{{hero.name}}&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/nav>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n  &#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n&#x3C;/div>\n\n\n</code-example>\n<p>In this approach, the value of <code>hero</code> in the <code>HeroDetailComponent</code> changes\nevery time the user selects a new hero.\nYou can call <code>setValue()</code> using the <a href=\"guide/lifecycle-hooks#onchanges\">ngOnChanges</a>\nlifecycle hook, which Angular calls whenever the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> <code>hero</code> property changes.</p>\n<h3 id=\"reset-the-form\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reset-the-form\"><i class=\"material-icons\">link</i></a>Reset the form</h3>\n<p>First, import the <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> symbol in <code>hero-detail.component.ts</code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-6.component.ts\" region=\"import-input\" title=\"src/app/hero-detail/hero-detail.component.ts (core imports)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> }             from '@angular/core';\n\n</code-example>\n<p>Next, let Angular know that the <code>HeroDetailComponent</code> implements <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"onchanges-implementation\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nexport class HeroDetailComponent implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n\n</code-example>\n<p>Add the <code>ngOnChanges</code> method to the class as follows:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"ngOnChanges\" title=\"src/app/hero-detail/hero-detail.component.ts (ngOnchanges)\" linenums=\"false\">\nngOnChanges() {\n  this.rebuildForm();\n}\n\n</code-example>\n<p>Notice that it calls <code>rebuildForm()</code>, which is a method where you\ncan set the values. You can name <code>rebuildForm()</code> anything that makes sense to you. It isn't built into Angular, but is a method you create to effectively leverage the <code>ngOnChanges</code> lifecycle hook.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"rebuildForm\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nrebuildForm() {\n  this.heroForm.reset({\n    name: this.hero.name,\n    address: this.hero.addresses[0] || new Address()\n  });\n}\n\n</code-example>\n<p>The <code>rebuildForm()</code> method does two things; resets the hero's name and the address.</p>\n<a id=\"form-array\"></a>\n<h2 id=\"use-formarray-to-present-an-array-of-formgroups\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#use-formarray-to-present-an-array-of-formgroups\"><i class=\"material-icons\">link</i></a>Use <em>FormArray</em> to present an array of <code>FormGroups</code></h2>\n<p>A <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> is a named object whose property values are <code>FormControls</code> and other <code>FormGroups</code>.</p>\n<p>Sometimes you need to present an arbitrary number of controls or groups.\nFor example, a hero may have zero, one, or any number of addresses.</p>\n<p>The <code>Hero.addresses</code> property is an array of <code>Address</code> instances.\nAn <code>address</code>  <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> can display one <code>Address</code>.\nAn Angular <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> can display an array of <code>address</code>  <code>FormGroups</code>.</p>\n<p>To get access to the <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> class, import it into <code>hero-detail.component.ts</code>:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"imports\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> }                   from '@angular/core';\nimport { <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>, <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\nimport { Address, Hero, states } from '../data-model';\n\n</code-example>\n<p>To work with a <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> do the following:</p>\n<ol>\n<li>\n<p>Define the items in the array; that is, <code>FormControls</code> or <code>FormGroups</code>.</p>\n</li>\n<li>\n<p>Initialize the array with items created from data in the data model.</p>\n</li>\n<li>\n<p>Add and remove items as the user requires.</p>\n</li>\n</ol>\n<p>Define a <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> for <code>Hero.addresses</code> and\nlet the user add or modify addresses.</p>\n<p>You’ll need to redefine the form model in the <code>HeroDetailComponent</code> <code>createForm()</code> method,\nwhich currently only displays the first hero address in an <code>address</code> <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"address-form-group\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nthis.heroForm = this.fb.group({\n  name: ['', Validators.required ],\n  address: this.fb.group(new Address()), // &#x3C;-- <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new address\n  power: '',\n  sidekick: ''\n});\n\n</code-example>\n<h3 id=\"from-address-to-secretlairs\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#from-address-to-secretlairs\"><i class=\"material-icons\">link</i></a>From <code>address</code> to <code>secretLairs</code></h3>\n<p>From the user's point of view, heroes don't have <em>addresses</em>.\nAddresses are for mere mortals. Heroes have <em>secret lairs</em>!\nReplace the address <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> definition with a <code>secretLairs</code>  <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> definition:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"secretLairs-form-array\" title=\"src/app/hero-detail/hero-detail-8.component.ts\" linenums=\"false\">\nthis.heroForm = this.fb.group({\n  name: ['', Validators.required ],\n  secretLairs: this.fb.array([]), // &#x3C;-- secretLairs as an empty <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>\n  power: '',\n  sidekick: ''\n});\n\n</code-example>\n<p>In <code>hero-detail.component.html</code> change <code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"address\"</code> to <code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"secretLairs\"</code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.html\" region=\"form-array-name\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\n&#x3C;div <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"secretLairs\" class=\"well well-lg\">\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Changing the form control name from <code>address</code> to <code>secretLairs</code> underscores an important point:\nthe <em>form model</em> doesn't have to match the <em>data model</em>.</p>\n<p>Obviously, there has to be a relationship between the two.\nBut it can be anything that makes sense within the application domain.</p>\n<p><em>Presentation</em> requirements often differ from <em>data</em> requirements.\nThe reactive forms approach both emphasizes and facilitates this distinction.</p>\n</div>\n<h3 id=\"initialize-the-secretlairs-formarray\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#initialize-the-secretlairs-formarray\"><i class=\"material-icons\">link</i></a>Initialize the <code>secretLairs</code> <em>FormArray</em></h3>\n<p>The default form displays a nameless hero with no addresses.</p>\n<p>You need a method to populate (or repopulate) the <code>secretLairs</code> with actual hero addresses whenever\nthe parent <code>HeroListComponent</code> sets the <code>HeroDetailComponent.hero</code>  <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property to a new <code>Hero</code>.</p>\n<p>The following <code>setAddresses()</code> method replaces the <code>secretLairs</code>  <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> with a new <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>,\ninitialized by an array of hero address <code>FormGroups</code>. Add this to the <code>HeroDetailComponent</code> class:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"set-addresses\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nsetAddresses(addresses: Address[]) {\n  const addressFGs = addresses.map(address => this.fb.group(address));\n  const addressFormArray = this.fb.array(addressFGs);\n  this.heroForm.setControl('secretLairs', addressFormArray);\n}\n\n</code-example>\n<p>Notice that you replace the previous <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> with the\n<code><a href=\"api/forms/FormGroup#setControl\" class=\"code-anchor\">FormGroup.setControl()</a></code> method, not with <code>setValue()</code>.\nYou're replacing a <em>control</em>, not the <em>value</em> of a control.</p>\n<p>Notice also that the <code>secretLairs</code>  <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> contains <code>FormGroups</code>, not <code>Addresses</code>.</p>\n<p>Next, call <code>setAddresses()</code> from within <code>rebuildForm()</code>:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"rebuildform\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nrebuildForm() {\n  this.heroForm.reset({\n    name: this.hero.name\n  });\n  this.setAddresses(this.hero.addresses);\n}\n\n</code-example>\n<h3 id=\"get-the-formarray\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#get-the-formarray\"><i class=\"material-icons\">link</i></a>Get the <em>FormArray</em></h3>\n<p>The <code>HeroDetailComponent</code> should be able to display, add, and remove items from the <code>secretLairs</code>  <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>.</p>\n<p>Use the <code>FormGroup.get()</code> method to acquire a reference to that <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>.\nWrap the expression in a <code>secretLairs</code> convenience property for clarity and re-use. Add the following to <code>HeroDetailComponent</code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"get-secret-lairs\" title=\"src/app/hero-detail/hero-detail.component.ts (secretLairs property)\" linenums=\"false\">\nget secretLairs(): <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a> {\n  return this.heroForm.get('secretLairs') as <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>;\n};\n\n</code-example>\n<h3 id=\"display-the-formarray\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#display-the-formarray\"><i class=\"material-icons\">link</i></a>Display the <em>FormArray</em></h3>\n<p>The current HTML template displays a single <code>address</code> <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.\nRevise it to display zero, one, or more of the hero's <code>address</code>  <code>FormGroups</code>.</p>\n<p>This is mostly a matter of wrapping the previous template HTML for an address in a <code>&#x3C;div></code> and\nrepeating that <code>&#x3C;div></code> with <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>.</p>\n<p>There are three key points when writing the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>:</p>\n<ol>\n<li>\n<p>Add another wrapping <code>&#x3C;div></code>, around the <code>&#x3C;div></code> with <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>, and\nset its <code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a></code> directive to <code>\"secretLairs\"</code>.\nThis step establishes the <code>secretLairs</code>  <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> as the context for form controls in the inner, repeated HTML template.</p>\n</li>\n<li>\n<p>The source of the repeated items is the <code><a href=\"api/forms/FormArray#controls\" class=\"code-anchor\">FormArray.controls</a></code>, not the <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> itself.\nEach control is an <code>address</code>  <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, exactly what the previous (now repeated) template HTML expected.</p>\n</li>\n<li>\n<p>Each repeated <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> needs a unique <code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code>, which must be the index of the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> in the <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>.\nYou'll re-use that index to compose a unique label for each address.</p>\n</li>\n</ol>\n<p>Here's the skeleton for the secret lairs section of the HTML template:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.html\" region=\"form-array-skeleton\" title=\"src/app/hero-detail/hero-detail.component.html (*ngFor)\" linenums=\"false\">\n&#x3C;div <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"secretLairs\" class=\"well well-lg\">\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let address of secretLairs.controls; let i=index\" [<a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>]=\"i\" >\n    &#x3C;!-- The repeated address template -->\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-example>\n<p>Here's the complete template for the secret lairs section. Add this to <code>HeroDetailComponent</code> template, replacing the <code>forGroupName=address</code>  <code>&#x3C;div></code>:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.html\" region=\"form-array\" title=\"src/app/hero-detail/hero-detail.component.html (excerpt)\">\n&#x3C;div <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"secretLairs\" class=\"well well-lg\">\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let address of secretLairs.controls; let i=index\" [<a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>]=\"i\" >\n    &#x3C;!-- The repeated address template -->\n    &#x3C;h4>Address #{{i + 1}}&#x3C;/h4>\n    &#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"margin-left: 1em;\">\n      &#x3C;div class=\"form-group\">\n        &#x3C;label class=\"center-block\">Street:\n          &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\">\n        &#x3C;/label>\n      &#x3C;/div>\n      &#x3C;div class=\"form-group\">\n        &#x3C;label class=\"center-block\">City:\n          &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\">\n        &#x3C;/label>\n      &#x3C;/div>\n      &#x3C;div class=\"form-group\">\n        &#x3C;label class=\"center-block\">State:\n          &#x3C;select class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\">\n            &#x3C;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of states\" [value]=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\">{{<a href=\"api/animations/state\" class=\"code-anchor\">state</a>}}&#x3C;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>>\n          &#x3C;/select>\n        &#x3C;/label>\n      &#x3C;/div>\n      &#x3C;div class=\"form-group\">\n        &#x3C;label class=\"center-block\">Zip Code:\n          &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\">\n        &#x3C;/label>\n      &#x3C;/div>\n    &#x3C;/div>\n    &#x3C;br>\n    &#x3C;!-- End of the repeated address template -->\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-example>\n<h3 id=\"add-a-new-lair-to-the-formarray\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#add-a-new-lair-to-the-formarray\"><i class=\"material-icons\">link</i></a>Add a new lair to the <em>FormArray</em></h3>\n<p>Add an <code>addLair()</code> method that gets the <code>secretLairs</code>  <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> and appends a new <code>address</code>  <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> to it.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"add-lair\" title=\"src/app/hero-detail/hero-detail.component.ts (addLair method)\" linenums=\"false\">\naddLair() {\n  this.secretLairs.push(this.fb.group(new Address()));\n}\n\n</code-example>\n<p>Place a button on the form so the user can add a new <em>secret lair</em> and wire it to the component's <code>addLair()</code> method. Put it just before the closing <code>&#x3C;/div></code> of the <code>secretLairs</code>  <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.html\" region=\"add-lair\" title=\"src/app/hero-detail/hero-detail.component.html (addLair button)\" linenums=\"false\">\n&#x3C;button (click)=\"addLair()\" type=\"button\">Add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> Secret Lair&#x3C;/button>\n\n</code-example>\n<div class=\"alert is-important\">\n<p>Be sure to add the <code>type=\"button\"</code> attribute\nbecause without an explicit type, the button type defaults to \"submit\".\nWhen you later add a form submit action, every \"submit\" button triggers the submit action which\nmight do something like save the current changes.\nYou do not want to save changes when the user clicks the <em>Add a Secret Lair</em> button.</p>\n</div>\n<h3 id=\"try-it\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#try-it\"><i class=\"material-icons\">link</i></a>Try it!</h3>\n<p>Back in the browser, select the hero named \"Magneta\".\n\"Magneta\" doesn't have an address, as you can see in the diagnostic JSON at the bottom of the form.</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/addresses-array.png\" alt=\"JSON output of addresses array\" width=\"400\" height=\"40\">\n</figure>\n<p>Click the \"<em>Add a Secret Lair</em>\" button.\nA new address section appears. Well done!</p>\n<h3 id=\"remove-a-lair\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#remove-a-lair\"><i class=\"material-icons\">link</i></a>Remove a lair</h3>\n<p>This example can <em>add</em> addresses but it can't <em>remove</em> them.\nFor extra credit, write a <code>removeLair</code> method and wire it to a button on the repeating address HTML.</p>\n<a id=\"observe-control\"></a>\n<h2 id=\"observe-control-changes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#observe-control-changes\"><i class=\"material-icons\">link</i></a>Observe control changes</h2>\n<p>Angular calls <code>ngOnChanges()</code> when the user picks a hero in the parent <code>HeroListComponent</code>.\nPicking a hero changes the <code>HeroDetailComponent.hero</code>  <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property.</p>\n<p>Angular does <em>not</em> call <code>ngOnChanges()</code> when the user modifies the hero's <code>name</code> or <code>secretLairs</code>.\nFortunately, you can learn about such changes by subscribing to one of the <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> properties\nthat raises a change event.</p>\n<p>These are properties, such as <code>valueChanges</code>, that return an RxJS <code>Observable</code>.\nYou don't need to know much about RxJS <code>Observable</code> to monitor form control values.</p>\n<p>Add the following method to log changes to the value of the <code>name</code> <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"log-name-change\" title=\"src/app/hero-detail/hero-detail.component.ts (logNameChange)\" linenums=\"false\">\nnameChangeLog: string[] = [];\nlogNameChange() {\n  const nameControl = this.heroForm.get('name');\n  nameControl.valueChanges.forEach(\n    (value: string) => this.nameChangeLog.push(value)\n  );\n}\n\n</code-example>\n<p>Call it in the constructor, after <code>createForm()</code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"ctor\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nconstructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {\n  this.createForm();\n  this.logNameChange();\n}\n\n</code-example>\n<p>The <code>logNameChange()</code> method pushes name-change values into a <code>nameChangeLog</code> array.\nDisplay that array at the bottom of the component template with this <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> binding:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.html\" region=\"name-change-log\" title=\"src/app/hero-detail/hero-detail.component.html (Name change log)\" linenums=\"false\">\n&#x3C;h4>Name change log&#x3C;/h4>\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let name of nameChangeLog\">{{name}}&#x3C;/div>\n\n</code-example>\n<p>Return to the browser, select a hero; for example, Magneta, and start typing in the <code>name</code>  <code>&#x3C;input></code>.\nYou should see a new name in the log after each keystroke.</p>\n<h3 id=\"when-to-use-it\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#when-to-use-it\"><i class=\"material-icons\">link</i></a>When to use it</h3>\n<p>An interpolation binding is the easier way to display a name change.\nSubscribing to an observable <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> property is handy for triggering\napplication logic within the component class.</p>\n<a id=\"save\"></a>\n<h2 id=\"save-form-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#save-form-data\"><i class=\"material-icons\">link</i></a>Save form data</h2>\n<p>The <code>HeroDetailComponent</code> captures user input but it doesn't do anything with it.\nIn a real app, you'd probably save those hero changes, revert unsaved changes, and resume editing.\nAfter you implement both features in this section, the form will look like this:</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/save-revert-buttons.png\" alt=\"Form with save &#x26; revert buttons\" width=\"389\" height=\"297\">\n</figure>\n<h3 id=\"save\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#save\"><i class=\"material-icons\">link</i></a>Save</h3>\n<p>When the user submits the form,\nthe <code>HeroDetailComponent</code> will pass an instance of the hero <em>data model</em>\nto a save method on the injected <code>HeroService</code>. Add the following to <code>HeroDetailComponent</code>.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"on-submit\" title=\"src/app/hero-detail/hero-detail.component.ts (onSubmit)\" linenums=\"false\">\nonSubmit() {\n  this.hero = this.prepareSaveHero();\n  this.heroService.updateHero(this.hero).subscribe(/* error handling */);\n  this.rebuildForm();\n}\n\n</code-example>\n<!-- TODO: Need to add `private heroService: HeroService` to constructor and import the HeroService. Remove novalidate-->\n<p>This original <code>hero</code> had the pre-save values. The user's changes are still in the <em>form model</em>.\nSo you create a new <code>hero</code> from a combination of original hero values (the <code>hero.id</code>)\nand deep copies of the changed form model values, using the <code>prepareSaveHero()</code> helper.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"prepare-save-hero\" title=\"src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)\" linenums=\"false\">\nprepareSaveHero(): Hero {\n  const formModel = this.heroForm.value;\n\n  // deep copy of form model lairs\n  const secretLairsDeepCopy: Address[] = formModel.secretLairs.map(\n    (address: Address) => Object.assign({}, address)\n  );\n\n  // return new `Hero` object containing <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> combination of original hero value(s)\n  // and deep copies of changed form model values\n  const saveHero: Hero = {\n    id: this.hero.id,\n    name: formModel.name as string,\n    // addresses: formModel.secretLairs // &#x3C;-- bad!\n    addresses: secretLairsDeepCopy\n  };\n  return saveHero;\n}\n\n</code-example>\n<p>Make sure to import <code>HeroService</code> and add it to the constructor:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"import-service\" title=\"src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)\" linenums=\"false\">\nimport { HeroService }           from '../hero.service';\n\n</code-example>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"ctor\" title=\"src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)\" linenums=\"false\">\nconstructor(\n  private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>,\n  private heroService: HeroService) {\n\n  this.createForm();\n  this.logNameChange();\n}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p><strong>Address deep copy</strong></p>\n<p>Had you assigned the <code>formModel.secretLairs</code> to <code>saveHero.addresses</code> (see line commented out),\nthe addresses in <code>saveHero.addresses</code> array would be the same objects\nas the lairs in the <code>formModel.secretLairs</code>.\nA user's subsequent changes to a lair street would mutate an address street in the <code>saveHero</code>.</p>\n<p>The <code>prepareSaveHero</code> method makes copies of the form model's <code>secretLairs</code> objects so that can't happen.</p>\n</div>\n<h3 id=\"revert-cancel-changes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#revert-cancel-changes\"><i class=\"material-icons\">link</i></a>Revert (cancel changes)</h3>\n<p>The user cancels changes and reverts the form to the original state by pressing the Revert button.</p>\n<p>Reverting is easy. Simply re-execute the <code>rebuildForm()</code> method that built the form model from the original, unchanged <code>hero</code> data model.</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"revert\" title=\"src/app/hero-detail/hero-detail.component.ts (revert)\" linenums=\"false\">\nrevert() { this.rebuildForm(); }\n\n</code-example>\n<h3 id=\"buttons\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#buttons\"><i class=\"material-icons\">link</i></a>Buttons</h3>\n<p>Add the \"Save\" and \"Revert\" buttons near the top of the component's template:</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.html\" region=\"buttons\" title=\"src/app/hero-detail/hero-detail.component.html (Save and Revert buttons)\" linenums=\"false\">\n&#x3C;form [formGroup]=\"heroForm\" (ngSubmit)=\"onSubmit()\">\n  &#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"margin-bottom: 1em\">\n    &#x3C;button type=\"submit\"\n            [disabled]=\"heroForm.pristine\" class=\"btn btn-success\">Save&#x3C;/button> &#x26;nbsp;\n    &#x3C;button type=\"button\" (click)=\"revert()\"\n            [disabled]=\"heroForm.pristine\" class=\"btn btn-danger\">Revert&#x3C;/button>\n  &#x3C;/div>\n\n  &#x3C;!-- Hero Detail Controls -->\n  &#x3C;div class=\"form-group radio\">\n    &#x3C;h4>Super power:&#x3C;/h4>\n    &#x3C;label class=\"center-block\">&#x3C;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"flight\">Flight&#x3C;/label>\n    &#x3C;label class=\"center-block\">&#x3C;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"x-ray vision\">X-ray vision&#x3C;/label>\n    &#x3C;label class=\"center-block\">&#x3C;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"strength\">Strength&#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"checkbox\">\n    &#x3C;label class=\"center-block\">\n      &#x3C;input type=\"checkbox\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"sidekick\">I have <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> sidekick.\n    &#x3C;/label>\n  &#x3C;/div>\n&#x3C;/form>\n\n</code-example>\n<p>The buttons are disabled until the user \"dirties\" the form by changing a value in any of its form controls (<code>heroForm.dirty</code>).</p>\n<p>Clicking a button of type <code>\"submit\"</code> triggers the <code>ngSubmit</code> event which calls the component's <code>onSubmit</code> method.\nClicking the revert button triggers a call to the component's <code>revert</code> method.\nUsers now can save or revert changes.</p>\n<p>Try the <live-example stackblitz=\"final\" title=\"Reactive Forms (final) in Stackblitz\"></live-example>.</p>\n<a id=\"source-code\"></a>\n<p>The key files of the final version are as follows:</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/app.component.html\" path=\"reactive-forms/src/app/app.component.html\">\n&#x3C;div class=\"container\">\n  &#x3C;h1>Reactive Forms&#x3C;/h1>\n  &#x3C;app-hero-list>&#x3C;/app-hero-list>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"reactive-forms/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"reactive-forms/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }            from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }       from '@angular/platform-browser';\nimport { <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> } from '@angular/forms';  // &#x3C;-- #1 import module\n\nimport { AppComponent }        from './app.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n// add JavaScript imports\nimport { HeroListComponent }   from './hero-list/hero-list.component';\nimport { HeroService }         from './hero.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroDetailComponent,\n    HeroListComponent // &#x3C;--declare HeroListComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> // &#x3C;-- #2 add to @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> imports\n  ],\n  // export for the DemoModule\n  // ...\n  exports: [\n    AppComponent,\n    HeroDetailComponent,\n    HeroListComponent // &#x3C;-- export HeroListComponent\n  ],\n  providers: [ HeroService ], // &#x3C;-- provide HeroService\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-detail/hero-detail.component.ts\" path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> }       from '@angular/core';\nimport { <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>, <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from '@angular/forms';\n\nimport { Address, Hero, states } from '../data-model';\nimport { HeroService }           from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: ['./hero-detail.component.css']\n})\n\nexport class HeroDetailComponent implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n  heroForm: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  nameChangeLog: string[] = [];\n  states = states;\n\n  constructor(\n    private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>,\n    private heroService: HeroService) {\n\n    this.createForm();\n    this.logNameChange();\n  }\n\n  createForm() {\n    this.heroForm = this.fb.group({\n      name: '',\n      secretLairs: this.fb.array([]),\n      power: '',\n      sidekick: ''\n    });\n  }\n\n  ngOnChanges() {\n    this.rebuildForm();\n  }\n\n  rebuildForm() {\n    this.heroForm.reset({\n      name: this.hero.name\n    });\n    this.setAddresses(this.hero.addresses);\n  }\n\n  get secretLairs(): <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a> {\n    return this.heroForm.get('secretLairs') as <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>;\n  };\n\n  setAddresses(addresses: Address[]) {\n    const addressFGs = addresses.map(address => this.fb.group(address));\n    const addressFormArray = this.fb.array(addressFGs);\n    this.heroForm.setControl('secretLairs', addressFormArray);\n  }\n\n  addLair() {\n    this.secretLairs.push(this.fb.group(new Address()));\n  }\n\n  onSubmit() {\n    this.hero = this.prepareSaveHero();\n    this.heroService.updateHero(this.hero).subscribe(/* error handling */);\n    this.rebuildForm();\n  }\n\n  prepareSaveHero(): Hero {\n    const formModel = this.heroForm.value;\n\n    // deep copy of form model lairs\n    const secretLairsDeepCopy: Address[] = formModel.secretLairs.map(\n      (address: Address) => Object.assign({}, address)\n    );\n\n    // return new `Hero` object containing <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> combination of original hero value(s)\n    // and deep copies of changed form model values\n    const saveHero: Hero = {\n      id: this.hero.id,\n      name: formModel.name as string,\n      // addresses: formModel.secretLairs // &#x3C;-- bad!\n      addresses: secretLairsDeepCopy\n    };\n    return saveHero;\n  }\n\n  revert() { this.rebuildForm(); }\n\n  logNameChange() {\n    const nameControl = this.heroForm.get('name');\n    nameControl.valueChanges.forEach(\n      (value: string) => this.nameChangeLog.push(value)\n    );\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-detail/hero-detail.component.html\" path=\"reactive-forms/src/app/hero-detail/hero-detail.component.html\">\n&#x3C;form [formGroup]=\"heroForm\" (ngSubmit)=\"onSubmit()\">\n  &#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"margin-bottom: 1em\">\n    &#x3C;button type=\"submit\"\n            [disabled]=\"heroForm.pristine\" class=\"btn btn-success\">Save&#x3C;/button> &#x26;nbsp;\n    &#x3C;button type=\"button\" (click)=\"revert()\"\n            [disabled]=\"heroForm.pristine\" class=\"btn btn-danger\">Revert&#x3C;/button>\n  &#x3C;/div>\n\n  &#x3C;!-- Hero Detail Controls -->\n  &#x3C;div class=\"form-group\">\n      &#x3C;label class=\"center-block\">Name:\n        &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"name\">\n      &#x3C;/label>\n  &#x3C;/div>\n\n  &#x3C;div <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"secretLairs\" class=\"well well-lg\">\n    &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let address of secretLairs.controls; let i=index\" [<a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>]=\"i\" >\n      &#x3C;!-- The repeated address template -->\n      &#x3C;h4>Address #{{i + 1}}&#x3C;/h4>\n      &#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"margin-left: 1em;\">\n        &#x3C;div class=\"form-group\">\n          &#x3C;label class=\"center-block\">Street:\n            &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\">\n          &#x3C;/label>\n        &#x3C;/div>\n        &#x3C;div class=\"form-group\">\n          &#x3C;label class=\"center-block\">City:\n            &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\">\n          &#x3C;/label>\n        &#x3C;/div>\n        &#x3C;div class=\"form-group\">\n          &#x3C;label class=\"center-block\">State:\n            &#x3C;select class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\">\n              &#x3C;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of states\" [value]=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\">{{<a href=\"api/animations/state\" class=\"code-anchor\">state</a>}}&#x3C;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>>\n            &#x3C;/select>\n          &#x3C;/label>\n        &#x3C;/div>\n        &#x3C;div class=\"form-group\">\n          &#x3C;label class=\"center-block\">Zip Code:\n            &#x3C;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\">\n          &#x3C;/label>\n        &#x3C;/div>\n      &#x3C;/div>\n      &#x3C;br>\n      &#x3C;!-- End of the repeated address template -->\n    &#x3C;/div>\n    &#x3C;button (click)=\"addLair()\" type=\"button\">Add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> Secret Lair&#x3C;/button>\n  &#x3C;/div>\n  &#x3C;div class=\"form-group radio\">\n    &#x3C;h4>Super power:&#x3C;/h4>\n    &#x3C;label class=\"center-block\">&#x3C;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"flight\">Flight&#x3C;/label>\n    &#x3C;label class=\"center-block\">&#x3C;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"x-ray vision\">X-ray vision&#x3C;/label>\n    &#x3C;label class=\"center-block\">&#x3C;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"strength\">Strength&#x3C;/label>\n  &#x3C;/div>\n  &#x3C;div class=\"checkbox\">\n    &#x3C;label class=\"center-block\">\n      &#x3C;input type=\"checkbox\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"sidekick\">I have <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> sidekick.\n    &#x3C;/label>\n  &#x3C;/div>\n&#x3C;/form>\n\n&#x3C;p>heroForm value: {{ heroForm.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&#x3C;/p>\n\n&#x3C;h4>Name change log&#x3C;/h4>\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let name of nameChangeLog\">{{name}}&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-list/hero-list.component.html\" path=\"reactive-forms/src/app/hero-list/hero-list.component.html\">\n&#x3C;h3 *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isLoading\">&#x3C;i>Loading heroes ... &#x3C;/i>&#x3C;/h3>\n&#x3C;h3 *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!isLoading\">Select <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> hero:&#x3C;/h3>\n\n&#x3C;nav>\n  &#x3C;button (click)=\"getHeroes()\" class=\"btn btn-primary\">Refresh&#x3C;/button>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"select(hero)\">{{hero.name}}&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/nav>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n  &#x3C;hr>\n  &#x3C;h2>Hero Detail&#x3C;/h2>\n  &#x3C;h3>Editing: {{selectedHero.name}}&#x3C;/h3>\n  &#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-list/hero-list.component.ts\" path=\"reactive-forms/src/app/hero-list/hero-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Observable }        from 'rxjs/Observable';\nimport 'rxjs/add/operator/finally';\n\nimport { Hero }        from '../data-model';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  styleUrls: ['./hero-list.component.css']\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Observable&#x3C;Hero[]>;\n  isLoading = false;\n  selectedHero: Hero;\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() { this.getHeroes(); }\n\n  getHeroes() {\n    this.isLoading = true;\n    this.heroes = this.heroService.getHeroes()\n                      // TODO: error handling\n                      .finally(() => this.isLoading = false);\n    this.selectedHero = undefined;\n  }\n\n  select(hero: Hero) { this.selectedHero = hero; }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/data-model.ts\" path=\"reactive-forms/src/app/data-model.ts\">\nexport class Hero {\n  id = 0;\n  name = '';\n  addresses: Address[];\n}\n\nexport class Address {\n  street = '';\n  city   = '';\n  <a href=\"api/animations/state\" class=\"code-anchor\">state</a>  = '';\n  zip    = '';\n}\n\nexport const heroes: Hero[] = [\n  {\n    id: 1,\n    name: 'Whirlwind',\n    addresses: [\n      {street: '123 Main',  city: 'Anywhere', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'CA',  zip: '94801'},\n      {street: '456 Maple', city: 'Somewhere', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'VA', zip: '23226'},\n    ]\n  },\n  {\n    id: 2,\n    name: 'Bombastic',\n    addresses: [\n      {street: '789 Elm',  city: 'Smallville', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'OH',  zip: '04501'},\n    ]\n  },\n  {\n    id: 3,\n    name: 'Magneta',\n    addresses: [ ]\n  },\n];\n\nexport const states = ['CA', 'MD', 'OH', 'VA'];\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero.service.ts\" path=\"reactive-forms/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of }         from 'rxjs/observable/of';\nimport 'rxjs/add/operator/delay';\n\nimport { Hero, heroes } from './data-model';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n\n  delayMs = 500;\n\n  // Fake server get; assume nothing can go wrong\n  getHeroes(): Observable&#x3C;Hero[]> {\n    return of(heroes).delay(this.delayMs); // simulate latency with delay\n  }\n\n  // Fake server update; assume nothing can go wrong\n  updateHero(hero: Hero): Observable&#x3C;Hero>  {\n    const oldHero = heroes.find(h => h.id === hero.id);\n    const newHero = Object.assign(oldHero, hero); // Demo: mutate cached hero\n    return of(newHero).delay(this.delayMs); // simulate latency with delay\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p>You can download the complete source for all steps in this guide\nfrom the <live-example title=\"Reactive Forms Demo in Stackblitz\">Reactive Forms Demo</live-example> live example.</p>\n\n</div>\n<!-- links to this doc:\n - guide/change-log\n - guide/dynamic-form\n - guide/form-validation\n - guide/npm-packages\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/animations/style\n - api/common/JsonPipe\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnChanges\n - api/core/OnInit\n - api/core/ViewChild\n - api/core/testing/async\n - api/core/testing/fakeAsync\n - api/core/testing/inject\n - api/forms/AbstractControl\n - api/forms/CheckboxControlValueAccessor\n - api/forms/Form\n - api/forms/FormArray\n - api/forms/FormArray#controls\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormGroup#setControl\n - api/forms/FormGroupName\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgSelectOption\n - api/forms/RadioControlValueAccessor\n - api/forms/ReactiveFormsModule\n - api/forms/SelectControlValueAccessor\n - api/forms/SelectMultipleControlValueAccessor\n - api/forms/Validators\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - guide/form-validation\n - guide/forms\n - guide/lifecycle-hooks#afterview\n - guide/lifecycle-hooks#onchanges\n - guide/reactive-forms#add-a-formgroup\n - guide/reactive-forms#add-a-new-lair-to-the-formarray\n - guide/reactive-forms#async-vs-sync\n - guide/reactive-forms#buttons\n - guide/reactive-forms#choosing-reactive-or-template-driven-forms\n - guide/reactive-forms#create-a-data-model\n - guide/reactive-forms#create-a-reactive-forms-component\n - guide/reactive-forms#create-the-herolistcomponent-and-heroservice\n - guide/reactive-forms#create-the-template\n - guide/reactive-forms#display-the-formarray\n - guide/reactive-forms#display-the-herodetailcomponent\n - guide/reactive-forms#essential-form-classes\n - guide/reactive-forms#essentials\n - guide/reactive-forms#form-array\n - guide/reactive-forms#from-address-to-secretlairs\n - guide/reactive-forms#get-the-formarray\n - guide/reactive-forms#import-the-reactiveformsmodule\n - guide/reactive-forms#initialize-the-secretlairs-formarray\n - guide/reactive-forms#inspect-formcontrol-properties\n - guide/reactive-forms#introduction-to-formbuilder\n - guide/reactive-forms#introduction-to-reactive-forms\n - guide/reactive-forms#more-formcontrols\n - guide/reactive-forms#nested-formgroups\n - guide/reactive-forms#observe-control-changes\n - guide/reactive-forms#patchvalue\n - guide/reactive-forms#populate-the-form-model-with-setvalue-and-patchvalue\n - guide/reactive-forms#reactive-forms\n - guide/reactive-forms#reactive-forms-1\n - guide/reactive-forms#remove-a-lair\n - guide/reactive-forms#reset-the-form\n - guide/reactive-forms#revert-cancel-changes\n - guide/reactive-forms#save\n - guide/reactive-forms#save-form-data\n - guide/reactive-forms#setup\n - guide/reactive-forms#setvalue\n - guide/reactive-forms#style-the-app\n - guide/reactive-forms#taking-a-look-at-the-form-model\n - guide/reactive-forms#template-driven-forms\n - guide/reactive-forms#the-data-model-and-the-form-model\n - guide/reactive-forms#try-it\n - guide/reactive-forms#use-formarray-to-present-an-array-of-formgroups\n - guide/reactive-forms#validatorsrequired\n - guide/reactive-forms#when-to-set-form-model-values-ngonchanges\n - guide/reactive-forms#when-to-use-it\n - tutorial/toh-pt3\n - tutorial/toh-pt4\n - http://getbootstrap.com/\n-->"
}