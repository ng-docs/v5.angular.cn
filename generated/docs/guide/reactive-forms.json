{
  "id" : "guide/reactive-forms",
  "title" : "响应式表单",
  "contents" : "<div class=\"content\">\n<h1 id=\"reactive-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40y4f8g65elhovw5cwrux943a\"><i class=\"material-icons\">link</i>响应式表单</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4gsaefh271j07nsz3pkpd7i1\"><em>响应式表单</em>是一种 Angular 技术，用于以\n<em>响应式</em>风格创建表单。 本指南将解释响应式表单，你将按照步骤构建一个“英雄详细信息编辑器”表单。</p>\n<a id=\"toc\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kwq3tshvppfdxhkk0ul2pe0x\">尝试 \n<live-example stackblitz=\"final\" title=\"Reactive Forms (final) in Stackblitz\">\n 响应式表单动态示例\n</live-example>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9i8yfw320u3gtph4ulb70n9u7\">你也可以运行 \n<live-example title=\"Reactive Forms Demo in Stackblitz\">\n 响应式表单演示\n</live-example> 版本， 并从顶部的“演示选择器”中选择一个中间步骤。</p>\n<a id=\"intro\"></a>\n<h2 id=\"introduction-to-reactive-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj0ok2nb57mnfh7llyxiufonl\"><i class=\"material-icons\">link</i>响应式表单简介</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5safae7jdmjkuotkja7fwu3xa\">Angular 提供两种表单构建技术：\n<em>响应式</em>表单和\n<em>模板驱动</em>表单。 这两种技术都属于 \n<code>@angular/forms</code> 库， 并共享一组通用的表单控件类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34v8jdccm63l2eyhbgiafbc66\">但它们在理念、编程风格和技术上存在很大差异。 它们甚至有自己的模块：\n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 和 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。</p>\n<h3 id=\"reactive-forms-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b2xwzrnb2ye7twpwf3t9i2eiv\"><i class=\"material-icons\">link</i>响应式表单</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4l4worro2o46ldqvmwj2x8k9\">Angular \n<em>响应式</em>表单促进了\n<em>响应式编程</em>风格， 这种风格有利于显式管理在 非 UI \n<em>数据模型</em>（通常从服务器检索）和 UI 导向的\n<em>表单模型</em>之间流动的数据，该模型保留了 屏幕上 HTML 控件的状态和值。响应式表单提供了使用响应式模式、测试和验证的便利。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aappblm22upwe70jdeyt31khl\">使用\n<em>响应式</em>表单，你可以在组件类中创建一个 Angular 表单控件对象的树， 并将它们绑定到组件模板中的原生表单控件元素，使用本指南中描述的技术。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86cg5xg6iblhvtl8qexqq877r\">你可以在组件类中直接创建和操作表单控件对象。由于组件类可以直接访问数据模型和表单控件结构，因此你可以将数据模型值推送到表单控件中，并将用户更改的值拉回。组件可以观察表单控件状态的变化，并对这些变化做出反应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2vjsha8zag2ai4eiuwqmdxwc\">直接使用表单控件对象的一个优点是，值和有效性更新 \n<a href=\"guide/reactive-forms#async-vs-sync\" title=\"Async vs sync\">始终是同步的，并且在你的控制之下</a>。 你不会遇到有时困扰模板驱动表单的计时问题，并且响应式表单更容易进行单元测试。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26d41vd010dl1pusol5x6otbw\">为了保持响应式范式，组件 保留了\n<em>数据模型</em>的不可变性， 将其视为原始值的纯来源。 组件不会直接更新数据模型， 而是提取用户更改并将它们转发到外部组件或服务， 该组件或服务会对它们进行处理（例如保存它们）， 并返回一个新的\n<em>数据模型</em>到组件，该模型反映了更新后的模型状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9czm1lgzrcj2g9kt9e8m60yqf\">使用响应式表单指令不需要你遵循所有响应式原则， 但它确实促进了响应式编程方法，如果你选择使用它。</p>\n<h3 id=\"template-driven-forms\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8ikuesboztjr8out2q3bj6j8i\"><i class=\"material-icons\">link</i>模板驱动表单</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cl2no5fvyp5xzx8e7sorton3\"><em>模板驱动</em>表单（在 \n<a href=\"guide/forms\">模板指南</a> 中介绍）采用了完全不同的方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3din9f5t7acfpkl0j317cq2kc\">你将 HTML 表单控件（例如 \n<code>&lt;input&gt;</code> 和 \n<code>&lt;select&gt;</code>）放在组件模板中， 并将它们绑定到组件中的\n<em>数据模型</em>属性，使用指令 如 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9coxup4bmt9uj9eqji039jbun\">你不需要创建 Angular 表单控件对象。Angular 指令会为你创建它们，使用你数据绑定中的信息。你也不需要推送和拉取数据值。Angular 会使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 为你处理这些。Angular 会在用户更改时更新可变的\n<em>数据模型</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b86qfbxa6zqosfniwu9a3q762\">因此，\n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令不是 ReactiveFormsModule 的一部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56qqmcc6lojl52glsyufy7r7b\">虽然这意味着组件类中的代码更少，但\n<a href=\"guide/reactive-forms#async-vs-sync\" title=\"Async vs sync\">模板驱动表单是异步的</a>，这可能会在更高级的场景中使开发变得复杂。</p>\n<a id=\"async-vs-sync\"></a>\n<h3 id=\"async-vs-sync\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dk39grvxbsalcht0gwd7rxtl\"><i class=\"material-icons\">link</i>异步与同步</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cr9xxhnona653yvrrvmqmgpjt\">响应式表单是同步的，而模板驱动表单是异步的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5c12g9sskipbe6r39n9qza3vg\">在响应式表单中，你在代码中创建整个表单控件树。你可以立即更新值或向下遍历父表单的后代，因为所有控件始终可用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7axmsg67aselbxkn3z23cwn2l\">模板驱动表单将表单控件的创建委托给指令。为了避免“\n<em>在检查后更改</em>”错误，这些指令需要多个周期才能构建整个控件树。这意味着你必须等待一个周期才能从组件类中操纵任何控件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq5l89vj48t4i3avka9lkxc1z\">例如，如果你使用 \n<code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(<a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a>)</code> 查询注入表单控件并在\n<a href=\"guide/lifecycle-hooks#afterview\" title=\"Lifecycle hooks guide: AfterView\"><code>ngAfterViewInit</code> 生命周期钩子</a> 中检查它，你会发现它没有子节点。你必须使用 \n<code>setTimeout</code> 等待一个周期，才能从控件中提取值、测试其有效性或将其设置为新值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yfy02wfc1iqgx87hi1kp1x3m\">模板驱动表单的异步性也会使单元测试变得复杂。你必须将测试块包装在 \n<code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 或 \n<code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 中，以避免在表单中查找尚未存在的的值。使用响应式表单，所有内容都在你预期的时间可用。</p>\n<h3 id=\"choosing-reactive-or-template-driven-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29a1vzlfpe75wwemrrkh52rkj\"><i class=\"material-icons\">link</i>选择响应式表单或模板驱动表单</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"im1k9pal7ckffe4qrd26kqkt\">响应式表单和模板驱动表单是两种不同的架构范式，各有优缺点。选择最适合你的方法。你可能决定在同一个应用程序中使用两者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9patofjnxhj6y33j8nmue8zx4\">本页面的其余部分探讨\n<em>响应式</em>范式，并专门关注响应式表单技术。有关\n<em>模板驱动表单</em>的信息，请参阅\n<a href=\"guide/forms\"><em>表单</em></a>指南。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3e419grzp2wentpjsk8ydt66\">在下一节中，你将为响应式表单演示设置项目。然后，你将了解\n<a href=\"guide/reactive-forms#essentials\">Angular 表单类</a> 以及如何在响应式表单中使用它们。</p>\n<a id=\"setup\"></a>\n<h2 id=\"setup\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a90a9lk5ukrzn7bkuyktmp1zv\"><i class=\"material-icons\">link</i>设置</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2866raxjwpfvm25fnncpvi7dd\">创建一个名为 \n<code>angular-reactive-forms</code> 的新项目：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng new angular-reactive-forms\n\n</code-example>\n<a id=\"data-model\"></a>\n<h2 id=\"create-a-data-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cukw7wfld4rz4629v7ltjpwct\"><i class=\"material-icons\">link</i>创建数据模型</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87l00k9zj0t7kvvm01arqvzvq\">本指南的重点是编辑英雄的响应式表单组件。你需要一个 \n<code>hero</code> 类和一些英雄数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36vtpggx5f4cl5cj7k300gngu\">使用 CLI 生成一个名为 \n<code>data-model</code> 的新类：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate class data-model\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayjg9dvugps88plnp6mcreqoq\">并将以下内容复制到 \n<code>data-model.ts</code> 中：</p>\n<code-example path=\"reactive-forms/src/app/data-model.ts\" title=\"src/app/data-model.ts\" linenums=\"false\">\nexport class Hero {\n  id = 0;\n  name = '';\n  addresses: Address[];\n}\n\nexport class Address {\n  street = '';\n  city   = '';\n  <a href=\"api/animations/state\" class=\"code-anchor\">state</a>  = '';\n  zip    = '';\n}\n\nexport const heroes: Hero[] = [\n  {\n    id: 1,\n    name: 'Whirlwind',\n    addresses: [\n      {street: '123 Main',  city: 'Anywhere', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'CA',  zip: '94801'},\n      {street: '456 Maple', city: 'Somewhere', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'VA', zip: '23226'},\n    ]\n  },\n  {\n    id: 2,\n    name: 'Bombastic',\n    addresses: [\n      {street: '789 Elm',  city: 'Smallville', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'OH',  zip: '04501'},\n    ]\n  },\n  {\n    id: 3,\n    name: 'Magneta',\n    addresses: [ ]\n  },\n];\n\nexport const states = ['CA', 'MD', 'OH', 'VA'];\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7td0x13dsvfxolbb5d1rucqh7\">该文件导出两个类和两个常量。\n<code>Address</code> 和 \n<code>Hero</code> 类定义了应用程序的\n<em>数据模型</em>。\n<code>heroes</code> 和 \n<code>states</code> 常量提供了测试数据。</p>\n<a id=\"create-component\"></a>\n<h2 id=\"create-a-reactive-forms-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pvf0jmosbg2dezetos10pht8\"><i class=\"material-icons\">link</i>创建一个\n<em>响应式表单</em>组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ds9eumt0gft8eb7slyzq0i1ic\">生成一个名为 \n<code>HeroDetail</code> 的新组件：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate component HeroDetail\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fkmc9ty4gkocnuryhhrd5tfo\">并导入：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-1.component.ts\" region=\"import\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dar42lcx85fu6mqfyssfmjl6x\">接下来，使用 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 更新 \n<code>HeroDetailComponent</code> 类。\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 是一个指令，允许你直接创建和管理 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-1.component.ts\" region=\"v1\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nexport class HeroDetailComponent1 {\n  name = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>();\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e37wz0z9pbj7yt6jl1fv59jjx\">这将创建一个名为 \n<code>name</code> 的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>。它将在模板中绑定到 HTML \n<code>&lt;input&gt;</code> 元素，用于英雄姓名。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqtpwmgycmyqnj2curpm0jo7y\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 构造函数接受三个可选参数：初始数据值、验证器数组和异步验证器数组。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"184cs4aoduqolfl85rmez1lgm\">此简单控件没有数据或验证器。在实际应用程序中，大多数表单控件都同时具有两者。有关 \n<code><a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a></code> 的详细信息，请参阅\n<a href=\"guide/form-validation\">表单验证</a>指南。</p>\n</div>\n<a id=\"create-template\"></a>\n<h2 id=\"create-the-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sba4cbrztk7sp6jw9473ykhb\"><i class=\"material-icons\">link</i>创建模板</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94kqf7oxgpztk3g6owppdu1cn\">现在使用以下标记更新组件的模板。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-1.component.html\" region=\"simple-control\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&lt;h2&gt;Hero Detail&lt;/h2&gt;\n&lt;h3&gt;&lt;i&gt;Just <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;/i&gt;&lt;/h3&gt;\n&lt;label class=\"center-block\"&gt;Name:\n  &lt;input class=\"form-control\" [formControl]=\"name\"&gt;\n&lt;/label&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wrllvnits4fgrb8uyu0bx50b\">为了让 Angular 知道这是你想要与类中的 \n<code>name</code> \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 关联的输入，你需要在模板中的 \n<code>&lt;input&gt;</code> 上使用 \n<code>[formControl]=\"name\"</code>。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kxz74gpapuj4b01h816yg52a\">忽略 \n<code>form-control</code> CSS 类。它属于\n<a href=\"http://getbootstrap.com/\" title=\"Bootstrap CSS\">Bootstrap CSS 库</a>，而不是 Angular，它对表单进行样式设置，但不会以任何方式影响逻辑。</p>\n</div>\n<a id=\"import\"></a>\n<h2 id=\"import-the-reactiveformsmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25kvx3vxqa66zs1kl3ub7sm2h\"><i class=\"material-icons\">link</i>导入 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6567b4svyuvt6ae8zsnje88v\"><code>HeroDetailComponent</code> 模板使用来自 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 的 \n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> 指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3yqrjwf1uksvom52s12vxfpf\">在 \n<code>app.module.ts</code> 中执行以下两件事：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsozxr5ey9pe90xi1rgydt7gl\">使用 JavaScript \n<code>import</code> 语句访问 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45akojjqx3wbcm73wtreuejm3\">将 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 添加到 \n<code>AppModule</code> 的 \n<code>imports</code> 列表中。</li>\n</ol>\n<code-example path=\"reactive-forms/src/app/app.module.ts\" region=\"v1\" title=\"src/app/app.module.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }            from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }       from '@angular/platform-browser';\nimport { <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> } from '@angular/forms';  // &lt;-- #1 import module\n\nimport { AppComponent }        from './app.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroDetailComponent,\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> // &lt;-- #2 add to @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> imports\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<a id=\"update\"></a>\n<h2 id=\"display-the-herodetailcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq1zh4t1tcnc8otw2n7zocv85\"><i class=\"material-icons\">link</i>显示 \n<code>HeroDetailComponent</code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wgjybl7rgluihsa3swivtlt2\">修改 \n<code>AppComponent</code> 模板，使其显示 \n<code>HeroDetailComponent</code>。</p>\n<code-example path=\"reactive-forms/src/app/app.component.1.html\" title=\"src/app/app.component.html\" linenums=\"false\">\n&lt;div class=\"container\"&gt;\n  &lt;h1&gt;Reactive Forms&lt;/h1&gt;\n  &lt;app-hero-detail&gt;&lt;/app-hero-detail&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<a id=\"essentials\"></a>\n<h2 id=\"essential-form-classes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dplrl3o8baj3t9dlrt02eulvz\"><i class=\"material-icons\">link</i>基本表单类</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzwxxxj9bl7mtrs99dttnzc2s\">本指南使用四个基本类来构建响应式表单：</p>\n<table>\n  <tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"aki6980bejn6w979onh1e78y4\">类</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c1zh7m7zz0q1ywb7182og533b\">说明</th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fa54j21upgxfn3bw7psyb38w\"><a href=\"api/forms/AbstractControl\" title=\"API Reference: FormControl\"><code>AbstractControl</code></a> 是三个具体表单控件类的抽象基类；\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>、\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>。它提供了它们的通用行为和属性。</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9el854zap89x0wqsjktg0eia\"><a href=\"api/forms/FormControl\" title=\"API Reference: FormControl\"><code>FormControl</code></a> 跟踪单个表单控件的值和有效性状态。它对应于 HTML 表单控件，例如 \n<code>&lt;input&gt;</code> 或 \n<code>&lt;select&gt;</code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5exzf1i7dhqahr7rhabxjs2j\"><a href=\"api/forms/FormGroup\" title=\"API Reference: FormGroup\"><code>FormGroup</code></a> 跟踪一组 \n<code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code> 实例的值和有效性状态。该组的属性包括其子控件。组件中的顶级表单是一个 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gqfyb2zsklrm83lexhtpojf6\"><a href=\"api/forms/FormArray\" title=\"API Reference: FormArray\"><code>FormArray</code></a> 跟踪数值索引的 \n<code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code> 实例数组的值和有效性状态。</p>\n    </td>\n  </tr>\n</tbody></table>\n<h2 id=\"style-the-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egg3o2quzrcmapfd1rekrmioa\"><i class=\"material-icons\">link</i>设置应用程序样式</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5r3x2h92lk3ypfd67f60lftaj\">要使用 \n<code>AppComponent</code> 和 \n<code>HeroDetailComponent</code> 的模板 HTML 中的 bootstrap CSS 类，请将 \n<code>bootstrap</code> CSS 样式表添加到 \n<code>styles.css</code> 的头部：</p>\n<code-example path=\"reactive-forms/src/styles.1.css\" title=\"styles.css\" linenums=\"false\">\n@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tu2n417y6l4lz3l73eul9hkv\">现在一切都已连接，使用以下命令启动应用程序：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng serve\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmzqy6erzi6m7cpt6ndjo6faf\">浏览器应该显示类似以下内容：</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/just-formcontrol.png\" alt=\"Single FormControl\" width=\"400\" height=\"133\">\n</figure>\n<a id=\"formgroup\"></a>\n<h2 id=\"add-a-formgroup\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53cm0dmzst8zwi0miztxsdtb7\"><i class=\"material-icons\">link</i>添加 FormGroup</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wuafcui8r8kwt4oliazl9mqp\">通常，如果你有多个 \n<code>FormControls</code>，你将在父 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中注册它们。要添加 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，请将其添加到 \n<code>hero-detail.component.ts</code> 的导入部分：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-2.component.ts\" region=\"imports\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }              from '@angular/core';\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from '@angular/forms';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmlkwsc9rwvfq85im1bsebj1v\">在类中，将 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 包裹在一个名为 \n<code>heroForm</code> 的 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中，如下所示：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-2.component.ts\" region=\"v2\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nexport class HeroDetailComponent2 {\n  heroForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> ({\n    name: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()\n  });\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tlabu02ze83tfohmht2oxrb3\">现在你已经对类进行了更改，需要在模板中反映这些更改。更新 \n<code>hero-detail.component.html</code>，用以下内容替换它。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-2.component.html\" region=\"basic-form\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&lt;h2&gt;Hero Detail&lt;/h2&gt;\n&lt;h3&gt;&lt;i&gt;<a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> in <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>&lt;/i&gt;&lt;/h3&gt;\n&lt;form [formGroup]=\"heroForm\"&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label class=\"center-block\"&gt;Name:\n      &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"name\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4w4hx3djjsfdljisw1uweuj8m\">注意，现在单个 \n<code>&lt;input&gt;</code> 位于 \n<code>&lt;form&gt;</code> 元素中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hlootki85r7twte3u3rd0dh8\"><code>formGroup</code> 是一个响应式表单指令，它接受一个现有的 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 实例，并将其与 HTML 元素关联。在本例中，它将你保存为 \n<code>heroForm</code> 的 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 与 \n<code>&lt;form&gt;</code> 元素关联。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76i31oyp4wtv0mrerbhhs9unk\">由于类现在有一个 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，你必须更新模板语法，以便将 \n<code>&lt;input&gt;</code> 与组件类中相应的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 关联。如果没有父 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，\n<code>[formControl]=\"name\"</code> 在之前可以正常工作，因为该指令可以独立存在，也就是说，它可以在没有 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的情况下工作。有了父 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，\n<code>name</code> \n<code>&lt;input&gt;</code> 需要使用语法 \n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=name</code> 才能与类中正确的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 关联。此语法告诉 Angular 查找父 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>（在本例中为 \n<code>heroForm</code>），然后在该组\n<em>内部</em>查找名为 \n<code>name</code> 的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>。</p>\n<a id=\"json\"></a>\n<h2 id=\"taking-a-look-at-the-form-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97gwqj2ozm7uskjptx3712usc\"><i class=\"material-icons\">link</i>看一下表单模型</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cshivrr8wxiispmvahoydi2lp\">当用户在 \n<code>&lt;input&gt;</code> 中输入数据时，该值会进入\n<strong><em>表单模型</em></strong>。要查看表单模型，请在 \n<code>hero-detail.component.html</code> 中的 \n<code>&lt;form&gt;</code> 结束标签后添加以下行：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-2.component.html\" region=\"form-value-json\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&lt;p&gt;<a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> value: {{ heroForm.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a> }}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9voc6s8uid8qe7lqrage93r3\"><code>heroForm.value</code> 返回\n<em>表单模型</em>。通过 \n<code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code> 对其进行管道处理，将在浏览器中以 JSON 格式渲染模型：</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/json-output.png\" alt=\"JSON output\" width=\"400\" height=\"176\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88yyl3f8svpjgp4ndm1njirzr\">初始 \n<code>name</code> 属性值为一个空字符串。在 \n<code>name</code> \n<code>&lt;input&gt;</code> 中输入内容，并观察键入的内容在 JSON 中出现。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8k6o8we7khsd2sbaatacy7ntb\">在实际应用中，表单会很快变得很大。\n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 使表单开发和维护变得更加容易。</p>\n<a id=\"formbuilder\"></a>\n<h2 id=\"introduction-to-formbuilder\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg3kz3u3h175jibwogw6o4vxa\"><i class=\"material-icons\">link</i><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 简介</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sqk43ic3jlt95muob75hhhoy\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 类通过为你处理控件创建的细节，帮助减少重复和混乱。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54nvldnx7yfmp3l1dgijpyrlm\">要使用 \n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>，请将其导入 \n<code>hero-detail.component.ts</code>。你可以删除 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-3a.component.ts\" region=\"imports\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }              from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from '@angular/forms';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yqbwx0tkplzik2va98czdjcg\">通过遵循以下计划，使用它将 \n<code>HeroDetailComponent</code> 重构为更易于阅读和编写的代码：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6en8dbnpi0wbcapwdflcgqtiz\">显式声明 \n<code>heroForm</code> 属性的类型为 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>；你将在稍后对其进行初始化。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"877eufqt72so384jvsnmy3avf\">将 \n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 注入构造函数。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tev96eicr1ok42jrnm62i9eu\">添加一个新方法，使用 \n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 定义 \n<code>heroForm</code>；将其命名为 \n<code>createForm()</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l6l01ngdsbrg967l8uwwfmlo\">在构造函数中调用 \n<code>createForm()</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afpb748qt5epw14p39f0q5ak2\">修改后的 \n<code>HeroDetailComponent</code> 如下所示：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-3a.component.ts\" region=\"v3a\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nexport class HeroDetailComponent3 {\n  heroForm: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>; // &lt;--- heroForm is of type <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>\n\n  constructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) { // &lt;--- <a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a> <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>\n    this.createForm();\n  }\n\n  createForm() {\n    this.heroForm = this.fb.group({\n      name: '', // &lt;--- the <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> called \"name\"\n    });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yh7an7h7d3ircd3n3q360698\"><code>FormBuilder.group</code> 是一个工厂方法，它创建一个 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>。&nbsp; \n<code>FormBuilder.group</code> 接受一个对象，该对象的键和值是 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的名称及其定义。在本例中，\n<code>name</code> 控件由其初始数据值（一个空字符串）定义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9skq72p3ar97hph4qc0fcjgtb\">在一个对象中定义一组控件，使你的代码更加紧凑和易读，因为你无需编写重复的 \n<code>new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(...)</code> 语句。</p>\n<a id=\"validators\"></a>\n<h3 id=\"validatorsrequired\"><code>Validators.required</code></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bypozl86nm68pf1rmnckpwj9\">虽然本指南不会深入探讨验证，但这里有一个示例演示了在响应式表单中使用 \n<code>Validators.required</code> 的简单性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6h4en2j7i2ym8u9523caar9sv\">首先，导入 \n<code><a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a></code> 符号。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-3.component.ts\" region=\"imports\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }                          from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36jmc4c6u1cuxmww7ss7rtrft\">要使 \n<code>name</code> \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 成为必填项，请用数组替换 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中的 \n<code>name</code> 属性。第一项是 \n<code>name</code> 的初始值；第二项是必填验证器 \n<code>Validators.required</code>。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-3.component.ts\" region=\"required\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nthis.heroForm = this.fb.group({\n  name: ['', Validators.required ],\n});\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9obfpr6yadtno6o9tojs2kw9z\">响应式验证器是简单、可组合的函数。在模板驱动表单中配置验证的方式不同，你必须将验证器包装在指令中。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bd2e1asrphyxxhgdt9xf2dc23\">更新模板底部的诊断消息，以显示表单的有效性状态。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-3.component.html\" region=\"form-value-json\" title=\"src/app/hero-detail/hero-detail.component.html (excerpt)\" linenums=\"false\">\n&lt;p&gt;<a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> value: {{ heroForm.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a> }}&lt;/p&gt;\n&lt;p&gt;<a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> status: {{ heroForm.status | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a> }}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"953cupjezya903jzm3cso9rlv\">浏览器显示以下内容：</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/validators-json-output.png\" alt=\"Single FormControl\" width=\"400\" height=\"223\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7apw2unixrfzxlo9uoq3cqvep\"><code>Validators.required</code> 正在工作。状态为 \n<code>INVALID</code>，因为 \n<code>&lt;input&gt;</code> 没有值。在 \n<code>&lt;input&gt;</code> 中输入内容，观察状态从 \n<code>INVALID</code> 变为 \n<code>VALID</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78ej9k7eico4s0sy9pc28pd90\">在实际应用中，你将用友好的用户体验替换诊断消息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ante4cnnj2p8d81zu7f7oadz\">在本指南的其余部分，使用 \n<code>Validators.required</code> 是可选的。它在以下每个示例中都保留着相同的配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gvdx77boj7lropcwokz6aqlq\">有关验证 Angular 表单的更多信息，请参阅 \n<a href=\"guide/form-validation\">表单验证</a> 指南。</p>\n<h3 id=\"more-formcontrols\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xowy4zxt8fhwuul24vctxyka\"><i class=\"material-icons\">link</i>更多 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2q33kg3vjf8vjotkntx8q1jvq\">本节将为地址、超级力量和助手添加额外的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7z7pi6x4uq1t43kzuu1qriiq2\">此外，地址还有一个 state 属性。用户将使用 \n<code>&lt;select&gt;</code> 选择一个 state，你将使用 \n<code>&lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;</code> 元素填充 states。因此，请从 \n<code>data-model.ts</code> 中导入 \n<code>states</code>。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-4.component.ts\" region=\"imports\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }                          from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\nimport { states } from '../data-model';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8l71wqle12nqeikxt2orn6xje\">声明 \n<code>states</code> 属性，并向 \n<code>heroForm</code> 添加一些 address \n<code>FormControls</code>，如下所示。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-4.component.ts\" region=\"v4\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nexport class HeroDetailComponent4 {\n  heroForm: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  states = states;\n\n  constructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.heroForm = this.fb.group({\n      name: ['', Validators.required ],\n      street: '',\n      city: '',\n      <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: '',\n      zip: '',\n      power: '',\n      sidekick: ''\n    });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6igb6c6mxps2cw215ud8ytja3\">然后在 \n<code>hero-detail.component.html</code> 中添加相应的标记，如下所示。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-4.component.html\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&lt;h2&gt;Hero Detail&lt;/h2&gt;\n&lt;h3&gt;&lt;i&gt;A <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> with <a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">multiple</a> FormControls&lt;/i&gt;&lt;/h3&gt;\n&lt;form [formGroup]=\"heroForm\"&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label class=\"center-block\"&gt;Name:\n      &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"name\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label class=\"center-block\"&gt;Street:\n      &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label class=\"center-block\"&gt;City:\n      &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label class=\"center-block\"&gt;State:\n      &lt;select class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\"&gt;\n          &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of states\" [value]=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\"&gt;{{<a href=\"api/animations/state\" class=\"code-anchor\">state</a>}}&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n      &lt;/select&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label class=\"center-block\"&gt;Zip Code:\n      &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group radio\"&gt;\n    &lt;h4&gt;Super power:&lt;/h4&gt;\n    &lt;label class=\"center-block\"&gt;&lt;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"flight\"&gt;Flight&lt;/label&gt;\n    &lt;label class=\"center-block\"&gt;&lt;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"x-ray vision\"&gt;X-ray vision&lt;/label&gt;\n    &lt;label class=\"center-block\"&gt;&lt;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"strength\"&gt;Strength&lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"checkbox\"&gt;\n    &lt;label class=\"center-block\"&gt;\n      &lt;input type=\"checkbox\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"sidekick\"&gt;I have <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> sidekick.\n    &lt;/label&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n\n\n&lt;p&gt;<a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> value: {{ heroForm.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a> }}&lt;/p&gt;\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"943pgus2fu21nofeipwzznxhp\"><em>注意</em>：忽略此标记中对 \n<code>form-group</code>、\n<code>form-control</code>、\n<code>center-block</code> 和 \n<code>checkbox</code> 的多次提及。这些是 Angular 本身忽略的\n<em>bootstrap</em> CSS 类。请注意 \n<code>[formGroup]</code> 和 \n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> 属性。它们是将 HTML 控件绑定到组件类中的 Angular \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 属性的 Angular 指令。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48l65ocdm66nk27ua6c1nbwn5\">修改后的模板包含更多文本 \n<code>&lt;input&gt;</code> 元素、用于 \n<code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> 的 \n<code>&lt;select&gt;</code>、用于 \n<code>power</code> 的单选按钮以及用于 \n<code>sidekick</code> 的 \n<code>&lt;checkbox&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2j91nqtznohss0tpjw09czid8\">你必须使用 \n<code>[value]=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\"</code> 绑定 \n<code>&lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;</code> 的 value 属性。如果你没有绑定 value，则 select 会显示数据模型中的第一个选项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13jbxwxa9qmgvo7beq25wnoyt\">组件\n<em>类</em>定义控件属性，而不考虑它们在模板中的表示方式。你定义 \n<code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code>、\n<code>power</code> 和 \n<code>sidekick</code> 控件的方式与定义 \n<code>name</code> 控件的方式相同。你以相同的方式将这些控件绑定到模板 HTML 元素，使用 \n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> 指令指定 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的名称。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acfvfw54gwdwqns27jyl1yzwf\">有关 \n<a href=\"api/forms/RadioControlValueAccessor\" title=\"API: RadioControlValueAccessor\">单选按钮</a>、 \n<a href=\"api/forms/SelectControlValueAccessor\" title=\"API: SelectControlValueAccessor\">下拉列表</a> 和 \n<a href=\"api/forms/CheckboxControlValueAccessor\" title=\"API: CheckboxControlValueAccessor\">复选框</a> 的更多信息，请参阅 API 参考。</p>\n<a id=\"grouping\"></a>\n<h3 id=\"nested-formgroups\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vnpxh21qzrpgkv51430twvwj\"><i class=\"material-icons\">link</i>嵌套的 FormGroups</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8o40wcrfpzxw4b2a60zjtm56w\">为了更有效地管理表单的大小，你可以将一些相关的 \n<code>FormControls</code> 分组到一个嵌套的 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中。例如，\n<code>street</code>、\n<code>city</code>、\n<code><a href=\"api/animations/state\" class=\"code-anchor\">state</a></code> 和 \n<code>zip</code> 是地址 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的理想属性。以这种方式嵌套组和控件，可以让你 镜像数据模型的分层结构，并帮助跟踪相关控件集的验证和状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xuf37ra4r5no2hsvpw2orn2j\">你使用 \n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 在此组件中创建了一个名为 \n<code>heroForm</code> 的 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>。让它成为父 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>。再次使用 \n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 创建一个子 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，它封装了 \n<code>address</code> 控件；将结果分配给父 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的新 \n<code>address</code> 属性。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-5.component.ts\" region=\"v5\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nexport class HeroDetailComponent5 {\n  heroForm: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  states = states;\n\n  constructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.heroForm = this.fb.group({ // &lt;-- the parent <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>\n      name: ['', Validators.required ],\n      address: this.fb.group({ // &lt;-- the child <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>\n        street: '',\n        city: '',\n        <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: '',\n        zip: ''\n      }),\n      power: '',\n      sidekick: ''\n    });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwtxjmtg9c54amzvj6gl9j4mh\">当你更改组件类中表单控件的结构时， 你必须对组件模板进行相应的调整。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zdjmm0zorp1shd0vpllv5xtz\">在 \n<code>hero-detail.component.html</code> 中，将与地址相关的 \n<code>FormControls</code> 包裹在一个 \n<code>&lt;div&gt;</code> 中。向 \n<code>div</code> 添加 \n<code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code> 指令，并将其绑定到 \n<code>\"address\"</code>。这是父 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>（名为 \n<code>heroForm</code>）中子 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>（名为 \n<code>address</code>）的属性。保留带有 \n<code>name</code> \n<code>&lt;input&gt;</code> 的 \n<code>&lt;div&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"depxq6kmh1q1gjnoj5ctxnqrn\">为了使此更改在视觉上更加明显，请在顶部附近添加一个 \n<code>&lt;h4&gt;</code> 标题，文本为\n<em>Secret Lair</em>。新的地址 HTML 如下所示：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-5.component.html\" region=\"add-group\" title=\"src/app/hero-detail/hero-detail.component.html (excerpt)\" linenums=\"false\">\n&lt;div <a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>=\"address\" class=\"well well-lg\"&gt;\n  &lt;h4&gt;Secret Lair&lt;/h4&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label class=\"center-block\"&gt;Street:\n      &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label class=\"center-block\"&gt;City:\n      &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label class=\"center-block\"&gt;State:\n      &lt;select class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\"&gt;\n        &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of states\" [value]=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\"&gt;{{<a href=\"api/animations/state\" class=\"code-anchor\">state</a>}}&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n      &lt;/select&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label class=\"center-block\"&gt;Zip Code:\n      &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lj3l1gmrolsxng2wg549eg73\">进行这些更改后，浏览器中的 JSON 输出将显示修改后的表单模型，其中包含嵌套的 address \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>：</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/address-group.png\" alt=\"JSON output\" width=\"400\" height=\"55\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ymcxj7is7sywc6li44qmppxo\">这表明模板 和表单模型正在相互通信。</p>\n<a id=\"properties\"></a>\n<h2 id=\"inspect-formcontrol-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"do4cdvm7g4y6t2t1mf62oeqjs\"><i class=\"material-icons\">link</i>检查 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 属性</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewipy2q9d3xi7fckiyckwyyqv\">你可以通过使用 \n<code>get()</code> 方法提取，来检查表单中某个单独的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>。 你可以在组件类中执行此操作，或者通过在模板中添加以下内容来在页面上显示它， 紧接在 \n<code>{{form.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}</code> 插值之后，如下所示：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-5.component.html\" region=\"inspect-value\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&lt;p&gt;Name value: {{ heroForm.get('name').value }}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8i7g6hjslsioqwwnotrwgmxp2\">要获取 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 状态，请使用点符号遍历到该控件。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-5.component.html\" region=\"inspect-child-control\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&lt;p&gt;Street value: {{ heroForm.get('address.street').value}}&lt;/p&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2svcfyja3ymygqe6q0fivhrvu\"><em>注意</em>：如果你正在跟着代码操作，请记住在你进入关于 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 的部分时，删除对 \n<code>address.street</code> 的引用。在该部分中，你将更改组件类中 address 的名称，如果你在模板中保留它，就会抛出错误。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mneyjzz29gvabh15f6ri2cmt\">你可以使用此技术来显示 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的任何属性，例如以下属性之一：</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"10%\">\n  \n  <col width=\"90%\">\n  \n  </colgroup><tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8inopazehx1bfxu8m1odt9y8v\">属性</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c1zh7m7zz0q1ywb7182og533b\">说明</th>\n  </tr>\n  <tr>\n    <td>\n      <code>myControl.value</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekx0724zln6hif882z6srl2hv\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的值。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>myControl.status</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ocdowdwxn84uag2yn4npf67m\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的有效性。可能的值：\n<code>VALID</code>、 \n<code>INVALID</code>、\n<code>PENDING</code> 或 \n<code>DISABLED</code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>myControl.pristine</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jpmwncsltq009ddnrobuwvte\">如果用户\n<em>未</em>在 UI 中更改值，则为 \n<code>true</code>。 它的反面是 \n<code>myControl.dirty</code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>myControl.untouched</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs0kg4yaz3l4eoxrty2la1ka1\">如果用户尚未进入 HTML 控件并触发其 blur 事件，则为 \n<code>true</code>。它的反面是 \n<code>myControl.touched</code>。</p>\n    </td>\n  </tr>\n</tbody></table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqhi89j7q4iehvd67pr6g4sjg\">在 \n<a href=\"api/forms/AbstractControl\"><em>AbstractControl</em></a> API 参考中阅读有关其他 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 属性的信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d424pw2yqmhmq5w675gl2x1mu\">检查 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 属性的一个常见原因是 确保用户输入了有效的值。 在 \n<a href=\"guide/form-validation\">表单验证</a> 指南中阅读有关验证 Angular 表单的更多信息。</p>\n<a id=\"data-model-form-model\"></a>\n<h2 id=\"the-data-model-and-the-form-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bifem95hhsl3mtscau7m3sgok\"><i class=\"material-icons\">link</i>数据模型和表单模型</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"457x9ppredq9pq6or1isj598f\">目前，表单正在显示空值。 \n<code>HeroDetailComponent</code> 应该显示英雄的值， 可能是从远程服务器检索到的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"737bpq4jezwp5631rt4nelxce\">在此应用中，\n<code>HeroDetailComponent</code> 从父 \n<code>HeroListComponent</code> 获取其英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jjqdymt8etmc5q1v3qpou5hk\">来自服务器的 \n<code>hero</code> 是\n<strong><em>数据模型</em></strong>。 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 结构是\n<strong><em>表单模型</em></strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64vjp8f6myb6j1er5fh7subey\">组件必须将数据模型中的英雄值复制到表单模型中。 有两个重要的含义：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rooe8ti4r1oqg2rtv7g1mect\">开发人员必须了解数据模型的属性 如何映射到表单模型的属性。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2ch8d2n93h6839giun8epf7e\">用户更改从 DOM 元素流向表单模型，而不是数据模型。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qhrq7yq920kfhzm66t0t5bv0\">表单控件永远不会更新\n<em>数据模型</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpcqs3o30yhf6eze20s42wrqm\">表单和数据模型结构不需要完全匹配。 你通常会在特定屏幕上呈现数据模型的子集。 但如果表单模型的形状接近数据模型的形状，会更容易。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahhz0xmws2yas46nmx3ytocoa\">在此 \n<code>HeroDetailComponent</code> 中，这两个模型非常接近。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6a3gduk0f88j3lk3xn81kcf2r\">以下是 \n<code>data-model.ts</code> 中 \n<code>Hero</code> 和 \n<code>Address</code> 的定义：</p>\n<code-example path=\"reactive-forms/src/app/data-model.ts\" region=\"model-classes\" title=\"src/app/data-model.ts (classes)\" linenums=\"false\">\nexport class Hero {\n  id = 0;\n  name = '';\n  addresses: Address[];\n}\n\nexport class Address {\n  street = '';\n  city   = '';\n  <a href=\"api/animations/state\" class=\"code-anchor\">state</a>  = '';\n  zip    = '';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55h7368sxej0pexmztimlouug\">再次，这是组件的 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 定义。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-6.component.ts\" region=\"hero-form-model\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nthis.heroForm = this.fb.group({\n  name: ['', Validators.required ],\n  address: this.fb.group({\n    street: '',\n    city: '',\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: '',\n    zip: ''\n  }),\n  power: '',\n  sidekick: ''\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qly2abtro9qmy4roa4l9hfzf\">这两个模型之间有两个显著的差异：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"385vohuvkbpcotts6uhejmums\"><code>Hero</code> 有一个 \n<code>id</code>。表单模型没有，因为你通常不会向用户显示主键。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ig985wfq79ujaz0c071rd6wf\"><code>Hero</code> 有一个地址数组。此表单模型只呈现一个地址， 这将在下面关于 \n<a href=\"guide/reactive-forms#form-array\" title=\"Form arrays\"><code>FormArray</code></a> 的部分中介绍。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8i99xqueoj5rhcgk6ybd6ftz2\">保持这两个模型的形状接近，可以方便地使用下一部分中的 \n<code>patchValue()</code> 和 \n<code>setValue()</code> 方法将数据模型属性 复制到表单模型中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0zcbq9mu0gwrzoq2xvezh26o\">首先，按如下方式重构 \n<code>address</code> \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 定义：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"address-form-group\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nthis.heroForm = this.fb.group({\n  name: ['', Validators.required ],\n  address: this.fb.group(new Address()), // &lt;-- <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new address\n  power: '',\n  sidekick: ''\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9np5p8yjtunvc7mc514s89v3a\">还要确保更新来自 \n<code>data-model</code> 的 \n<code>import</code>，以便你可以引用 \n<code>Hero</code> 和 \n<code>Address</code> 类：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"import-address\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nimport { Address, Hero, states } from '../data-model';\n\n</code-example>\n<a id=\"set-data\"></a>\n<h2 id=\"populate-the-form-model-with-setvalue-and-patchvalue\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g9qjymp3uhli791g39hvw9i6\"><i class=\"material-icons\">link</i>使用 \n<code>setValue()</code> 和 \n<code>patchValue()</code> 填充表单模型</h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c37zyl6gs1q72oi8piq9at8cg\"><em>注意</em>：如果你正在跟着代码操作，此部分是可选的，因为其余步骤不依赖于它。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqytfu96jpb8cbw8g3epu3yef\">之前，你创建了一个控件并同时初始化了它的值。 你也可以使用 \n<code>setValue()</code> 和 \n<code>patchValue()</code> 方法在稍后初始化或重置值。</p>\n<h3 id=\"setvalue\"><code>setValue()</code></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33v0awlsjzdgx52qvuvybbxg0\">使用 \n<code>setValue()</code>，你可以通过传入一个数据对象来一次性分配所有表单控件的值，该数据对象的属性与 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 背后的表单模型完全匹配。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"set-value\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\n  this.heroForm.setValue({\n   name:    this.hero.name,\n   address: this.hero.addresses[0] || new Address()\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0nb5jb4fxo0ow4d42yolbx1h\"><code>setValue()</code> 方法会在分配任何表单控件值之前彻底检查数据对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vve47v2u637y307531cz1b5b\">它不会接受与 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 结构不匹配或缺少组中任何控件的值的数据对象。这样，如果你的输入有错误或控件嵌套不正确，它可以返回有用的错误消息。 相反，\n<code>patchValue()</code> 会静默失败。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f28movca06kl35z2kx2ntews7\">请注意，你可以几乎使用整个 \n<code>hero</code> 作为 \n<code>setValue()</code> 的参数， 因为它的形状类似于组件的 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 结构。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5px1t5hts0ssds3xh2zpbdnie\">你只能显示英雄的第一个地址，并且必须考虑到 \n<code>hero</code> 可能根本没有地址，就像数据对象参数中 \n<code>address</code> 属性的条件设置一样：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"set-value-address\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\naddress: this.hero.addresses[0] || new Address()\n\n</code-example>\n<h3 id=\"patchvalue\"><code>patchValue()</code></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c21wtz2z9b5lzer4o6srxe0cf\">使用\n<strong><code>patchValue()</code></strong>，你可以通过为它们提供一个键值对对象来为 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中的特定控件分配值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mwybzox34l6vgya4t924psz4\">此示例只设置表单的 \n<code>name</code> 控件。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-6.component.ts\" region=\"patch-value\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nthis.heroForm.patchValue({\n  name: this.hero.name\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18echpxpsn9jo26kdoczei8sk\">使用 \n<code>patchValue()</code>，你可以更灵活地应对不同的数据和表单模型。 但与 \n<code>setValue()</code> 不同，\n<code>patchValue()</code> 无法检查缺少的控件值，也不会抛出有用的错误。</p>\n<a id=\"hero-list\"></a>\n<h2 id=\"create-the-herolistcomponent-and-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drh5cz3yckb9f0eueedovzihd\"><i class=\"material-icons\">link</i>创建 \n<code>HeroListComponent</code> 和 \n<code>HeroService</code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ack8ll5jb2ehprbig6va5h5ll\">为了进一步演示响应式表单技术，通过添加 \n<code>HeroListComponent</code> 和 \n<code>HeroService</code> 来为示例添加更多功能会很有帮助。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bsnvlzefo072r66sai9wtpx9\"><code>HeroDetailComponent</code> 是 \n<em>主/从</em> 视图中 \n<code>HeroListComponent</code> 的嵌套子组件。它们一起看起来像这样：</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/hero-list.png\" alt=\"HeroListComponent\" width=\"420\" height=\"264\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sb22pfo3v43nq7m67lnbeaxq\">首先，使用以下命令添加 \n<code>HeroListComponent</code>：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate component HeroList\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yr8gf97hszlcm1vev0rbbp9m\">为 \n<code>HeroListComponent</code> 提供以下内容：</p>\n<code-example path=\"reactive-forms/src/app/hero-list/hero-list.component.ts\" title=\"hero-list.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Observable }        from 'rxjs/Observable';\nimport 'rxjs/add/operator/finally';\n\nimport { Hero }        from '../data-model';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  styleUrls: ['./hero-list.component.css']\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Observable&lt;Hero[]&gt;;\n  isLoading = false;\n  selectedHero: Hero;\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() { this.getHeroes(); }\n\n  getHeroes() {\n    this.isLoading = true;\n    this.heroes = this.heroService.getHeroes()\n                      // TODO: error handling\n                      .finally(() =&gt; this.isLoading = false);\n    this.selectedHero = undefined;\n  }\n\n  select(hero: Hero) { this.selectedHero = hero; }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xomijp7xcjykwk74ss6da81z\">接下来，使用以下命令添加 \n<code>HeroService</code>：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng generate service Hero\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebzlpp504c86qo64f3s595dgn\">然后，为它提供以下内容：</p>\n<code-example path=\"reactive-forms/src/app/hero.service.ts\" title=\"hero.service.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of }         from 'rxjs/observable/of';\nimport 'rxjs/add/operator/delay';\n\nimport { Hero, heroes } from './data-model';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n\n  delayMs = 500;\n\n  // Fake server get; assume nothing can go wrong\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    return of(heroes).delay(this.delayMs); // simulate latency with delay\n  }\n\n  // Fake server update; assume nothing can go wrong\n  updateHero(hero: Hero): Observable&lt;Hero&gt;  {\n    const oldHero = heroes.find(h =&gt; h.id === hero.id);\n    const newHero = Object.assign(oldHero, hero); // Demo: mutate cached hero\n    return of(newHero).delay(this.delayMs); // simulate latency with delay\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wkhocjcl8hoqy7cl02tudvpf\"><code>HeroListComponent</code> 使用注入的 \n<code>HeroService</code> 从服务器检索英雄， 然后将这些英雄作为一系列按钮呈现给用户。 \n<code>HeroService</code> 模拟 HTTP 服务。 它返回一个英雄的 \n<code>Observable</code>，该 \n<code>Observable</code> 在短暂延迟后求解， 既是为了模拟网络延迟，也是为了直观地表明应用程序的异步性质。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30vn7ty1g5yrtvuz61c959q1m\">当用户点击某个英雄时，组件会设置其 \n<code>selectedHero</code> 属性，该属性绑定到 \n<code>HeroDetailComponent</code> 的 \n<code>hero</code> \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性。\n<code>HeroDetailComponent</code> 检测到英雄发生变化，并使用该英雄的数据值重置其表单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1riunkv6cmsjjgucxl8ulif0f\">刷新按钮会在重新获取英雄之前清除英雄列表和当前选中的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"534jyj4b2md670qn4yfy5uk3v\">注意，\n<code>hero-list.component.ts</code> 导入 \n<code>Observable</code> 和 \n<code>finally</code>，而 \n<code>hero.service.ts</code> 从 \n<code>rxjs</code> 导入 \n<code>Observable</code>、\n<code>of</code> 和 \n<code>delay</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d80c9xtp14w88juq52sl4dvfs\">其余的 \n<code>HeroListComponent</code> 和 \n<code>HeroService</code> 实现细节超出了本教程的范围。但是，相关技术在其他文档中有所介绍，包括\n<em>英雄之旅</em>\n<a href=\"tutorial/toh-pt3\" title=\"ToH: Multiple Components\">这里</a> 和 \n<a href=\"tutorial/toh-pt4\" title=\"ToH: Services\">这里</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7exfugzl5qusywj8z8e013lx\">要使用 \n<code>HeroService</code>，请将其导入 \n<code>AppModule</code> 并将其添加到 \n<code>providers</code> 数组中。要使用 \n<code>HeroListComponent</code>，请将其导入、声明并导出：</p>\n<code-example path=\"reactive-forms/src/app/app.module.ts\" region=\"hero-service-list\" title=\"app.module.ts (excerpts)\" linenums=\"false\">\n// add JavaScript imports\nimport { HeroListComponent }   from './hero-list/hero-list.component';\nimport { HeroService }         from './hero.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroDetailComponent,\n    HeroListComponent // &lt;--declare HeroListComponent\n  ],\n  // ...\n  exports: [\n    AppComponent,\n    HeroDetailComponent,\n    HeroListComponent // &lt;-- export HeroListComponent\n  ],\n  providers: [ HeroService ], // &lt;-- provide HeroService\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23byw20p2aq7g55z98g3idiin\">接下来，使用以下内容更新 \n<code>HeroListComponent</code> 模板：</p>\n<code-example path=\"reactive-forms/src/app/hero-list/hero-list.component.html\" title=\"hero-list.component.html\" linenums=\"false\">\n&lt;h3 *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isLoading\"&gt;&lt;i&gt;Loading heroes ... &lt;/i&gt;&lt;/h3&gt;\n&lt;h3 *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!isLoading\"&gt;Select <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> hero:&lt;/h3&gt;\n\n&lt;nav&gt;\n  &lt;button (click)=\"getHeroes()\" class=\"btn btn-primary\"&gt;Refresh&lt;/button&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"select(hero)\"&gt;{{hero.name}}&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n&lt;/nav&gt;\n\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n  &lt;hr&gt;\n  &lt;h2&gt;Hero Detail&lt;/h2&gt;\n  &lt;h3&gt;Editing: {{selectedHero.name}}&lt;/h3&gt;\n  &lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ruw3zwlewuatd0m0tob4bkum\">这些更改需要反映在 \n<code>AppComponent</code> 模板中。用更新的标记替换 \n<code>app.component.html</code> 的内容，以使用 \n<code>HeroListComponent</code> 而不是 \n<code>HeroDetailComponent</code>：</p>\n<code-example path=\"reactive-forms/src/app/app.component.html\" title=\"app.component.html\" linenums=\"false\">\n&lt;div class=\"container\"&gt;\n  &lt;h1&gt;Reactive Forms&lt;/h1&gt;\n  &lt;app-hero-list&gt;&lt;/app-hero-list&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4iil7essifinz0orz8edrfdyo\">最后，向 \n<code>HeroDetailComponent</code> 添加一个 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性，以便 \n<code>HeroDetailComponent</code> 可以接收来自 \n<code>HeroListComponent</code> 的数据。请记住，在 JavaScript 导入列表中，也要将 \n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 符号添加到 \n<code>@angular/core</code> 的 \n<code>import</code> 语句中。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-6.component.ts\" region=\"hero\" title=\"hero-detail.component.ts (excerpt)\" linenums=\"false\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3oxqnjbie3pz3szrl1h3o22un\">现在，你应该能够点击英雄的按钮，并渲染一个表单。</p>\n<h2 id=\"when-to-set-form-model-values-ngonchanges\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9br42it7d1othvd85apkzq6rz\"><i class=\"material-icons\">link</i>何时设置表单模型值（\n<code>ngOnChanges</code>）</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aiy8xbdkbafb5cmhtgl58ditc\">何时设置表单模型值取决于组件何时获取数据模型值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjju0h12dawrlc237652n95ks\"><code>HeroListComponent</code> 向用户显示英雄姓名。当用户点击某个英雄时，\n<code>HeroListComponent</code> 通过绑定到其 \n<code>hero</code> \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性，将选定的英雄传递到 \n<code>HeroDetailComponent</code> 中。</p>\n<code-example path=\"reactive-forms/src/app/hero-list/hero-list.component.1.html\" title=\"hero-list.component.html (simplified)\" linenums=\"false\">\n&lt;nav&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"select(hero)\"&gt;{{hero.name}}&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n&lt;/nav&gt;\n\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n  &lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i1rja45f9eksziq2voq50kp8\">在这种方法中，每次用户选择一个新英雄时，\n<code>HeroDetailComponent</code> 中的 \n<code>hero</code> 值都会发生变化。你可以使用 \n<a href=\"guide/lifecycle-hooks#onchanges\">ngOnChanges</a> 生命周期钩子调用 \n<code>setValue()</code>，Angular 会在 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> \n<code>hero</code> 属性发生变化时调用此钩子。</p>\n<h3 id=\"reset-the-form\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2iaf8s45xfet34xosuuh8uyp5\"><i class=\"material-icons\">link</i>重置表单</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3107rfxhihw2u9dtupiiuhxx4\">首先，在 \n<code>hero-detail.component.ts</code> 中导入 \n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> 符号。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-6.component.ts\" region=\"import-input\" title=\"src/app/hero-detail/hero-detail.component.ts (core imports)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> }             from '@angular/core';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8liahax87fubguycsdreiv73b\">接下来，让 Angular 知道 \n<code>HeroDetailComponent</code> 实现了 \n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"onchanges-implementation\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nexport class HeroDetailComponent implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxt2y6i6on5a7xmoz3931apxo\">将 \n<code>ngOnChanges</code> 方法添加到类中，如下所示：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"ngOnChanges\" title=\"src/app/hero-detail/hero-detail.component.ts (ngOnchanges)\" linenums=\"false\">\nngOnChanges() {\n  this.rebuildForm();\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1e2gduypj4rt36yc6e3l7furb\">注意，它调用了 \n<code>rebuildForm()</code>，这是一个你可以设置值的方法。你可以将 \n<code>rebuildForm()</code> 命名为任何你认为有意义的名称。它不是 Angular 的内置方法，而是你创建的一个方法，用于有效地利用 \n<code>ngOnChanges</code> 生命周期钩子。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"rebuildForm\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nrebuildForm() {\n  this.heroForm.reset({\n    name: this.hero.name,\n    address: this.hero.addresses[0] || new Address()\n  });\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6jxyqlmjyb8xx2t6zrpsdvoz\"><code>rebuildForm()</code> 方法执行两项操作；重置英雄的姓名和地址。</p>\n<a id=\"form-array\"></a>\n<h2 id=\"use-formarray-to-present-an-array-of-formgroups\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ergkz8avqfwgf0xetz7ibt25r\"><i class=\"material-icons\">link</i>使用\n<em>FormArray</em> 来呈现 \n<code>FormGroups</code> 数组</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"643gmfrblslql6a5qd7jggm7h\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 是一个命名对象，其属性值是 \n<code>FormControls</code> 和其他 \n<code>FormGroups</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jt6chxkcyu3148t0qa8wdrkq\">有时你需要呈现任意数量的控件或组。例如，一个英雄可能拥有零个、一个或任意数量的地址。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nqadik99pkhlwfyqefdz9mqy\"><code>Hero.addresses</code> 属性是 \n<code>Address</code> 实例的数组。一个 \n<code>address</code> \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 可以显示一个 \n<code>Address</code>。一个 Angular \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 可以显示 \n<code>address</code> \n<code>FormGroups</code> 数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q3dw3y8qdnspree0lbp9fqrb\">要访问 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 类，请将其导入 \n<code>hero-detail.component.ts</code>：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"imports\" title=\"src/app/hero-detail/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> }                   from '@angular/core';\nimport { <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>, <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\nimport { Address, Hero, states } from '../data-model';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dmgjjmht7p20hyhpkhfa6goi\">要使用 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>，请执行以下操作：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"as90t8jtrv77ndown0nmwt8xn\">定义数组中的条目；即 \n<code>FormControls</code> 或 \n<code>FormGroups</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gvxy1y2gopoinmlyc5ljfaii\">使用数据模型中的数据创建条目来初始化数组。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9w2puttm5hxbqm410zifb91uc\">根据用户的需要添加和删除条目。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4z4jnn5wneh36i2v5whzi4c1p\">为 \n<code>Hero.addresses</code> 定义一个 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>，并允许用户添加或修改地址。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7f4my4f5wsyglt20aypozvqn6\">你需要在 \n<code>HeroDetailComponent</code> 的 \n<code>createForm()</code> 方法中重新定义表单模型，该方法目前只在一个 \n<code>address</code> \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中显示第一个英雄地址：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-7.component.ts\" region=\"address-form-group\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nthis.heroForm = this.fb.group({\n  name: ['', Validators.required ],\n  address: this.fb.group(new Address()), // &lt;-- <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new address\n  power: '',\n  sidekick: ''\n});\n\n</code-example>\n<h3 id=\"from-address-to-secretlairs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bucykkcfg5gnxpnbk7jdfyt4j\"><i class=\"material-icons\">link</i>从 \n<code>address</code> 到 \n<code>secretLairs</code></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e66les61lpkharb39z0ti45xv\">从用户的角度来看，英雄没有\n<em>地址</em>。地址是为凡人准备的。英雄有\n<em>秘密基地</em>！用 \n<code>secretLairs</code> \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 定义替换地址 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 定义：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"secretLairs-form-array\" title=\"src/app/hero-detail/hero-detail-8.component.ts\" linenums=\"false\">\nthis.heroForm = this.fb.group({\n  name: ['', Validators.required ],\n  secretLairs: this.fb.array([]), // &lt;-- secretLairs as an empty <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>\n  power: '',\n  sidekick: ''\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33o0bkl77n9uh9pknnr2fgluy\">在 \n<code>hero-detail.component.html</code> 中，将 \n<code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"address\"</code> 更改为 \n<code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"secretLairs\"</code>。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.html\" region=\"form-array-name\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\n&lt;div <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"secretLairs\" class=\"well well-lg\"&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"862zypvye1yczz80xk889uzxv\">将表单控件名称从 \n<code>address</code> 更改为 \n<code>secretLairs</code> 强调了一个重要点：\n<em>表单模型</em>不必与\n<em>数据模型</em>匹配。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nwt33hxipgtpmujd4moe5lnk\">显然，两者之间必须存在某种关系。但它可以是应用程序域中任何有意义的东西。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"527eyzdric0qqdk2edwystdyq\"><em>呈现</em>需求通常与\n<em>数据</em>需求不同。响应式表单方法既强调又促进了这种区别。</p>\n</div>\n<h3 id=\"initialize-the-secretlairs-formarray\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jdxn96ndp9hgegdmkqis3nlj\"><i class=\"material-icons\">link</i>初始化 \n<code>secretLairs</code> \n<em>FormArray</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rxwfgumchot12uf1o9m1tz9\">默认表单显示一个没有姓名的英雄，没有地址。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"benh9zsl62jkmy7e4gsq3v5lf\">你需要一个方法来填充（或重新填充）\n<code>secretLairs</code>，以便在父 \n<code>HeroListComponent</code> 将 \n<code>HeroDetailComponent.hero</code> \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性设置为一个新的 \n<code>Hero</code> 时，使用实际的英雄地址。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvg6qtz84ongct0tn3pv07nbc\">以下 \n<code>setAddresses()</code> 方法用一个新的 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 替换 \n<code>secretLairs</code> \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>，该 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 由英雄地址 \n<code>FormGroups</code> 数组初始化。将此添加到 \n<code>HeroDetailComponent</code> 类中：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"set-addresses\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nsetAddresses(addresses: Address[]) {\n  const addressFGs = addresses.map(address =&gt; this.fb.group(address));\n  const addressFormArray = this.fb.array(addressFGs);\n  this.heroForm.setControl('secretLairs', addressFormArray);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"s8q2q4zplwojsc06vmscv9vx\">注意，你用 \n<code><a href=\"api/forms/FormGroup#setControl\" class=\"code-anchor\">FormGroup.setControl()</a></code> 方法替换了之前的 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>，而不是用 \n<code>setValue()</code>。你正在替换一个\n<em>控件</em>，而不是控件的\n<em>值</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3greq9rldp1ps5a1m0pclaq7a\">还要注意，\n<code>secretLairs</code> \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 包含 \n<code>FormGroups</code>，而不是 \n<code>Addresses</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b63ch4wfnpmwm4k3ufm89k8hv\">接下来，从 \n<code>rebuildForm()</code> 中调用 \n<code>setAddresses()</code>：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"rebuildform\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nrebuildForm() {\n  this.heroForm.reset({\n    name: this.hero.name\n  });\n  this.setAddresses(this.hero.addresses);\n}\n\n</code-example>\n<h3 id=\"get-the-formarray\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hpgz6x26zq9budwu853iqijd\"><i class=\"material-icons\">link</i>获取\n<em>FormArray</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"v2oa8bd8cjkus2az37rsl33j\"><code>HeroDetailComponent</code> 应该能够显示、添加和删除 \n<code>secretLairs</code> \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 中的条目。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jjtv4pfes9rtw2es4u010hjj\">使用 \n<code>FormGroup.get()</code> 方法获取对该 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 的引用。为了清晰起见，将表达式包装在一个 \n<code>secretLairs</code> 便利属性中，以便于重用。将以下内容添加到 \n<code>HeroDetailComponent</code> 中。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"get-secret-lairs\" title=\"src/app/hero-detail/hero-detail.component.ts (secretLairs property)\" linenums=\"false\">\nget secretLairs(): <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a> {\n  return this.heroForm.get('secretLairs') as <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>;\n};\n\n</code-example>\n<h3 id=\"display-the-formarray\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o365fdtu4ohcnes37bybmjod\"><i class=\"material-icons\">link</i>显示\n<em>FormArray</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c48dwvr28q94ei49russdcbks\">当前的 HTML 模板显示单个 \n<code>address</code> \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>。修改它以显示英雄的 \n<code>address</code> \n<code>FormGroups</code> 的零个、一个或多个。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nvamx5uf26s2zyre720ipk1l\">这主要是在一个 \n<code>&lt;div&gt;</code> 中包装之前地址的模板 HTML，并使用 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 重复该 \n<code>&lt;div&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63zhkv2ho3i1ohpslaaxoiugs\">编写 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 时，有三个关键点：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1jmnfkhjanue1s6wq0emru6q\">在包含 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的 \n<code>&lt;div&gt;</code> 外面再添加一个 \n<code>&lt;div&gt;</code>，并将其 \n<code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a></code> 指令设置为 \n<code>\"secretLairs\"</code>。 此步骤将 \n<code>secretLairs</code> \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 作为内部重复 HTML 模板中表单控件的上下文。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cggc63hkf1bg9nbmk5tnnr30\">重复条目的来源是 \n<code><a href=\"api/forms/FormArray#controls\" class=\"code-anchor\">FormArray.controls</a></code>，而不是 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 本身。 每个控件都是一个 \n<code>address</code> \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，这正是之前（现在重复的）模板 HTML 所期望的。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1p7fsscxcjf6vffxmm80mazec\">每个重复的 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 需要一个唯一的 \n<code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code>，它必须是 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 在 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 中的索引。 你将重复使用该索引来为每个地址组合一个唯一的标签。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xzh0aeq98a10g3eyikscvyjy\">以下是 HTML 模板中秘密基地部分的骨架：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.html\" region=\"form-array-skeleton\" title=\"src/app/hero-detail/hero-detail.component.html (*ngFor)\" linenums=\"false\">\n&lt;div <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"secretLairs\" class=\"well well-lg\"&gt;\n  &lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let address of secretLairs.controls; let i=index\" [<a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>]=\"i\" &gt;\n    &lt;!-- The repeated address template --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"510y1eyi9kd8d22j396w1drkh\">以下是秘密基地部分的完整模板。将其添加到 \n<code>HeroDetailComponent</code> 模板中，替换 \n<code>forGroupName=address</code> \n<code>&lt;div&gt;</code>：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.html\" region=\"form-array\" title=\"src/app/hero-detail/hero-detail.component.html (excerpt)\">\n&lt;div <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"secretLairs\" class=\"well well-lg\"&gt;\n  &lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let address of secretLairs.controls; let i=index\" [<a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>]=\"i\" &gt;\n    &lt;!-- The repeated address template --&gt;\n    &lt;h4&gt;Address #{{i + 1}}&lt;/h4&gt;\n    &lt;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"margin-left: 1em;\"&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label class=\"center-block\"&gt;Street:\n          &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\"&gt;\n        &lt;/label&gt;\n      &lt;/div&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label class=\"center-block\"&gt;City:\n          &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\"&gt;\n        &lt;/label&gt;\n      &lt;/div&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label class=\"center-block\"&gt;State:\n          &lt;select class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\"&gt;\n            &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of states\" [value]=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\"&gt;{{<a href=\"api/animations/state\" class=\"code-anchor\">state</a>}}&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n      &lt;/div&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label class=\"center-block\"&gt;Zip Code:\n          &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\"&gt;\n        &lt;/label&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;!-- End of the repeated address template --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-example>\n<h3 id=\"add-a-new-lair-to-the-formarray\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3b7xp581gglpcu8zeg9xhivi\"><i class=\"material-icons\">link</i>向 \n<em>FormArray</em> 添加一个新的基地</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4apaj2oppmcn2z6h7g953a14q\">添加一个 \n<code>addLair()</code> 方法，该方法获取 \n<code>secretLairs</code> \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 并向其中追加一个新的 \n<code>address</code> \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"add-lair\" title=\"src/app/hero-detail/hero-detail.component.ts (addLair method)\" linenums=\"false\">\naddLair() {\n  this.secretLairs.push(this.fb.group(new Address()));\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2o1oj1ewdbe26pqdu2beq3ec\">在表单上放置一个按钮，以便用户可以添加一个新的 \n<em>秘密基地</em>，并将其连接到组件的 \n<code>addLair()</code> 方法。将其放在 \n<code>secretLairs</code> \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 的结束 \n<code>&lt;/div&gt;</code> 之前。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.html\" region=\"add-lair\" title=\"src/app/hero-detail/hero-detail.component.html (addLair button)\" linenums=\"false\">\n&lt;button (click)=\"addLair()\" type=\"button\"&gt;Add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> Secret Lair&lt;/button&gt;\n\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bltq8i7mt0ojrlfaane4ve2v\">确保添加 \n<code>type=\"button\"</code> 属性， 因为如果没有显式类型，按钮类型将默认为 \"submit\"。 当你稍后添加表单提交操作时，每个 \"submit\" 按钮都会触发提交操作，这可能会执行诸如保存当前更改之类的操作。 你不希望在用户点击 \n<em>添加秘密基地</em> 按钮时保存更改。</p>\n</div>\n<h3 id=\"try-it\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63cv6paei8flzj1f6ivho87hs\"><i class=\"material-icons\">link</i>试试看！</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4jp0vnfpc5b64ydqqjr6np8y\">回到浏览器，选择名为 \"Magneta\" 的英雄。 \"Magneta\" 没有地址，你可以在表单底部的诊断 JSON 中看到这一点。</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/addresses-array.png\" alt=\"JSON output of addresses array\" width=\"400\" height=\"40\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecnektlffzpciueg9mwy2jvlo\">点击 \"\n<em>添加秘密基地</em>\" 按钮。 会出现一个新的地址部分。做得好！</p>\n<h3 id=\"remove-a-lair\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dctwkv16fo9qwsz45ltq1awxb\"><i class=\"material-icons\">link</i>删除一个基地</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6b131ha2wtadjt1wj9zcsfus\">此示例可以 \n<em>添加</em> 地址，但不能 \n<em>删除</em> 它们。 作为额外练习，编写一个 \n<code>removeLair</code> 方法，并将其连接到重复地址 HTML 上的按钮。</p>\n<a id=\"observe-control\"></a>\n<h2 id=\"observe-control-changes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clm20ply4o6uqc6qmm7fvprqt\"><i class=\"material-icons\">link</i>观察控件更改</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bf2j6az82pz7o86s3uabgyrw\">当用户在父 \n<code>HeroListComponent</code> 中选择一个英雄时，Angular 会调用 \n<code>ngOnChanges()</code>。 选择一个英雄会更改 \n<code>HeroDetailComponent.hero</code> \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8r1ec1uyxz2bpvfz1nq12s204\">当用户修改英雄的 \n<code>name</code> 或 \n<code>secretLairs</code> 时，Angular \n<em>不会</em> 调用 \n<code>ngOnChanges()</code>。 幸运的是，你可以通过订阅会触发更改事件的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 属性之一来了解此类更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4e11k3dm17tv7ddnz059mdz0l\">这些属性（如 \n<code>valueChanges</code>）会返回一个 RxJS \n<code>Observable</code>。 你不需要了解太多关于 RxJS \n<code>Observable</code> 的知识来监控表单控件的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgk3xx6roovceb2brrxx3vq3o\">添加以下方法来记录 \n<code>name</code> \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 值的更改。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"log-name-change\" title=\"src/app/hero-detail/hero-detail.component.ts (logNameChange)\" linenums=\"false\">\nnameChangeLog: string[] = [];\nlogNameChange() {\n  const nameControl = this.heroForm.get('name');\n  nameControl.valueChanges.forEach(\n    (value: string) =&gt; this.nameChangeLog.push(value)\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22j0q66zt43du3w3pug199uoq\">在构造函数中调用它，在 \n<code>createForm()</code> 之后。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail-8.component.ts\" region=\"ctor\" title=\"src/app/hero-detail/hero-detail.component.ts\" linenums=\"false\">\nconstructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {\n  this.createForm();\n  this.logNameChange();\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c84tiqhj0a8aeew189ymf4ltd\"><code>logNameChange()</code> 方法将名称更改值推送到 \n<code>nameChangeLog</code> 数组中。 使用此 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 绑定在组件模板底部显示该数组：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.html\" region=\"name-change-log\" title=\"src/app/hero-detail/hero-detail.component.html (Name change log)\" linenums=\"false\">\n&lt;h4&gt;Name change log&lt;/h4&gt;\n&lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let name of nameChangeLog\"&gt;{{name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2obmmdnwwnbu3w11zts6h7fn9\">返回浏览器，选择一个英雄；例如，Magneta，然后开始在 \n<code>name</code> \n<code>&lt;input&gt;</code> 中输入。 你应该在每次按键后看到日志中出现一个新的名称。</p>\n<h3 id=\"when-to-use-it\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kajd329akb33tpqart35rsmi\"><i class=\"material-icons\">link</i>何时使用它</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2otjys2ele0ftcbvcrstgfib2\">插值绑定是显示名称更改的更简单方法。 订阅可观察的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 属性对于在组件类中触发应用程序逻辑非常有用。</p>\n<a id=\"save\"></a>\n<h2 id=\"save-form-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewfedwkz2pap4rmyv0u380ser\"><i class=\"material-icons\">link</i>保存表单数据</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1b5wdbw79b4kpmdep4zk0q784\"><code>HeroDetailComponent</code> 会捕获用户输入，但不会对其进行任何操作。 在实际应用中，你可能会保存这些英雄更改，恢复未保存的更改，并继续编辑。 在你完成本节中的两个功能的实现后，表单将如下所示：</p>\n<figure>\n  <img src=\"generated/images/guide/reactive-forms/save-revert-buttons.png\" alt=\"Form with save &amp; revert buttons\" width=\"389\" height=\"297\">\n</figure>\n<h3 id=\"save\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"by3asjrc7novvotbohpnvg0us\"><i class=\"material-icons\">link</i>保存</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyugtl7ssj47pm6d7hmfnl67k\">当用户提交表单时， \n<code>HeroDetailComponent</code> 将传递一个英雄 \n<em>数据模型</em> 的实例 到注入的 \n<code>HeroService</code> 上的保存方法。将以下内容添加到 \n<code>HeroDetailComponent</code> 中。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"on-submit\" title=\"src/app/hero-detail/hero-detail.component.ts (onSubmit)\" linenums=\"false\">\nonSubmit() {\n  this.hero = this.prepareSaveHero();\n  this.heroService.updateHero(this.hero).subscribe(/* error handling */);\n  this.rebuildForm();\n}\n\n</code-example>\n<!-- TODO: Need to add `private heroService: HeroService` to constructor and import the HeroService. Remove novalidate-->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3ulyf33i1xczg9c9rl8571i1\">此原始 \n<code>hero</code> 具有保存前的值。用户的更改仍在 \n<em>表单模型</em> 中。 因此，你使用 \n<code>prepareSaveHero()</code> 辅助函数，从原始英雄值（\n<code>hero.id</code>）和更改的表单模型值的深层副本组合创建一个新的 \n<code>hero</code>。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"prepare-save-hero\" title=\"src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)\" linenums=\"false\">\nprepareSaveHero(): Hero {\n  const formModel = this.heroForm.value;\n\n  // deep copy of form model lairs\n  const secretLairsDeepCopy: Address[] = formModel.secretLairs.map(\n    (address: Address) =&gt; Object.assign({}, address)\n  );\n\n  // return new `Hero` object containing <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> combination of original hero value(s)\n  // and deep copies of changed form model values\n  const saveHero: Hero = {\n    id: this.hero.id,\n    name: formModel.name as string,\n    // addresses: formModel.secretLairs // &lt;-- bad!\n    addresses: secretLairsDeepCopy\n  };\n  return saveHero;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qt8m7vb7kb2ptlq0ipxu8j6x\">确保导入 \n<code>HeroService</code> 并将其添加到构造函数中：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"import-service\" title=\"src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)\" linenums=\"false\">\nimport { HeroService }           from '../hero.service';\n\n</code-example>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"ctor\" title=\"src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)\" linenums=\"false\">\nconstructor(\n  private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>,\n  private heroService: HeroService) {\n\n  this.createForm();\n  this.logNameChange();\n}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p><strong data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5srcrilujdldicujed6txrtko\">地址深层复制</strong></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awbo765t7nsqiujiu0r4lw8q7\">如果你将 \n<code>formModel.secretLairs</code> 赋值给 \n<code>saveHero.addresses</code>（参见注释掉的代码行）， \n<code>saveHero.addresses</code> 数组中的地址将与 \n<code>formModel.secretLairs</code> 中的基地是同一个对象。 用户随后对基地街道的更改将改变 \n<code>saveHero</code> 中的地址街道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gvovjogkqdl8cnnmsis0is1\"><code>prepareSaveHero</code> 方法会复制表单模型的 \n<code>secretLairs</code> 对象，以防止这种情况发生。</p>\n</div>\n<h3 id=\"revert-cancel-changes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cru4sjkc4miyywygml8ewxgq\"><i class=\"material-icons\">link</i>恢复（取消更改）</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cn4oeqo26m5aebnlvx99x7t8\">用户通过按下恢复按钮来取消更改并将表单恢复到原始状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27scmqkgvtlxgm601yudkrcsr\">恢复很简单。只需重新执行 \n<code>rebuildForm()</code> 方法，该方法从原始的、未更改的 \n<code>hero</code> 数据模型构建表单模型。</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\" region=\"revert\" title=\"src/app/hero-detail/hero-detail.component.ts (revert)\" linenums=\"false\">\nrevert() { this.rebuildForm(); }\n\n</code-example>\n<h3 id=\"buttons\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5egwl1w1xwowipmhic4ib8qrw\"><i class=\"material-icons\">link</i>按钮</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6v3bgychevbyduwrg2ch8x7vq\">在组件模板的顶部附近添加 \"保存\" 和 \"恢复\" 按钮：</p>\n<code-example path=\"reactive-forms/src/app/hero-detail/hero-detail.component.html\" region=\"buttons\" title=\"src/app/hero-detail/hero-detail.component.html (Save and Revert buttons)\" linenums=\"false\">\n&lt;form [formGroup]=\"heroForm\" (ngSubmit)=\"onSubmit()\"&gt;\n  &lt;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"margin-bottom: 1em\"&gt;\n    &lt;button type=\"submit\"\n            [disabled]=\"heroForm.pristine\" class=\"btn btn-success\"&gt;Save&lt;/button&gt; &amp;nbsp;\n    &lt;button type=\"button\" (click)=\"revert()\"\n            [disabled]=\"heroForm.pristine\" class=\"btn btn-danger\"&gt;Revert&lt;/button&gt;\n  &lt;/div&gt;\n\n  &lt;!-- Hero Detail Controls --&gt;\n  &lt;div class=\"form-group radio\"&gt;\n    &lt;h4&gt;Super power:&lt;/h4&gt;\n    &lt;label class=\"center-block\"&gt;&lt;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"flight\"&gt;Flight&lt;/label&gt;\n    &lt;label class=\"center-block\"&gt;&lt;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"x-ray vision\"&gt;X-ray vision&lt;/label&gt;\n    &lt;label class=\"center-block\"&gt;&lt;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"strength\"&gt;Strength&lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"checkbox\"&gt;\n    &lt;label class=\"center-block\"&gt;\n      &lt;input type=\"checkbox\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"sidekick\"&gt;I have <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> sidekick.\n    &lt;/label&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9idvl89d556yg04p2wofqq1nt\">按钮在用户通过更改其任何表单控件中的值（\n<code>heroForm.dirty</code>）来 \"弄脏\" 表单之前处于禁用状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsgdomxoz32tk92kc4s6gu1gj\">点击类型为 \n<code>\"submit\"</code> 的按钮会触发 \n<code>ngSubmit</code> 事件，该事件会调用组件的 \n<code>onSubmit</code> 方法。 点击恢复按钮会触发对组件的 \n<code>revert</code> 方法的调用。 用户现在可以保存或恢复更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ixf61hu9hisohxmzdpvosjbg\">尝试 \n<live-example stackblitz=\"final\" title=\"Reactive Forms (final) in Stackblitz\"></live-example>。</p>\n<a id=\"source-code\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30qj7pxghyzud5zbc71jwpgnn\">最终版本的关键文件如下：</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/app.component.html\" path=\"reactive-forms/src/app/app.component.html\">\n&lt;div class=\"container\"&gt;\n  &lt;h1&gt;Reactive Forms&lt;/h1&gt;\n  &lt;app-hero-list&gt;&lt;/app-hero-list&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"reactive-forms/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"reactive-forms/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }            from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }       from '@angular/platform-browser';\nimport { <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> } from '@angular/forms';  // &lt;-- #1 import module\n\nimport { AppComponent }        from './app.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n// add JavaScript imports\nimport { HeroListComponent }   from './hero-list/hero-list.component';\nimport { HeroService }         from './hero.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroDetailComponent,\n    HeroListComponent // &lt;--declare HeroListComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> // &lt;-- #2 add to @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> imports\n  ],\n  // export for the DemoModule\n  // ...\n  exports: [\n    AppComponent,\n    HeroDetailComponent,\n    HeroListComponent // &lt;-- export HeroListComponent\n  ],\n  providers: [ HeroService ], // &lt;-- provide HeroService\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-detail/hero-detail.component.ts\" path=\"reactive-forms/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> }       from '@angular/core';\nimport { <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>, <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from '@angular/forms';\n\nimport { Address, Hero, states } from '../data-model';\nimport { HeroService }           from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: ['./hero-detail.component.css']\n})\n\nexport class HeroDetailComponent implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n  heroForm: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  nameChangeLog: string[] = [];\n  states = states;\n\n  constructor(\n    private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>,\n    private heroService: HeroService) {\n\n    this.createForm();\n    this.logNameChange();\n  }\n\n  createForm() {\n    this.heroForm = this.fb.group({\n      name: '',\n      secretLairs: this.fb.array([]),\n      power: '',\n      sidekick: ''\n    });\n  }\n\n  ngOnChanges() {\n    this.rebuildForm();\n  }\n\n  rebuildForm() {\n    this.heroForm.reset({\n      name: this.hero.name\n    });\n    this.setAddresses(this.hero.addresses);\n  }\n\n  get secretLairs(): <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a> {\n    return this.heroForm.get('secretLairs') as <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>;\n  };\n\n  setAddresses(addresses: Address[]) {\n    const addressFGs = addresses.map(address =&gt; this.fb.group(address));\n    const addressFormArray = this.fb.array(addressFGs);\n    this.heroForm.setControl('secretLairs', addressFormArray);\n  }\n\n  addLair() {\n    this.secretLairs.push(this.fb.group(new Address()));\n  }\n\n  onSubmit() {\n    this.hero = this.prepareSaveHero();\n    this.heroService.updateHero(this.hero).subscribe(/* error handling */);\n    this.rebuildForm();\n  }\n\n  prepareSaveHero(): Hero {\n    const formModel = this.heroForm.value;\n\n    // deep copy of form model lairs\n    const secretLairsDeepCopy: Address[] = formModel.secretLairs.map(\n      (address: Address) =&gt; Object.assign({}, address)\n    );\n\n    // return new `Hero` object containing <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> combination of original hero value(s)\n    // and deep copies of changed form model values\n    const saveHero: Hero = {\n      id: this.hero.id,\n      name: formModel.name as string,\n      // addresses: formModel.secretLairs // &lt;-- bad!\n      addresses: secretLairsDeepCopy\n    };\n    return saveHero;\n  }\n\n  revert() { this.rebuildForm(); }\n\n  logNameChange() {\n    const nameControl = this.heroForm.get('name');\n    nameControl.valueChanges.forEach(\n      (value: string) =&gt; this.nameChangeLog.push(value)\n    );\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-detail/hero-detail.component.html\" path=\"reactive-forms/src/app/hero-detail/hero-detail.component.html\">\n&lt;form [formGroup]=\"heroForm\" (ngSubmit)=\"onSubmit()\"&gt;\n  &lt;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"margin-bottom: 1em\"&gt;\n    &lt;button type=\"submit\"\n            [disabled]=\"heroForm.pristine\" class=\"btn btn-success\"&gt;Save&lt;/button&gt; &amp;nbsp;\n    &lt;button type=\"button\" (click)=\"revert()\"\n            [disabled]=\"heroForm.pristine\" class=\"btn btn-danger\"&gt;Revert&lt;/button&gt;\n  &lt;/div&gt;\n\n  &lt;!-- Hero Detail Controls --&gt;\n  &lt;div class=\"form-group\"&gt;\n      &lt;label class=\"center-block\"&gt;Name:\n        &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"name\"&gt;\n      &lt;/label&gt;\n  &lt;/div&gt;\n\n  &lt;div <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"secretLairs\" class=\"well well-lg\"&gt;\n    &lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let address of secretLairs.controls; let i=index\" [<a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>]=\"i\" &gt;\n      &lt;!-- The repeated address template --&gt;\n      &lt;h4&gt;Address #{{i + 1}}&lt;/h4&gt;\n      &lt;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"margin-left: 1em;\"&gt;\n        &lt;div class=\"form-group\"&gt;\n          &lt;label class=\"center-block\"&gt;Street:\n            &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\"&gt;\n          &lt;/label&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n          &lt;label class=\"center-block\"&gt;City:\n            &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\"&gt;\n          &lt;/label&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n          &lt;label class=\"center-block\"&gt;State:\n            &lt;select class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\"&gt;\n              &lt;<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of states\" [value]=\"<a href=\"api/animations/state\" class=\"code-anchor\">state</a>\"&gt;{{<a href=\"api/animations/state\" class=\"code-anchor\">state</a>}}&lt;/<a href=\"api/forms/NgSelectOption\" class=\"code-anchor\">option</a>&gt;\n            &lt;/select&gt;\n          &lt;/label&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n          &lt;label class=\"center-block\"&gt;Zip Code:\n            &lt;input class=\"form-control\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\"&gt;\n          &lt;/label&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;br&gt;\n      &lt;!-- End of the repeated address template --&gt;\n    &lt;/div&gt;\n    &lt;button (click)=\"addLair()\" type=\"button\"&gt;Add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> Secret Lair&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group radio\"&gt;\n    &lt;h4&gt;Super power:&lt;/h4&gt;\n    &lt;label class=\"center-block\"&gt;&lt;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"flight\"&gt;Flight&lt;/label&gt;\n    &lt;label class=\"center-block\"&gt;&lt;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"x-ray vision\"&gt;X-ray vision&lt;/label&gt;\n    &lt;label class=\"center-block\"&gt;&lt;input type=\"radio\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"power\" value=\"strength\"&gt;Strength&lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div class=\"checkbox\"&gt;\n    &lt;label class=\"center-block\"&gt;\n      &lt;input type=\"checkbox\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"sidekick\"&gt;I have <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> sidekick.\n    &lt;/label&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n\n&lt;p&gt;heroForm value: {{ heroForm.value | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&lt;/p&gt;\n\n&lt;h4&gt;Name change log&lt;/h4&gt;\n&lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let name of nameChangeLog\"&gt;{{name}}&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-list/hero-list.component.html\" path=\"reactive-forms/src/app/hero-list/hero-list.component.html\">\n&lt;h3 *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isLoading\"&gt;&lt;i&gt;Loading heroes ... &lt;/i&gt;&lt;/h3&gt;\n&lt;h3 *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!isLoading\"&gt;Select <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> hero:&lt;/h3&gt;\n\n&lt;nav&gt;\n  &lt;button (click)=\"getHeroes()\" class=\"btn btn-primary\"&gt;Refresh&lt;/button&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"select(hero)\"&gt;{{hero.name}}&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n&lt;/nav&gt;\n\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n  &lt;hr&gt;\n  &lt;h2&gt;Hero Detail&lt;/h2&gt;\n  &lt;h3&gt;Editing: {{selectedHero.name}}&lt;/h3&gt;\n  &lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-list/hero-list.component.ts\" path=\"reactive-forms/src/app/hero-list/hero-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Observable }        from 'rxjs/Observable';\nimport 'rxjs/add/operator/finally';\n\nimport { Hero }        from '../data-model';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  styleUrls: ['./hero-list.component.css']\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Observable&lt;Hero[]&gt;;\n  isLoading = false;\n  selectedHero: Hero;\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() { this.getHeroes(); }\n\n  getHeroes() {\n    this.isLoading = true;\n    this.heroes = this.heroService.getHeroes()\n                      // TODO: error handling\n                      .finally(() =&gt; this.isLoading = false);\n    this.selectedHero = undefined;\n  }\n\n  select(hero: Hero) { this.selectedHero = hero; }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/data-model.ts\" path=\"reactive-forms/src/app/data-model.ts\">\nexport class Hero {\n  id = 0;\n  name = '';\n  addresses: Address[];\n}\n\nexport class Address {\n  street = '';\n  city   = '';\n  <a href=\"api/animations/state\" class=\"code-anchor\">state</a>  = '';\n  zip    = '';\n}\n\nexport const heroes: Hero[] = [\n  {\n    id: 1,\n    name: 'Whirlwind',\n    addresses: [\n      {street: '123 Main',  city: 'Anywhere', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'CA',  zip: '94801'},\n      {street: '456 Maple', city: 'Somewhere', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'VA', zip: '23226'},\n    ]\n  },\n  {\n    id: 2,\n    name: 'Bombastic',\n    addresses: [\n      {street: '789 Elm',  city: 'Smallville', <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: 'OH',  zip: '04501'},\n    ]\n  },\n  {\n    id: 3,\n    name: 'Magneta',\n    addresses: [ ]\n  },\n];\n\nexport const states = ['CA', 'MD', 'OH', 'VA'];\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero.service.ts\" path=\"reactive-forms/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of }         from 'rxjs/observable/of';\nimport 'rxjs/add/operator/delay';\n\nimport { Hero, heroes } from './data-model';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n\n  delayMs = 500;\n\n  // Fake server get; assume nothing can go wrong\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    return of(heroes).delay(this.delayMs); // simulate latency with delay\n  }\n\n  // Fake server update; assume nothing can go wrong\n  updateHero(hero: Hero): Observable&lt;Hero&gt;  {\n    const oldHero = heroes.find(h =&gt; h.id === hero.id);\n    const newHero = Object.assign(oldHero, hero); // Demo: mutate cached hero\n    return of(newHero).delay(this.delayMs); // simulate latency with delay\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ti39wfu0c7kux33zk8dkpeov\">你可以从 \n<live-example title=\"Reactive Forms Demo in Stackblitz\">\n Reactive Forms Demo\n</live-example> 动态示例中下载本指南中所有步骤的完整源代码。</p>\n\n</div>\n<!-- links to this doc:\n - guide/change-log\n - guide/dynamic-form\n - guide/form-validation\n - guide/npm-packages\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/animations/style\n - api/common/JsonPipe\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnChanges\n - api/core/OnInit\n - api/core/ViewChild\n - api/core/testing/async\n - api/core/testing/fakeAsync\n - api/core/testing/inject\n - api/forms/AbstractControl\n - api/forms/CheckboxControlValueAccessor\n - api/forms/Form\n - api/forms/FormArray\n - api/forms/FormArray#controls\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormGroup#setControl\n - api/forms/FormGroupName\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgSelectOption\n - api/forms/RadioControlValueAccessor\n - api/forms/ReactiveFormsModule\n - api/forms/SelectControlValueAccessor\n - api/forms/SelectMultipleControlValueAccessor\n - api/forms/Validators\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - guide/form-validation\n - guide/forms\n - guide/lifecycle-hooks#afterview\n - guide/lifecycle-hooks#onchanges\n - guide/reactive-forms#add-a-formgroup\n - guide/reactive-forms#add-a-new-lair-to-the-formarray\n - guide/reactive-forms#async-vs-sync\n - guide/reactive-forms#buttons\n - guide/reactive-forms#choosing-reactive-or-template-driven-forms\n - guide/reactive-forms#create-a-data-model\n - guide/reactive-forms#create-a-reactive-forms-component\n - guide/reactive-forms#create-the-herolistcomponent-and-heroservice\n - guide/reactive-forms#create-the-template\n - guide/reactive-forms#display-the-formarray\n - guide/reactive-forms#display-the-herodetailcomponent\n - guide/reactive-forms#essential-form-classes\n - guide/reactive-forms#essentials\n - guide/reactive-forms#form-array\n - guide/reactive-forms#from-address-to-secretlairs\n - guide/reactive-forms#get-the-formarray\n - guide/reactive-forms#import-the-reactiveformsmodule\n - guide/reactive-forms#initialize-the-secretlairs-formarray\n - guide/reactive-forms#inspect-formcontrol-properties\n - guide/reactive-forms#introduction-to-formbuilder\n - guide/reactive-forms#introduction-to-reactive-forms\n - guide/reactive-forms#more-formcontrols\n - guide/reactive-forms#nested-formgroups\n - guide/reactive-forms#observe-control-changes\n - guide/reactive-forms#patchvalue\n - guide/reactive-forms#populate-the-form-model-with-setvalue-and-patchvalue\n - guide/reactive-forms#reactive-forms\n - guide/reactive-forms#reactive-forms-1\n - guide/reactive-forms#remove-a-lair\n - guide/reactive-forms#reset-the-form\n - guide/reactive-forms#revert-cancel-changes\n - guide/reactive-forms#save\n - guide/reactive-forms#save-form-data\n - guide/reactive-forms#setup\n - guide/reactive-forms#setvalue\n - guide/reactive-forms#style-the-app\n - guide/reactive-forms#taking-a-look-at-the-form-model\n - guide/reactive-forms#template-driven-forms\n - guide/reactive-forms#the-data-model-and-the-form-model\n - guide/reactive-forms#try-it\n - guide/reactive-forms#use-formarray-to-present-an-array-of-formgroups\n - guide/reactive-forms#validatorsrequired\n - guide/reactive-forms#when-to-set-form-model-values-ngonchanges\n - guide/reactive-forms#when-to-use-it\n - tutorial/toh-pt3\n - tutorial/toh-pt4\n - http://getbootstrap.com/\n-->"
}