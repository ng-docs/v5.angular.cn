{
  "id" : "guide/component-styles",
  "title" : "组件样式",
  "contents" : "<div class=\"content\">\n<h1 id=\"component-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mjvin8rnfoaq60du50et857y\"><i class=\"material-icons\">link</i>组件样式</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z7v8akhvp7guuuvxo4z4v54f\">Angular 应用程序使用标准 CSS 进行样式设置。这意味着你可以将 你所知道的关于 CSS 样式表、选择器、规则和媒体查询的知识 直接应用于 Angular 应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78u1jqw3gsbkkju7d8qe6aala\">此外，Angular 可以将\n<em>组件样式</em> 与组件捆绑在一起，从而实现比普通样式表更模块化的设计。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agwvm6ozakvraqhwg8zg6ofdy\">本页介绍如何加载和应用这些组件样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fliytthw8ajl1jed0jtyvesz\">你可以在 Stackblitz 中运行 \n<live-example></live-example> 并从那里下载代码。</p>\n<h2 id=\"using-component-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bl1xj50auu1j6kg7jqg8n478\"><i class=\"material-icons\">link</i>使用组件样式</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79wy3usp94477smecf1d96pyg\">对于你编写的每个 Angular 组件，你不仅可以定义 HTML 模板， 还可以定义与该模板相关的 CSS 样式， 指定你需要的任何选择器、规则和媒体查询。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kg438sv2pisa7oq8bityflqy\">一种方法是在组件元数据中设置 \n<code>styles</code> 属性。 \n<code>styles</code> 属性接受一个包含 CSS 代码的字符串数组。 通常你只给它一个字符串，如下例所示：</p>\n<code-example path=\"component-styles/src/app/hero-app.component.ts\" title=\"src/app/hero-app.component.ts\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<h2 id=\"style-scope\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9angrqlzqal5bd4egtlw9fhqt\"><i class=\"material-icons\">link</i>样式范围</h2>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ijlx9728ny203xmxsoihfexh\">在 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据中指定的样式\n<em>仅适用于该组件的模板</em>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5c4x9uphsk3a1fvlf8bzr3zpb\">它们\n<em>不会被</em>嵌套在模板中的任何组件或投影到组件中的任何内容继承。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ou8j878hq4oqa89e6y2bhujv\">在此示例中，\n<code>h1</code> 样式仅适用于 \n<code>HeroAppComponent</code>， 不适用于嵌套的 \n<code>HeroMainComponent</code>，也不适用于应用程序中任何其他地方的 \n<code>&lt;h1&gt;</code> 标签。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64ptspviszguj570votwvsh2y\">此范围限制是一个\n<strong><em>样式模块化特性</em></strong>。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2upepr39rse4f7ronscrb8wup\">你可以在每个组件的上下文中使用最合理的 CSS 类名和选择器。</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6nmn7chshoeobnndnhpjo2bd\">类名和选择器是组件的本地属性，不会与 应用程序中其他地方使用的类和选择器冲突。</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55s59mnmfp3rdpkea5fym81rt\">应用程序中其他地方的样式更改不会影响组件的样式。</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"l2injrb9t25m433rg348rd2k\">你可以将每个组件的 CSS 代码与组件的 TypeScript 和 HTML 代码放在一起， 这将导致一个整洁的项目结构。</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9c8ttd6adl4b6jtu5iavmqgk\">你可以更改或删除组件 CSS 代码，而无需搜索整个应用程序以查找代码的其他使用位置。</li>\n</ul>\n<a id=\"special-selectors\"></a>\n<h2 id=\"special-selectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a86cxagp25uvhy0x71rksaw16\"><i class=\"material-icons\">link</i>特殊选择器</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qgfj2nvxa6i5bskfwtmw5bor\">组件样式有一些来自 shadow DOM 样式范围世界的特殊\n<em>选择器</em> （在 \n<a href=\"https://www.w3.org/TR/css-scoping-1\">CSS Scoping Module Level 1</a> 页面上 \n<a href=\"https://www.w3.org\">W3C</a> 网站上进行了描述）。 以下部分将介绍这些选择器。</p>\n<h3 id=\"host\">:host</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ag0lu4j3g7munbgprn30bork7\">使用 \n<code>:host</code> 伪类选择器来定位\n<em>托管</em>组件的元素中的样式（而不是 定位组件模板\n<em>内部</em>的元素）。</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"host\" title=\"src/app/hero-details.component.css\" linenums=\"false\">\n:host {\n  display: block;\n  border: 1px solid black;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"di51b7g5bn5cpz6wagjld7k9i\"><code>:host</code> 选择器是定位宿主元素的唯一方法。你无法从组件内部使用其他选择器访问宿主元素，因为它不是组件自身模板的一部分。宿主元素位于父组件的模板中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wcwm1pxhj437vpvltiv8mg0f\">使用\n<em>函数形式</em>通过 在 \n<code>:host</code> 之后包含括号内的另一个选择器来有条件地应用宿主样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7l2i2u8youlz0sm1km56d1d0l\">下一个示例再次定位宿主元素，但仅当它也具有 \n<code>active</code> CSS 类时。</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"hostfunction\" title=\"src/app/hero-details.component.css\" linenums=\"false\">\n:host(.active) {\n  border-width: 3px;\n}\n\n</code-example>\n<h3 id=\"host-context\">:host-context</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oe6m7l32m76ewzl56ex0hdgl\">有时，根据组件视图\n<em>外部</em>的某些条件应用样式很有用。例如，可以将 CSS 主题类应用于文档的 \n<code>&lt;body&gt;</code> 元素，并且你希望根据该主题更改组件的外观。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zkuxqh6ltufgod84630m3lrj\">使用 \n<code>:host-context()</code> 伪类选择器，它的工作原理与 \n<code>:host()</code> 的函数形式相同。\n<code>:host-context()</code> 选择器会在组件宿主元素的任何祖先元素（直到文档根元素）中查找 CSS 类。\n<code>:host-context()</code> 选择器与其他选择器结合使用时非常有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yduj7cohx5r7fx2owexijtkp\">以下示例仅在某个祖先元素具有 CSS 类 \n<code>theme-light</code> 时，将 \n<code>background-color</code> 样式应用于组件\n<em>内部</em>的所有 \n<code>&lt;h2&gt;</code> 元素。</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"hostcontext\" title=\"src/app/hero-details.component.css\" linenums=\"false\">\n:host-context(.theme-light) h2 {\n  background-color: #eef;\n}\n\n</code-example>\n<h3 id=\"deprecated-deep--and-ng-deep\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wruzj5u3t5atzj9w2zj857kp\"><i class=\"material-icons\">link</i>(已弃用) \n<code>/deep/</code>、\n<code>&gt;&gt;&gt;</code> 和 \n<code>::ng-deep</code></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"847fdqzdwfjxrmcgxeck676zu\">组件样式通常仅应用于组件自身模板中的 HTML。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rjb2qc94570sd8wjbq50fs6b\">使用 \n<code>/deep/</code> 穿透阴影的后代组合器，强制将样式向下传递到子组件树中的所有子组件视图。\n<code>/deep/</code> 组合器适用于任何深度的嵌套组件，并且它适用于组件的视图子元素和内容子元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u6qogcjb1axlfkwoxp7i5yp4\">以下示例针对所有 \n<code>&lt;h3&gt;</code> 元素，从宿主元素向下穿过此组件到 DOM 中的所有子元素。</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"deep\" title=\"src/app/hero-details.component.css\" linenums=\"false\">\n:host /deep/ h3 {\n  font-style: italic;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d45xmkz6gfaysvmj2a6auft06\"><code>/deep/</code> 组合器还有别名 \n<code>&gt;&gt;&gt;</code> 和 \n<code>::ng-deep</code>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"971l1zbbq7hddcp6suvj2wkmw\">仅在使用\n<em>模拟</em>视图封装时使用 \n<code>/deep/</code>、\n<code>&gt;&gt;&gt;</code> 和 \n<code>::ng-deep</code>。模拟是默认的也是最常用的视图封装。有关更多信息，请参阅 \n<a href=\"guide/component-styles#view-encapsulation\">控制视图封装</a> 部分。</p>\n</div>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kc7w259x9p0urf6qu1itvg2s\">穿透阴影的后代组合器已弃用，并且 \n<a href=\"https://www.chromestatus.com/features/6750456638341120\">主要浏览器和工具正在删除对它的支持</a>。因此，我们计划在 Angular 中删除对所有 3 个（\n<code>/deep/</code>、\n<code>&gt;&gt;&gt;</code> 和 \n<code>::ng-deep</code>）的支持。在此之前，\n<code>::ng-deep</code> 应该优先用于与工具的更广泛兼容性。</p>\n</div>\n<a id=\"loading-styles\"></a>\n<h2 id=\"loading-component-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i2sfbsnssb11d0xv9wwigo3e\"><i class=\"material-icons\">link</i>加载组件样式</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d85w4ynmk93mhmzh69zayj5jv\">有几种方法可以向组件添加样式：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"428f59z9p9fyatdocozp0mk26\">通过设置 \n<code>styles</code> 或 \n<code>styleUrls</code> 元数据。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ch5k7l0ihzk8wte4fzbxiwot\">在模板 HTML 中内联。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41vy0g0bwomugcun3c2ov6rjm\">使用 CSS 导入。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cee8s4qkyvc687b02dnfy47kc\">前面概述的范围规则适用于这些加载模式中的每一种。</p>\n<h3 id=\"styles-in-component-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdr4vwi7s2dkazitx32i8qlii\"><i class=\"material-icons\">link</i>组件元数据中的样式</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28qb4r306v2ahfc8xwqnv39tv\">你可以向 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器添加 \n<code>styles</code> 数组属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cs9l6valublsky2bcdzucybnh\">数组中的每个字符串都定义了此组件的一些 CSS。</p>\n<code-example path=\"component-styles/src/app/hero-app.component.ts\" title=\"src/app/hero-app.component.ts (CSS inline)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hj6irds8y7iu1w5r7fzhxhjr\">提醒：这些样式\n<em>仅适用于此组件</em>。它们\n<em>不会被</em>模板中嵌套的任何组件或投影到组件中的任何内容\n<em>继承</em>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kt6kv2gzcpih8ryp0oiwzd4k\">当你使用 \n<code>--inline-styles</code> 标志创建组件时，CLI 会定义一个空的 \n<code>styles</code> 数组。</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng generate component hero-app --inline-style\n</code-example>\n<h3 id=\"style-files-in-component-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6unayav8gdazg7t8dtthzq2wc\"><i class=\"material-icons\">link</i>组件元数据中的样式文件</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"564jkru2pdow3vrlptlxx6vuz\">你可以通过向组件的 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器添加 \n<code>styleUrls</code> 属性来从外部 CSS 文件加载样式：</p>\n<code-tabs>\n  <code-pane title=\"src/app/hero-app.component.ts (CSS in file)\" path=\"component-styles/src/app/hero-app.component.1.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styleUrls: ['./hero-app.component.css']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-pane>\n  <code-pane title=\"src/app/hero-app.component.css\" path=\"component-styles/src/app/hero-app.component.css\">\nh1 {\n  font-weight: normal;\n}\n\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8s0lb7cs121xtcnkxo4b7eyf\">提醒：样式文件中的样式\n<em>仅适用于此组件</em>。它们\n<em>不会被</em>模板中嵌套的任何组件或投影到组件中的任何内容\n<em>继承</em>。</p>\n</div>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rdrhhqylk8nlbhlr4j1g5fd0\">你可以指定多个样式文件，甚至可以组合使用 \n<code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 和 \n<code>styleUrls</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9g1ppb929kh9994lb6o29eui\">CLI 默认情况下会为你创建一个空的样式文件，并在组件生成的 \n<code>styleUrls</code> 中引用该文件。</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng generate component hero-app\n</code-example>\n<h3 id=\"template-inline-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yd0jisa3z9spr9q1b61hgy5s\"><i class=\"material-icons\">link</i>模板内联样式</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eokyocbcn24gb46jtbaumb9q1\">你可以通过将 CSS 样式直接嵌入到 HTML 模板中，并将它们放在 \n<code>&lt;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;</code> 标签内来嵌入 CSS 样式。</p>\n<code-example path=\"component-styles/src/app/hero-controls.component.ts\" region=\"inlinestyles\" title=\"src/app/hero-controls.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-controls',\n  template: `\n    &lt;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;\n      button {\n        background-color: white;\n        border: 1px solid #777;\n      }\n    &lt;/<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;\n    &lt;h3&gt;Controls&lt;/h3&gt;\n    &lt;button (click)=\"activate()\"&gt;Activate&lt;/button&gt;\n  `\n})\n\n</code-example>\n<h3 id=\"template-link-tags\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cq7ogad4vtabg4fxj2xyck90g\"><i class=\"material-icons\">link</i>模板链接标签</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bjgkr3nm2ehu2uve4oky5ttd\">你也可以将 \n<code>&lt;link&gt;</code> 标签写入组件的 HTML 模板。</p>\n<code-example path=\"component-styles/src/app/hero-team.component.ts\" region=\"stylelink\" title=\"src/app/hero-team.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-team',\n  template: `\n    &lt;!-- We must use <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> relative URL so that the AOT compiler can find the stylesheet --&gt;\n    &lt;link rel=\"stylesheet\" href=\"../assets/hero-team.component.css\"&gt;\n    &lt;h3&gt;Team&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let member of hero.team\"&gt;\n        {{member}}\n      &lt;/li&gt;\n    &lt;/ul&gt;`\n})\n\n</code-example>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8olirqs1t27q5xzfhjs36qs1b\">链接标签的 \n<code>href</code> URL 必须相对于\n<em><strong>应用程序根目录</strong></em>，而不是相对于组件文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8528omb59lvvkahkuu2h4ncj1\">使用 CLI 构建时，请确保将链接的样式文件包含在要复制到服务器的资产中，如 \n<a href=\"https://github.com/angular/angular-cli/wiki/stories-asset-configuration\">CLI 文档</a> 中所述。</p>\n</div>\n<h3 id=\"css-imports\">CSS @imports</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"346lf861mk6afbldnux7ccen9\">你也可以使用标准 CSS \n<code>@import</code> 规则将 CSS 文件导入到 CSS 文件中。有关详细信息，请参阅 \n<a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@import\"><code>@import</code></a> 在 \n<a href=\"https://developer.mozilla.org\">MDN</a> 网站上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qbfjetzq9uzjaa3rpwlfmh2h\">在这种情况下，URL 相对于你正在导入的 CSS 文件。</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"import\" title=\"src/app/hero-details.component.css (excerpt)\">\n/* The AOT compiler needs the `./` to show that this is local */\n@import './hero-details-box.css';\n\n</code-example>\n<h3 id=\"external-and-global-style-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qpg77pr2psj77bxaapv7rpdf\"><i class=\"material-icons\">link</i>外部和全局样式文件</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bu6qelzwkdaxz6txxeb8zcni\">使用 CLI 构建时，你必须配置 \n<code>.angular-cli.json</code> 以包含\n<em>所有外部资产</em>，包括外部样式文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23hho69dsx3j5s3w9a9tzi9cf\">在 \n<code>styles</code> 部分注册\n<strong>全局</strong>样式文件，该部分默认情况下预先配置了全局 \n<code>styles.css</code> 文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhjxs9l51v1dun836frvxtyvy\">请参阅 \n<a href=\"https://github.com/angular/angular-cli/wiki/stories-global-styles\">CLI 文档</a> 以了解更多信息。</p>\n<h3 id=\"non-css-style-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vhxpqga24m8cy3h8thgbt7au\"><i class=\"material-icons\">link</i>非 CSS 样式文件</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f0a37xaquwtcjk0y84tsipql\">如果你使用 CLI 构建， 你可以使用 \n<a href=\"http://sass-lang.com/\">sass</a>、\n<a href=\"http://lesscss.org/\">less</a> 或 \n<a href=\"http://stylus-lang.com/\">stylus</a> 编写样式文件，并在 \n<code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 元数据中使用适当的扩展名（\n<code>.scss</code>、\n<code>.less</code>、\n<code>.styl</code>）指定这些文件，如以下示例所示：</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n...\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ey9kfvltifzr2fdp1zya8y3\">CLI 构建过程会运行相关的 CSS 预处理器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"289gy7g1cb46cg0gloxfg9bez\">使用 \n<code>ng generate component</code> 生成组件文件时，CLI 默认情况下会发出一个空的 CSS 样式文件（\n<code>.css</code>）。你可以配置 CLI 以默认使用你首选的 CSS 预处理器，如 \n<a href=\"https://github.com/angular/angular-cli/wiki/stories-css-preprocessors\" title=\"CSS 预处理器集成\">CLI 文档</a> 中所述。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r03r80xl5olh7qzj3xk86psl\">添加到 \n<code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> 数组中的样式字符串\n<em>必须用 CSS 编写</em>，因为 CLI 无法将预处理器应用于内联样式。</p>\n</div>\n<a id=\"view-encapsulation\"></a>\n<h2 id=\"view-encapsulation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"380hjm6ccy1kvz0uhgapjhrdr\"><i class=\"material-icons\">link</i>视图封装</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ufqdydgeoo9kxixwwm0vigm8\">如前所述，组件 CSS 样式被封装到组件的视图中，不会影响应用程序的其余部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekxa9ihb48kfocwu8c4lxcyyh\">为了控制这种封装如何在\n<em>每个组件</em>的基础上发生，你可以在组件元数据中设置\n<em>视图封装模式</em>。从以下模式中选择：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1e128yi0jjl3e5dt94w4ptkh6\"><code>Native</code> 视图封装使用浏览器的原生 Shadow DOM 实现（请参阅 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM\">Shadow DOM</a> 在 \n<a href=\"https://developer.mozilla.org\">MDN</a> 网站上） 将 Shadow DOM 附加到组件的宿主元素，然后将组件视图放入该 Shadow DOM 中。组件的样式包含在 Shadow DOM 中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"288hmlt6idede7dqm0y367dov\"><code>Emulated</code> 视图封装（默认）通过预处理（并重命名）CSS 代码来模拟 Shadow DOM 的行为，从而有效地将 CSS 范围限定到组件的视图。有关详细信息，请参阅 \n<a href=\"guide/component-styles#inspect-generated-css\">附录 1</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17x8u5mw2imshzigv1d7jyphk\"><code>None</code> 表示 Angular 不进行视图封装。 Angular 将 CSS 添加到全局样式中。 之前讨论的范围规则、隔离和保护措施不适用。 这与将组件的样式粘贴到 HTML 中基本相同。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62y2esat1bqtlojcy3icxd8wv\">要设置组件的封装模式，请在组件元数据中使用 \n<code>encapsulation</code> 属性：</p>\n<code-example path=\"component-styles/src/app/quest-summary.component.ts\" region=\"encapsulation.native\" title=\"src/app/quest-summary.component.ts\" linenums=\"false\">\n// warning: few browsers support shadow DOM encapsulation at this time\nencapsulation: <a href=\"api/core/ViewEncapsulation#Native\" class=\"code-anchor\">ViewEncapsulation.Native</a>\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89wrzn2s2fmjtd2y5vymlzq0p\"><code>Native</code> 视图封装仅适用于原生支持 Shadow DOM 的浏览器（请参阅 \n<a href=\"http://caniuse.com/#feat=shadowdom\">Shadow DOM v0</a> 在 \n<a href=\"http://caniuse.com\">Can I use</a> 网站上）。支持仍然有限， 这就是为什么 \n<code>Emulated</code> 视图封装是默认模式，并且在大多数情况下推荐使用。</p>\n<a id=\"inspect-generated-css\"></a>\n<h2 id=\"inspecting-generated-css\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70vxfplu8xwn1brvu4w3axmzn\"><i class=\"material-icons\">link</i>检查生成的 CSS</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s5ss3wnwt3px2g8kln5aq8hc\">使用模拟视图封装时，Angular 会预处理 所有组件样式，使其近似于标准 Shadow CSS 范围规则。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jntmqupuecbggbmj5ikkl4fw\">在启用了模拟视图封装的正在运行的 Angular 应用程序的 DOM 中，每个 DOM 元素都有一些额外的属性 附加到它：</p>\n<code-example format=\"\">\n  &lt;hero-details _nghost-pmm-5&gt;\n    &lt;h2 _ngcontent-pmm-5&gt;Mister Fantastic&lt;/h2&gt;\n    &lt;hero-team _ngcontent-pmm-5 _nghost-pmm-6&gt;\n      &lt;h3 _ngcontent-pmm-6&gt;Team&lt;/h3&gt;\n    &lt;/hero-team&gt;\n  &lt;/hero-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tmqha7qmri6ksznzm1m47wdd\">有两种类型的生成属性：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39euztxbf86c4iwe39rxzqyf0\">在原生封装中将成为 Shadow DOM 宿主的元素具有 生成的 \n<code>_nghost</code> 属性。这通常是组件宿主元素的情况。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8l34io0d99nd6wid6kmpihul0\">组件视图内的元素具有 \n<code>_ngcontent</code> 属性， 用于标识此元素属于哪个宿主的模拟 Shadow DOM。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gy8f10m0ypy6752sc3jabuio\">这些属性的精确值并不重要。它们是自动 生成的，你永远不会在应用程序代码中引用它们。但它们是 由生成的组件样式（位于 DOM 的 \n<code>&lt;head&gt;</code> 部分）所针对的：</p>\n<code-example format=\"\">\n  [_nghost-pmm-5] {\n    display: block;\n    border: 1px solid black;\n  }\n\n  h3[_ngcontent-pmm-6] {\n    background-color: white;\n    border: 1px solid #777;\n  }\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tzma7n8m3xmm62vyq9fhduow\">这些样式经过后处理，以便每个选择器都用 \n<code>_nghost</code> 或 \n<code>_ngcontent</code> 属性选择器进行增强。 这些额外的选择器使本页中描述的范围规则成为可能。</p>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/common/NgForOf\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/core/ViewEncapsulation#Native\n - api/router/RouterLinkWithHref\n - guide/component-styles#component-styles\n - guide/component-styles#css-imports\n - guide/component-styles#deprecated-deep--and-ng-deep\n - guide/component-styles#external-and-global-style-files\n - guide/component-styles#host\n - guide/component-styles#host-context\n - guide/component-styles#inspect-generated-css\n - guide/component-styles#inspecting-generated-css\n - guide/component-styles#loading-component-styles\n - guide/component-styles#non-css-style-files\n - guide/component-styles#special-selectors\n - guide/component-styles#style-files-in-component-metadata\n - guide/component-styles#style-scope\n - guide/component-styles#styles-in-component-metadata\n - guide/component-styles#template-inline-styles\n - guide/component-styles#template-link-tags\n - guide/component-styles#using-component-styles\n - guide/component-styles#view-encapsulation\n - http://caniuse.com\n - http://caniuse.com/#feat=shadowdom\n - http://lesscss.org/\n - http://sass-lang.com/\n - http://stylus-lang.com/\n - https://developer.mozilla.org\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM\n - https://developer.mozilla.org/en/docs/Web/CSS/@import\n - https://github.com/angular/angular-cli/wiki/stories-asset-configuration\n - https://github.com/angular/angular-cli/wiki/stories-css-preprocessors\n - https://github.com/angular/angular-cli/wiki/stories-global-styles\n - https://www.chromestatus.com/features/6750456638341120\n - https://www.w3.org\n - https://www.w3.org/TR/css-scoping-1\n-->"
}