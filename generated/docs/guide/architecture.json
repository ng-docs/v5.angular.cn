{
  "id" : "guide/architecture",
  "title" : "架构概述",
  "contents" : "<div class=\"content\">\n<h1 id=\"architecture-overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyni751z978520oykdyqy0lqj\"><i class=\"material-icons\">link</i>架构概述</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efl8053t3pjqo5v4fabrrkw64\">Angular 是一个平台和框架，用于使用 HTML 和 TypeScript 构建客户端应用程序。 Angular 本身是用 TypeScript 编写的。它将核心功能和可选功能实现为一组 TypeScript 库，你可以将这些库导入到你的应用程序中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83ezbthsufnynacbzikcyni8o\">Angular 应用程序的基本构建块是\n<em>NgModule</em>，它为\n<em>组件</em>提供编译上下文。NgModule 将相关代码收集到功能集；Angular 应用程序由一组 NgModule 定义。应用程序始终至少有一个\n<em>根模块</em>，它启用引导，并且通常还有许多其他\n<em>特性模块</em>。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vo5c97dgwlre4y78wpulzfkl\">组件定义\n<em>视图</em>，视图是一组屏幕元素，Angular 可以根据你的程序逻辑和数据在这些元素之间进行选择和修改。每个应用程序至少有一个根组件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pfxtdb568bezsrru4hxrminr\">组件使用\n<em>服务</em>，服务提供与视图没有直接关系的特定功能。服务提供者可以作为\n<em>依赖项</em>\n<em>注入</em>到组件中，使你的代码模块化、可重用且高效。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d32h1ffym4nnhr1v9fxlv9o14\">组件和服务都只是类，带有\n<em>装饰器</em>，这些装饰器标记它们的类型并提供元数据，告诉 Angular 如何使用它们。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u88cy7l9jxafausyxjjrwht9\">组件类的元数据将其与一个\n<em>模板</em>相关联，该模板定义一个视图。模板将普通 HTML 与 Angular \n<em>指令</em>和\n<em>绑定标记</em>结合在一起，使 Angular 能够在渲染 HTML 以供显示之前修改 HTML。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"609olxb4iewe4vg5jhlzdhe63\">服务类的元数据提供了 Angular 需要的信息，以便通过\n<em>依赖注入 (DI)</em> 使服务可供组件使用。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cppogsw44lacblk69k7tbco9x\">应用程序的组件通常定义许多视图，这些视图按层次结构排列。Angular 提供了 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务来帮助你定义视图之间的导航路径。路由器提供了复杂的浏览器内导航功能。</p>\n<h2 id=\"modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb9tpdn0hus4cdbr3f3d516fm\"><i class=\"material-icons\">link</i>模块</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx9fd2icslk420ftqub4c0fu3\">Angular 定义了 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>，它不同于 JavaScript (ES2015) 模块，并对其进行了补充。NgModule 为一组组件声明编译上下文，这些组件专用于应用程序域、工作流或一组密切相关的功能。NgModule 可以将它的组件与相关代码（例如服务）相关联，以形成功能单元。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyxbuxoy361lahn1xelmaemp0\">每个 Angular 应用程序都有一个\n<em>根模块</em>，通常命名为 \n<code>AppModule</code>，它提供启动应用程序的引导机制。应用程序通常包含许多功能模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84gxf66m63u224928xk35jt14\">与 JavaScript 模块一样，NgModule 可以从其他 NgModule 导入功能，并允许将它们自己的功能导出并供其他 NgModule 使用。例如，要在你的应用程序中使用路由器服务，你需要导入 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> NgModule。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"817qwche8wk739yuj3vfwe7gl\">将代码组织成不同的功能模块有助于管理复杂应用程序的开发，并为可重用性设计。此外，此技术使你能够利用\n<em>惰性加载</em>——即按需加载模块——以最大限度地减少启动时需要加载的代码量。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqlun8r5yqblnarnel3pj6j67\">有关更详细的讨论，请参阅 \n<a href=\"guide/architecture-modules\">模块简介</a>。</p>\n</div>\n<h2 id=\"components\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c7vzzlnsersqq3lvejga81lr\"><i class=\"material-icons\">link</i>组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"t46xajbjppkkqn6goi8a7hc7\">每个 Angular 应用程序至少有一个组件，即\n<em>根组件</em>，它将组件层次结构与页面 DOM 连接起来。每个组件都定义一个包含应用程序数据和逻辑的类，并与一个 HTML \n<em>模板</em>相关联，该模板定义要在目标环境中显示的视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82gf31a6bhrj7kw6zz2iyh0ys\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器将它下面的类标识为组件，并提供模板和相关的组件特定元数据。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72frx8j654pmhb8o350idruec\">装饰器是修改 JavaScript 类的函数。Angular 定义了许多此类装饰器，这些装饰器将特定类型的元数据附加到类，以便它知道这些类的含义以及它们应该如何工作。</p>\n<p>   <a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4l1o47jwguf7nhkujnmexqi4\">在网上了解更多关于装饰器的信息。</a></p>\n</div>\n<h3 id=\"templates-directives-and-data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cxrr206451pj5cc1ovkiaeso\"><i class=\"material-icons\">link</i>模板、指令和数据绑定</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ijnm5km3p95ulnuvj0yxae06\">模板将 HTML 与 Angular 标记结合起来，可以在显示 HTML 元素之前修改它们。 模板\n<em>指令</em>提供程序逻辑，而\n<em>绑定标记</em>将你的应用程序数据和文档对象模型 (DOM) 连接起来。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7z6xvbftx7edpfr65bc32541z\"><em>事件绑定</em>允许你的应用程序通过更新应用程序数据来响应目标环境中的用户输入。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bnb5v0e541kk3tl7w5osvjpd\"><em>属性绑定</em>允许你将从应用程序数据计算出的值插值到 HTML 中。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"390n51fttf6t6siuowwtla0ez\">在显示视图之前，Angular 会评估指令并解析模板中的绑定语法，以根据你的程序数据和逻辑修改 HTML 元素和 DOM。Angular 支持\n<em>双向数据绑定</em>，这意味着 DOM 中的变化（例如用户选择）也可以反映回你的程序数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6du6twz6kusb1z7em5nb3erd7\">你的模板还可以使用\n<em>管道</em>来改善用户体验，通过转换值以供显示。例如，使用管道以适合用户语言环境的方式显示日期和货币值。Angular 提供了用于常见转换的预定义管道，你也可以定义自己的管道。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hulzalruqvvnvheeifpguqsf\">有关这些概念的更详细讨论，请参阅 \n<a href=\"guide/architecture-components\">组件简介</a>。</p>\n</div>\n<a id=\"dependency-injection\"></a>\n<h2 id=\"services-and-dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"455bsnyhbxhyh9t487yrr294q\"><i class=\"material-icons\">link</i>服务和依赖注入</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3o9nm2u2i9owpu98h8a89zfhv\">对于与特定视图无关且希望在组件之间共享的数据或逻辑，你可以创建一个\n<em>服务</em>类。服务类定义的前面立即是 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 装饰器。此装饰器提供元数据，使你的服务能够作为依赖项\n<em>注入</em>到客户端组件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fodn8y321adm3gs16bes55se\"><em>依赖注入</em>（或 DI）使你可以保持组件类的精简和高效。它们不会从服务器获取数据、验证用户输入或直接记录到控制台；它们将这些任务委托给服务。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61e3gui9l1nt6o3gqv9cvxh2h\">有关更详细的讨论，请参阅 \n<a href=\"guide/architecture-services\">服务和 DI 简介</a>。</p>\n</div>\n<h3 id=\"routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74nlsxkr1xp06lifpm36dhjjp\"><i class=\"material-icons\">link</i>路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82768ah3w14pi6oh9wu65z1jb\">Angular \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> NgModule 提供了一个服务，使你可以定义应用程序中不同应用程序状态和视图层次结构之间的导航路径。它以熟悉的浏览器导航约定为模型：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2jedrax6pu8885ii67uldzj0\">在地址栏中输入 URL，浏览器会导航到相应的页面。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an1e8xnkklt6ltcdsv8zewtel\">单击页面上的链接，浏览器会导航到新页面。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5kowv5zmy4ofza2ish3lcb9d\">单击浏览器的后退和前进按钮，浏览器会在你查看过的页面历史记录中后退和前进。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7w6738060asxp5675v3jt9nez\">路由器将 URL 类似的路径映射到视图，而不是页面。当用户执行会导致浏览器加载新页面的操作（例如单击链接）时，路由器会拦截浏览器的行为，并显示或隐藏视图层次结构。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"m8kzt5mzxp6uvmohx6xmssck\">如果路由器确定当前应用程序状态需要特定功能，并且定义该功能的模块尚未加载，则路由器可以按需\n<em>惰性加载</em>该模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zmelto45he7cynv8lyiqdtgi\">路由器根据你的应用程序的视图导航规则和数据状态来解释链接 URL。当用户单击按钮、从下拉框中选择或响应来自任何来源的其他刺激时，你可以导航到新视图。路由器在浏览器的历史记录日志中记录活动，因此后退和前进按钮也能正常工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wryxes676bhb3q3zc8iocjh7\">要定义导航规则，你需要将\n<em>导航路径</em>与你的组件关联起来。路径使用类似 URL 的语法，将你的程序数据集成在一起，这与模板语法将你的视图与你的程序数据集成在一起的方式非常相似。然后，你可以应用程序逻辑来选择显示或隐藏哪些视图，以响应用户输入和你的访问规则。</p>\n <div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ziung5g2gp61lczpz1ngd8ao\">有关更详细的讨论，请参阅 \n<a href=\"guide/router\">路由和导航</a>。</p>\n </div>\n<hr>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\"><i class=\"material-icons\">link</i>下一步呢？</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2urxo1ne4xrnqrt8y2rmw0mq\">你已经了解了 Angular 应用程序主要构建块的基础知识。下图显示了这些基本部分之间的关系。</p>\n<figure>\n  <img src=\"generated/images/guide/architecture/overview2.png\" alt=\"overview\" width=\"700\" height=\"356\">\n</figure>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvobvr5cvtls03uh9ivv7tc2b\">组件和模板一起定义了 Angular 视图。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86n9bkbo3t1revjcgd2faptqe\">组件类上的装饰器添加了元数据，包括指向关联模板的指针。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6emwv0oev4cctojdp6vgqopk6\">组件模板中的指令和绑定标记根据程序数据和逻辑修改视图。</li>\n</ul>\n</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"empvwmri5ofcz5svk4bn6x337\">依赖注入器向组件提供服务，例如路由服务，使你可以定义视图之间的导航。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xf0gfu7h35ul2howbp46lbj0\">以下页面将更详细地介绍每个主题。</p>\n<ul>\n<li><a href=\"guide/architecture-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb9tpdn0hus4cdbr3f3d516fm\">模块</a></li>\n<li>\n<p><a href=\"guide/architecture-components\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c7vzzlnsersqq3lvejga81lr\">组件</a></p>\n<ul>\n<li><a href=\"guide/architecture-components#templates-and-views\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ghjndclzhjnvo01a3d1ff3nc\">模板</a></li>\n<li><a href=\"guide/architecture-components#component-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7blkbt3pf7tdllznfl9rmef7\">元数据</a></li>\n<li><a href=\"guide/architecture-components#data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dep77znovb7x0wl9uhcyc1rph\">数据绑定</a></li>\n<li><a href=\"guide/architecture-components#directives\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令</a></li>\n<li><a href=\"guide/architecture-components#pipes\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4c1vv1rgp7phpgpk7rg59bjk0\">管道</a></li>\n</ul>\n</li>\n<li><a href=\"guide/architecture-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"455bsnyhbxhyh9t487yrr294q\">服务和依赖注入</a></li>\n</ul>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeei32vuod2qf3crvl9y9l9a3\">请注意，这些页面上引用的代码可作为 \n<live-example></live-example> 获取。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsvjun74ou0yrs98uhebtxsih\">当你熟悉这些基本构建块后，你可以在文档中更详细地探索它们。要了解有关可帮助你构建和部署 Angular 应用程序的更多工具和技术的更多信息，请参阅 \n<a href=\"guide/architecture-next-steps\">下一步</a>。</p>\n</div>\n\n\n<!-- links to this doc:\n - docs\n - guide/ajs-quick-reference\n - tutorial/toh-pt6\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/router/Router\n - guide/architecture#architecture-overview\n - guide/architecture#components\n - guide/architecture#modules\n - guide/architecture#routing\n - guide/architecture#services-and-dependency-injection\n - guide/architecture#templates-directives-and-data-binding\n - guide/architecture#whats-next\n - guide/architecture-components\n - guide/architecture-components#component-metadata\n - guide/architecture-components#data-binding\n - guide/architecture-components#directives\n - guide/architecture-components#pipes\n - guide/architecture-components#templates-and-views\n - guide/architecture-modules\n - guide/architecture-next-steps\n - guide/architecture-services\n - guide/router\n - https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\n-->"
}