{
  "id" : "guide/observables-in-angular",
  "title" : "Angular 中的可观察者",
  "contents" : "<div class=\"content\">\n<h1 id=\"observables-in-angular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9eb1ivnhe71e8ej18m44nssym\"><i class=\"material-icons\">link</i>Angular 中的可观察者</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f427hr3nm1mfqu11htnyok5x\">Angular 使用可观察者作为接口来处理各种常见的异步操作。例如：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92shj5y93pwgvu3alvbwj7ajs\"><code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 类扩展了 \n<code>Observable</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vn3u5qsio9b5sc8uzmtohkue\">HTTP 模块使用可观察者来处理 AJAX 请求和响应。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aizomiccirthlf3o1th7j00er\">路由器和表单模块使用可观察者来监听和响应用户输入事件。</li>\n</ul>\n<h2 id=\"event-emitter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d39ci9p4pe7uj1ke1og51ltkn\"><i class=\"material-icons\">link</i>事件发射器</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgs6heobr8oqrnbfribcqquau\">Angular 提供了一个 \n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 类，它在通过 \n<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰器从组件发布值时使用。\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 扩展了 \n<code>Observable</code>，添加了一个 \n<code>emit()</code> 方法，以便它可以发送任意值。当你调用 \n<code>emit()</code> 时，它会将发射的值传递给任何已订阅观察者的 \n<code>next()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6iqgpthznf5u5fl2b5f0f1zk\">可以在 \n<a href=\"https://angular.io/api/core/EventEmitter\">EventEmitter</a> 文档中找到一个很好的使用示例。这是一个监听打开和关闭事件的示例组件：</p>\n<p><code>&lt;zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"&gt;&lt;/zippy&gt;</code></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6cm09lu29572hj7wwm0lomb1\">这是组件定义：</p>\n<code-example path=\"observables-in-angular/src/main.ts\" title=\"EventEmitter\" region=\"eventemitter\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'zippy',\n  template: `\n  &lt;div class=\"zippy\"&gt;\n    &lt;div (click)=\"toggle()\"&gt;Toggle&lt;/div&gt;\n    &lt;div [hidden]=\"!visible\"&gt;\n      &lt;ng-content&gt;&lt;/ng-content&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;`})\n\nexport class ZippyComponent {\n  visible = true;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() open = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() close = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n\n  toggle() {\n    this.visible = !this.visible;\n    if (this.visible) {\n      this.open.emit(null);\n    } else {\n      this.close.emit(null);\n    }\n  }\n}\n\n\n</code-example>\n<h2 id=\"http\">HTTP</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bd7qq8b95e3ihqd4pd7k1y045\">Angular 的 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 从 HTTP 方法调用返回可观察者。例如，\n<code>http.get(‘/api’)</code> 返回一个可观察者。这比基于 Promise 的 HTTP API 提供了几个优势：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64rm5y4dx46mt9x72gfqmamk\">可观察者不会改变服务器响应（就像通过 Promise 上的链式 \n<code>.then()</code> 调用那样）。相反，你可以使用一系列操作符根据需要转换值。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atmjo204dip0pdgnzvdmwnuvj\">HTTP 请求可以通过 \n<code>unsubscribe()</code> 方法取消。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay6ym60i8pq36s7mecjl0pn8i\">可以配置请求以获取进度事件更新。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dm4ohd6022c4y2n02miaabqq\">失败的请求可以轻松重试。</li>\n</ul>\n<h2 id=\"async-pipe\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdx99qwojf3dqetee3e9nga5y\"><i class=\"material-icons\">link</i>异步管道</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fbhqeom85lut82kklq5x291r\"><a href=\"https://angular.io/api/common/AsyncPipe\">异步管道</a> 订阅可观察者或 Promise 并返回它发出的最新值。当发出新值时，管道会标记组件以检查更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94vc73u6ayjdhmesvkgt9vlol\">以下示例将 \n<code>time</code> 可观察者绑定到组件的视图。可观察者会不断使用当前时间更新视图。</p>\n<code-example path=\"observables-in-angular/src/main.ts\" title=\"Using async pipe\" region=\"pipe\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'async-observable-pipe',\n  template: `&lt;div&gt;&lt;code&gt;observable|async&lt;/code&gt;:\n       <a href=\"api/common/Time\" class=\"code-anchor\">Time</a>: {{ time | async }}&lt;/div&gt;`\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable(observer =&gt;\n    setInterval(() =&gt; observer.next(new Date().toString()), 1000)\n  );\n}\n\n\n</code-example>\n<h2 id=\"router\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9a9suvh0m7vdzxj5aomuljv0d\"><i class=\"material-icons\">link</i>路由器</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70030lqi89zmu7dzvl74tvby1\"><a href=\"https://angular.io/api/router/Router#events\"><code>Router.events</code></a> 提供事件作为可观察者。你可以使用 RxJS 中的 \n<code>filter()</code> 操作符来查找感兴趣的事件，并订阅它们，以便根据导航过程中的事件序列做出决策。以下是一个示例：</p>\n<code-example path=\"observables-in-angular/src/main.ts\" title=\"Router events\" region=\"router\">\n\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a> } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-routable',\n  templateUrl: './routable.component.html',\n  styleUrls: ['./routable.component.css']\n})\nexport class Routable1Component implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  navStart: Observable&lt;<a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a>&gt;;\n\n  constructor(private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    // Create <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new Observable the publishes only the <a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a> event\n    this.navStart = router.events.pipe(\n      filter(evt =&gt; evt instanceof <a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a>)\n    ) as Observable&lt;<a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a>&gt;;\n  }\n\n  ngOnInit() {\n    this.navStart.subscribe(evt =&gt; console.log('Navigation Started!'));\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58lydas4mzxgpf5dvu2kwv6rj\"><a href=\"https://angular.io/api/router/ActivatedRoute\">ActivatedRoute</a> 是一个注入的路由器服务，它使用可观察者来获取有关路由路径和参数的信息。例如，\n<code>ActivateRoute.url</code> 包含一个可观察者，它报告路由路径或路径。以下是一个示例：</p>\n<code-example path=\"observables-in-angular/src/main.ts\" title=\"ActivatedRoute\" region=\"activated_route\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-routable',\n  templateUrl: './routable.component.html',\n  styleUrls: ['./routable.component.css']\n})\nexport class Routable2Component implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private activatedRoute: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  ngOnInit() {\n    this.activatedRoute.url\n      .subscribe(url =&gt; console.log('The URL changed to: ' + url));\n  }\n}\n\n\n</code-example>\n<h2 id=\"reactive-forms\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b2xwzrnb2ye7twpwf3t9i2eiv\"><i class=\"material-icons\">link</i>响应式表单</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ry13usfri7m6q1wmc024zmhq\">响应式表单具有使用可观察者来监控表单控件值的属性。\n<code><a href=\"https://angular.io/api/forms/FormControl\">FormControl</a></code> 属性 \n<code>valueChanges</code> 和 \n<code>statusChanges</code> 包含发出更改事件的可观察者。订阅可观察的表单控件属性是触发组件类中应用程序逻辑的一种方式。例如：</p>\n<code-example path=\"observables-in-angular/src/main.ts\" title=\"Reactive forms\" region=\"forms\">\n\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: 'MyComponent Template'\n})\nexport class MyComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  nameChangeLog: string[] = [];\n  heroForm: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n\n  ngOnInit() {\n    this.logNameChange();\n  }\n  logNameChange() {\n    const nameControl = this.heroForm.get('name');\n    nameControl.valueChanges.forEach(\n      (value: string) =&gt; this.nameChangeLog.push(value)\n    );\n  }\n}\n\n\n</code-example>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/Time\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/EventEmitter\n - api/core/OnInit\n - api/core/Output\n - api/forms/FormGroup\n - api/router/ActivatedRoute\n - api/router/NavigationStart\n - api/router/Router\n - api/router/RouterLinkWithHref\n - guide/observables-in-angular#async-pipe\n - guide/observables-in-angular#event-emitter\n - guide/observables-in-angular#http\n - guide/observables-in-angular#observables-in-angular\n - guide/observables-in-angular#reactive-forms\n - guide/observables-in-angular#router\n - https://angular.io/api/common/AsyncPipe\n - https://angular.io/api/core/EventEmitter\n - https://angular.io/api/forms/FormControl\n - https://angular.io/api/router/ActivatedRoute\n - https://angular.io/api/router/Router#events\n-->"
}