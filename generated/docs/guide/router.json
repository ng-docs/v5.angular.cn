{
  "id" : "guide/router",
  "title" : "路由与导航",
  "contents" : "<div class=\"content\">\n<h1 id=\"routing--navigation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vm20okc5gsfgg1wslzm3qktd\"><i class=\"material-icons\">link</i>路由与导航</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fklcm7at0vjwye5h18nf38ma\">Angular 的 \n<strong><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code></strong> 允许用户在执行应用程序任务时从一个 \n<a href=\"guide/glossary#view\">视图</a> 导航到另一个视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyyuv65ap7g7emrkx9hrnyc9r\">本指南涵盖了路由器的主要功能，并通过一个小型应用程序的演变来阐明它们，你可以 \n<live-example>\n 在浏览器中实时运行\n</live-example>。</p>\n<!-- style for all tables on this page -->\n<style>\n  td, th {vertical-align: top}\n</style>\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\"><i class=\"material-icons\">link</i>概览</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4o7bwcvlspbsb32knpfate5v6\">浏览器是应用程序导航的熟悉模型：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2jedrax6pu8885ii67uldzj0\">在地址栏中输入 URL，浏览器会导航到相应的页面。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an1e8xnkklt6ltcdsv8zewtel\">单击页面上的链接，浏览器会导航到新页面。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7owpd20mhb15wxmk6jwg72z84\">点击浏览器的后退和前进按钮，浏览器将在你所查看的页面历史记录中进行后退和前进导航。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhtyf275374rwr2hsy5ygqz46\">Angular \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>（\"路由器\"）借鉴了此模型。 它可以将浏览器 URL 解释为导航到客户端生成的视图的指令。 它可以将可选参数传递给支持的视图组件，以帮助它决定要呈现哪些特定内容。 你可以将路由器绑定到页面上的链接，当用户点击链接时，它将导航到 相应的应用程序视图。 你可以在用户点击按钮、从下拉框中选择或响应来自任何来源的其他刺激时以命令式方式进行导航。路由器还会在浏览器的历史记录日志中记录活动，以便后退和前进按钮也能正常工作。</p>\n<a id=\"basics\"></a>\n<h2 id=\"the-basics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tkel9c412h5ugbecz5yyupum\"><i class=\"material-icons\">link</i>基础</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0n3o9hb1vuhao943z56yae1a\">本指南分阶段进行，以里程碑为标志，从简单的两页开始，逐步构建一个具有子路由的模块化多视图设计。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64fmo87825gs9g5z8m9ozwi0w\">了解一些核心路由概念的介绍将有助于你理解接下来的细节。</p>\n<a id=\"basics-base-href\"></a>\n<h3 id=\"base-href\"><em>&lt;base href&gt;</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsgqyjiu6hhq6q9syb6hb0gnn\">大多数路由应用程序应该在 \n<code>index.html</code> 中添加一个 \n<code>&lt;base&gt;</code> 元素，作为 \n<code>&lt;head&gt;</code> 标签的第一个子元素， 以告诉路由器如何组合导航 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7z25zb4qcj2phabob293s7vz\">如果 \n<code>app</code> 文件夹是应用程序根目录（如示例应用程序）， 则将 \n<code>href</code> 值设置为此处所示的\n<em>完全相同</em>的值。</p>\n<code-example path=\"router/src/index.html\" linenums=\"false\" title=\"src/index.html (base-href)\" region=\"base-href\">\n&lt;base href=\"/\"&gt;\n\n</code-example>\n<a id=\"basics-router-imports\"></a>\n<h3 id=\"router-imports\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44j9cw82n6ad0j7wpukoji4rx\"><i class=\"material-icons\">link</i>路由器导入</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6ca4d7p2gvscvs7srwynt8rj\">Angular 路由器是一个可选服务，它为给定的 URL 提供特定的组件视图。 它不是 Angular 核心的一部分。它位于自己的库包 \n<code>@angular/router</code> 中。 像从任何其他 Angular 包中导入一样，从它中导入你需要的部分。</p>\n<code-example path=\"router/src/app/app.module.1.ts\" linenums=\"false\" title=\"src/app/app.module.ts (import)\" region=\"import-router\">\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5mo1tm5bfdh3m2z2fuml563z\">你将在 \n<a href=\"guide/router#browser-url-styles\">下面的详细信息</a> 中了解更多选项。</p>\n</div>\n<a id=\"basics-config\"></a>\n<h3 id=\"configuration\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"27io2zcn0syxgd4dfu8paj1a1\"><i class=\"material-icons\">link</i>配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g1tw1x9o99ph8xu21p7yvq0c\">一个路由的 Angular 应用程序有一个 \n<em><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code></em> 服务的单例实例。 当浏览器的 URL 发生变化时，该路由器会查找相应的 \n<code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>， 从中可以确定要显示的组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jvfks06au4556yi1h66ock7c\">在配置之前，路由器没有路由。 以下示例创建了四个路由定义，通过 \n<code>RouterModule.forRoot</code> 方法配置路由器， 并将结果添加到 \n<code>AppModule</code> 的 \n<code>imports</code> 数组中。</p>\n<code-example path=\"router/src/app/app.module.0.ts\" linenums=\"false\" title=\"src/app/app.module.ts (excerpt)\">\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'hero/:id',      component: HeroDetailComponent },\n  {\n    path: 'heroes',\n    component: HeroListComponent,\n    data: { title: 'Heroes List' }\n  },\n  { path: '',\n    redirectTo: '/heroes',\n    pathMatch: 'full'\n  },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n    // other imports here\n  ],\n  ...\n})\nexport class AppModule { }\n\n</code-example>\n<a id=\"example-config\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91ec7yq8ke1agq3d37ddseofi\"><em>路由</em> 的 \n<code>appRoutes</code> 数组描述了如何导航。 将其传递给模块 \n<code>imports</code> 中的 \n<code>RouterModule.forRoot</code> 方法以配置路由器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fse86dy54k8qef3yrb9qfvdn\">每个 \n<code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 将 URL \n<code>path</code> 映射到一个组件。 \n<em>路径</em> 中\n<em>没有前导斜杠</em>。 路由器会为你解析和构建最终的 URL， 允许你在应用程序视图之间导航时使用相对路径和绝对路径。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ccgxjre8c2emanww3jme2qany\">第二个路由中的 \n<code>:id</code> 是路由参数的标记。在像 \n<code>/hero/42</code> 这样的 URL 中，\"42\" 是 \n<code>id</code> 参数的值。相应的 \n<code>HeroDetailComponent</code> 将使用该值来查找并呈现 \n<code>id</code> 为 42 的英雄。 你将在本指南的后面了解有关路由参数的更多信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9f8fff5xwjxu9pmdyuaitgr2d\">第三个路由中的 \n<code>data</code> 属性是用于存储与 此特定路由关联的任意数据的场所。数据属性可以在每个激活的路由中访问。使用它来存储 诸如页面标题、面包屑文本和其他只读、\n<em>静态</em> 数据之类的项目。 你将在本指南的后面使用 \n<a href=\"guide/router#resolve-guard\">解析守卫</a> 来检索\n<em>动态</em> 数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63kqxj074p5x65v71uyxi7wlj\">第四个路由中的\n<strong>空路径</strong>表示应用程序的默认路径， 当 URL 中的路径为空时（通常在开始时为空）要转到的位置。 此默认路由重定向到 \n<code>/heroes</code> URL 的路由，因此将显示 \n<code>HeroesListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpxk2ep5vamqfzaqghu2fbg3p\">最后一个路由中的 \n<code>**</code> 路径是一个\n<strong>通配符</strong>。如果请求的 URL 与之前配置中定义的任何路由路径不匹配，路由器将选择此路由。 这对于显示 \"404 - 未找到\" 页面或重定向到另一个路由很有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ogmgx3pupyb1clqx1f8umczo\"><strong>配置中路由的顺序很重要</strong>，这是有意为之。路由器在匹配路由时使用\n<strong>先匹配先获胜</strong> 策略，因此更具体的路由应该放在不太具体的路由之上。 在上面的配置中，具有静态路径的路由首先列出，然后是空路径路由， 它匹配默认路由。 通配符路由最后出现，因为它匹配\n<em>所有 URL</em>，并且应该\n<em>仅</em>在没有其他路由首先匹配时选择。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8i6qhwf5a7ex355av79spyj7\">如果你需要查看导航生命周期中发生的事件，可以使用路由器默认配置中的\n<strong>enableTracing</strong>选项。这会将导航生命周期中发生的每个路由器事件输出到浏览器控制台。这应该只用于\n<em>调试</em>目的。你可以在作为 \n<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法的第二个参数传递的对象中设置 \n<code>enableTracing: true</code> 选项。</p>\n<a id=\"basics-router-outlet\"></a>\n<h3 id=\"router-outlet\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"p01zmizatizt251ebpyqzn4d\"><i class=\"material-icons\">link</i>路由出口</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p2bwktjl2hhoff6ti33zr7em\">有了此配置，当此应用程序的浏览器 URL 变成 \n<code>/heroes</code> 时， 路由器将该 URL 与路由路径 \n<code>/heroes</code> 匹配，并在你放置在宿主视图 HTML 中的 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> \n<em>之后</em>显示 \n<code>HeroListComponent</code>。</p>\n<code-example language=\"html\">\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  &lt;!-- Routed views go here --&gt;\n\n</code-example>\n<a id=\"basics-router-links\"></a>\n<h3 id=\"router-links\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b6a5vfqpm56qb9fftnpq4w6i\"><i class=\"material-icons\">link</i>路由链接</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yf4c7k7576jefsd0vijy1mfh\">现在你已经配置了路由，并且有一个地方可以渲染它们，但是 如何导航？URL 可以直接来自浏览器地址栏。 但大多数情况下，你是在用户执行某些操作（例如单击锚点标签）后进行导航的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4tjq16ubd93jbvnn36swd8ja0\">考虑下面的模板：</p>\n<code-example path=\"router/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n  &lt;/nav&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n`\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pv8qwsjjoyz7u2jq5haagk1o\">锚点标签上的 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令使路由器能够控制这些元素。 导航路径是固定的，因此你可以将字符串分配给 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>（\"一次性\" 绑定）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lf58v6fjv5gcw9v9zs158q89\">如果导航路径更动态，你可以绑定到返回路由链接参数数组（\n<em>链接参数数组</em>）的模板表达式。 路由器会将该数组解析为完整的 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcxtl8r0td9iuwx48hksbxfvp\">每个锚点标签上的\n<strong><code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code></strong> 指令有助于在视觉上区分当前选定的 \"活动\" 路由的锚点。 当关联的 \n<em>RouterLink</em> 变得活动时，路由器会将 \n<code>active</code> CSS 类添加到该元素。 你可以将此指令添加到锚点或其父元素。</p>\n<a id=\"basics-router-state\"></a>\n<h3 id=\"router-state\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8p2wpt8cwmiohk3f63viw4sx1\"><i class=\"material-icons\">link</i>路由器状态</h3>\n<p>After the end of each successful navigation lifecycle, the router builds a tree of <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> objects\nthat make up the current state of the router. You can access the current <code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code> from anywhere in the\napplication using the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> service and the <code>routerState</code> property.</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5t4scobfww28w309tu3l6qp3\"><code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code> 中的每个 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 都提供了方法来遍历路由树的上下层级， 以从父路由、子路由和兄弟路由获取信息。</p>\n<a id=\"activated-route\"></a>\n<h3 id=\"activated-route\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4vgh82bolzbnfk6kgkj7jbh4n\"><i class=\"material-icons\">link</i>激活路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j4vgjpxe68ql4rbd2sfqz54o\">路由路径和参数可以通过一个名为 \n<a href=\"api/router/ActivatedRoute\">ActivatedRoute</a> 的注入路由服务获得。 它包含大量有用的信息，包括：</p>\n<table>\n  <tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8inopazehx1bfxu8m1odt9y8v\">属性</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c1zh7m7zz0q1ywb7182og533b\">说明</th>\n  </tr>\n  <tr>\n    <td>\n      <code>url</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"iseh6m6vpwk7jioqccflp0x6\">路由路径（s）的 \n<code>Observable</code>，表示为路由路径每个部分的字符串数组。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>data</code>\n    </td>\n    <td>\n<p>    An <code>Observable</code> that contains the <code>data</code> object provided for the route. Also contains any resolved values from the <a href=\"guide/router#resolve-guard\">resolve guard</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>paramMap</code>\n    </td>\n    <td>\n<p>    An <code>Observable</code> that contains a <a href=\"api/router/ParamMap\">map</a> of the required and <a href=\"guide/router#optional-route-parameters\">optional parameters</a> specific to the route. The map supports retrieving single and multiple values from the same parameter.</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>queryParamMap</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2t5djc02p2bqptwz8kbnbvu3\">包含所有路由可用的 \n<a href=\"guide/router#query-parameters\">查询参数</a> 的 \n<a href=\"api/router/ParamMap\">映射表</a> 的 \n<code>Observable</code>。 该映射表支持从查询参数中检索单个值和多个值。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>fragment</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7myy7gx84vuggij7q210lf5k\">所有路由可用的 URL \n<a href=\"guide/router#fragment\">片段</a> 的 \n<code>Observable</code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>outlet</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yfr00i1jg9kh03dbymoxlhex\">用于渲染路由的 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 的名称。对于未命名的出口，出口名称为 \n<em>primary</em>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>routeConfig</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8356x4u0x6tcqcdk57vvajuu2\">用于包含源路径的路由的路由配置。</p>\n    </td>\n  </tr>\n    <tr>\n    <td>\n      <code>parent</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ve9m38e19i8h4tculbzd2vzx\">当此路由是 \n<a href=\"guide/router#child-routing-component\">子路由</a> 时，路由的父 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>firstChild</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gqmrs7rkytmqhkenp8yxgqwv\">包含此路由的子路由列表中的第一个 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>children</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cf1rszsh0poohl9g3vg12kn5\">包含在当前路由下激活的所有 \n<a href=\"guide/router#child-routing-component\">子路由</a>。</p>\n    </td>\n  </tr>\n</tbody></table>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3owsebfh8k8xy6fscifwjvxg5\">两个较旧的属性仍然可用。它们的功能不如它们的替代品，不建议使用，并且可能在未来的 Angular 版本中被弃用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6emoeakaj0r52kbq4s74g2bvb\"><strong><code>params</code></strong> — 包含特定于路由的必需和 \n<a href=\"guide/router#optional-route-parameters\">可选参数</a> 的 \n<code>Observable</code>。使用 \n<code>paramMap</code> 代替。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gzmyea62rrpmbgrqwk9xm0cw\"><strong><code>queryParams</code></strong> — 包含所有路由可用的 \n<a href=\"guide/router#query-parameters\">查询参数</a> 的 \n<code>Observable</code>。 使用 \n<code>queryParamMap</code> 代替。</p>\n</div>\n<h3 id=\"router-events\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"1std7a1yl6ex1nlazpex83j65\"><i class=\"material-icons\">link</i>路由器事件</h3>\n<p>During each navigation, the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> emits navigation events through the <code><a href=\"api/router/Router#events\" class=\"code-anchor\">Router.events</a></code> property. These events range from when the navigation starts and ends to many points in between. The full list of navigation events is displayed in the table below.</p>\n<table>\n  <tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mf5yr9inexir40sq6wud2ykl\">路由器事件</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c1zh7m7zz0q1ywb7182og533b\">说明</th>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlegx1hf0mxt3h7wwan2hstlg\">导航开始时触发的 \n<a href=\"api/router/NavigationStart\">事件</a>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RoutesRecognized\" class=\"code-anchor\">RoutesRecognized</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98sfl05kk6a2z8j9iae77rlo0\">路由器解析 URL 并识别路由时触发的 \n<a href=\"api/router/RoutesRecognized\">事件</a>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RouteConfigLoadStart\" class=\"code-anchor\">RouteConfigLoadStart</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chh6a2rtu0i4dgu5n1exvpql3\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> \n<a href=\"guide/router#asynchronous-routing\">惰性加载</a> 路由配置之前触发的 \n<a href=\"api/router/RouteConfigLoadStart\">事件</a>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RouteConfigLoadEnd\" class=\"code-anchor\">RouteConfigLoadEnd</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dolnlcvlytjk8t5yrbgpaiuc\">路由惰性加载后触发的 \n<a href=\"api/router/RouteConfigLoadEnd\">事件</a>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/NavigationEnd\" class=\"code-anchor\">NavigationEnd</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ppdonvzh6btr6795httvskpf\">导航成功结束时触发的 \n<a href=\"api/router/NavigationEnd\">事件</a>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/NavigationCancel\" class=\"code-anchor\">NavigationCancel</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erg191owjfh8rh9jf1zb9kamw\">导航被取消时触发的 \n<a href=\"api/router/NavigationCancel\">事件</a>。 这是由于导航期间 \n<a href=\"guide/router#guards\">路由守卫</a> 返回 false 造成的。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/NavigationError\" class=\"code-anchor\">NavigationError</a></code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vqmp75yzlovazt6xlii1cq2s\">导航由于意外错误而失败时触发的 \n<a href=\"api/router/NavigationError\">事件</a>。</p>\n    </td>\n  </tr>\n</tbody></table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4c003wpai8ydk0m5iz8dczb5r\">当启用 \n<code>enableTracing</code> 选项时，这些事件也会记录到控制台。由于事件以 \n<code>Observable</code> 的形式提供，你可以对感兴趣的事件进行 \n<code>filter()</code>，并对其进行 \n<code>subscribe()</code>，以根据导航过程中事件的顺序做出决策。</p>\n<a id=\"basics-summary\"></a>\n<h3 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31q35p6q6o3bk89lpy9qallqd\">应用程序有一个配置的路由器。 外壳组件有一个 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，它可以在其中显示路由器生成的视图。 它有 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>，用户可以单击它们通过路由器进行导航。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80ihxz91qs0tkxscdx7oevi2k\">以下是 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的关键术语及其含义：</p>\n<table>\n  <tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"632ra2tor1xoyyzk9cqilj0h9\">路由部分</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"8nlijhc3q4v3b5d6f1jpqwwkw\">含义</th>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tdww5saafss0ta7p5whgw8i\">显示活动 URL 对应的应用程序组件。 管理从一个组件到另一个组件的导航。</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ip4jjigvuqadzwbfp857v610\">一个单独的 NgModule，它提供在应用程序视图中导航所需的 service 提供者 和指令。</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6383yi0jflr9494zjm1lt4j4z\">定义一个 Routes 数组，每个 Routes 将 URL 路径映射到一个组件。</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a63nloaq94pkaaqss5cs2my83\">定义路由器如何根据 URL 模式导航到组件。 大多数路由由路径和组件类型组成。</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edieg0egakhfcpf0b74wz27zi\">指令（\n<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code>），用于标记路由器显示视图的位置。</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bll5pczlhj2a5z9vd3nto3gj6\">用于将可点击的 HTML 元素绑定到 路由的指令。点击带有 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令的元素 （该指令绑定到 \n<i>字符串</i> 或 \n<i>链接参数数组</i>）会触发导航。</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gvpm89ml5w27t6c2giehr8\">用于在与元素上或元素内部的 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 关联的 元素变为活动/非活动时，向 HTML 元素添加/删除类别的指令。</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehw29b5ai73bijro6qr0e3pyk\">提供给每个包含路由特定信息的路由组件的 service，例如路由参数、静态数据、求解数据、全局查询参数和全局片段。</td>\n  </tr>\n  <tr>\n    <td>\n      <code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mgzy0a3o8bb30swa9oqlr7lx\">路由器的当前状态，包括当前激活的 路由树，以及用于遍历路由树的便捷方法。</td>\n  </tr>\n  <tr>\n    <td>\n      <b><i data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qhfopo4d1pfnp4w8mtuqehr0\">链接参数数组</i></b>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"538cxeryhyqpi56tqozxzrky4\">路由器解释为路由指令的数组。 你可以将该数组绑定到 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 或将该数组作为参数传递给 \n<code>Router.navigate</code> 方法。</td>\n  </tr>\n  <tr>\n    <td>\n      <b><i data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"9u7mq4pbjyv40jwu8gjh18zum\">路由组件</i></b>\n    </td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e36vgcvqrz6kchpylvgzpyono\">带有 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 的 Angular 组件，根据路由器导航显示视图。</td>\n  </tr>\n</tbody></table>\n<a id=\"sample-app-intro\"></a>\n<h2 id=\"the-sample-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hh4v6xd8nm3hoqloiwcwuhb\"><i class=\"material-icons\">link</i>示例应用程序</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgskngs8wxozjuu35rfqsvvyr\">本指南描述了多页面路由示例应用程序的开发。 在此过程中，它重点介绍了设计决策，并描述了路由器的关键特性，例如：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vbeud56f2v6yrtxlqnk8qhrr\">将应用程序特性组织成模块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zz74mznpp0g120phcatvzzoy\">导航到组件（\n<em>Heroes</em> 链接到“Heroes List”）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cn785o5qm827mfnj15wytsyau\">包含路由参数（在路由到“Hero Detail”时传递 Hero \n<code>id</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ea71nd3yzp1l5d4syesgbv6i\">子路由（\n<em>Crisis Center</em> 有自己的路由）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yd0r3gv1tnv5eo4oocrhdxgc\"><code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 守卫（检查路由访问权限）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pgh2ge13fxmec78l417rnv07\"><code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 守卫（检查子路由访问权限）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jy8vh0q5rltss8p6qg4ljnp9\"><code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 守卫（在导航离开当前视图之前询问是否丢弃未保存的更改）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfkrnt699e4i5vw7gmc5bxbgk\"><code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 守卫（预取路由数据）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adbmwnzd1fr3ykabjty3mplfw\">惰性加载特性模块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qr4b1xpijxq8lgtabo5xiai0\"><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫（在加载特性模块资产之前检查）。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2v44fh0icjlrdgi18in12jxks\">本指南以一系列里程碑的形式进行，就像你一步一步地构建应用程序一样。 但它不是教程，它省略了 Angular 应用程序构建的细节，这些细节在文档的其他地方有更详细的介绍。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mmtvbc5ydazhhfp241c4mmgz\">应用程序最终版本的完整源代码可以在 \n<live-example></live-example> 中查看和下载。</p>\n<h3 id=\"the-sample-application-in-action\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dntnmo2mg724spi2o0f05aqqi\"><i class=\"material-icons\">link</i>示例应用程序的实际应用</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pfdeoiqtqafngrlioswn7f51\">想象一个应用程序，它帮助 \n<em>Hero Employment Agency</em> 运营其业务。 英雄需要工作，而该机构为他们找到危机来解决。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqwrowfwlz6hszuje6zb5os79\">该应用程序有三个主要功能区域：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dblrh1tzherpdlemtatw03nkf\">一个 \n<em>Crisis Center</em>，用于维护分配给英雄的危机列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2txvglo1m6kpkrppr9bjumjqy\">一个 \n<em>Heroes</em> 区域，用于维护该机构雇用的英雄列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7fqvwa9maiyyyhmb1p0beybc\">一个 \n<em>Admin</em> 区域，用于管理危机和英雄列表。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fzh1kib5na1k60tzoeepb18d\">通过点击此 \n<live-example title=\"Hero Employment Agency Live Example\">\n 动态示例链接\n</live-example> 来尝试它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59592c4h4i5ij1okrfoba52an\">应用程序启动后，你会看到一行导航按钮 以及 \n<em>Heroes</em> 视图及其英雄列表。</p>\n<figure>\n  <img src=\"generated/images/guide/router/hero-list.png\" alt=\"Hero List\" width=\"250\" height=\"225\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71dzkw3fs7dt3lihq9lmqd7gr\">选择一个英雄，应用程序会将你带到英雄编辑屏幕。</p>\n<figure>\n  <img src=\"generated/images/guide/router/hero-detail.png\" alt=\"Crisis Center Detail\" width=\"250\" height=\"162\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h954u4w65n69aw6n1ki78qk2\">更改名称。 点击“返回”按钮，应用程序会返回到英雄列表，其中显示更改后的英雄名称。 请注意，名称更改立即生效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2biy8vyokhftzl9z3849waru\">如果你点击浏览器的“返回”按钮而不是“返回”按钮， 应用程序也会将你返回到英雄列表。 Angular 应用程序导航会像普通网页导航一样更新浏览器历史记录。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uzi2tlekg8pu9o8xkwefenyg\">现在点击 \n<em>Crisis Center</em> 链接，查看正在进行的危机列表。</p>\n<figure>\n  <img src=\"generated/images/guide/router/crisis-center-list.png\" alt=\"Crisis Center List\" width=\"250\" height=\"209\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"397cx041g58trbfsu0bpm9i6q\">选择一个危机，应用程序会将你带到危机编辑屏幕。 \n<em>Crisis Detail</em> 出现在同一页面上的子视图中，位于列表下方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fpzgherfzdmi6wsr0fkqrtw7\">更改危机的名称。 请注意，危机列表中的对应名称 \n<em>不会</em> 更改。</p>\n<figure>\n  <img src=\"generated/images/guide/router/crisis-center-detail.png\" alt=\"Crisis Center Detail\" width=\"250\" height=\"281\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cigp910vkzb30krii73e55bqq\">与 \n<em>Hero Detail</em> 不同，\n<em>Hero Detail</em> 会在你输入时更新， \n<em>Crisis Detail</em> 的更改是临时的，直到你通过按下“保存”或“取消”按钮来保存或丢弃它们。 这两个按钮都会导航回 \n<em>Crisis Center</em> 及其危机列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5chhvkhj6xnpg8ul42le1lot4\"><strong><em>请勿点击任何按钮</em></strong>。 请改为点击浏览器的“返回”按钮或“Heroes”链接。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nqjfs703o7t4ishqa0xebr6c\">弹出一个对话框。</p>\n<figure>\n  <img src=\"generated/images/guide/router/confirm-dialog.png\" alt=\"Confirm Dialog\" width=\"250\" height=\"101\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpcnkjv30719367e4unqcat3\">你可以点击“确定”并丢失更改，或者点击“取消”并继续编辑。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"774ines3v7663f4l4mjnrgb5m\">这种行为背后的原因是路由器的 \n<code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 守卫。 该守卫让你有机会在导航离开当前视图之前进行清理或询问用户的许可。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hmev5lmkxjgqqdt7nd6d975n\"><code>Admin</code> 和 \n<code>Login</code> 按钮说明了其他路由功能，这些功能将在本指南的后面部分介绍。 现在，这个简短的介绍就足够了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54hw18njs13pczk9qnmzw5bn1\">继续进行第一个应用程序里程碑。</p>\n<a id=\"getting-started\"></a>\n<h2 id=\"milestone-1-getting-started-with-the-router\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"de0dc5nlwzok2x9ideem3pw4b\"><i class=\"material-icons\">link</i>里程碑 1：开始使用路由器</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9ms689lm8l2ib7rhnq4sfef0\">从一个简单的应用程序版本开始，该版本在两个空视图之间导航。</p>\n<figure>\n  <img src=\"generated/images/guide/router/router-1-anim.gif\" alt=\"App in action\" width=\"250\" height=\"152\">\n</figure>\n<a id=\"base-href\"></a>\n<h3 id=\"set-the-base-href\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5bxlgwo21wwkdl14zc1ys71l3\"><i class=\"material-icons\">link</i>设置 \n<em>&lt;base href&gt;</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y2vfni96kziv4rjwo478oa77\">路由器使用浏览器的 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\" title=\"HTML5 browser history push-state\">history.pushState</a> 进行导航。由于 \n<code>pushState</code>，你可以让应用内 URL 路径看起来像你想要的样子，例如 \n<code>localhost:3000/crisis-center</code>。应用内 URL 可以与服务器 URL 无法区分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vi1nemufpzc0bs0m9ci8pd9i\">现代 HTML5 浏览器是第一个支持 \n<code>pushState</code> 的浏览器，这就是为什么许多人将这些 URL 称为 “HTML5 风格” URL 的原因。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2m5ywrcsa3gy6n54nhu3jlhay\">HTML5 风格导航是路由器的默认设置。 在 \n<a href=\"guide/router#browser-url-styles\">位置策略和浏览器 URL 风格</a> 附录中， 了解为什么首选 HTML5 风格，如何调整其行为，以及如何在必要时切换到 旧的哈希 (#) 风格。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cokvkujut8lgbny8lidz7umzk\">你必须\n<strong>添加一个 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\" title=\"base href\">&lt;base href&gt; 元素</a></strong> 到应用的 \n<code>index.html</code> 中，才能使 \n<code>pushState</code> 路由正常工作。 浏览器使用 \n<code>&lt;base href&gt;</code> 值来为引用 CSS 文件、脚本和图像时的\n<em>相对</em> URL 添加前缀。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mn1m5nbgb1hc2bq43w4vr4ze\">在 \n<code>&lt;head&gt;</code> 标签之后添加 \n<code>&lt;base&gt;</code> 元素。 如果 \n<code>app</code> 文件夹是应用程序根目录，就像此应用程序一样， 请在\n<strong><code>index.html</code></strong> 中\n<em>完全</em>按照此处所示设置 \n<code>href</code> 值。</p>\n<code-example path=\"router/src/index.html\" linenums=\"false\" title=\"src/index.html (base-href)\" region=\"base-href\">\n&lt;base href=\"/\"&gt;\n\n</code-example>\n<div class=\"callout is-important\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7inphsqqno2j1feifl6fnrheo\">动态示例说明</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81m4xys4pu0jty39gl2kdf59m\">像 Stackblitz 这样的动态编码环境会动态设置应用程序基本地址，因此你无法指定固定地址。 这就是为什么示例代码用一个脚本替换了 \n<code>&lt;base href...&gt;</code>，该脚本会动态写入 \n<code>&lt;base&gt;</code> 标签。</p>\n<code-example language=\"html\">\n  &lt;script&gt;document.write('&lt;base href=\"' + document.location + '\" /&gt;');&lt;/script&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm9n060godg7fznjsz74t6uee\">你只需要在动态示例中使用此技巧，而不需要在生产代码中使用。</p>\n</div>\n<a id=\"import\"></a>\n<h3 id=\"importing-from-the-router-library\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alshsmakba71mf6kxovck9lyf\"><i class=\"material-icons\">link</i>从路由库导入</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xygbuvse6wmm6epgihux12or\">首先从路由库导入一些符号。 路由器位于它自己的 \n<code>@angular/router</code> 包中。 它不是 Angular 核心的一部分。路由器是一个可选服务，因为并非所有应用程序 都需要路由，并且根据你的需求，你可能需要不同的路由库。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bemfv3pvsroeoduimy51kclms\">你通过使用路由配置路由器来教它如何导航。</p>\n<a id=\"route-config\"></a>\n<h4 id=\"define-routes\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2kgsrpx44ajnzin9sxwumxlxe\"><i class=\"material-icons\">link</i>定义路由</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11whawdllfcr1r2sff9v53uq8\">路由器必须配置一个路由定义列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zfc10zm0h6qk78sz7b7xcbwz\">第一个配置定义了一个包含两个路由的数组，它们具有通往 \n<code>CrisisListComponent</code> 和 \n<code>HeroListComponent</code> 的简单路径。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7gajndetnitlh53t3hskct7t\">每个定义都转换为一个 \n<a href=\"api/router/Route\">Route</a> 对象，它包含两部分：一个 \n<code>path</code>，此路由的 URL 路径段；以及一个 \n<code>component</code>，与该路由关联的组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98243vbbfmw0gw02jcnq7zjre\">当浏览器 URL 发生变化时，或者当应用程序代码告诉路由器沿着路由路径导航时，路由器会利用其定义注册表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bct484ho4n996r3ksqct20dus\">简单来说，你可以这样描述第一个路由：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu21k8o8icpu2yr6x6ar211vk\">当浏览器的地址 URL 更改为匹配路径段 \n<code>/crisis-center</code> 时，路由器会激活 \n<code>CrisisListComponent</code> 的一个实例，并显示其视图。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cnjexvjdwgzmm9uc6qb1ptbj\">当应用程序请求导航到路径 \n<code>/crisis-center</code> 时，路由器会 激活 \n<code>CrisisListComponent</code> 的一个实例，显示其视图，并使用该路径的 URL 更新浏览器的地址位置和历史记录。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jk5tiok84d1olcfyubx7dlrj\">这是第一个配置。将路由数组 \n<code>appRoutes</code> 传递给 \n<code>RouterModule.forRoot</code> 方法。 它返回一个模块，其中包含已配置的 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务提供者，以及路由库所需的其它提供者。 一旦应用程序启动，\n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 会根据当前浏览器 URL 执行初始导航。</p>\n<code-example path=\"router/src/app/app.module.1.ts\" linenums=\"false\" title=\"src/app/app.module.ts (first-config)\" region=\"first-config\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }        from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }          from '@angular/forms';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { AppComponent }          from './app.component';\nimport { CrisisListComponent }   from './crisis-list.component';\nimport { HeroListComponent }     from './hero-list.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes', component: HeroListComponent },\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent,\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dtsbkj3vh3vznfvlpiv5e0hi\">将已配置的 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 添加到 \n<code>AppModule</code> 中，对于简单的路由配置就足够了。 随着应用程序的增长，你可能希望将路由配置重构到一个单独的文件中，并创建一个\n<strong><a href=\"guide/router#routing-module\">路由模块</a></strong>，这是一种专门用于 特性模块中路由的特殊 \n<code>服务模块</code> 类型。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9sjbngwlutccqklou7l9wgn8\">在 \n<code>AppModule</code> 中提供 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 使路由器在应用程序中的任何地方都可用。</p>\n<a id=\"shell\"></a>\n<h3 id=\"the-appcomponent-shell\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqotmy0jgiiy989wn731sznbh\"><i class=\"material-icons\">link</i><em>AppComponent</em> 外壳</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ex1vffsd37th5m5honn7t0g8m\">根 \n<code>AppComponent</code> 是应用程序外壳。它有一个标题、一个包含两个链接的导航栏， 以及一个\n<em>路由出口</em>，路由器会在其中交换页面上的视图。以下是你的结果：</p>\n<figure>\n  <img src=\"generated/images/guide/router/shell-and-outlet.png\" alt=\"Shell\" width=\"300\" height=\"102\">\n</figure>\n<a id=\"shell-template\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clrttf083t1d9qrrcl2h30154\">相应的组件模板如下所示：</p>\n<code-example path=\"router/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n  &lt;/nav&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n`\n\n</code-example>\n<a id=\"router-outlet\"></a>\n<h3 id=\"routeroutlet\"><em>RouterOutlet</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kdf8wv5rb9om9wndcawfofep\"><code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 是路由库提供的一个指令，它标记 模板中路由器应该显示该出口视图的位置。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5211v27nujxp4gwyipor8br4a\">路由器将 \n<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 元素添加到 DOM 中， 然后将导航的视图元素插入到 \n<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 的\n<em>之后</em>。</p>\n</div>\n<a id=\"router-link\"></a>\n<h3 id=\"routerlink-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59o0enjtfqlpzcxxmb5qzqe93\"><i class=\"material-icons\">link</i><em>RouterLink</em> 绑定</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enzeitp4xjlq2w3xhbha7ygz8\">在出口上方，在锚点标签内，你可以看到 \n<a href=\"guide/template-syntax#attribute-binding\">属性绑定</a> 到 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令，看起来像 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"...\"</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dz5g38zbgexakb3h09tyq0oyq\">此示例中的链接都具有字符串路径，即你之前配置的路由的路径。目前还没有路由参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25pzt4mstxh7ec7gozno77i9q\">你还可以通过提供查询字符串参数 或 URL 片段来跳转到页面上的不同区域，从而向 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 添加更多上下文信息。查询字符串参数 通过 \n<code>[queryParams]</code> 绑定提供，该绑定接受一个对象（例如 \n<code>{ name: 'value' }</code>），而 URL 片段 接受一个绑定到 \n<code>[fragment]</code> 输入绑定的单个值。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"attc7syxrpelumafk7s8x59l7\">了解如何在 \n<a href=\"guide/router#link-parameters-array\">下面的附录</a> 中使用\n<em>链接参数数组</em>。</p>\n</div>\n<a id=\"router-link-active\"></a>\n<h3 id=\"routerlinkactive-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wpivmjhzvevz9vbe206qg159\"><i class=\"material-icons\">link</i><em>RouterLinkActive</em> 绑定</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hleh8hwaijg78mxt68urut5d\">在每个锚点标签上，你还可以看到 \n<a href=\"guide/template-syntax#property-binding\">属性绑定</a> 到 \n<code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> 指令，看起来像 \n<code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"...\"</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47jwtwvf404jllx7sbe452cfq\">等号 (=) 右边的模板表达式包含一个用空格分隔的 CSS 类字符串， 路由器将在该链接处于活动状态时添加这些类（并在链接处于非活动状态时删除）。 你还可以将 \n<code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> 指令设置为一个类字符串，例如 \n<code>[<a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>]=\"'active fluffy'\"</code> 或将其绑定到返回此类字符串的组件属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axco6gxg6rm8ue2aq76jjb4rp\"><code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> 指令根据当前 \n<code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code> 切换活动 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 的 css 类。 这会级联到路由树的每个级别，因此父路由链接和子路由链接可以同时处于活动状态。 要覆盖此行为，你可以使用 \n<code>{ exact: true }</code> 表达式将 \n<code>[routerLinkActiveOptions]</code> 输入绑定绑定到它。 通过使用 \n<code>{ exact: true }</code>，只有当给定 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 的 URL 与当前 URL 完全匹配时，它才会处于活动状态。</p>\n<a id=\"router-directives\"></a>\n<h3 id=\"router-directives\"><em data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dehzj37qofpi696yui6vsvslw\"><i class=\"material-icons\">link</i>路由指令</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kxew8c6kx56yj6g74b43n6wa\"><code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>、\n<code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> 和 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 是 Angular \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 包提供的指令。 它们可以随时在模板中使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8oqojksc7k7fvolnxi1aqhoto\">当前 \n<code>app.component.ts</code> 的状态如下所示：</p>\n<code-example path=\"router/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (excerpt)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;/nav&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  `\n})\nexport class AppComponent { }\n\n\n</code-example>\n<a id=\"wildcard\"></a>\n<h3 id=\"wildcard-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4rmajyf3c63pastatocjoxog\"><i class=\"material-icons\">link</i>通配符路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6itquoqkhi3t26icftxo016r4\">到目前为止，你已经在应用程序中创建了两个路由，一个到 \n<code>/crisis-center</code>，另一个到 \n<code>/heroes</code>。 任何其他 URL 都会导致路由器抛出错误并使应用程序崩溃。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2utckuc39vxdyrfr8f7yjd6e0\">添加一个\n<strong>通配符</strong>路由来拦截无效 URL 并优雅地处理它们。 \n<em>通配符</em>路由的路径由两个星号组成。它匹配\n<em>所有</em> URL。 如果路由器无法匹配配置中较早的路由，它将选择\n<em>此</em>路由。 通配符路由可以导航到自定义的“404 未找到”组件或\n<a href=\"guide/router#redirect\">重定向</a> 到现有路由。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"af1dab8ziisobu5lply6onuev\">路由器使用 \n<a href=\"guide/router#example-config\"><em>先匹配先赢</em></a> 策略选择路由。 通配符路由是路由配置中最不具体的路由。 确保它是配置中的\n<em>最后一个</em>路由。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"361bfjfzdv6mhp3n1kd12vh74\">要测试此功能，请在 \n<code>HeroListComponent</code> 模板中添加一个带有 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 的按钮，并将链接设置为 \n<code>\"/sidekicks\"</code>。</p>\n<code-example path=\"router/src/app/hero-list.component.ts\" linenums=\"false\" title=\"src/app/hero-list.component.ts (excerpt)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;h2&gt;HEROES&lt;/h2&gt;\n    &lt;p&gt;Get your heroes here&lt;/p&gt;\n\n    &lt;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n  `\n})\nexport class HeroListComponent { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8imizggzyhi39ayhkbo298dqg\">如果用户单击该按钮，应用程序将失败，因为你还没有定义 \n<code>\"/sidekicks\"</code> 路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6d2fn8zqweznupf19z7123tev\">不要添加 \n<code>\"/sidekicks\"</code> 路由，而是定义一个 \n<code>wildcard</code> 路由，并让它导航到一个简单的 \n<code>PageNotFoundComponent</code>。</p>\n<code-example path=\"router/src/app/app.module.1.ts\" linenums=\"false\" title=\"src/app/app.module.ts (wildcard)\" region=\"wildcard\">\n{ path: '**', component: PageNotFoundComponent }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"359zfjnnbpdk2olrhtgjnvmbz\">创建 \n<code>PageNotFoundComponent</code>，以便在用户访问无效 URL 时显示。</p>\n<code-example path=\"router/src/app/not-found.component.ts\" linenums=\"false\" title=\"src/app/not-found.component.ts (404 component)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: '&lt;h2&gt;Page not found&lt;/h2&gt;'\n})\nexport class PageNotFoundComponent {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tuo05hq2152efrcz7upkpi88\">与其他组件一样，将 \n<code>PageNotFoundComponent</code> 添加到 \n<code>AppModule</code> 声明中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qbh7negy2sn829p8amr9jrez\">现在，当用户访问 \n<code>/sidekicks</code> 或任何其他无效 URL 时，浏览器会显示“页面未找到”。浏览器地址栏继续指向无效 URL。</p>\n<a id=\"default-route\"></a>\n<h3 id=\"the-default-route-to-heroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87z9zr4wib0m02bl9sqdkxuwe\"><i class=\"material-icons\">link</i>英雄的\n<em>默认</em>路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5u2u5m04jkbaxi9ubgpozyrjy\">当应用程序启动时，浏览器地址栏中的初始 URL 类似于：</p>\n<code-example>\n  localhost:3000\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ghjcn8vbz5x4aaaz747xtpvq\">这与任何已配置的具体路由都不匹配，这意味着路由器会继续执行通配符路由并显示 \n<code>PageNotFoundComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9hot681t6cuped7o2m5rxwex\">应用程序需要一个指向有效页面的\n<strong>默认路由</strong>。此应用程序的默认页面是英雄列表。应用程序应该导航到该页面，就好像用户点击了“英雄”链接或将 \n<code>localhost:3000/heroes</code> 粘贴到地址栏中一样。</p>\n<a id=\"redirect\"></a>\n<h3 id=\"redirecting-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3w53wd7t9krs2pioc1d25fxq\"><i class=\"material-icons\">link</i>重定向路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78uo7ui6grysgz4p3l8i03xlu\">首选的解决方案是添加一个 \n<code>redirect</code> 路由，将初始相对 URL（\n<code>''</code>）转换为所需的默认路径（\n<code>/heroes</code>）。浏览器地址栏显示 \n<code>.../heroes</code>，就好像你直接导航到那里一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28631o2arj4rhpnauwcjk5xvd\">将默认路由添加到\n<em>通配符路由</em>\n<em>上方</em>的某个位置。它位于以下摘录中显示的此里程碑的完整 \n<code>appRoutes</code> 中的通配符路由的正上方。</p>\n<code-example path=\"router/src/app/app-routing.module.1.ts\" linenums=\"false\" title=\"src/app/app-routing.module.ts (appRoutes)\" region=\"appRoutes\">\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes',        component: HeroListComponent },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1a3j4pihfxh8j8kw7en11k2w6\">重定向路由需要一个 \n<code>pathMatch</code> 属性来告诉路由器如何将 URL 与路由的路径匹配。如果你没有设置，路由器会抛出错误。在此应用程序中，路由器应该仅当\n<em>整个 URL</em> 与 \n<code>''</code> 匹配时才选择指向 \n<code>HeroListComponent</code> 的路由，因此将 \n<code>pathMatch</code> 值设置为 \n<code>'full'</code>。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7atyly2zfhsyowj7xcvld3ap\">从技术上讲，\n<code>pathMatch = 'full'</code> 当 URL 的\n<em>剩余</em>未匹配部分与 \n<code>''</code> 匹配时会导致路由命中。在此示例中，重定向位于顶级路由中，因此\n<em>剩余</em> URL 和\n<em>整个</em> URL 是同一个东西。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61ne9v55jacy9omq9oucc4j2q\">另一个可能的 \n<code>pathMatch</code> 值是 \n<code>'prefix'</code>，它告诉路由器当\n<em>剩余</em> URL \n<strong><em>以</em></strong>重定向路由的\n<em>前缀</em>路径\n<strong><em>开头</em></strong>时匹配重定向路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xs7koejmixfs6dfi5lln1zc5\">不要在这里这样做。如果 \n<code>pathMatch</code> 值为 \n<code>'prefix'</code>，\n<em>每个</em> URL 都将与 \n<code>''</code> 匹配。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etc5lcjthx8bsmly18kege5lv\">尝试将其设置为 \n<code>'prefix'</code>，然后点击 \n<code>转到助手</code> 按钮。请记住，这是一个错误的 URL，你应该看到“页面未找到”页面。相反，你仍然在“英雄”页面上。在浏览器地址栏中输入一个错误的 URL。你将立即被重定向到 \n<code>/heroes</code>。\n<em>每个</em> URL，无论是好的还是坏的，只要执行到\n<em>此</em>路由定义，都会匹配。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btidnhyl7uk90tu07wim4ddb6\">默认路由应该仅当\n<em>整个</em> url 为 \n<code>''</code> 时才重定向到 \n<code>HeroListComponent</code>。请记住将重定向恢复为 \n<code>pathMatch = 'full'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mdshltx3emxlph4l8e55b5n9\">在 Victor Savkin 的 \n<a href=\"http://victorsavkin.com/post/146722301646/angular-router-empty-paths-componentless-routes\">关于重定向的帖子</a> 中了解更多信息。</p>\n</div>\n<h3 id=\"basics-wrap-up\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e28zodd84sxv3k8138payb7du\"><i class=\"material-icons\">link</i>基础知识总结</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pj6cqjs30dgb7o2mfo493nc6\">你已经拥有了一个非常基本的导航应用程序，它可以在用户点击链接时在两个视图之间切换。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyki1w6khedsp4kw8lfkfehhm\">你已经学习了如何执行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgfajojjniknnp8o5mn68unvc\">加载路由库。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtuwpv9ghhfzff84c6d3wd7rq\">使用锚标签、\n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 和 \n<code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 指令将导航栏添加到 shell 模板中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2k1i2qor0ch7ztzjkfn7tjqv\">将 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> 添加到 shell 模板中，视图将在其中显示。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqb5gn50n19udbb1hjnsi0oa4\">使用 \n<code>RouterModule.forRoot</code> 配置路由模块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oe8xqh21m5azcoku00e9b2hm\">将路由器设置为组合 HTML5 浏览器 URL。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bzh4mbi1r8em66ab8zehg0z\">使用 \n<code>通配符</code> 路由处理无效路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekh4vln8gwm6zj3jdzot1xpig\">当应用程序使用空路径启动时，导航到默认路由。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbor6d2yvqgo50smtz2qongs1\">启动应用程序的其余部分很普通，从路由器的角度来看几乎没有兴趣。以下是倾向于将示例构建到此里程碑的读者的详细信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d017omdw0zlvjzkm409lq913z\">启动应用程序的结构如下所示：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    router-sample\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          crisis-list.component.ts\n        </div>\n        <div class=\"file\">\n          hero-list.component.ts\n        </div>\n        <div class=\"file\">\n          not-found.component.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nlggmjazdn57j2f6pfs9n8rt\">以下是本里程碑中讨论的文件。</p>\n<code-tabs>\n\n  <code-pane title=\"app.component.ts\" path=\"router/src/app/app.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;/nav&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  `\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"app.module.ts\" path=\"router/src/app/app.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }        from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }          from '@angular/forms';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { AppComponent }          from './app.component';\nimport { CrisisListComponent }   from './crisis-list.component';\nimport { HeroListComponent }     from './hero-list.component';\nimport { PageNotFoundComponent } from './not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes', component: HeroListComponent },\n\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"main.ts\" path=\"router/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n  <code-pane title=\"hero-list.component.ts\" path=\"router/src/app/hero-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;h2&gt;HEROES&lt;/h2&gt;\n    &lt;p&gt;Get your heroes here&lt;/p&gt;\n\n    &lt;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n  `\n})\nexport class HeroListComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"crisis-list.component.ts\" path=\"router/src/app/crisis-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;\n    &lt;p&gt;Get your crisis here&lt;/p&gt;`\n})\nexport class CrisisListComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"not-found.component.ts\" path=\"router/src/app/not-found.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: '&lt;h2&gt;Page not found&lt;/h2&gt;'\n})\nexport class PageNotFoundComponent {}\n\n\n</code-pane>\n\n  <code-pane title=\"index.html\" path=\"router/src/index.html\">\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;!-- Set the base href --&gt;\n    &lt;base href=\"/\"&gt;\n    &lt;title&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/title&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"assets/app.css\"&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;app-root&gt;&lt;/app-root&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n\n</code-pane>\n\n</code-tabs>\n<a id=\"routing-module\"></a>\n<h2 id=\"milestone-2-routing-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8885tyuyq9xd7o5hx5mcl17bz\"><i class=\"material-icons\">link</i>里程碑 2：\n<em>路由模块</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91tnmoqh7153bdrmx9uq2rw7m\">在初始路由配置中，你提供了一个简单的设置，其中使用两个路由来配置应用程序以进行路由。对于简单的路由来说，这完全没问题。随着应用程序的增长以及你使用更多 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 特性（例如守卫、解析器和子路由），你自然会希望将路由配置重构到它自己的文件中。我们建议将路由信息移动到一个名为\n<em>路由模块</em>的专用模块中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ta23weac2ymrbef6zjul4lj\"><strong>路由模块</strong>具有以下几个特点：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69p4op9fn4zyzsf25x3uag3vk\">将路由问题与其他应用程序问题分开。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tdtfpeb7btjzolb68rndus7e\">提供一个模块，以便在测试应用程序时替换或删除该模块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfcb19x27treok5ojrv6hjlag\">为路由服务提供者（包括守卫和解析器）提供一个众所周知的地址。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kecahfdyatu6uqq29q4hisni\"><strong>不</strong>声明组件。</li>\n</ul>\n<a id=\"routing-refactor\"></a>\n<h3 id=\"refactor-the-routing-configuration-into-a-routing-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4c84pv3im3nh664570bwd4xys\"><i class=\"material-icons\">link</i>将路由配置重构到\n<em>路由模块</em>中</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cldmr0sr6yt7he3mzfj6q61cf\">在 \n<code>/app</code> 文件夹中创建一个名为 \n<code>app-routing.module.ts</code> 的文件，以包含路由模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o0n42mfj1u2ilveniwmh7wub\">导入 \n<code>CrisisListComponent</code> 和 \n<code>HeroListComponent</code> 组件，就像你在 \n<code>app.module.ts</code> 中所做的那样。然后将 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 导入和路由配置（包括 \n<code>RouterModule.forRoot</code>）移动到此路由模块中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wu1829l2d74m1otrb8cxtr6z\">按照惯例，添加一个类名 \n<code>AppRoutingModule</code> 并将其导出，以便你以后可以在 \n<code>AppModule</code> 中导入它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yn1kspp92u5mycz6he42yz7k\">最后，通过将其添加到模块 \n<code>exports</code> 数组中，重新导出 Angular \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。通过在此处重新导出 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 并在 \n<code>AppModule</code> 中导入 \n<code>AppRoutingModule</code>，在 \n<code>AppModule</code> 中声明的组件将能够访问路由指令，例如 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 和 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r37w060mylpl71xrmxe2ydhl\">完成这些步骤后，该文件应如下所示。</p>\n<code-example path=\"router/src/app/app-routing.module.1.ts\" title=\"src/app/app-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }              from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> }  from '@angular/router';\n\nimport { CrisisListComponent }   from './crisis-list.component';\nimport { HeroListComponent }     from './hero-list.component';\nimport { PageNotFoundComponent } from './not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes',        component: HeroListComponent },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2v98ib2a10np8nnyhrd6qo1f0\">接下来，更新 \n<code>app.module.ts</code> 文件，首先从 \n<code>app-routing.module.ts</code> 中导入新创建的 \n<code>AppRoutingModule</code>，然后用 \n<code>AppRoutingModule</code> 替换 \n<code>imports</code> 数组中的 \n<code>RouterModule.forRoot</code>。</p>\n<code-example path=\"router/src/app/app.module.2.ts\" title=\"src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }     from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { CrisisListComponent }   from './crisis-list.component';\nimport { HeroListComponent }     from './hero-list.component';\nimport { PageNotFoundComponent } from './not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwu7eahb3uhgz1wzfw9d1cqaf\">在本指南的后面，你将创建 \n<a href=\"guide/router#hero-routing-module\">多个路由模块</a> 并发现你必须按 \n<a href=\"guide/router#routing-module-order\">正确的顺序</a> 导入这些路由模块。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ciifrxpdvif4hqcyqiz8itqor\">应用程序继续以相同的方式工作，你可以使用 \n<code>AppRoutingModule</code> 作为维护未来路由配置的中心位置。</p>\n<a id=\"why-routing-module\"></a>\n<h3 id=\"do-you-need-a-routing-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e965azep2soc3i9vcms6b69q9\"><i class=\"material-icons\">link</i>你需要一个\n<em>路由模块</em>吗？</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5mkj6ohmg8u8p92xnxilu567\"><em>路由模块</em>\n<em>替换</em>根模块或特性模块中的路由配置。\n<em>要么</em>在路由模块中配置路由，\n<em>要么</em>在模块本身中配置路由，但不能同时在两者中配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"647vogewxm94kok06wo5l47h1\">路由模块是一个设计选择，当配置很复杂并且包含专门的守卫和解析器服务时，它的价值最为明显。当实际配置非常简单时，它可能看起来有点过分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2i8jnss5ifizfhg5c95prk7\">一些开发人员在配置简单时会跳过路由模块（例如，\n<code>AppRoutingModule</code>），并将路由配置直接合并到配套模块（例如，\n<code>AppModule</code>）中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b8jcrr7azxtoe19i31bk31lr\">选择一种模式或另一种模式，并始终遵循该模式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9imo8rx5oixf14raw5klo75qy\">大多数开发人员应该始终实现路由模块，以确保一致性。它在配置变得复杂时可以使代码保持干净。它使测试特性模块变得更容易。它的存在提醒人们一个模块是路由的。这是开发人员期望找到和扩展路由配置的地方。</p>\n<a id=\"heroes-feature\"></a>\n<h2 id=\"milestone-3-heroes-feature\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a39rma2yzgk56xnfyr1diwyct\"><i class=\"material-icons\">link</i>里程碑 3：英雄特性</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1cdu9qnpaxq9ggi2bw2py73d\">你已经了解了如何使用 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令进行导航。 现在你将学习以下内容：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59hvpor23xoftc2atdnxqx33j\">使用模块将应用和路由组织成\n<em>特性区域</em>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdw315ace463khpdftxhgjs2i\">以命令式的方式从一个组件导航到另一个组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"256svskkqb72r8r4t21cddnro\">在路由参数中传递必要和可选的信息。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzaiy4ci6y07c5qmehnnk71dp\">此示例在“服务”一节的 \n<a href=\"tutorial/toh-pt4\" title=\"Tour of Heroes: Services\">Tour of Heroes 教程</a>中重新创建了英雄特性， 你将从 \n<live-example name=\"toh-pt4\" title=\"Tour of Heroes: Services example code\"></live-example>中复制大部分代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"268qpm04j7azsvsziy9xf9b6b\">以下是用户体验此版本应用的方式：</p>\n<figure>\n  <img src=\"generated/images/guide/router/router-2-anim.gif\" alt=\"App in action\" width=\"400\" height=\"475\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nz1pyc075qqacpssvpotzhmn\">一个典型的应用有多个\n<em>特性区域</em>， 每个区域都专门用于特定的业务目的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b77x0oqhik95oj61f951eqzql\">虽然你可以继续将文件添加到 \n<code>src/app/</code> 文件夹中， 但这不切实际，最终也无法维护。 大多数开发人员更喜欢将每个特性区域放在它自己的文件夹中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ksxma87pskg7bgww5jv2nsot\">你将把应用分解成不同的\n<em>特性模块</em>，每个模块都有自己的关注点。 然后你将导入到主模块中，并在它们之间进行导航。</p>\n<a id=\"heroes-functionality\"></a>\n<h3 id=\"add-heroes-functionality\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65cr3j3zoe3ee6pd1160sbpob\"><i class=\"material-icons\">link</i>添加英雄功能</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6ldjbft6ijgf07v664auyuqg\">按照以下步骤操作：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0gwy0hxzzdez1xzis4vbxn9c\">创建 \n<code>src/app/heroes</code> 文件夹；你将在那里添加实现\n<em>英雄管理</em>的文件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2h6rbqxn39yc9c4ah135787b\">删除 \n<code>app</code> 文件夹中的占位符 \n<code>hero-list.component.ts</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4iohgt9gl8rorkn9tyk6ylnqe\">在 \n<code>src/app/heroes</code> 下创建一个新的 \n<code>hero-list.component.ts</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6618sv56erq9ah6p7va4cvkhs\">将 \n<live-example name=\"toh-pt4\" title=\"Tour of Heroes: Services example code\">\n “服务”教程\n</live-example>中的 \n<code>app.component.ts</code> 的内容复制到其中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8v7cdf9i081bb4miwugv9oey\">进行一些必要的微小更改：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63iiypygtxkt2xo3h9v9ek9g1\">删除 \n<code>selector</code>（路由组件不需要它们）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uyx4n6yur2lbb9f0q5gmnb9b\">删除 \n<code>&lt;h1&gt;</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jfyk9oufvjmx840c2y283x1c\">将 \n<code>&lt;h2&gt;</code> 重新标记为 \n<code>&lt;h2&gt;HEROES&lt;/h2&gt;</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2m3qg9td4ruk4zr4gi9ladgsv\">删除模板底部 \n<code>&lt;hero-detail&gt;</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmviiqa2wch0w1tbs1fer35ni\">将 \n<code>AppComponent</code> 类重命名为 \n<code>HeroListComponent</code>。</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kxpg57y7i1gc6hjno3brtvdg\">将 \n<code>hero-detail.component.ts</code> 和 \n<code>hero.service.ts</code> 文件复制到 \n<code>heroes</code> 子文件夹中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85fq6dbmqzvxkss96t7hsgens\">在 heroes 文件夹中创建一个（预路由）\n<code>heroes.module.ts</code>，它看起来像这样：</p>\n</li>\n</ul>\n<code-example path=\"router/src/app/heroes/heroes.module.ts\" region=\"v1\" title=\"src/app/heroes/heroes.module.ts (pre-routing)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nimport { HeroService } from './hero.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ],\n  providers: [ HeroService ]\n})\nexport class HeroesModule {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"charor7p21jn8awxq9soqy9ea\">完成后，你将拥有以下\n<em>英雄管理</em>文件：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src/app/heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      hero-detail.component.ts\n    </div>\n    <div class=\"file\">\n      hero-list.component.ts\n    </div>\n    <div class=\"file\">\n      hero.service.ts\n    </div>\n    <div class=\"file\">\n      heroes.module.ts\n    </div>\n  </div>\n</div>\n<a id=\"hero-routing-requirements\"></a>\n<h3 id=\"hero-feature-routing-requirements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jycnsyygezwstxje6ydsykl3\"><i class=\"material-icons\">link</i><em>英雄</em>特性路由需求</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mxnyltsbsut978y1vvw7m31p\">英雄特性有两个交互式组件，英雄列表和英雄详情。 列表视图是自包含的；你导航到它，它获取英雄列表并显示它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c54ottpt7r6xo8qpkswogn6uz\">详情视图不同。它显示特定的英雄。它无法自行知道要显示哪个英雄。 该信息必须来自外部。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3parr6kkkvcpb7fq2xl29w57x\">当用户从列表中选择一个英雄时，应用应该导航到详情视图 并显示该英雄。 通过在路由 URL 中包含所选英雄的 ID，你可以告诉详情视图要显示哪个英雄。</p>\n<a id=\"hero-routing-module\"></a>\n<h3 id=\"hero-feature-route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7z1n7hxbwlhvtjxfxq7d58ree\"><i class=\"material-icons\">link</i><em>英雄</em>特性路由配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c179c03z4hwuspg2k0iu3i4nw\">在 \n<code>heroes</code> 文件夹中创建一个新的 \n<code>heroes-routing.module.ts</code>， 使用你在创建 \n<code>AppRoutingModule</code> 时学习的相同技术。</p>\n<code-example path=\"router/src/app/heroes/heroes-routing.module.1.ts\" title=\"src/app/heroes/heroes-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent },\n  { path: 'hero/:id', component: HeroDetailComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroRoutingModule { }\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38tqig1n7snjnuhv7idqsdqhx\">将路由模块文件放在与其配套模块文件相同的文件夹中。 这里 \n<code>heroes-routing.module.ts</code> 和 \n<code>heroes.module.ts</code> 都在同一个 \n<code>src/app/heroes</code> 文件夹中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sknowhhx2qkb2yrqzst1t8k3\">考虑为每个特性模块提供它自己的路由配置文件。 在特性路由很简单的时候，这似乎有点过分。 但路由往往会变得更加复杂，而模式的一致性会随着时间的推移而得到回报。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87nvy3j5j19o9oivgrmc3ade1\">从 \n<code>src/app/heroes/</code> 文件夹中的新位置导入英雄组件，定义两个英雄路由， 并导出 \n<code>HeroRoutingModule</code> 类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ep3k28roim5ljxujhslu5txll\">现在你有了 \n<code>Heroes</code> 模块的路由，通过 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 将它们注册到 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 上，这\n<em>几乎</em>与你在 \n<code>AppRoutingModule</code> 中所做的一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zvlbyigbcchfjt1a7711c16g\">有一个细微但至关重要的区别。 在 \n<code>AppRoutingModule</code> 中，你使用静态 \n<strong><code>RouterModule.forRoot</code></strong> 方法来注册路由和应用级服务提供者。 在特性模块中，你使用静态 \n<strong><code>forChild</code></strong> 方法。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8s068ihaxxp4krf5b8s1z8mcp\">只在根 \n<code>AppRoutingModule</code> 中调用 \n<code>RouterModule.forRoot</code> （或者在 \n<code>AppModule</code> 中调用，如果你是从那里注册顶级应用路由的话）。 在任何其他模块中，你必须调用 \n<strong><code>RouterModule.forChild</code></strong> 方法来注册额外的路由。</p>\n</div>\n<a id=\"adding-routing-module\"></a>\n<h3 id=\"add-the-routing-module-to-the-heroesmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jw92efw2brtkypb7u8qz5zqx\"><i class=\"material-icons\">link</i>将路由模块添加到\n<em>HeroesModule</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hrrwe4mmoj7795qeoe94cvlq\">将 \n<code>HeroRoutingModule</code> 添加到 \n<code>HeroModule</code> 中， 就像你将 \n<code>AppRoutingModule</code> 添加到 \n<code>AppModule</code> 中一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8htmpcccwbacwppfzid7ugqdm\">打开 \n<code>heroes.module.ts</code>。 从 \n<code>heroes-routing.module.ts</code> 中导入 \n<code>HeroRoutingModule</code> 令牌， 并将其添加到 \n<code>HeroesModule</code> 的 \n<code>imports</code> 数组中。 完成后的 \n<code>HeroesModule</code> 看起来像这样：</p>\n<code-example path=\"router/src/app/heroes/heroes.module.ts\" title=\"src/app/heroes/heroes.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nimport { HeroService } from './hero.service';\n\nimport { HeroRoutingModule } from './heroes-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroRoutingModule\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ],\n  providers: [ HeroService ]\n})\nexport class HeroesModule {}\n\n</code-example>\n<a id=\"remove-duplicate-hero-routes\"></a>\n<h3 id=\"remove-duplicate-hero-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t5huram6ad8fub8go6prdr0o\"><i class=\"material-icons\">link</i>删除重复的英雄路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8eet6v2850akbv1r9j3szk1ga\">英雄路由目前在\n<em>两个</em>地方定义：在 \n<code>HeroesRoutingModule</code> 中， 通过 \n<code>HeroesModule</code>，以及在 \n<code>AppRoutingModule</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e5wr98svjuzww85i0oip530w\">由特性模块提供的路由将由路由器组合到它们导入的模块的路由中。 这使你能够继续定义特性模块路由，而无需修改主路由配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ol97ep3qlhunanhizqeyh5th\">但你不想两次定义相同的路由。 从 \n<code>app-routing.module.ts</code> 中删除 \n<code>HeroListComponent</code> 导入和 \n<code>/heroes</code> 路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhjxxtmf804lluj66yp9prglf\"><strong>保留默认路由和通配符路由！</strong> 这些是应用本身顶层级别的关注点。</p>\n<code-example path=\"router/src/app/app-routing.module.2.ts\" linenums=\"false\" title=\"src/app/app-routing.module.ts (v2)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }              from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> }  from '@angular/router';\n\nimport { CrisisListComponent }   from './crisis-list.component';\n// import { HeroListComponent }  from './hero-list.component';  // &lt;-- delete this line\nimport { PageNotFoundComponent } from './not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  // { path: 'heroes',     component: HeroListComponent }, // &lt;-- delete this line\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<a id=\"merge-hero-routes\"></a>\n<h3 id=\"import-hero-module-into-appmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0059b47c1nz9gmce4gqas5lf\"><i class=\"material-icons\">link</i>将英雄模块导入 AppModule</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uvy94g8obgkzts1y3euoa3nz\">英雄特性模块已经准备就绪，但应用还不知道 \n<code>HeroesModule</code>。 打开 \n<code>app.module.ts</code> 并修改它，如下所示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebykv1iq4871udhh8j92hvk5y\">导入 \n<code>HeroesModule</code> 并将其添加到 \n<code>AppModule</code> 的 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据中的 \n<code>imports</code> 数组中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebo2rj33jdpakb83a7afet0d6\">从 \n<code>AppModule</code> 的 \n<code>declarations</code> 中删除 \n<code>HeroListComponent</code>，因为它现在由 \n<code>HeroesModule</code> 提供。 这一点很重要。一个声明的组件只能有一个\n<em>所有者</em>。 在本例中，\n<code>Heroes</code> 模块是 \n<code>Heroes</code> 组件的所有者，并通过 \n<code>HeroesModule</code> 将它们提供给 \n<code>AppModule</code> 中的组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"526kdyk2r0dsbmogqtjmmj08x\">因此，\n<code>AppModule</code> 不再拥有英雄特性的特定知识，包括它的组件或路由细节。 你可以用更多组件和不同的路由来发展英雄特性。 这是为每个特性区域创建单独模块的一个关键优势。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6126g1ur9111feposs0lmfgva\">完成这些步骤后，\n<code>AppModule</code> 应该看起来像这样：</p>\n<code-example path=\"router/src/app/app.module.3.ts\" title=\"src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }     from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule }     from './heroes/heroes.module';\n\nimport { CrisisListComponent }   from './crisis-list.component';\nimport { PageNotFoundComponent } from './not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<a id=\"routing-module-order\"></a>\n<h3 id=\"module-import-order-matters\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejvniddi5krmwvnxqsqd7bwp7\"><i class=\"material-icons\">link</i>模块导入顺序很重要</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9gduvb5wx4cy3r3tt0cee5b7\">看一下模块的 \n<code>imports</code> 数组。注意 \n<code>AppRoutingModule</code> 在\n<em>最后</em>。 最重要的是，它在 \n<code>HeroesModule</code> \n<em>之后</em>。</p>\n<code-example path=\"router/src/app/app.module.3.ts\" region=\"module-imports\" title=\"src/app/app.module.ts (module-imports)\" linenums=\"false\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n  HeroesModule,\n  AppRoutingModule\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79pb8ldo6fvg4qj7ix9p1imv\">路由配置的顺序很重要。 路由器会接受第一个与导航请求路径匹配的路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1voggmzlkxg2oglpzomqtoc74\">当所有路由都在一个 \n<code>AppRoutingModule</code> 中时， 你将默认路由和 \n<a href=\"guide/router#wildcard\">通配符</a> 路由放在最后，在 \n<code>/heroes</code> 路由之后， 这样路由器就有机会在匹配到通配符路由并导航到“页面未找到”之前，将 URL 与 \n<code>/heroes</code> 路由匹配。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ci8lbu7fcnb2wwq4azrr956h\">路由不再在一个文件中。 它们分布在两个模块中，\n<code>AppRoutingModule</code> 和 \n<code>HeroesRoutingModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5iq6186z6nd7v846hcpmm82au\">每个路由模块都\n<em>按导入顺序</em>扩展路由配置。 如果你将 \n<code>AppRoutingModule</code> 列在最前面，通配符路由将在英雄路由\n<em>之前</em>注册。 通配符路由（匹配\n<em>所有</em> URL） 将拦截尝试导航到英雄路由的操作。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atb325655g9mn19822bhmnxwd\">反转路由模块，然后自己看看 点击英雄链接会导致“页面未找到”。 了解如何检查运行时路由配置 \n<a href=\"guide/router#inspect-config\" title=\"Inspect the router config\">如下</a>。</p>\n</div>\n<a id=\"route-def-with-parameter\"></a>\n<h3 id=\"route-definition-with-a-parameter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61q6tgw8zdj96s82xr6aq8hox\"><i class=\"material-icons\">link</i>带参数的路由定义</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"531a8yte1nwrmbkow5lu71kpr\">回到 \n<code>HeroesRoutingModule</code> 并再次查看路由定义。 到 \n<code>HeroDetailComponent</code> 的路由有点不同。</p>\n<code-example path=\"router/src/app/heroes/heroes-routing.module.1.ts\" linenums=\"false\" title=\"src/app/heroes/heroes-routing.module.ts (excerpt)\" region=\"hero-detail-route\">\n{ path: 'hero/:id', component: HeroDetailComponent }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y1gv7rpdmhgoqqy56va2lrr7\">注意路径中的 \n<code>:id</code> 标记。它在路径中创建了一个用于\n<strong>路由参数</strong>的槽位。 在本例中，路由器会将英雄的 \n<code>id</code> 插入到该槽位中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1dao5ow6j6z4c7dxxl3ruoz3\">如果你告诉路由器导航到详情组件并显示“Magneta”， 你希望在浏览器 URL 中看到类似这样的英雄 ID：</p>\n<code-example format=\"nocode\">\n  localhost:3000/hero/15\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"boizf8qpcj61oyk5jlnw3r91c\">如果用户在浏览器地址栏中输入该 URL，路由器应该识别出 模式并转到相同的“Magneta”详情视图。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtcesphaonvbrq0t181qheuyv\">路由参数：必需还是可选？</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzmetlud5f2bgzdri8vl8ihmn\">在路由定义路径中嵌入路由参数标记 \n<code>:id</code> 对于这种情况来说是一个不错的选择， 因为 \n<code>HeroDetailComponent</code> 需要 \n<code>id</code>，并且 路径中的值 \n<code>15</code> 清楚地将指向“Magneta”的路由与 指向其他英雄的路由区分开来。</p>\n</div>\n<a id=\"route-parameters\"></a>\n<h3 id=\"setting-the-route-parameters-in-the-list-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qcqkhuwziyp2sryye91xbuej\"><i class=\"material-icons\">link</i>在列表视图中设置路由参数</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"v52vohufb3ou60u5zw0z3l4a\">导航到 \n<code>HeroDetailComponent</code> 后，你希望看到所选英雄的详细信息。 你需要\n<em>两</em>个信息：指向组件的路由路径和英雄的 \n<code>id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1a8x0biqi1b0yh14aubaeo4y7\">因此，\n<em>链接参数数组</em>有\n<em>两</em>个条目：路由\n<em>路径</em>和一个\n<em>路由参数</em>，它指定了 所选英雄的 \n<code>id</code>。</p>\n<code-example path=\"router/src/app/heroes/hero-list.component.1.ts\" linenums=\"false\" title=\"src/app/heroes/hero-list.component.ts (link-parameters-array)\" region=\"link-parameters-array\">\n['/hero', hero.id] // { 15 }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hsx8edkw1zm3ll4590dq4t2v\">路由器会像这样从数组中组合目标 URL： \n<code>localhost:3000/hero/15</code>。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brmnpdopl3ts0k4d05pxb9jni\">目标 \n<code>HeroDetailComponent</code> 如何了解该 \n<code>id</code>？ 不要分析 URL。让路由器来做。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lys4es3e59eoy11jdswhpstg\">路由器从 URL 中提取路由参数（\n<code>id:15</code>）并通过 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务将其提供给 \n<code>HeroDetailComponent</code>。</p>\n</div>\n<a id=\"activated-route\"></a>\n<h3 id=\"activated-route-in-action\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"287ga0dh39ivp477pvjvezxoj\"><i class=\"material-icons\">link</i><em>激活路由</em>在行动中</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63hclf5phge5biraotalmcgkp\">从路由包中导入 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>、\n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 和 \n<code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> 令牌。</p>\n<code-example path=\"router/src/app/heroes/hero-detail.component.1.ts\" linenums=\"false\" title=\"src/app/heroes/hero-detail.component.ts (activated route)\" region=\"imports\">\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bnqdkhc8x21gaocyckjr1w42\">导入 \n<code>switchMap</code> 操作符，因为你稍后需要它来处理 \n<code>Observable</code> 路由参数。</p>\n<code-example path=\"router/src/app/heroes/hero-detail.component.ts\" linenums=\"false\" title=\"src/app/heroes/hero-detail.component.ts (switchMap operator import)\" region=\"rxjs-operator-import\">\nimport 'rxjs/add/operator/switchMap';\n\n</code-example>\n<a id=\"hero-detail-ctor\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t93c7wphfat8ah7kmwu5pgw4\">像往常一样，你编写一个构造函数，要求 Angular 注入组件所需的 服务，并将它们作为私有变量引用。</p>\n<code-example path=\"router/src/app/heroes/hero-detail.component.ts\" linenums=\"false\" title=\"src/app/heroes/hero-detail.component.ts (constructor)\" region=\"ctor\">\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  private service: HeroService\n) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42uz1s88qnkuec4i0omwqroql\">稍后，在 \n<code>ngOnInit</code> 方法中，你使用 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务来检索路由的参数， 从参数中提取英雄 \n<code>id</code> 并检索要显示的英雄。</p>\n<code-example path=\"router/src/app/heroes/hero-detail.component.ts\" linenums=\"false\" title=\"src/app/heroes/hero-detail.component.ts (ngOnInit)\" region=\"ngOnInit\">\nngOnInit() {\n  this.hero$ = this.route.paramMap\n    .switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =&gt;\n      this.service.getHero(params.get('id')));\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acvun4feotz5fftgbsf7oxyjx\"><code>paramMap</code> 处理有点棘手。当映射表发生变化时，你从已更改的参数中 \n<code>get()</code> \n<code>id</code> 参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wgvsozltq07lv8jkyppjhjma\">然后你告诉 \n<code>HeroService</code> 使用该 \n<code>id</code> 获取英雄，并返回 \n<code>HeroService</code> 请求的结果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hnnn52lsrootddgimav2u1jt\">你可能会想到使用 RxJS 的 \n<code>map</code> 操作符。 但 \n<code>HeroService</code> 返回的是一个 \n<code>Observable&lt;Hero&gt;</code>。 因此，你使用 \n<code>switchMap</code> 操作符来展平 \n<code>Observable</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c00k4r6omqv8k11zlok0oz9zs\"><code>switchMap</code> 操作符还会取消先前正在进行的请求。如果用户在 \n<code>HeroService</code> 仍在检索旧 \n<code>id</code> 时，使用新的 \n<code>id</code> 重新导航到此路由，\n<code>switchMap</code> 会丢弃该旧请求并返回新 \n<code>id</code> 的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p3skx3ivhqof5ljknovsf04j\">可观察者 \n<code>Subscription</code> 将由 \n<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 处理，组件的 \n<code>hero</code> 属性将使用检索到的英雄进行（重新）设置。</p>\n<h4 id=\"parammap-api\"><em>ParamMap</em> API</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zj14nueeq514tpuk2k5dpfch\"><code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> API 的灵感来自 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\">URLSearchParams 接口</a>。它提供了一些方法 来处理路由参数（\n<code>paramMap</code>）和查询参数（\n<code>queryParamMap</code>）的参数访问。</p>\n<table>\n  <tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4mqt2qsskr458389a5znethu\">成员</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"c1zh7m7zz0q1ywb7182og533b\">说明</th>\n  </tr>\n  <tr>\n    <td>\n      <code>has(name)</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aetwjcspbbj772t42mjvxhi4b\">如果参数名称存在于参数映射表中，则返回 \n<code>true</code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>get(name)</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rtd1vodnd9q2082oxjbng8n0\">如果存在，则返回参数名称的值（一个 \n<code>string</code>），如果参数名称不存在于映射表中，则返回 \n<code>null</code>。如果参数值实际上是一个值数组，则返回\n<em>第一个</em>元素。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>getAll(name)</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vpcpsjbrxs3nblxqk4uctf7c\">如果找到，则返回参数名称值的 \n<code>string</code> 数组，如果参数名称值不存在于映射表中，则返回空 \n<code>array</code>。当单个参数可能具有多个值时，使用 \n<code>getAll</code>。</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>keys</code>\n    </td>\n    <td>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gi60ay4m1kkdj6s4t5bb2d2a\">返回映射表中所有参数名称的 \n<code>string</code> 数组。</p>\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"reuse\"></a>\n<h4 id=\"observable-parammap-and-component-reuse\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6432bq1k85lliddf4ut3tladz\"><i class=\"material-icons\">link</i>可观察者 \n<i>paramMap</i> 和组件复用</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"v2iu8r2mypcsue4ivxglrote\">在本例中，你从一个 \n<code>Observable</code> 中检索路由参数映射表。 这意味着路由参数映射表在该组件的生命周期内可能会发生变化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nytz3y54w3u9j8xlgytrz5xa\">它们可能会发生变化。默认情况下，路由器在重新导航到同一个组件类型时会复用组件实例， 前提是之前没有访问过其他组件。路由参数每次都可能发生变化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"svboqkrnuotr4fasyso4lu8l\">假设父组件导航栏有“前进”和“后退”按钮， 它们在英雄列表中滚动。 每次点击都会以命令式的方式导航到 \n<code>HeroDetailComponent</code>，并使用下一个或上一个 \n<code>id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cd8qk72ory9ekcyukvsalj6gj\">你不想让路由器从 DOM 中删除当前的 \n<code>HeroDetailComponent</code> 实例，只是为了下一个 \n<code>id</code> 重新创建它。 这可能会造成明显的视觉上的不连贯。 最好是简单地复用同一个组件实例并更新参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9eah4ffkqmm2e8vnuji7ftj41\">不幸的是，\n<code>ngOnInit</code> 每个组件实例只调用一次。 你需要一种方法来检测路由参数何时从\n<em>同一个实例</em>中发生变化。 可观察者 \n<code>paramMap</code> 属性很好地处理了这种情况。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o9zq1lotub1drgdgy5i6j7a4\">在组件中订阅可观察者时，你几乎总是会安排在组件销毁时取消订阅。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30p1956yuuqjh8bytiyi6bjhs\">有一些例外情况，在这种情况下不需要这样做。 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 可观察者就是其中之一。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4027nw7xy86y68jv3g5hemjpa\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 及其可观察者与 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 本身是隔离的。 当 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 销毁不再需要的路由组件时，注入的 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 也会随之销毁。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dq3fogakaitdkxujot754eva\">尽管如此，你也可以随意取消订阅。这样做无害，而且永远不会是坏习惯。</p>\n</div>\n<a id=\"snapshot\"></a>\n<h4 id=\"snapshot-the-no-observable-alternative\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2megdd7k2p8pb2i35lsy9rbpd\"><i class=\"material-icons\">link</i><em>快照</em>：\n<em>无可观察者</em>的替代方案</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m8ad7ql2p9yw45noe2lev5bx\"><em>此</em>应用程序不会复用 \n<code>HeroDetailComponent</code>。 用户总是返回到英雄列表中选择另一个英雄来查看。 没有办法从一个英雄详情导航到另一个英雄详情， 而不在两者之间访问列表组件。 因此，路由器每次都会创建一个新的 \n<code>HeroDetailComponent</code> 实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9drexv6q3rkaaij1lx4uyrjhe\">当你确信 \n<code>HeroDetailComponent</code> 实例\n<em>永远、永远、永远</em> 不会被复用时，你可以使用\n<em>快照</em>来简化代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2woib0fm3nwyxs9xrv42qktx0\"><code>route.snapshot</code> 提供路由参数映射表的初始值。 你可以直接访问参数，无需订阅或添加可观察者操作符。 这样写起来更简单，也更容易阅读：</p>\n<code-example path=\"router/src/app/heroes/hero-detail.component.2.ts\" linenums=\"false\" title=\"src/app/heroes/hero-detail.component.ts (ngOnInit snapshot)\" region=\"snapshot\">\nngOnInit() {\n  let id = this.route.snapshot.paramMap.get('id');\n\n  this.hero$ = this.service.getHero(id);\n}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4x7w9cpsrxxkxvxw2wj4qosjp\"><strong>记住：</strong>使用此方法只能获取参数映射表的\n<em>初始</em>值。 如果路由有可能复用组件，请坚持使用可观察者 \n<code>paramMap</code> 方法。 此示例为了以防万一，继续使用可观察者 \n<code>paramMap</code> 策略。</p>\n</div>\n<a id=\"nav-to-list\"></a>\n<h3 id=\"navigating-back-to-the-list-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kvn9dk9rtm321v0w3y03nl9l\"><i class=\"material-icons\">link</i>导航回列表组件</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qpgabioay6m7ft7bdl0oono8\"><code>HeroDetailComponent</code> 有一个“返回”按钮，它连接到 \n<code>gotoHeroes</code> 方法，该方法以命令式方式导航回 \n<code>HeroListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vvpnproniki7efmdv0x0q5md\">路由 \n<code>navigate</code> 方法接受与绑定到 \n<code>[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]</code> 指令相同的单项\n<em>链接参数数组</em>。 它包含\n<em>指向 <code>HeroListComponent</code> 的路径</em>：</p>\n<code-example path=\"router/src/app/heroes/hero-detail.component.1.ts\" linenums=\"false\" title=\"src/app/heroes/hero-detail.component.ts (excerpt)\" region=\"gotoHeroes\">\ngotoHeroes() {\n  this.router.navigate(['/heroes']);\n}\n\n</code-example>\n<a id=\"optional-route-parameters\"></a>\n<h3 id=\"route-parameters-required-or-optional\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caopb9xi49r5tdwqj508hzr5d\"><i class=\"material-icons\">link</i>路由参数：必要还是可选？</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2no9801dwpp3xzdvzkkj8js24\">使用 \n<a href=\"guide/router#route-parameters\"><em>路由参数</em></a> 在路由 URL \n<em>中</em>指定\n<em>必要</em>的参数值，就像你在导航到 \n<code>HeroDetailComponent</code> 以查看 \n<em>id</em> 为 15 的英雄时所做的那样：</p>\n<code-example format=\"nocode\">\n  localhost:3000/hero/15\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11wzii00l3ntb0d02ttlfn2q6\">你也可以向路由请求添加\n<em>可选</em>信息。 例如，从英雄详情视图返回英雄列表时， 最好在列表中预选查看的英雄。</p>\n<figure>\n  <img src=\"generated/images/guide/router/selected-hero.png\" alt=\"Selected hero\" width=\"336\" height=\"110\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddh8a7tj5z3utxf7cpbutncem\">你将在稍后实现此功能，方法是在从 \n<code>HeroDetailComponent</code> 返回时，将查看的英雄的 \n<code>id</code> 作为可选参数包含在 URL 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kjed3gw4m22ub49kgnjay37j\">可选信息采用其他形式。搜索条件通常结构松散，例如 \n<code>name='wind*'</code>。 多个值很常见——\n<code>after='12/31/2015' &amp; before='1/1/2017'</code>——没有特定顺序——\n<code>before='1/1/2017' &amp; after='12/31/2015'</code>——以各种格式——\n<code>during='currentYear'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgxmh07ttzmo8e4ug5w07mrxb\">这些类型的参数不适合轻松地放入 URL \n<em>路径</em>中。即使你可以定义合适的 URL 标记方案， 这样做也会极大地增加将传入 URL 转换为命名路由所需的模式匹配的复杂性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cc8dg8g21y946h2790p0ij50s\">可选参数是用于在导航期间传递任意复杂信息的理想工具。 可选参数不参与模式匹配，并提供灵活的表达方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kmxbo1sn9tx2zt25qhgknbdq\">路由支持使用可选参数以及必要路由参数进行导航。 在定义必要路由参数\n<em>之后</em>，在单独的对象中定义\n<em>可选</em>参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7bqiltskjqvmhzxhk0xsnz2b\">一般来说，当 值是必需的（例如，如果需要区分不同的路由路径）时，请首选\n<em>必要路由参数</em>； 当值是可选的、复杂的和/或多变量时，请首选\n<em>可选参数</em>。</p>\n<a id=\"optionally-selecting\"></a>\n<h3 id=\"heroes-list-optionally-selecting-a-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yk2pffiydq19noewmq4jw3ly\"><i class=\"material-icons\">link</i>英雄列表：可选地选择英雄</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fqzuiovoq6be0orwzo11mnu5\">导航到 \n<code>HeroDetailComponent</code> 时，你指定了要编辑的英雄的\n<em>必要</em> \n<code>id</code>，它位于 \n<em>路由参数</em>中，并且是 \n<a href=\"guide/router#link-parameters-array\"><em>链接参数数组</em></a> 的第二个项目。</p>\n<code-example path=\"router/src/app/heroes/hero-list.component.1.ts\" linenums=\"false\" title=\"src/app/heroes/hero-list.component.ts (link-parameters-array)\" region=\"link-parameters-array\">\n['/hero', hero.id] // { 15 }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch4q1iz6cq5hh7pt5y6bpk19w\">路由将 \n<code>id</code> 值嵌入到导航 URL 中，因为你已将其定义为路由参数，并在路由 \n<code>path</code> 中使用 \n<code>:id</code> 占位符标记：</p>\n<code-example path=\"router/src/app/heroes/heroes-routing.module.1.ts\" linenums=\"false\" title=\"src/app/heroes/heroes-routing.module.ts (hero-detail-route)\" region=\"hero-detail-route\">\n{ path: 'hero/:id', component: HeroDetailComponent }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hgkhpevnlgfbd7jt4rizw3li\">当用户点击返回按钮时，\n<code>HeroDetailComponent</code> 会构造另一个\n<em>链接参数数组</em>， 它用于导航回 \n<code>HeroListComponent</code>。</p>\n<code-example path=\"router/src/app/heroes/hero-detail.component.1.ts\" linenums=\"false\" title=\"src/app/heroes/hero-detail.component.ts (gotoHeroes)\" region=\"gotoHeroes\">\ngotoHeroes() {\n  this.router.navigate(['/heroes']);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chb34wz2pbozwu7muazh48i8h\">此数组缺少路由参数，因为你没有理由向 \n<code>HeroListComponent</code> 发送信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg10y3dawoizcvolw3iog1g9i\">现在你有了理由。你希望将当前英雄的 id 与导航请求一起发送，以便 \n<code>HeroListComponent</code> 可以突出显示其列表中的该英雄。 这是一个\n<em>锦上添花</em>的功能；列表在没有它的情况下也能完美显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jwyl5d616do6qjq1atxc6bif\">使用包含\n<em>可选</em> \n<code>id</code> 参数的对象发送 \n<code>id</code>。 为了演示目的，对象中有一个额外的垃圾参数（\n<code>foo</code>），\n<code>HeroListComponent</code> 应该忽略它。 以下是修改后的导航语句：</p>\n<code-example path=\"router/src/app/heroes/hero-detail.component.ts\" linenums=\"false\" title=\"src/app/heroes/hero-detail.component.ts (go to heroes)\" region=\"gotoHeroes\">\ngotoHeroes(hero: Hero) {\n  let heroId = hero ? hero.id : null;\n  // Pass along the hero id if available\n  // so that the HeroList component can select that hero.\n  // Include <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> junk 'foo' property for fun.\n  this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wi5im8fascb04vpa8akqiogm\">应用程序仍然可以正常工作。点击“返回”会返回到英雄列表视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16gs0l64asqhk2fzl6g4xzayv\">查看浏览器地址栏。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mi4bw3bdne93s5eumasiymv8\">它应该看起来像这样，具体取决于你运行它的位置：</p>\n<code-example language=\"bash\">\n  localhost:3000/heroes;id=15;foo=foo\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arnq7kthr0pdu24a2mi7kpkg6\"><code>id</code> 值出现在 URL 中，形式为 (\n<code>;id=15;foo=foo</code>)，而不是 URL 路径中。 “英雄”路由的路径没有 \n<code>:id</code> 标记。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vio3wzooz9uvvu75mmjnwx64\">可选路由参数不是用“?”和“&amp;”分隔，就像它们在 URL 查询字符串中一样。 它们\n<strong>用分号“;”分隔</strong> 这是\n<em>矩阵 URL</em> 表示法——你可能以前没有见过。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mmehvz48qwnkganhfycu5ypb\"><em>矩阵 URL</em> 表示法是最初在 \n<a href=\"http://www.w3.org/DesignIssues/MatrixURIs.html\">1996 年的提案</a> 中提出的，该提案由万维网的创始人蒂姆·伯纳斯-李提出。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72c7xnz3bmkm0gf3dalhm6k3r\">虽然矩阵表示法从未进入 HTML 标准，但它是合法的， 并且在浏览器路由系统中变得流行起来，作为隔离属于父路由和子路由的参数的一种方式。路由器就是这样一个系统，它在所有浏览器中都提供对矩阵表示法的支持。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8f97x97m2hok5lgesqrujzhrt\">语法对你来说可能看起来很奇怪，但只要 URL 可以通过电子邮件发送并粘贴到浏览器地址栏中，用户就不太可能注意到或关心 就像这个 URL 一样。</p>\n</div>\n<a id=\"route-parameters-activated-route\"></a>\n<h3 id=\"route-parameters-in-the-activatedroute-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yk2n1jt5i9xmciob52tda8xx\"><i class=\"material-icons\">link</i><em>ActivatedRoute</em> 服务中的路由参数</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egij12647r3o364jmmeh4b6dk\">英雄列表保持不变。没有英雄行被突出显示。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vgc8p26j52ki619b0qo0su8n\"><live-example></live-example> \n<em>确实</em>突出显示了选定的 行，因为它演示了应用程序的最终状态，其中包括你\n<em>即将</em>要介绍的步骤。 目前，本指南描述的是\n<em>在</em>这些步骤\n<em>之前</em>的事态。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dq71j3gelfs5xkcr5xrdcop46\"><code>HeroListComponent</code> 根本没有期望任何参数，也不知道如何处理它们。 你可以改变这一点。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cg8ov5hcplh3lqebilmka9vk\">之前，从 \n<code>HeroListComponent</code> 导航到 \n<code>HeroDetailComponent</code> 时， 你订阅了路由参数映射 \n<code>Observable</code>，并在 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务中将其提供给 \n<code>HeroDetailComponent</code>。 你在 \n<code>HeroDetailComponent</code> 的构造函数中注入了该服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1svlozsvg9jo54i9ellwy5sf6\">这次你将从相反的方向导航，从 \n<code>HeroDetailComponent</code> 导航到 \n<code>HeroListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59gxdwgur4axq1ysd78717227\">首先，你扩展路由导入语句以包含 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务符号：</p>\n<code-example path=\"router/src/app/heroes/hero-list.component.ts\" linenums=\"false\" title=\"src/app/heroes/hero-list.component.ts (import)\" region=\"import-router\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvv80da5bkrkds3gs4xphzk5w\">导入 \n<code>switchMap</code> 操作符以对路由参数映射的 \n<code>Observable</code> 执行操作。</p>\n<code-example path=\"router/src/app/heroes/hero-list.component.ts\" linenums=\"false\" title=\"src/app/heroes/hero-list.component.ts (rxjs imports)\" region=\"rxjs-imports\">\nimport 'rxjs/add/operator/switchMap';\nimport { Observable } from 'rxjs/Observable';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv2642phzxd5gjbyk136yxnau\">然后，你在 \n<code>HeroListComponent</code> 构造函数中注入 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p>\n<code-example path=\"router/src/app/heroes/hero-list.component.ts\" linenums=\"false\" title=\"src/app/heroes/hero-list.component.ts (constructor and ngOnInit)\" region=\"ctor\">\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&lt;Hero[]&gt;;\n\n  private selectedId: number;\n\n  constructor(\n    private service: HeroService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.heroes$ = this.route.paramMap\n      .switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =&gt; {\n        // (+) before `params.get()` turns the string into <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> number\n        this.selectedId = +params.get('id');\n        return this.service.getHeroes();\n      });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cissf819udavnnyued3i6jgvq\"><code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> 属性是一个路由参数的 \n<code>Observable</code> 映射表。当用户导航到组件时，\n<code>paramMap</code> 会发出一个包含 \n<code>id</code> 的新值映射表。在 \n<code>ngOnInit</code> 中，你订阅这些值，设置 \n<code>selectedId</code>，并获取英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vgk3y0p5dcdxtx6b4xm4g2jj\">使用 \n<a href=\"guide/template-syntax#class-binding\">类绑定</a> 更新模板。 当比较返回 \n<code>true</code> 时，绑定会添加 \n<code>selected</code> CSS 类，当返回 \n<code>false</code> 时会将其删除。 在重复的 \n<code>&lt;li&gt;</code> 标签中查找它，如下所示：</p>\n<code-example path=\"router/src/app/heroes/hero-list.component.ts\" linenums=\"false\" title=\"src/app/heroes/hero-list.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h2&gt;HEROES&lt;/h2&gt;\n  &lt;ul class=\"items\"&gt;\n    &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\"\n      [class.selected]=\"hero.id === selectedId\"&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n        &lt;span class=\"badge\"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}\n      &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n`\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qyu5jag0j4yuo1ecemuqvece\">当用户从英雄列表导航到“Magneta”英雄并返回时，“Magneta”会显示为选中状态：</p>\n<figure>\n  <img src=\"generated/images/guide/router/selected-hero.png\" alt=\"Selected List\" width=\"336\" height=\"110\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i9j3xfrbz89f9fcr09oq4z0v\">可选的 \n<code>foo</code> 路由参数是无害的，并且继续被忽略。</p>\n<a id=\"route-animation\"></a>\n<h3 id=\"adding-animations-to-the-routed-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wbnlcueh7iflsiioac34togj\"><i class=\"material-icons\">link</i>向路由组件添加动画</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b071dh6wayzk66o7rc6p9t9wj\">英雄功能模块几乎完成了，但是没有一些平滑的过渡，它算什么功能呢？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkie8xihwc64lc3o2aty6614f\">本节将向你展示如何向 \n<code>HeroDetailComponent</code> 添加一些 \n<a href=\"guide/animations\">动画</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9opf5ujun9tgvej08zca0citb\">首先导入 \n<code><a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a></code>：</p>\n<code-example path=\"router/src/app/app.module.ts\" linenums=\"false\" title=\"src/app/app.module.ts (animations-module)\" region=\"animations-module\">\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7njxmgrj4bxzr38i3yytqr26b\">在根 \n<code>src/app/</code> 文件夹中创建一个 \n<code>animations.ts</code> 文件。其内容如下所示：</p>\n<code-example path=\"router/src/app/animations.ts\" linenums=\"false\" title=\"src/app/animations.ts (excerpt)\">\nimport { <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>, <a href=\"api/core/AnimationEntryMetadata\" class=\"code-anchor\">AnimationEntryMetadata</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>, <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>, <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> } from '@angular/core';\n\n// <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> animations\nexport const slideInDownAnimation: <a href=\"api/core/AnimationEntryMetadata\" class=\"code-anchor\">AnimationEntryMetadata</a> =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimation', [\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>('*',\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        opacity: 1,\n        transform: 'translateX(0)'\n      })\n    ),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        opacity: 0,\n        transform: 'translateX(-100%)'\n      }),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.2s ease-in')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':leave', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        opacity: 0,\n        transform: 'translateY(100%)'\n      }))\n    ])\n  ]);\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27py7vtzemdpuw97fnlg3n8qm\">此文件执行以下操作：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7322ey89hpz1s7hk3gjzvitdj\">导入用于构建动画触发器、控制状态和管理状态之间过渡的动画符号。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fxg31qupzehwhg324uin6jaa\">导出一个名为 \n<code>slideInDownAnimation</code> 的常量，将其设置为名为 \n<em><code>routeAnimation</code></em> 的动画触发器； 动画组件将引用此名称。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uh3nualfegbbpfobp23pn7g6\">指定了\n<em>通配符状态</em> \n<code>*</code>，它匹配路由组件所处的任何动画状态。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mvm3qam6cvqtllfyk39z1nlo\">定义了两个\n<em>过渡</em>，一个是在组件进入应用程序视图时从屏幕左侧淡入（\n<code>:enter</code>），另一个是在组件离开应用程序视图时向下动画（\n<code>:leave</code>）。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fcci145qrub48k0ys2flvdv4\">你可以为其他路由组件创建更多带有不同过渡的触发器。此触发器足以满足当前里程碑。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jnpix8f2d5s1l5cfzl708j71\">回到 \n<code>HeroDetailComponent</code> 中，从 \n<code>'./animations.ts</code> 导入 \n<code>slideInDownAnimation</code>。 从 \n<code>@angular/core</code> 中添加 \n<code><a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 装饰器到导入项中；你很快就会用到它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1d8wca8b0gue2mh0bzyjs47h\">在 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据的 \n<code>animations</code> 数组中添加 \n<code>slideInDownAnimation</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21z1xgib8fvh6wo3194fyep3k\">然后，向类中添加三个 \n<code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 属性，以设置路由组件元素的动画和样式。</p>\n<code-example path=\"router/src/app/heroes/hero-detail.component.ts\" linenums=\"false\" title=\"src/app/heroes/hero-detail.component.ts (host bindings)\" region=\"host-bindings\">\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('@routeAnimation') routeAnimation = true;\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.display')   display = 'block';\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.position')  position = 'absolute';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bya287idkhaf3zaf6cqfywve\">传递给第一个 \n<code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 的 \n<code>'@routeAnimation'</code> 与 \n<code>slideInDownAnimation</code> \n<em>触发器</em> 的名称 \n<code>routeAnimation</code> 相匹配。 将 \n<code>routeAnimation</code> 属性设置为 \n<code>true</code>，因为你只关心 \n<code>:enter</code> 和 \n<code>:leave</code> 状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8il6hpfpafyev4jl9qwl242tr\">另外两个 \n<code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 属性设置了组件的显示和位置样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bdgzvyp8vwj20xsb1vh1s1od\"><code>HeroDetailComponent</code> 在路由到时会从左侧淡入，在导航离开时会向下滑动。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74ztlb9xpb1m2021e7yhfers4\">将路由动画应用于单个组件适用于简单的演示，但在实际应用中，最好根据\n<em>路由路径</em>来为路由设置动画。</p>\n</div>\n<a id=\"milestone-3-wrap-up\"></a>\n<h3 id=\"milestone-3-wrap-up\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azqzd9d4v8yekd594038qcb6b\"><i class=\"material-icons\">link</i>里程碑 3 总结</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyki1w6khedsp4kw8lfkfehhm\">你已经学习了如何执行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4n9c9kkmgqvxjxes5817km88\">将应用程序组织成\n<em>功能区域</em>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdw315ace463khpdftxhgjs2i\">以命令式的方式从一个组件导航到另一个组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tm8hrhgr81ozrvq8elnxx1it\">在路由参数中传递信息，并在组件中订阅它们。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9e5xom6vbordnqe4o62r4kjt\">将功能区域 NgModule 导入到 \n<code>AppModule</code> 中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fcai5s9br8vcdyrqfe31mdln\">将动画应用于路由组件。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amot0kxndbuujl9anbsmzm2mx\">在进行这些更改后，文件夹结构如下所示：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    router-sample\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          heroes\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            hero-detail.component.ts\n          </div>\n          <div class=\"file\">\n            hero-list.component.ts\n          </div>\n          <div class=\"file\">\n            hero.service.ts\n          </div>\n          <div class=\"file\">\n            heroes.module.ts\n          </div>\n          <div class=\"file\">\n            heroes-routing.module.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          app-routing.module.ts\n        </div>\n        <div class=\"file\">\n          crisis-list.component.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9iuve2ut6o6sqqvpu3xnn23z\">以下是此版本示例应用程序的相关文件。</p>\n<code-tabs>\n\n  <code-pane title=\"app.component.ts\" path=\"router/src/app/app.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;/nav&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  `\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"app.module.ts\" path=\"router/src/app/app.module.3.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }     from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule }     from './heroes/heroes.module';\n\nimport { CrisisListComponent }   from './crisis-list.component';\nimport { PageNotFoundComponent } from './not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"app-routing.module.ts\" path=\"router/src/app/app-routing.module.2.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }              from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> }  from '@angular/router';\n\nimport { CrisisListComponent }   from './crisis-list.component';\n// import { HeroListComponent }  from './hero-list.component';  // &lt;-- delete this line\nimport { PageNotFoundComponent } from './not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  // { path: 'heroes',     component: HeroListComponent }, // &lt;-- delete this line\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-pane>\n\n  <code-pane title=\"hero-list.component.ts\" path=\"router/src/app/heroes/hero-list.component.ts\">\n// TODO: Feature Componetized like CrisisCenter\nimport 'rxjs/add/operator/switchMap';\nimport { Observable } from 'rxjs/Observable';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\n\nimport { Hero, HeroService }  from './hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;h2&gt;HEROES&lt;/h2&gt;\n    &lt;ul class=\"items\"&gt;\n      &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\"\n        [class.selected]=\"hero.id === selectedId\"&gt;\n        &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n          &lt;span class=\"badge\"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}\n        &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n\n    &lt;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n  `\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&lt;Hero[]&gt;;\n\n  private selectedId: number;\n\n  constructor(\n    private service: HeroService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.heroes$ = this.route.paramMap\n      .switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =&gt; {\n        // (+) before `params.get()` turns the string into <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> number\n        this.selectedId = +params.get('id');\n        return this.service.getHeroes();\n      });\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"hero-detail.component.ts\" path=\"router/src/app/heroes/hero-detail.component.ts\">\nimport 'rxjs/add/operator/switchMap';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a> } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\n\nimport { slideInDownAnimation } from '../animations';\n\nimport { Hero, HeroService }  from './hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n  &lt;h2&gt;HEROES&lt;/h2&gt;\n  &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> as hero\"&gt;\n    &lt;h3&gt;\"{{ hero.name }}\"&lt;/h3&gt;\n    &lt;div&gt;\n      &lt;label&gt;Id: &lt;/label&gt;{{ hero.id }}&lt;/div&gt;\n    &lt;div&gt;\n      &lt;label&gt;Name: &lt;/label&gt;\n      &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/&gt;\n    &lt;/div&gt;\n    &lt;p&gt;\n      &lt;button (click)=\"gotoHeroes(hero)\"&gt;Back&lt;/button&gt;\n    &lt;/p&gt;\n  &lt;/div&gt;\n  `,\n  animations: [ slideInDownAnimation ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('@routeAnimation') routeAnimation = true;\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.display')   display = 'block';\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.position')  position = 'absolute';\n\n  hero$: Observable&lt;Hero&gt;;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n    private service: HeroService\n  ) {}\n\n  ngOnInit() {\n    this.hero$ = this.route.paramMap\n      .switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =&gt;\n        this.service.getHero(params.get('id')));\n  }\n\n  gotoHeroes(hero: Hero) {\n    let heroId = hero ? hero.id : null;\n    // Pass along the hero id if available\n    // so that the HeroList component can select that hero.\n    // Include <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> junk 'foo' property for fun.\n    this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"hero.service.ts\" path=\"router/src/app/heroes/hero.service.ts\">\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/map';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport class Hero {\n  constructor(public id: number, public name: string) { }\n}\n\nconst HEROES = [\n  new Hero(11, 'Mr. Nice'),\n  new Hero(12, 'Narco'),\n  new Hero(13, 'Bombasto'),\n  new Hero(14, 'Celeritas'),\n  new Hero(15, 'Magneta'),\n  new Hero(16, 'RubberMan')\n];\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n  getHeroes() { return Observable.of(HEROES); }\n\n  getHero(id: number | string) {\n    return this.getHeroes()\n      // (+) before `id` turns the string into <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> number\n      .map(heroes =&gt; heroes.find(hero =&gt; hero.id === +id));\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"heroes.module.ts\" path=\"router/src/app/heroes/heroes.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nimport { HeroService } from './hero.service';\n\nimport { HeroRoutingModule } from './heroes-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroRoutingModule\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ],\n  providers: [ HeroService ]\n})\nexport class HeroesModule {}\n\n</code-pane>\n\n  <code-pane title=\"heroes-routing.module.ts\" path=\"router/src/app/heroes/heroes-routing.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent },\n  { path: 'hero/:id', component: HeroDetailComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroRoutingModule { }\n\n</code-pane>\n\n</code-tabs>\n<a id=\"milestone-4\"></a>\n<h2 id=\"milestone-4-crisis-center-feature\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"293tg4025r7f70qt79khnw0as\"><i class=\"material-icons\">link</i>里程碑 4：危机中心功能</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ez3bp0pl7nzuwakna188qok89\">现在该为应用程序当前的占位符危机中心添加真正的功能了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8f0ed7slb7lzxrdx7tjxy4k1p\">首先模仿英雄功能：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60qof8i6gp6mgszxooc4b5s19\">删除占位符危机中心文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qscd75juwav8944b8rrxx2pv\">创建一个 \n<code>app/crisis-center</code> 文件夹。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3oq8kl5xmxo6u4ny310qavsx\">将 \n<code>app/heroes</code> 中的文件复制到新的危机中心文件夹中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l8menuiyx8sj7yvtfpj9vbll\">在新的文件中，将所有提到“hero”的地方改为“crisis”，将所有提到“heroes”的地方改为“crises”。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cyyyugd3betke4iawnhzs0o9\">你将把 \n<code>CrisisService</code> 变成一个模拟危机的提供者，而不是模拟英雄的提供者：</p>\n<code-example path=\"router/src/app/crisis-center/crisis.service.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis.service.ts (mock-crises)\" region=\"mock-crises\">\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/map';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nexport class Crisis {\n  constructor(public id: number, public name: string) { }\n}\n\nconst CRISES = [\n  new Crisis(1, 'Dragon Burning Cities'),\n  new Crisis(2, 'Sky Rains Great White Sharks'),\n  new Crisis(3, 'Giant Asteroid Heading For Earth'),\n  new Crisis(4, 'Procrastinators Meeting Delayed Again'),\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cz8g4yaiuk4weu2fzftf7i2es\">由此产生的危机中心是引入一个新概念——\n<strong>子路由</strong>的基础。 你可以将\n<em>英雄</em>保留在当前状态，作为与\n<em>危机中心</em>的对比，并稍后决定这些差异是否值得。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0mg170zego2uamq62y0o1cz5\">为了遵循 \n<a href=\"https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\" title=\"Separation of Concerns\"><em>关注点分离</em>原则</a>， 对\n<em>危机中心</em>的更改不会影响 \n<code>AppModule</code> 或 任何其他功能的组件。</p>\n</div>\n<a id=\"crisis-child-routes\"></a>\n<h3 id=\"a-crisis-center-with-child-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nzwbtv2p5qu0liucto3eg658\"><i class=\"material-icons\">link</i>带有子路由的危机中心</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18x053b7xpidfp8w8b2y1isuq\">本节将向你展示如何组织危机中心，使其符合 Angular 应用程序的以下推荐模式：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"756zgx7sz8kcm64qz3swf4h3v\">每个功能区域都位于自己的文件夹中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jmeere2cf56gbbgvyq9r9j6g\">每个功能都有自己的 Angular 功能模块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4k47q13po25umsz4qy72biwdf\">每个区域都有自己的区域根组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fxfvr8twurvyvj3n8falo6et\">每个区域根组件都有自己的路由出口和子路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2170sr3pharfc68dm7xbpl3lr\">功能区域路由很少（如果有的话）会与其他功能的路由交叉。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lmz6g4p322nc3m8z4un6jkoj\">如果你的应用程序有许多功能区域，应用程序组件树可能看起来像这样：</p>\n<figure>\n  <img src=\"generated/images/guide/router/component-tree.png\" alt=\"Component Tree\" width=\"473\" height=\"258\">\n</figure>\n<a id=\"child-routing-component\"></a>\n<h3 id=\"child-routing-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28lysni9wlcl9n573y1wu2m7f\"><i class=\"material-icons\">link</i>子路由组件</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u8urlzpym36kzqv4267cjbnf\">将以下 \n<code>crisis-center.component.ts</code> 添加到 \n<code>crisis-center</code> 文件夹中：</p>\n<code-example path=\"router/src/app/crisis-center/crisis-center.component.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis-center.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template:  `\n    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  `\n})\nexport class CrisisCenterComponent { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hqws76mi8td4mnnwxhp5imq1\"><code>CrisisCenterComponent</code> 与 \n<code>AppComponent</code> 有以下共同点：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnoh4zszvt6fzzs2pw2n6mge3\">它是危机中心区域的\n<em>根</em>， 就像 \n<code>AppComponent</code> 是整个应用程序的根一样。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac0klhhd9xhppwdd9f07oqtm\">它是危机管理功能区域的\n<em>外壳</em>， 就像 \n<code>AppComponent</code> 是管理高级工作流程的外壳一样。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7546l5j6b7eagghrylk27j2un\">与大多数外壳一样，\n<code>CrisisCenterComponent</code> 类非常简单，甚至比 \n<code>AppComponent</code> 更简单： 它没有业务逻辑，它的模板也没有链接，只有一个标题和 \n<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 用于危机中心子视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8a1btn7veoubhrtgeej5hg0wf\">与 \n<code>AppComponent</code> 以及大多数其他组件不同，它\n<em>没有选择器</em>。 它\n<em>不需要</em>选择器，因为你不会将此组件\n<em>嵌入</em>到父模板中， 而是使用路由器\n<em>导航</em>到它。</p>\n<a id=\"child-route-config\"></a>\n<h3 id=\"child-route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j88kgw5jrboldoh83ix012h4\"><i class=\"material-icons\">link</i>子路由配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kqrbqvpp7t8td20pia4mb2b\">作为“危机中心”功能的主页，将以下 \n<code>crisis-center-home.component.ts</code> 添加到 \n<code>crisis-center</code> 文件夹中。</p>\n<code-example path=\"router/src/app/crisis-center/crisis-center-home.component.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis-center-home.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;p&gt;Welcome to the Crisis Center&lt;/p&gt;\n  `\n})\nexport class CrisisCenterHomeComponent { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkj8bsx64ijhb9v7vztvi2mte\">创建一个 \n<code>crisis-center-routing.module.ts</code> 文件，就像你创建 \n<code>heroes-routing.module.ts</code> 文件一样。 这次，你将在父 \n<code>crisis-center</code> 路由\n<em>内部</em>定义\n<strong>子路由</strong>。</p>\n<code-example path=\"router/src/app/crisis-center/crisis-center-routing.module.1.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis-center-routing.module.ts (Routes)\" region=\"routes\">\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wzl2z6muiiwjh7r4cdgh2wlb\">请注意，父 \n<code>crisis-center</code> 路由有一个 \n<code>children</code> 属性， 其中包含一个包含 \n<code>CrisisListComponent</code> 的路由。\n<code>CrisisListComponent</code> 路由 也有一个 \n<code>children</code> 数组，其中包含两个路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alie2dya54shzgx8khuzkze2i\">这两个路由分别导航到危机中心子组件， \n<code>CrisisCenterHomeComponent</code> 和 \n<code>CrisisDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anppr821pkm9plz2e35zk16hj\">路由器处理这些\n<em>子路由</em>的方式存在\n<em>重要差异</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67oxx97nss2jap8ls7fx4jg5u\">路由器在 \n<code>CrisisCenterComponent</code> 的 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 中显示这些路由的组件，而不是在 \n<code>AppComponent</code> 外壳的 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 中显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z4k78i71oqxhfhaz5isqyrnc\"><code>CrisisListComponent</code> 包含危机列表和一个 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，用于 显示 \n<code>Crisis Center Home</code> 和 \n<code>Crisis Detail</code> 路由组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rrcqp78i14vmfbqzihz4duf8\"><code>危机详情</code> 路由是 \n<code>危机列表</code> 的子路由。由于路由器默认情况下会 \n<a href=\"guide/router#reuse\">复用组件</a>，因此当你选择不同的危机时，\n<code>危机详情</code> 组件会被复用。相比之下，在 \n<code>英雄详情</code> 路由中，每次选择不同的英雄时，组件都会被重新创建。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bada8p64t4cawumgxy765uem0\">在顶层，以 \n<code>/</code> 开头的路径指的是应用程序的根目录。 但是子路由会\n<em>扩展</em>父路由的路径。 在路由树中向下走每一步， 你都会添加一个斜杠，然后是路由路径，除非路径是\n<em>空的</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84tqf9a5kc2ethgz7aodvzrnz\">将此逻辑应用于危机中心的导航，其父路径为 \n<code>/crisis-center</code>。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeeacbihj2pchylzlt4s7zs1c\">要导航到 \n<code>CrisisCenterHomeComponent</code>，完整的 URL 为 \n<code>/crisis-center</code>（\n<code>/crisis-center</code> + \n<code>''</code> + \n<code>''</code>）。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15bl8kuaxsm70iznpvmtezzsh\">要导航到 \n<code>id=2</code> 的危机的 \n<code>CrisisDetailComponent</code>，完整的 URL 为 \n<code>/crisis-center/2</code>（\n<code>/crisis-center</code> + \n<code>''</code> + \n<code>'/2'</code>）。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ks85whfmoksrozwqv4izrw9o\">后一个示例的绝对 URL（包括 \n<code>localhost</code> 来源）为</p>\n<code-example>\n  localhost:3000/crisis-center/2\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xxn6c49jtll01sksd7n80ya5\">以下是包含导入的完整 \n<code>crisis-center-routing.module.ts</code> 文件。</p>\n<code-example path=\"router/src/app/crisis-center/crisis-center-routing.module.1.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis-center-routing.module.ts (excerpt)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home.component';\nimport { CrisisListComponent }       from './crisis-list.component';\nimport { CrisisCenterComponent }     from './crisis-center.component';\nimport { CrisisDetailComponent }     from './crisis-detail.component';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-example>\n<a id=\"import-crisis-module\"></a>\n<h3 id=\"import-crisis-center-module-into-the-appmodule-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nw97g5o1zkxea6va2bsjzsd\"><i class=\"material-icons\">link</i>将危机中心模块导入到\n<em>AppModule</em> 路由中</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0tue49oshioaeanpgealkuxi\">与 \n<code>HeroesModule</code> 一样，你必须将 \n<code>CrisisCenterModule</code> 添加到 \n<code>AppModule</code> 的 \n<code>imports</code> 数组中， \n<em>在</em> \n<code>AppRoutingModule</code> \n<em>之前</em>：</p>\n<code-example path=\"router/src/app/app.module.4.ts\" linenums=\"false\" title=\"src/app/app.module.ts (import CrisisCenterModule)\" region=\"crisis-center-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }            from './app.component';\nimport { PageNotFoundComponent }   from './not-found.component';\n\nimport { AppRoutingModule }        from './app-routing.module';\nimport { HeroesModule }            from './heroes/heroes.module';\nimport { CrisisCenterModule }      from './crisis-center/crisis-center.module';\n\nimport { DialogService }           from './dialog.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    CrisisCenterModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    PageNotFoundComponent\n  ],\n  providers: [\n    DialogService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0jlgeb5q9f0syzyh4yhvqavj\">从 \n<code>app-routing.module.ts</code> 中删除初始的危机中心路由。 现在，特性路由由 \n<code>HeroesModule</code> 和 \n<code>CrisisCenter</code> 模块提供。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63qsmvfkogunss8e74l5bwzz3\"><code>app-routing.module.ts</code> 文件保留了顶层的应用程序路由，例如默认路由和通配符路由。</p>\n<code-example path=\"router/src/app/app-routing.module.3.ts\" linenums=\"false\" title=\"src/app/app-routing.module.ts (v3)\" region=\"v3\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }                from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> }    from '@angular/router';\n\nimport { ComposeMessageComponent } from './compose-message.component';\nimport { PageNotFoundComponent }   from './not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<a id=\"relative-navigation\"></a>\n<h3 id=\"relative-navigation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56uvwvxuobxtcwk45vh38db0a\"><i class=\"material-icons\">link</i>相对导航</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4f0n9w9njt15s4rz5fmlwtem\">在构建危机中心特性时，你使用以\n<em>斜杠</em>开头的\n<strong>绝对路径</strong>导航到危机详情路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bspeupcual59o9xjob2ki7am0\">路由器会将此类\n<em>绝对</em>路径匹配到从路由配置顶部开始的路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qnb994m3nify0g5295rep4lz\">你可以继续使用这种绝对路径在\n<em>危机中心</em>特性中导航，但这会将链接绑定到父路由结构。 如果你更改了父 \n<code>/crisis-center</code> 路径，则必须更改链接参数数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6e89wvc898ensqmluvqy9vsh\">你可以通过定义相对于当前 URL 段的\n<strong>相对</strong>路径来解除链接对这种依赖关系。 即使你将特性父路由路径更改为特性，在特性区域\n<em>内部</em>的导航仍然保持不变。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4lcfnthaqoa7584arn1yxxqc9\">例子如下：</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9aqbznp7kekdj8i4teu0gypzu\">路由器在\n<em>链接参数列表</em>中支持类似目录的语法，以帮助引导路由名称查找：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tz6jk9un9yxhdrl0p0c451hg\"><code>./</code> 或 \n<code>没有前导斜杠</code> 相对于当前级别。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ge6agoakkqzgsg8v9iskkifw\"><code>../</code> 用于在路由路径中向上移动一级。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11d72nqahughkyd6ctl9qceak\">你可以将相对导航语法与祖先路径结合使用。 如果你必须导航到兄弟路由，可以使用 \n<code>../&lt;sibling&gt;</code> 约定向上移动一级，然后横向移动并向下移动兄弟路由路径。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e6xnwyirrau67sxoyhamqja7\">要使用 \n<code>Router.navigate</code> 方法导航到相对路径，你必须提供 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>， 以便让路由器了解你在当前路由树中的位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqr0dug3zg8vcav5rzeks9o9o\">在\n<em>链接参数数组</em>之后，添加一个包含 \n<code>relativeTo</code> 属性的对象，并将该属性设置为 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。 然后，路由器会根据活动路由的位置计算目标 URL。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq1jc7zz26xt2rioej435o5qx\"><strong>始终</strong>在调用路由器的 \n<code>navigateByUrl</code> 方法时指定完整的\n<em>绝对</em>路径。</p>\n</div>\n<a id=\"nav-to-crisis\"></a>\n<h3 id=\"navigate-to-crisis-list-with-a-relative-url\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hip5lljdgebm4wo340jw913p\"><i class=\"material-icons\">link</i>使用相对 URL 导航到危机列表</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95poj8dtt12kgo9hgfh7hrd0x\">你已经注入了 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，你需要它来组合相对导航路径。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51rwvutmxfnlt0bahqhq9hb1g\">当使用 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 而不是 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务进行导航时，你会使用\n<em>相同</em>的链接参数数组，但不会提供包含 \n<code>relativeTo</code> 属性的对象。 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令中隐含了 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t938lox7fpermc0jqbrfrlf3\">更新 \n<code>CrisisDetailComponent</code> 的 \n<code>gotoCrises</code> 方法，以使用相对路径导航返回到\n<em>危机中心</em>列表。</p>\n<code-example path=\"router/src/app/crisis-center/crisis-detail.component.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis-detail.component.ts (relative navigation)\" region=\"gotoCrises-navigate\">\n// Relative navigation back to the crises\nthis.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33n2c72h6eg1xxrq2zdqvzys\">请注意，路径使用 \n<code>../</code> 语法向上移动了一级。 如果当前危机 \n<code>id</code> 为 \n<code>3</code>，则返回到危机列表的结果路径为 \n<code>/crisis-center/;id=3;foo=foo</code>。</p>\n<a id=\"named-outlets\"></a>\n<h3 id=\"displaying-multiple-routes-in-named-outlets\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj4bie0k14mhsy576i91u49vq\"><i class=\"material-icons\">link</i>在命名出口中显示多个路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pj0c5p5ep1xx06xbm5jkt0xt\">你决定为用户提供一种联系危机中心的方法。 当用户点击“联系”按钮时，你希望在弹出视图中显示一条消息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66l17ustul8dm6fdzxuqggbga\">弹出窗口应该保持打开状态，即使在应用程序中切换页面也是如此，直到用户通过发送消息或取消来关闭它。 显然，你不能将弹出窗口放在与其他页面相同的出口中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtihcprp2ggym0yaenmttpudo\">到目前为止，你已经定义了一个出口，并且你将子路由嵌套在这个出口下，以将路由分组在一起。 路由器只支持每个模板一个主\n<em>未命名</em>出口。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6otfq17u9abxbkip60haczy6m\">模板也可以包含任意数量的\n<em>命名</em>出口。 每个命名出口都有自己的一组路由，以及自己的组件。 多个出口可以同时显示不同的内容，这些内容由不同的路由决定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qpdbcq284nuct3wdqtpdie0g\">在 \n<code>AppComponent</code> 中添加一个名为“popup”的出口，直接位于未命名出口下方。</p>\n<code-example path=\"router/src/app/app.component.4.ts\" linenums=\"false\" title=\"src/app/app.component.ts (outlets)\" region=\"outlets\">\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63l38p25tkxk7woavvubf976h\">一旦你学会了如何将弹出组件路由到它，弹出窗口就会出现在那里。</p>\n<a id=\"secondary-routes\"></a>\n<h4 id=\"secondary-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aswnyj4h6d51g77ar73uepbjx\"><i class=\"material-icons\">link</i>辅助路由</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90tvhl396dijo9azhum50zhm0\">命名出口是\n<em>辅助路由</em>的目标。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ars39gi7ix6nx9iilrdxqx32r\">辅助路由看起来像主路由，你以相同的方式配置它们。 它们在几个关键方面有所不同。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ff5s59hu73uegqaz222ordqm\">它们彼此独立。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"s1srxf7w11z37la06pitb4wj\">它们与其他路由协同工作。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"l03t0rwmumei7f9spjm8dwz7\">它们显示在命名出口中。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akv1faoet4mnv09jihkq1hovs\">在 \n<code>src/app/compose-message.component.ts</code> 中创建一个名为 \n<code>ComposeMessageComponent</code> 的新组件。 它显示一个简单的表单，包含标题、消息输入框以及两个按钮“发送”和“取消”。</p>\n<figure>\n  <img src=\"generated/images/guide/router/contact-popup.png\" alt=\"Contact popup\" width=\"250\" height=\"262\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61eas5vdj71savenwgul73hvg\">以下是组件及其模板：</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/compose-message.component.ts\" path=\"router/src/app/compose-message.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a> } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> }                 from '@angular/router';\n\nimport { slideInDownAnimation }   from './animations';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  templateUrl: './compose-message.component.html',\n  styles: [ ':host { position: relative; bottom: 10%; }' ],\n  animations: [ slideInDownAnimation ]\n})\nexport class ComposeMessageComponent {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('@routeAnimation') routeAnimation = true;\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.display')   display = 'block';\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.position')  position = 'absolute';\n\n  details: string;\n  sending = false;\n\n  constructor(private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  send() {\n    this.sending = true;\n    this.details = 'Sending Message...';\n\n    setTimeout(() =&gt; {\n      this.sending = false;\n      this.closePopup();\n    }, 1000);\n  }\n\n  cancel() {\n    this.closePopup();\n  }\n\n  closePopup() {\n    // Providing <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> `null` value to the named outlet\n    // clears the contents of the named outlet\n    this.router.navigate([{ outlets: { popup: null }}]);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/compose-message.component.html\" path=\"router/src/app/compose-message.component.html\">\n&lt;h3&gt;Contact Crisis Center&lt;/h3&gt;\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"details\"&gt;\n  {{ details }}\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;label&gt;Message: &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a> [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"message\" rows=\"10\" cols=\"35\" [disabled]=\"sending\"&gt;&lt;/<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a>&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!sending\"&gt;\n  &lt;button (click)=\"send()\"&gt;Send&lt;/button&gt;\n  &lt;button (click)=\"cancel()\"&gt;Cancel&lt;/button&gt;\n&lt;/p&gt;\n\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c36i16iczqj10gtyryfyls23y\">它看起来与你在本指南中看到的任何其他组件都差不多。 有两个值得注意的差异。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvrzgcdeaosh6q2r6n90mc7a0\">请注意，\n<code>send()</code> 方法通过等待一秒钟来模拟延迟，然后“发送”消息并关闭弹出窗口。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gq19ocqjnvn5d1z835a39a88\"><code>closePopup()</code> 方法通过使用 \n<code>null</code> 导航到弹出出口来关闭弹出视图。 这是一个在 \n<a href=\"guide/router#clear-secondary-routes\">下面</a>介绍的特殊情况。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oqz2nbpwd4dlj5ovv764iwv4\">与其他应用程序组件一样，你将 \n<code>ComposeMessageComponent</code> 添加到 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 \n<code>declarations</code> 中。 在 \n<code>AppModule</code> 中执行此操作。</p>\n<a id=\"add-secondary-route\"></a>\n<h4 id=\"add-a-secondary-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1um8eimirk3ofo7g40jxxotcb\"><i class=\"material-icons\">link</i>添加辅助路由</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch02ktv4hv0zswz8cehxt2r6f\">打开 \n<code>AppRoutingModule</code> 并将一个新的 \n<code>compose</code> 路由添加到 \n<code>appRoutes</code> 中。</p>\n<code-example path=\"router/src/app/app-routing.module.3.ts\" linenums=\"false\" title=\"src/app/app-routing.module.ts (compose route)\" region=\"compose\">\n{\n  path: 'compose',\n  component: ComposeMessageComponent,\n  outlet: 'popup'\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"549wi1qn7hau6bux6bzm62y3w\"><code>path</code> 和 \n<code>component</code> 属性应该很熟悉。 有一个新的属性 \n<code>outlet</code>，设置为 \n<code>'popup'</code>。 现在，此路由将目标设置为弹出出口，\n<code>ComposeMessageComponent</code> 将在那里显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34etsgzfcm5ll1fo1obgil821\">用户需要一种打开弹出窗口的方式。 打开 \n<code>AppComponent</code> 并添加一个“联系”链接。</p>\n<code-example path=\"router/src/app/app.component.4.ts\" linenums=\"false\" title=\"src/app/app.component.ts (contact-link)\" region=\"contact-link\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4o2b80uk0r28xqtjpr33cuk2t\">虽然 \n<code>compose</code> 路由被固定到“popup”出口，但这不足以将路由连接到 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令。 你必须在\n<em>链接参数数组</em>中指定命名出口，并使用属性绑定将其绑定到 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ayztovae1ar9m0xfbuepfb0b\"><em>链接参数数组</em>包含一个对象，该对象具有单个 \n<code>outlets</code> 属性，其值为另一个对象，该对象以一个（或多个）出口名称为键。 在本例中，只有一个“popup”出口属性，其值为另一个\n<em>链接参数数组</em>，该数组指定了 \n<code>compose</code> 路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eoxve8sx3vhq4ym7sdwacx46\">实际上，你是在说，\n<em>当用户点击此链接时，在 <code>popup</code> 出口中显示与 <code>compose</code> 路由关联的组件</em>。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2f9m6zh4lji171mtq1bx0la0\">当只有一个路由和一个\n<em>未命名</em>出口需要考虑时，此外部对象中的 \n<code>outlets</code> 对象完全没有必要。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7phjf0xbirhmwlnxv6arjyi8w\">路由器假设你的路由规范针对\n<em>未命名</em>的主出口，并为你创建了这些对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"311sa4i5f3vgywd66g8ovwm7g\">路由到命名出口揭示了之前隐藏的路由真相： 你可以在同一个 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令中使用多个路由来定位多个出口。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30wcnp6mjs81ukhhgcwsfaoa5\">你实际上并没有在这里这样做。 但要定位命名出口，你必须使用更丰富、更详细的语法。</p>\n</div>\n<a id=\"secondary-route-navigation\"></a>\n<h4 id=\"secondary-route-navigation-merging-routes-during-navigation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9getnz6cu98tz5uotd1xor5e7\"><i class=\"material-icons\">link</i>二级路由导航：在导航期间合并路由</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o3h4q06zrljayjjxf792g7gw\">导航到\n<em>危机中心</em>，然后点击“联系”。 你应该在浏览器地址栏中看到类似以下的 URL。</p>\n<code-example>\n  http://.../crisis-center(popup:compose)\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xg2ed1s1usr7jd3529uz8yoh\">URL 中有趣的部分紧随 \n<code>...</code> 之后：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65f45qses37yn95grsca6fjwx\"><code>crisis-center</code> 是主导航。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcb9s2wnms14h4u8fr3lv4hqs\">括号包围着二级路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jrl8rtoeheg6rle35areep4m\">二级路由由出口名称（\n<code>popup</code>）、\n<code>冒号</code>分隔符和二级路由路径（\n<code>compose</code>）组成。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0k8sl0z91ugvek97faogm6th\">点击\n<em>英雄</em>链接，再次查看 URL。</p>\n<code-example>\n  http://.../heroes(popup:compose)\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czeducw6z4q9gq7oniiqy3es5\">主导航部分已更改；二级路由保持不变。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0jghy45nbw5iq1yj53v9m99v\">路由器正在跟踪导航树中的两个独立分支，并在 URL 中生成该树的表示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pj2wss8qaxmpf7lesrh6ztuc\">你可以在顶层和嵌套级别添加更多出口和路由，从而创建一个具有多个分支的导航树。 路由器将生成相应的 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3n0p68ikv9hj5bpjxx4oid1nt\">你可以通过填写上面提到的 \n<code>outlets</code> 对象来告诉路由器一次性导航整个树。 然后将该对象放在\n<em>链接参数数组</em>中，传递给 \n<code>router.navigate</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eoox9zv5iupx3z6kcwbo71vax\">随意尝试这些可能性。</p>\n<a id=\"clear-secondary-routes\"></a>\n<h4 id=\"clearing-secondary-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0fcr26ifd4gex4re1z2dyuqp\"><i class=\"material-icons\">link</i>清除二级路由</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euhb3aokx78jf0z713p5rhv04\">正如你所知，出口中的组件会一直保留，直到你导航到新的组件。 二级出口在这方面没有区别。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an1vxw0nfnzvwzex3yn32ibbi\">每个二级出口都有自己的导航，独立于驱动主出口的导航。 更改在主出口中显示的当前路由不会影响弹出窗口出口。 这就是为什么当你浏览危机和英雄时，弹出窗口会一直可见的原因。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53esvztn622df0w4fzy8kwqxj\">点击“发送”或“取消”按钮\n<em>确实</em>会清除弹出窗口视图。 要了解如何实现，请再次查看 \n<code>closePopup()</code> 方法：</p>\n<code-example path=\"router/src/app/compose-message.component.ts\" linenums=\"false\" title=\"src/app/compose-message.component.ts (closePopup)\" region=\"closePopup\">\nclosePopup() {\n  // Providing <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> `null` value to the named outlet\n  // clears the contents of the named outlet\n  this.router.navigate([{ outlets: { popup: null }}]);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aa7zsjm33yy1k10rxyng95cud\">它使用 \n<code><a href=\"api/router/Router#navigate\" class=\"code-anchor\">Router.navigate()</a></code> 方法以命令式方式导航，并传递一个 \n<a href=\"guide/router#link-parameters-array\">链接参数数组</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee5hwj1fm6telnc3u8dz7fypp\">与绑定到 \n<code>AppComponent</code> 中\n<em>联系</em> \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 的数组类似， 此数组包含一个具有 \n<code>outlets</code> 属性的对象。 \n<code>outlets</code> 属性值为另一个对象，该对象以出口名称为键。 唯一的命名出口是 \n<code>'popup'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4c8b6na9faxv7ki4f1qme93s\">这次，\n<code>'popup'</code> 的值为 \n<code>null</code>。这不是路由，但它是一个合法值。 将弹出窗口 \n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 设置为 \n<code>null</code> 会清除出口，并将二级弹出窗口路由从当前 URL 中删除。</p>\n<a id=\"guards\"></a>\n<h2 id=\"milestone-5-route-guards\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6syg1gk8g3mmh90n42zspops0\"><i class=\"material-icons\">link</i>里程碑 5：路由守卫</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fg7n0batkq18sy2xmwdrjye8\">目前，\n<em>任何</em>用户都可以\n<em>随时</em>在应用程序中\n<em>任意</em>导航。 这并不总是正确的做法。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wtcrdwggtkbojbprmyw91hm5\">也许用户无权导航到目标组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wh4by0jx3gtei7gag1r1kdmw\">也许用户必须先登录（\n<em>身份验证</em>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j0dytidtoz6b52l1qyh66twy\">也许你应该在显示目标组件之前获取一些数据。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1b7msrwynuq9fefmv0pibynlw\">你可能希望在离开组件之前保存未完成的更改。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63uxbqcowfk5fcmbllkap248j\">你可能会询问用户是否可以丢弃未完成的更改而不是保存它们。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avs2bvxt8treaht4iasfyjmzj\">你可以在路由配置中添加\n<em>守卫</em>来处理这些情况。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77i4de6k98fivgg3iw6ej9kg2\">守卫的返回值控制路由器的行为：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beutt20b0oo6577h9ha8ukaxh\">如果它返回 \n<code>true</code>，则导航过程继续。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25d53udkwdt9w382j0gsl522u\">如果它返回 \n<code>false</code>，则导航过程停止，用户将停留在当前位置。</li>\n</ul>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euywu5ol22cgy6flydyy0qgsk\">守卫还可以告诉路由器导航到其他地方，从而有效地取消当前导航。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4233ne5uvhzl0jy7cfh0mgh9f\">守卫\n<em>可能</em>会同步返回其布尔值答案。 但在许多情况下，守卫无法同步生成答案。 守卫可能会询问用户问题，将更改保存到服务器或获取最新数据。 这些都是异步操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85lhek5avs4m3lltthojm2vph\">因此，路由守卫可以返回 \n<code>Observable&lt;boolean&gt;</code> 或 \n<code>Promise&lt;boolean&gt;</code>，路由器将等待可观察者求解为 \n<code>true</code> 或 \n<code>false</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ol2rlrb90s4irvnloh7n3p51\">路由器支持多个守卫接口：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drbeuwnwvu4tvdnkeoi8yniyx\"><a href=\"api/router/CanActivate\"><code>CanActivate</code></a> 用于调解\n<em>到</em>路由的导航。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5s7214kkywib5wwo0dstu5qa8\"><a href=\"api/router/CanActivateChild\"><code>CanActivateChild</code></a> 用于调解\n<em>到</em>子路由的导航。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rikxsskegkfbondc3ijuiccx\"><a href=\"api/router/CanDeactivate\"><code>CanDeactivate</code></a> 用于调解\n<em>离开</em>当前路由的导航。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2gcuswh9cmnehfksb6s7hqky\"><a href=\"api/router/Resolve\"><code>Resolve</code></a> 用于在路由激活\n<em>之前</em>执行路由数据检索。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e13819anqfbvpug3shq7t7yd\"><a href=\"api/router/CanLoad\"><code>CanLoad</code></a> 用于调解\n<em>到</em>\n<em>异步</em>加载的特性模块的导航。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"255bvperkickktawfriqj25zz\">你可以在路由层次结构的每个级别设置多个守卫。 路由器首先检查 \n<code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 和 \n<code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 守卫，从最深的子路由到顶部。 然后，它从上到下检查 \n<code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 守卫，直到最深的子路由。如果特性模块 是异步加载的，则在加载模块之前会检查 \n<code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫。 如果\n<em>任何</em>守卫返回 false，则将取消尚未完成的待处理守卫， 并且整个导航将被取消。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xb5x6xqr4hjx6ocrel8fh950\">接下来的几个部分中有一些示例。</p>\n<a id=\"can-activate-guard\"></a>\n<h3 id=\"canactivate-requiring-authentication\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70blcjy10z2bil5csfkoclny2\"><i class=\"material-icons\">link</i><em>CanActivate</em>：要求身份验证</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuvoa54g85rio1agsbdv53p8a\">应用通常会根据用户的身份限制对某个功能区域的访问。 你可以只允许已认证的用户或具有特定角色的用户访问。 你也可以在用户帐户激活之前阻止或限制访问。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qfzvc7mxqmvry8gt12qvbmdu\"><code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 守卫是管理这些导航业务规则的工具。</p>\n<h4 id=\"add-an-admin-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co7qet79bchbp992voeqlhjfa\"><i class=\"material-icons\">link</i>添加一个管理员功能模块</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlwknchvizoqaqab4kkat3db0\">在下一节中，你将使用一些新的\n<em>管理</em>功能扩展危机中心。 这些功能尚未定义。 但你可以先添加一个名为 \n<code>AdminModule</code> 的新功能模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gk2wguhryiovajisjh2xoxvi\">创建一个包含功能模块文件、路由配置文件和支持组件的 \n<code>admin</code> 文件夹。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2t1jik43bcathr17lpgseeleo\">管理员功能文件结构如下：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src/app/admin\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      admin-dashboard.component.ts\n    </div>\n    <div class=\"file\">\n      admin.component.ts\n    </div>\n    <div class=\"file\">\n      admin.module.ts\n    </div>\n    <div class=\"file\">\n      admin-routing.module.ts\n    </div>\n    <div class=\"file\">\n      manage-crises.component.ts\n    </div>\n    <div class=\"file\">\n      manage-heroes.component.ts\n    </div>\n  </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cemg6pchuc91jbde4cxgyh956\">管理员功能模块包含用于在功能模块内进行路由的 \n<code>AdminComponent</code>，一个仪表盘路由和两个用于管理危机和英雄的未完成组件。</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/admin/admin-dashboard.component.ts\" path=\"router/src/app/admin/admin-dashboard.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template:  `\n    &lt;p&gt;Dashboard&lt;/p&gt;\n  `\n})\nexport class AdminDashboardComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/admin/admin.component.ts\" path=\"router/src/app/admin/admin.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template:  `\n    &lt;h3&gt;ADMIN&lt;/h3&gt;\n    &lt;nav&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"\n        [routerLinkActiveOptions]=\"{ exact: true }\"&gt;Dashboard&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./crises\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Manage Crises&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Manage Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;/nav&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  `\n})\nexport class AdminComponent {\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/admin/admin.module.ts\" path=\"router/src/app/admin/admin.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\n\nimport { AdminComponent }           from './admin.component';\nimport { AdminDashboardComponent }  from './admin-dashboard.component';\nimport { ManageCrisesComponent }    from './manage-crises.component';\nimport { ManageHeroesComponent }    from './manage-heroes.component';\n\nimport { AdminRoutingModule }       from './admin-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    AdminRoutingModule\n  ],\n  declarations: [\n    AdminComponent,\n    AdminDashboardComponent,\n    ManageCrisesComponent,\n    ManageHeroesComponent\n  ]\n})\nexport class AdminModule {}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/admin/manage-crises.component.ts\" path=\"router/src/app/admin/manage-crises.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template:  `\n    &lt;p&gt;Manage your crises here&lt;/p&gt;\n  `\n})\nexport class ManageCrisesComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/admin/manage-heroes.component.ts\" path=\"router/src/app/admin/manage-heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template:  `\n    &lt;p&gt;Manage your heroes here&lt;/p&gt;\n  `\n})\nexport class ManageHeroesComponent { }\n\n\n</code-pane>\n\n</code-tabs>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5p0jp2ql4hzzlqmth8nz78lgp\">由于管理员仪表盘 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 是 \n<code>AdminComponent</code> 中的一个空路径路由，因此它 被认为与管理员功能区域内的任何路由匹配。 你只希望当用户访问该路由时，\n<code>Dashboard</code> 链接处于活动状态。 向 \n<code>Dashboard</code> routerLink 添加一个额外的绑定， \n<code>[routerLinkActiveOptions]=\"{ exact: true }\"</code>，当用户导航到 \n<code>/admin</code> URL 时，而不是导航到任何子路由时，将 \n<code>./</code> 链接标记为活动状态。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t5xjlmxb7qgrwweg3kbmebo1\">初始管理员路由配置：</p>\n<code-example path=\"router/src/app/admin/admin-routing.module.1.ts\" linenums=\"false\" title=\"src/app/admin/admin-routing.module.ts (admin routing)\" region=\"admin-routes\">\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    children: [\n      {\n        path: '',\n        children: [\n          { path: 'crises', component: ManageCrisesComponent },\n          { path: 'heroes', component: ManageHeroesComponent },\n          { path: '', component: AdminDashboardComponent }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AdminRoutingModule {}\n\n</code-example>\n<a id=\"component-less-route\"></a>\n<h3 id=\"component-less-route-grouping-routes-without-a-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"538ehyfgyl1v7dvpn5odkt3ha\"><i class=\"material-icons\">link</i>无组件路由：对没有组件的路由进行分组</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dk5bhdln241taofvc8geko3sm\">查看 \n<code>AdminComponent</code> 下的子路由，它有一个 \n<code>path</code> 和一个 \n<code>children</code> 属性，但它没有使用 \n<code>component</code>。 你在配置中没有犯错。 你定义了一个\n<em>无组件</em>路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kds493eby9cggthdvqwnydpf\">目标是在 \n<code>admin</code> 路径下对 \n<code>Crisis Center</code> 管理路由进行分组。 你不需要组件来完成它。 \n<em>无组件</em>路由使 \n<a href=\"guide/router#can-activate-child-guard\">保护子路由</a> 更容易。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70sro01vmq6lg1zv8qo87htne\">接下来，将 \n<code>AdminModule</code> 导入到 \n<code>app.module.ts</code> 中，并将其添加到 \n<code>imports</code> 数组中 以注册管理员路由。</p>\n<code-example path=\"router/src/app/app.module.4.ts\" linenums=\"false\" title=\"src/app/app.module.ts (admin module)\" region=\"admin-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> }   from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }            from './app.component';\nimport { PageNotFoundComponent }   from './not-found.component';\n\nimport { AppRoutingModule }        from './app-routing.module';\nimport { HeroesModule }            from './heroes/heroes.module';\nimport { CrisisCenterModule }      from './crisis-center/crisis-center.module';\nimport { AdminModule }             from './admin/admin.module';\n\nimport { DialogService }           from './dialog.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    CrisisCenterModule,\n    AdminModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    PageNotFoundComponent\n  ],\n  providers: [\n    DialogService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22qwyu92hklzv7300i87r69vy\">向 \n<code>AppComponent</code> 外壳添加一个“Admin”链接，以便用户可以访问此功能。</p>\n<code-example path=\"router/src/app/app.component.5.ts\" linenums=\"false\" title=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Admin&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n  &lt;/nav&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  `\n\n</code-example>\n<a id=\"guard-admin-feature\"></a>\n<h4 id=\"guard-the-admin-feature\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lsopkvc37ts0hlpk2h9knuv7\"><i class=\"material-icons\">link</i>保护管理员功能</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mgxqqblg7ecsio25ighpa7hk\">目前，\n<em>Crisis Center</em> 中的每个路由都对所有人开放。 新的\n<em>admin</em> 功能应该只对已认证的用户开放。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7xzzn25k5a6khdznv4s57fmt\">你可以在用户登录之前隐藏链接。但这很棘手，也很难维护。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"624psn9ye46lifhfgv20gjfcv\">相反，你将编写一个 \n<code>canActivate()</code> 守卫方法，当匿名用户尝试进入管理员区域时，将其重定向到 登录页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j85ea0qdyo900hgmmys40471\">这是一个通用守卫——你可以想象其他需要已认证用户的功能——因此你将在应用程序根文件夹中创建一个 \n<code>auth-guard.service.ts</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50ro3053nh1di2xxn1g1rlw5n\">目前，你只关心守卫的工作原理，因此第一个版本没有做任何有用的事情。 它只是记录到控制台并立即 \n<code>return</code> true，允许导航继续进行：</p>\n<code-example path=\"router/src/app/auth-guard.service.1.ts\" linenums=\"false\" title=\"src/app/auth-guard.service.ts (excerpt)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }     from '@angular/core';\nimport { <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a> }    from '@angular/router';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class AuthGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a> {\n  canActivate() {\n    console.log('AuthGuard#canActivate called');\n    return true;\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2h5luvvhyab3bfn55mjinglq4\">接下来，打开 \n<code>admin-routing.module.ts</code>，导入 \n<code>AuthGuard</code> 类，并 使用引用它的 \n<code>canActivate</code> 守卫属性更新管理员路由：</p>\n<code-example path=\"router/src/app/admin/admin-routing.module.2.ts\" linenums=\"false\" title=\"src/app/admin/admin-routing.module.ts (guarded admin route)\" region=\"admin-route\">\nimport { AuthGuard }                from '../auth-guard.service';\n\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    canActivate: [AuthGuard],\n    children: [\n      {\n        path: '',\n        children: [\n          { path: 'crises', component: ManageCrisesComponent },\n          { path: 'heroes', component: ManageHeroesComponent },\n          { path: '', component: AdminDashboardComponent }\n        ],\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AdminRoutingModule {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k3x6c3sehjllvgxa8i1qkesx\">管理员功能现在受到守卫的保护，尽管保护得很差。</p>\n<a id=\"teach-auth\"></a>\n<h4 id=\"teach-authguard-to-authenticate\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4ay6eldicpuyigonsgbef7y4\"><i class=\"material-icons\">link</i>教\n<em>AuthGuard</em> 进行认证</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ah529p0l5vo7o7y8813e9jbcu\">让 \n<code>AuthGuard</code> 至少假装进行认证。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tm9g34omig6tuji2m1r2dkl5\"><code>AuthGuard</code> 应该调用一个应用程序服务，该服务可以登录用户并保留有关当前用户的信息。 这是一个演示 \n<code>AuthService</code>：</p>\n<code-example path=\"router/src/app/auth.service.ts\" linenums=\"false\" title=\"src/app/auth.service.ts (excerpt)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/delay';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class AuthService {\n  isLoggedIn = false;\n\n  // store the URL so we can redirect after logging in\n  redirectUrl: string;\n\n  login(): Observable&lt;boolean&gt; {\n    return Observable.of(true).delay(1000).do(val =&gt; this.isLoggedIn = true);\n  }\n\n  logout(): void {\n    this.isLoggedIn = false;\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"965swatdlfwdwg7ki8lllwfmr\">虽然它实际上并没有登录，但它拥有你进行此讨论所需的内容。 它有一个 \n<code>isLoggedIn</code> 标志，用于告诉你用户是否已认证。 它的 \n<code>login</code> 方法通过返回一个 在短暂暂停后成功求解的可观察者来模拟对外部服务的 API 调用。 \n<code>redirectUrl</code> 属性将存储尝试的 URL，以便你可以在认证后导航到它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckxc6kmyjj6cho4idq0pg1bmp\">修改 \n<code>AuthGuard</code> 以调用它。</p>\n<code-example path=\"router/src/app/auth-guard.service.2.ts\" linenums=\"false\" title=\"src/app/auth-guard.service.ts (v2)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }       from '@angular/core';\nimport {\n  <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n  <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>\n}                           from '@angular/router';\nimport { AuthService }      from './auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class AuthGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a> {\n  constructor(private authService: AuthService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  canActivate(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): boolean {\n    let url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n\n  checkLogin(url: string): boolean {\n    if (this.authService.isLoggedIn) { return true; }\n\n    // Store the attempted URL for redirecting\n    this.authService.redirectUrl = url;\n\n    // Navigate to the login page with extras\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i5wzirb6ggtr6v7eb7wczgpw\">请注意，你在构造函数中\n<em>注入</em>了 \n<code>AuthService</code> 和 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。 你还没有提供 \n<code>AuthService</code>，但很高兴知道你可以在路由守卫中注入有用的服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cms47gpi0e8ibs9sbasujahyg\">此守卫返回一个同步布尔结果。 如果用户已登录，它将返回 true，导航将继续进行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xci9sjp1246tpytezz7ph8r\"><code><a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a></code> 包含将要激活的\n<em>未来</em>路由，而 \n<code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code> 包含应用程序的\n<em>未来</em> \n<code><a href=\"api/router/RouterState\" class=\"code-anchor\">RouterState</a></code>，如果你通过了守卫检查。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mlnvsty5tyxgdy9oy0pmz278\">如果用户未登录，你将使用 \n<code><a href=\"api/router/RouterStateSnapshot#url\" class=\"code-anchor\">RouterStateSnapshot.url</a></code> 存储用户来自的尝试 URL，并 告诉路由器导航到登录页面——你还没有创建的页面。 此辅助导航会自动取消当前导航；\n<code>checkLogin()</code> 返回 \n<code>false</code> 只是为了明确这一点。</p>\n<a id=\"add-login-component\"></a>\n<h4 id=\"add-the-logincomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btcvgw17486pm7mhh3ks3eu2h\"><i class=\"material-icons\">link</i>添加\n<em>LoginComponent</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"g7n5fb388mro4i8kjts6anlv\">你需要一个 \n<code>LoginComponent</code> 供用户登录应用程序。登录后，你将重定向 到存储的 URL（如果可用），或使用默认 URL。 此组件或将其连接到路由配置的方式没有任何新内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ao00jvtzgqtnvkswuoj2yg77h\">在 \n<code>login-routing.module.ts</code> 中注册一个 \n<code>/login</code> 路由，并将必要的提供者添加到 \n<code>providers</code> 数组中。在 \n<code>app.module.ts</code> 中，导入 \n<code>LoginComponent</code> 并将其添加到 \n<code>AppModule</code> \n<code>declarations</code> 中。 还将 \n<code>LoginRoutingModule</code> 导入并添加到 \n<code>AppModule</code> 导入中。</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"router/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\n\nimport { AppComponent }            from './app.component';\nimport { AppRoutingModule }        from './app-routing.module';\n\nimport { HeroesModule }            from './heroes/heroes.module';\nimport { ComposeMessageComponent } from './compose-message.component';\nimport { LoginRoutingModule }      from './login-routing.module';\nimport { LoginComponent }          from './login.component';\nimport { PageNotFoundComponent }   from './not-found.component';\n\nimport { DialogService }           from './dialog.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    LoginRoutingModule,\n    AppRoutingModule,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    LoginComponent,\n    PageNotFoundComponent\n  ],\n  providers: [\n    DialogService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n  // Diagnostic only: inspect router configuration\n  constructor(router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    console.log('<a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>: ', JSON.stringify(router.config, undefined, 2));\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/login.component.ts\" path=\"router/src/app/login.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> }   from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> }      from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;h2&gt;LOGIN&lt;/h2&gt;\n    &lt;p&gt;{{message}}&lt;/p&gt;\n    &lt;p&gt;\n      &lt;button (click)=\"login()\"  *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!authService.isLoggedIn\"&gt;Login&lt;/button&gt;\n      &lt;button (click)=\"logout()\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"authService.isLoggedIn\"&gt;Logout&lt;/button&gt;\n    &lt;/p&gt;`\n})\nexport class LoginComponent {\n  message: string;\n\n  constructor(public authService: AuthService, public router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    this.setMessage();\n  }\n\n  setMessage() {\n    this.message = 'Logged ' + (this.authService.isLoggedIn ? 'in' : 'out');\n  }\n\n  login() {\n    this.message = 'Trying to log in ...';\n\n    this.authService.login().subscribe(() =&gt; {\n      this.setMessage();\n      if (this.authService.isLoggedIn) {\n        // Get the redirect URL from our auth service\n        // If no redirect has been set, use the default\n        let redirect = this.authService.redirectUrl ? this.authService.redirectUrl : '/crisis-center/admin';\n\n        // Redirect the user\n        this.router.navigate([redirect]);\n      }\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n    this.setMessage();\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/login-routing.module.ts\" path=\"router/src/app/login-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\nimport { AuthGuard }            from './auth-guard.service';\nimport { AuthService }          from './auth.service';\nimport { LoginComponent }       from './login.component';\n\nconst loginRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'login', component: LoginComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(loginRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ],\n  providers: [\n    AuthGuard,\n    AuthService\n  ]\n})\nexport class LoginRoutingModule {}\n\n\n</code-pane>\n\n</code-tabs>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oyg496zj9qw5ji7gwmz6mmho\">守卫及其所需的 service provider \n<em>必须</em> 在模块级别提供。这允许 路由器在导航过程中从 \n<code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 中检索这些服务。 相同的规则适用于 \n<a href=\"guide/router#asynchronous-routing\">异步</a> 加载的功能模块。</p>\n</div>\n<a id=\"can-activate-child-guard\"></a>\n<h3 id=\"canactivatechild-guarding-child-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kpbkgky7r3k29aigu8ghd9ng\"><i class=\"material-icons\">link</i><em>CanActivateChild</em>：保护子路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7azn4vrj9htjdhvxte9iltv8z\">你也可以使用 \n<code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 守卫来保护子路由。 \n<code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 守卫类似于 \n<code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 守卫。 关键区别在于它在激活任何子路由\n<em>之前</em>运行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14zdstruadwas1tkgukue89vj\">你已经保护了管理员功能模块免受未经授权的访问。 你应该也保护功能模块\n<em>内部</em>的子路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"375v5y9rqkl7e9zpmwsxmddsm\">扩展 \n<code>AuthGuard</code> 以在 \n<code>admin</code> 路由之间导航时进行保护。 打开 \n<code>auth-guard.service.ts</code>，并将 \n<code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 接口添加到从路由包导入的令牌中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jexezzur8ztk4sc8yp28xpcs\">接下来，实现 \n<code>canActivateChild()</code> 方法，它接受与 \n<code>canActivate()</code> 方法相同的参数： 一个 \n<code><a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a></code> 和 \n<code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code>。 \n<code>canActivateChild()</code> 方法可以返回一个 \n<code>Observable&lt;boolean&gt;</code> 或 \n<code>Promise&lt;boolean&gt;</code> 用于 异步检查，以及一个 \n<code>boolean</code> 用于同步检查。 此方法返回一个 \n<code>boolean</code>：</p>\n<code-example path=\"router/src/app/auth-guard.service.3.ts\" linenums=\"false\" title=\"src/app/auth-guard.service.ts (excerpt)\" region=\"can-activate-child\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }       from '@angular/core';\nimport {\n  <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n  <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>,\n  <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>\n}                           from '@angular/router';\nimport { AuthService }      from './auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class AuthGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a> {\n  constructor(private authService: AuthService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  canActivate(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): boolean {\n    let url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n\n  canActivateChild(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): boolean {\n    return this.canActivate(route, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>);\n  }\n\n/* . . . */\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1u9s30vs9cdbq5rmnid5l5g6n\">将相同的 \n<code>AuthGuard</code> 添加到 \n<code>component-less</code> 管理员路由中，以一次性保护所有其他子路由， 而不是将 \n<code>AuthGuard</code> 添加到每个路由中。</p>\n<code-example path=\"router/src/app/admin/admin-routing.module.3.ts\" linenums=\"false\" title=\"src/app/admin/admin-routing.module.ts (excerpt)\" region=\"can-activate-child\">\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    canActivate: [AuthGuard],\n    children: [\n      {\n        path: '',\n        canActivateChild: [AuthGuard],\n        children: [\n          { path: 'crises', component: ManageCrisesComponent },\n          { path: 'heroes', component: ManageHeroesComponent },\n          { path: '', component: AdminDashboardComponent }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AdminRoutingModule {}\n\n</code-example>\n<a id=\"can-deactivate-guard\"></a>\n<h3 id=\"candeactivate-handling-unsaved-changes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"326px9wpsseyuorsxassn7z13\"><i class=\"material-icons\">link</i><em>CanDeactivate</em>：处理未保存的更改</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9q3ake7ialqi7s0f40avd2kya\">回到“Heroes”工作流程，应用程序会毫不犹豫或验证地立即接受对英雄的任何更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wjo4rda5plft6q6n9q98p49m\">在现实世界中，你可能需要累积用户的更改。 你可能需要跨字段进行验证。 你可能需要在服务器上进行验证。 你可能需要将更改保留在待处理状态，直到用户\n<em>作为一个组</em>确认它们，或者 取消并恢复所有更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tl0673489rljpv88i64yiy4v\">当用户导航离开时，你如何处理未经批准的未保存更改？ 你不能只是离开，冒着丢失用户更改的风险；那将是一次糟糕的体验。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blniek7xw4jms7bz967mvys15\">最好暂停，让用户决定该怎么做。 如果用户取消，你将保持原样，并允许进行更多更改。 如果用户批准，应用程序可以保存。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gespbpgsemcivg8s222e1wnf\">你仍然可能延迟导航，直到保存成功。 如果你让用户立即移动到下一个屏幕，并且 保存失败（也许数据被判定为无效），你将丢失错误的上下文。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72avd1h125j73954xmqnqbqk8\">你不能在等待服务器时阻塞——这在浏览器中是不可能的。 你需要在等待服务器 返回其答案时异步停止导航。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99cn1k0rcj2gqceh2lalztnqp\">你需要 \n<code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 守卫。</p>\n<a id=\"cancel-save\"></a>\n<h3 id=\"cancel-and-save\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yaodn3js0adzkjlr6s2l9bmk\"><i class=\"material-icons\">link</i>取消和保存</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6swhdl5tvuy9c4u02oz4r7p5\">此示例应用不与服务器通信。幸运的是，你还有另一种方法来演示异步路由钩子。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cvprcyz4jc4pbgp2eqqtr9k5\">用户在 \n<code>CrisisDetailComponent</code> 中更新危机信息。与 \n<code>HeroDetailComponent</code> 不同，用户更改不会立即更新危机实体。相反，应用会在用户按下\n<em>保存</em>按钮时更新实体，并在用户按下\n<em>取消</em>按钮时丢弃更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a34etgh2940ihql6u3jixv4nk\">保存或取消后，这两个按钮都会导航回危机列表。</p>\n<code-example path=\"router/src/app/crisis-center/crisis-detail.component.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis-detail.component.ts (cancel and save methods)\" region=\"cancel-save\">\ncancel() {\n  this.gotoCrises();\n}\n\nsave() {\n  this.crisis.name = this.editName;\n  this.gotoCrises();\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"en5nbux7eetkgqek5kli6hllv\">如果用户尝试在未保存或取消的情况下导航离开会怎样？用户可以按浏览器的后退按钮或点击英雄链接。这两个操作都会触发导航。应用应该自动保存或取消吗？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kurbw1z3z13k1fqscg9w8seh\">此演示既不保存也不取消。相反，它会要求用户在\n<em>异步等待用户答案</em>的确认对话框中明确做出选择。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba469km5viclgg1kzxyzfb6pe\">你可以使用同步阻塞代码来等待用户的答案。通过异步等待用户的答案，应用将更具响应性，并且可以执行其他工作。异步等待用户就像异步等待服务器一样。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3crn570k747ncqky4x4namak5\"><code>DialogService</code>（在 \n<code>AppModule</code> 中提供，供整个应用使用）负责询问。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1nll1fck2ye8h2buuuun08fvb\">它返回一个 \n<code>Observable</code>，当用户最终决定要做什么时，该 \n<code>Observable</code> 会\n<em>求解</em>：丢弃更改并导航离开（\n<code>true</code>）或保留待处理的更改并留在危机编辑器中（\n<code>false</code>）。</p>\n<a id=\"CanDeactivate\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjoundqhqxj1favo111xuww9n\">创建一个\n<em>守卫</em>，检查组件（任何组件）中是否存在 \n<code>canDeactivate()</code> 方法。\n<code>CrisisDetailComponent</code> 将具有此方法。但守卫不必知道这一点。守卫不应该知道任何组件的停用方法的细节。它只需要检测组件是否具有 \n<code>canDeactivate()</code> 方法并调用它。这种方法使守卫可重用。</p>\n<code-example path=\"router/src/app/can-deactivate-guard.service.ts\" title=\"src/app/can-deactivate-guard.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }    from '@angular/core';\nimport { <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a> } from '@angular/router';\nimport { Observable }    from 'rxjs/Observable';\n\nexport interface CanComponentDeactivate {\n canDeactivate: () =&gt; Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CanDeactivateGuard implements <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>&lt;CanComponentDeactivate&gt; {\n  canDeactivate(component: CanComponentDeactivate) {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76kkej4ry6610xsxzs5tvqabr\">或者，你可以为 \n<code>CrisisDetailComponent</code> 创建一个特定于组件的 \n<code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 守卫。\n<code>canDeactivate()</code> 方法为你提供了当前的 \n<code>component</code> 实例、当前的 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 以及 \n<code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code>（如果你需要访问一些外部信息）。如果你只想将此守卫用于此组件，并且需要获取组件的属性或确认路由器是否应该允许导航离开它，这将很有用。</p>\n<code-example path=\"router/src/app/can-deactivate-guard.service.1.ts\" linenums=\"false\" title=\"src/app/can-deactivate-guard.service.ts (component-specific)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }           from '@angular/core';\nimport { Observable }           from 'rxjs/Observable';\nimport { <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>,\n         <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n         <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> }  from '@angular/router';\n\nimport { CrisisDetailComponent } from './crisis-center/crisis-detail.component';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CanDeactivateGuard implements <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>&lt;CrisisDetailComponent&gt; {\n\n  canDeactivate(\n    component: CrisisDetailComponent,\n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>\n  ): Observable&lt;boolean&gt; | boolean {\n    // Get the Crisis Center ID\n    console.log(route.paramMap.get('id'));\n\n    // Get the current URL\n    console.log(state.url);\n\n    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n    if (!component.crisis || component.crisis.name === component.editName) {\n      return true;\n    }\n    // Otherwise ask the user with the dialog service and return its\n    // observable which resolves to true or false when the user decides\n    return component.dialogService.confirm('Discard changes?');\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9p491kjc0fbkc5qqo58n7xt2z\">回顾 \n<code>CrisisDetailComponent</code>，它实现了未保存更改的确认工作流程。</p>\n<code-example path=\"router/src/app/crisis-center/crisis-detail.component.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis-detail.component.ts (excerpt)\" region=\"canDeactivate\">\ncanDeactivate(): Observable&lt;boolean&gt; | boolean {\n  // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n  if (!this.crisis || this.crisis.name === this.editName) {\n    return true;\n  }\n  // Otherwise ask the user with the dialog service and return its\n  // observable which resolves to true or false when the user decides\n  return this.dialogService.confirm('Discard changes?');\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2mrgftynmb86ty6vgwbjeteh\">请注意，\n<code>canDeactivate()</code> 方法\n<em>可以</em>同步返回；如果不存在危机或没有待处理的更改，它会立即返回 \n<code>true</code>。但它也可以返回一个 \n<code>Promise</code> 或一个 \n<code>Observable</code>，路由器将等待它求解为真值（导航）或假值（保持原位）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38zan7dn660rw7w2y36d78uw8\">使用 \n<code>canDeactivate</code> 数组属性，将 \n<code>Guard</code> 添加到 \n<code>crisis-center-routing.module.ts</code> 中的危机详细信息路由。</p>\n<code-example path=\"router/src/app/crisis-center/crisis-center-routing.module.3.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis-center-routing.module.ts (can deactivate guard)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home.component';\nimport { CrisisListComponent }       from './crisis-list.component';\nimport { CrisisCenterComponent }     from './crisis-center.component';\nimport { CrisisDetailComponent }     from './crisis-detail.component';\n\nimport { CanDeactivateGuard }    from '../can-deactivate-guard.service';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    redirectTo: '/crisis-center',\n    pathMatch: 'full'\n  },\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [CanDeactivateGuard]\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amqz1k9ot23ahek0l5dnbs3i\">将 \n<code>Guard</code> 添加到主 \n<code>AppRoutingModule</code> 的 \n<code>providers</code> 数组中，以便 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 可以在导航过程中注入它。</p>\n<code-example path=\"router/src/app/app-routing.module.4.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }              from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> }  from '@angular/router';\n\nimport { ComposeMessageComponent } from './compose-message.component';\nimport { CanDeactivateGuard }      from './can-deactivate-guard.service';\nimport { PageNotFoundComponent }   from './not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'compose',\n    component: ComposeMessageComponent,\n    outlet: 'popup'\n  },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ],\n  providers: [\n    CanDeactivateGuard\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97t84lobmonzk2j93pxsquonk\">现在，你已经为用户提供了防止未保存更改的保护措施。 \n<a id=\"Resolve\"></a></p>\n<a id=\"resolve-guard\"></a>\n<h3 id=\"resolve-pre-fetching-component-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5z3t14a11c72tgj5qq6ahlza1\"><i class=\"material-icons\">link</i><em>求解</em>：预取组件数据</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xl2wao7c2shvpvdz4ne28pfz\">在 \n<code>Hero Detail</code> 和 \n<code>Crisis Detail</code> 中，应用一直等到路由被激活才获取相应的英雄或危机。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asg7wcpt8eq2c5g8nr9jo1ftm\">这很有效，但还有更好的方法。如果你使用的是真实世界的 API，则在从服务器返回要显示的数据之前可能会有延迟。你不想在等待数据时显示一个空白组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wejqk83rj47hbtkdbr71jdt9\">最好从服务器预取数据，以便在路由被激活时立即准备好。这也允许你在路由到组件之前处理错误。没有必要为没有记录的 \n<code>id</code> 导航到危机详细信息。最好将用户送回 \n<code>Crisis List</code>，该列表只显示有效的危机中心。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9288uqicmph6v46fbx2uz08qq\">总之，你希望延迟渲染路由组件，直到所有必要的数据都已获取。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7403jntgzx2d46etre980xgmn\">你需要一个\n<em>解析器</em>。</p>\n<a id=\"fetch-before-navigating\"></a>\n<h3 id=\"fetch-data-before-navigating\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezj19bd9srevtaigkd461zet6\"><i class=\"material-icons\">link</i>在导航之前获取数据</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfwly4ie535znohp5l8nh478j\">目前，\n<code>CrisisDetailComponent</code> 检索选定的危机。如果找不到危机，它会导航回危机列表视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdfdawgop49wh400vt9z3eqy4\">如果所有这些都在路由被激活之前先处理，体验可能会更好。\n<code>CrisisDetailResolver</code> 服务可以在\n<em>激活路由并创建 <code>CrisisDetailComponent</code> 之前</em>检索 \n<code>Crisis</code> 或在 \n<code>Crisis</code> 不存在的情况下导航离开。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l2pm3r04fpfvhiw11vs1i0qt\">在 \n<code>Crisis Center</code> 特性区域内创建 \n<code>crisis-detail-resolver.service.ts</code> 文件。</p>\n<code-example path=\"router/src/app/crisis-center/crisis-detail-resolver.service.ts\" title=\"src/app/crisis-center/crisis-detail-resolver.service.ts\">\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/take';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }             from '@angular/core';\nimport { Observable }             from 'rxjs/Observable';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>, <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>,\n         <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a> } from '@angular/router';\n\nimport { Crisis, CrisisService }  from './crisis.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CrisisDetailResolver implements <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&lt;Crisis&gt; {\n  constructor(private cs: CrisisService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  resolve(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): Observable&lt;Crisis&gt; {\n    let id = route.paramMap.get('id');\n\n    return this.cs.getCrisis(id).take(1).map(crisis =&gt; {\n      if (crisis) {\n        return crisis;\n      } else { // id not found\n        this.router.navigate(['/crisis-center']);\n        return null;\n      }\n    });\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13dlu7gs5qw10dm3ri2szu66f\">将 \n<code>CrisisDetailComponent.ngOnInit</code> 中的危机检索逻辑的相关部分移到 \n<code>CrisisDetailResolver</code> 中。导入 \n<code>Crisis</code> 模型、\n<code>CrisisService</code> 以及 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>，以便你可以在无法获取危机的情况下导航到其他地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6yttvf39d1addnqkaq5cwow\">要明确。使用 \n<code>Crisis</code> 类型实现 \n<code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 接口。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eb0is3w5oo5ffzkeu9dq4limo\">注入 \n<code>CrisisService</code> 和 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 并实现 \n<code>resolve()</code> 方法。该方法可以返回一个 \n<code>Promise</code>、一个 \n<code>Observable</code> 或一个同步返回值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu45gw8lqe1ul50ic3dyil9n3\"><code>CrisisService.getCrisis</code> 方法返回一个 Observable。返回该 Observable 以防止路由在获取数据之前加载。\n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 守卫要求 \n<code>Observable</code> \n<code>完成</code>，这意味着它已经发出了所有值。你使用 \n<code>take</code> 操作符并将其参数设置为 \n<code>1</code>，以确保 \n<code>Observable</code> 在从 \n<code>getCrisis</code> 方法返回的 \n<code>Observable</code> 中检索第一个值后完成。如果它没有返回有效的 \n<code>Crisis</code>，则将用户导航回 \n<code>CrisisListComponent</code>，取消之前正在进行的导航到 \n<code>CrisisDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5vg93yo061bq7amv1x1kj1no\">在 \n<code>crisis-center-routing.module.ts</code> 中导入此解析器，并将 \n<code>resolve</code> 对象添加到 \n<code>CrisisDetailComponent</code> 路由配置中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqlggy7xsfd0kismieqvilecz\">请记住将 \n<code>CrisisDetailResolver</code> 服务添加到 \n<code>CrisisCenterRoutingModule</code> 的 \n<code>providers</code> 数组中。</p>\n<code-example path=\"router/src/app/crisis-center/crisis-center-routing.module.4.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis-center-routing.module.ts (resolver)\" region=\"crisis-detail-resolver\">\nimport { CrisisDetailResolver }   from './crisis-detail-resolver.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ],\n  providers: [\n    CrisisDetailResolver\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy6hxb9bo0i7p10xmf2egayjv\"><code>CrisisDetailComponent</code> 不应该再获取危机。更新 \n<code>CrisisDetailComponent</code> 以从 \n<code>ActivatedRoute.data.crisis</code> 属性中获取危机；这就是你在重新配置路由时说它应该在的地方。当 \n<code>CrisisDetailComponent</code> 请求它时，它将出现在那里。</p>\n<code-example path=\"router/src/app/crisis-center/crisis-detail.component.ts\" linenums=\"false\" title=\"src/app/crisis-center/crisis-detail.component.ts (ngOnInit v2)\" region=\"ngOnInit\">\nngOnInit() {\n  this.route.data\n    .subscribe((data: { crisis: Crisis }) =&gt; {\n      this.editName = data.crisis.name;\n      this.crisis = data.crisis;\n    });\n}\n\n</code-example>\n<p><strong data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2khrakql5sejvju7sxkuozo9w\">三个关键点</strong></p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcqvwsqpq7x8ly9flz0nq65pi\">路由器的 \n<code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 接口是可选的。\n<code>CrisisDetailResolver</code> 不会继承自基类。路由器会查找该方法，如果找到就会调用它。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ps8lgz6lc3qf2c76lbrsuerp\">依赖路由器来调用解析器。不要担心用户可能以各种方式导航离开。那是路由器的任务。编写此类，让路由器从那里接管。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"162nwgi8r51oqjq6cznv5t3sv\">提供给路由器的 Observable \n<em>必须</em>完成。如果 Observable 未完成，导航将不会继续。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdoe8p8x3b1gd35b67j8n13nl\">此里程碑的相关\n<em>危机中心</em>代码如下。</p>\n<code-tabs>\n\n  <code-pane title=\"app.component.ts\" path=\"router/src/app/app.component.6.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Admin&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/login\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Login&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;/nav&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  `\n})\nexport class AppComponent {\n}\n\n\n</code-pane>\n\n  <code-pane title=\"crisis-center-home.component.ts\" path=\"router/src/app/crisis-center/crisis-center-home.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;p&gt;Welcome to the Crisis Center&lt;/p&gt;\n  `\n})\nexport class CrisisCenterHomeComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"crisis-center.component.ts\" path=\"router/src/app/crisis-center/crisis-center.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template:  `\n    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  `\n})\nexport class CrisisCenterComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"crisis-center-routing.module.ts\" path=\"router/src/app/crisis-center/crisis-center-routing.module.4.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home.component';\nimport { CrisisListComponent }       from './crisis-list.component';\nimport { CrisisCenterComponent }     from './crisis-center.component';\nimport { CrisisDetailComponent }     from './crisis-detail.component';\n\nimport { CanDeactivateGuard }     from '../can-deactivate-guard.service';\n\nimport { CrisisDetailResolver }   from './crisis-detail-resolver.service';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    redirectTo: '/crisis-center',\n    pathMatch: 'full'\n  },\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [CanDeactivateGuard],\n            resolve: {\n              crisis: CrisisDetailResolver\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ],\n  providers: [\n    CrisisDetailResolver\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-pane>\n\n  <code-pane title=\"crisis-list.component.ts\" path=\"router/src/app/crisis-center/crisis-list.component.ts\">\nimport 'rxjs/add/operator/switchMap';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> }        from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\n\nimport { Crisis, CrisisService } from './crisis.service';\nimport { Observable }            from 'rxjs/Observable';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;ul class=\"items\"&gt;\n      &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let crisis of crises$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\"\n        [class.selected]=\"crisis.id === selectedId\"&gt;\n        &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[crisis.id]\"&gt;\n          &lt;span class=\"badge\"&gt;{{ crisis.id }}&lt;/span&gt;{{ crisis.name }}\n        &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  `\n})\nexport class CrisisListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  crises$: Observable&lt;Crisis[]&gt;;\n  selectedId: number;\n\n  constructor(\n    private service: CrisisService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.crises$ = this.route.paramMap\n      .switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =&gt; {\n        this.selectedId = +params.get('id');\n        return this.service.getCrises();\n      });\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"crisis-detail.component.ts\" path=\"router/src/app/crisis-center/crisis-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { slideInDownAnimation }   from '../animations';\nimport { Crisis }         from './crisis.service';\nimport { DialogService }  from '../dialog.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n  &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"crisis\"&gt;\n    &lt;h3&gt;\"{{ editName }}\"&lt;/h3&gt;\n    &lt;div&gt;\n      &lt;label&gt;Id: &lt;/label&gt;{{ crisis.id }}&lt;/div&gt;\n    &lt;div&gt;\n      &lt;label&gt;Name: &lt;/label&gt;\n      &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"editName\" placeholder=\"name\"/&gt;\n    &lt;/div&gt;\n    &lt;p&gt;\n      &lt;button (click)=\"save()\"&gt;Save&lt;/button&gt;\n      &lt;button (click)=\"cancel()\"&gt;Cancel&lt;/button&gt;\n    &lt;/p&gt;\n  &lt;/div&gt;\n  `,\n  styles: ['input {width: 20em}'],\n  animations: [ slideInDownAnimation ]\n})\nexport class CrisisDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('@routeAnimation') routeAnimation = true;\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.display')   display = 'block';\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.position')  position = 'absolute';\n\n  crisis: Crisis;\n  editName: string;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n    public dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.route.data\n      .subscribe((data: { crisis: Crisis }) =&gt; {\n        this.editName = data.crisis.name;\n        this.crisis = data.crisis;\n      });\n  }\n\n  cancel() {\n    this.gotoCrises();\n  }\n\n  save() {\n    this.crisis.name = this.editName;\n    this.gotoCrises();\n  }\n\n  canDeactivate(): Observable&lt;boolean&gt; | boolean {\n    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n    if (!this.crisis || this.crisis.name === this.editName) {\n      return true;\n    }\n    // Otherwise ask the user with the dialog service and return its\n    // observable which resolves to true or false when the user decides\n    return this.dialogService.confirm('Discard changes?');\n  }\n\n  gotoCrises() {\n    let crisisId = this.crisis ? this.crisis.id : null;\n    // Pass along the crisis id if available\n    // so that the CrisisListComponent can select that crisis.\n    // Add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> totally useless `foo` parameter for kicks.\n    // Relative navigation back to the crises\n    this.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"crisis-detail-resolver.service.ts\" path=\"router/src/app/crisis-center/crisis-detail-resolver.service.ts\">\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/take';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }             from '@angular/core';\nimport { Observable }             from 'rxjs/Observable';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>, <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>,\n         <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a> } from '@angular/router';\n\nimport { Crisis, CrisisService }  from './crisis.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CrisisDetailResolver implements <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&lt;Crisis&gt; {\n  constructor(private cs: CrisisService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  resolve(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): Observable&lt;Crisis&gt; {\n    let id = route.paramMap.get('id');\n\n    return this.cs.getCrisis(id).take(1).map(crisis =&gt; {\n      if (crisis) {\n        return crisis;\n      } else { // id not found\n        this.router.navigate(['/crisis-center']);\n        return null;\n      }\n    });\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"crisis.service.ts\" path=\"router/src/app/crisis-center/crisis.service.ts\">\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/map';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nexport class Crisis {\n  constructor(public id: number, public name: string) { }\n}\n\nconst CRISES = [\n  new Crisis(1, 'Dragon Burning Cities'),\n  new Crisis(2, 'Sky Rains Great White Sharks'),\n  new Crisis(3, 'Giant Asteroid Heading For Earth'),\n  new Crisis(4, 'Procrastinators Meeting Delayed Again'),\n];\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CrisisService {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> nextCrisisId = 100;\n  private crises$: BehaviorSubject&lt;Crisis[]&gt; = new BehaviorSubject&lt;Crisis[]&gt;(CRISES);\n\n  getCrises() { return this.crises$; }\n\n  getCrisis(id: number | string) {\n    return this.getCrises()\n      .map(crises =&gt; crises.find(crisis =&gt; crisis.id === +id));\n  }\n\n}\n\n\n</code-pane>\n\n</code-tabs>\n<code-tabs>\n\n  <code-pane title=\"auth-guard.service.ts\" path=\"router/src/app/auth-guard.service.3.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }       from '@angular/core';\nimport {\n  <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n  <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>,\n  <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>\n}                           from '@angular/router';\nimport { AuthService }      from './auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class AuthGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a> {\n  constructor(private authService: AuthService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  canActivate(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): boolean {\n    let url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n\n  canActivateChild(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): boolean {\n    return this.canActivate(route, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>);\n  }\n\n  checkLogin(url: string): boolean {\n    if (this.authService.isLoggedIn) { return true; }\n\n    // Store the attempted URL for redirecting\n    this.authService.redirectUrl = url;\n\n    // Navigate to the login page\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"can-deactivate-guard.service.ts\" path=\"router/src/app/can-deactivate-guard.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }    from '@angular/core';\nimport { <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a> } from '@angular/router';\nimport { Observable }    from 'rxjs/Observable';\n\nexport interface CanComponentDeactivate {\n canDeactivate: () =&gt; Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;\n}\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CanDeactivateGuard implements <a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>&lt;CanComponentDeactivate&gt; {\n  canDeactivate(component: CanComponentDeactivate) {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<a id=\"query-parameters\"></a>\n<a id=\"fragment\"></a>\n<h3 id=\"query-parameters-and-fragments\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5ksju22p7nx3liolf5l34k7e\"><i class=\"material-icons\">link</i>查询参数和片段</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69fz2ts4wd358yt409oi2y6f0\">在 \n<a href=\"guide/router#optional-route-parameters\">路由参数</a> 示例中，你只处理了特定于路由的参数，但如果你想要对所有路由都可用的可选参数会怎样？这就是查询参数发挥作用的地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61odbbnrg5bu04jdhi6b8g9hk\"><a href=\"https://en.wikipedia.org/wiki/Fragment_identifier\">片段</a> 指的是页面上使用 \n<code>id</code> 属性标识的特定元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lycuwod13i2trdhifhmlatjd\">更新 \n<code>AuthGuard</code> 以提供一个 \n<code>session_id</code> 查询，该查询将在导航到另一个路由后保留。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crjbrz5ca2xhceh2su2qekvyf\">添加一个 \n<code>anchor</code> 元素，以便你可以跳转到页面上的某个特定位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8eh1486wzob66csr5tlesxmxr\">将 \n<code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code> 对象添加到将你导航到 \n<code>/login</code> 路由的 \n<code>router.navigate</code> 方法中。</p>\n<code-example path=\"router/src/app/auth-guard.service.4.ts\" linenums=\"false\" title=\"src/app/auth-guard.service.ts (v3)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> }       from '@angular/core';\nimport {\n  <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n  <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>,\n  <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>,\n  <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a>\n}                           from '@angular/router';\nimport { AuthService }      from './auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class AuthGuard implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>, <a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a> {\n  constructor(private authService: AuthService, private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {}\n\n  canActivate(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): boolean {\n    let url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n\n  canActivateChild(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): boolean {\n    return this.canActivate(route, <a href=\"api/animations/state\" class=\"code-anchor\">state</a>);\n  }\n\n  checkLogin(url: string): boolean {\n    if (this.authService.isLoggedIn) { return true; }\n\n    // Store the attempted URL for redirecting\n    this.authService.redirectUrl = url;\n\n    // Create <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> dummy session id\n    let sessionId = 123456789;\n\n    // Set our navigation extras object\n    // that contains our global <a href=\"api/animations/query\" class=\"code-anchor\">query</a> params and fragment\n    let navigationExtras: <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a> = {\n      queryParams: { 'session_id': sessionId },\n      fragment: 'anchor'\n    };\n\n    // Navigate to the login page with extras\n    this.router.navigate(['/login'], navigationExtras);\n    return false;\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24aa608yi6irjda7osv5e26pg\">你也可以在导航之间保留查询参数和片段，而无需在导航时再次提供它们。在 \n<code>LoginComponent</code> 中，你将在 \n<code>router.navigate</code> 函数中添加一个\n<em>对象</em>作为第二个参数，并提供 \n<code>queryParamsHandling</code> 和 \n<code>preserveFragment</code> 以将当前查询参数和片段传递到下一个路由。</p>\n<code-example path=\"router/src/app/login.component.ts\" linenums=\"false\" title=\"src/app/login.component.ts (preserve)\" region=\"preserve\">\n// Set our navigation extras object\n// that passes on our global <a href=\"api/animations/query\" class=\"code-anchor\">query</a> params and fragment\nlet navigationExtras: <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a> = {\n  queryParamsHandling: 'preserve',\n  preserveFragment: true\n};\n\n// Redirect the user\nthis.router.navigate([redirect], navigationExtras);\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"324gp5t9mwdw8772m1qntel7y\"><code>queryParamsHandling</code> 特性还提供了一个 \n<code>merge</code> 选项，该选项将在导航时保留并组合当前查询参数与任何提供的查询参数。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezooh0s4a6abzcr2466ll2snl\">由于你将在登录后导航到\n<em>管理仪表板</em>路由，因此你将更新它以处理查询参数和片段。</p>\n<code-example path=\"router/src/app/admin/admin-dashboard.component.2.ts\" linenums=\"false\" title=\"src/app/admin/admin-dashboard.component.ts (v2)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> }  from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> }     from '@angular/router';\nimport { Observable }         from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template:  `\n    &lt;p&gt;Dashboard&lt;/p&gt;\n\n    &lt;p&gt;Session ID: {{ sessionId | async }}&lt;/p&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> id=\"anchor\"&gt;&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;p&gt;Token: {{ token | async }}&lt;/p&gt;\n  `\n})\nexport class AdminDashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  sessionId: Observable&lt;string&gt;;\n  token: Observable&lt;string&gt;;\n\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  ngOnInit() {\n    // Capture the session ID if available\n    this.sessionId = this.route\n      .queryParamMap\n      .map(params =&gt; params.get('session_id') || 'None');\n\n    // Capture the fragment if available\n    this.token = this.route\n      .fragment\n      .map(fragment =&gt; fragment || 'None');\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43pn3ca6xfuwwqecatw8818ml\"><em>查询参数</em>和\n<em>片段</em>也可以通过 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务获得。就像\n<em>路由参数</em>一样，查询参数和片段以 \n<code>Observable</code> 的形式提供。更新后的\n<em>危机管理</em>组件使用 \n<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 将 \n<code>Observable</code> 直接馈送到模板中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab6w7dqnkbcs8v7ydn3ij0z2x\">现在，你可以点击\n<em>管理</em>按钮，它会将你带到\n<em>登录</em>页面，并提供 \n<code>queryParamMap</code> 和 \n<code>fragment</code>。在你点击登录按钮后，请注意你已被重定向到 \n<code>Admin Dashboard</code> 页面，并且查询参数和片段仍然保留在地址栏中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8w7n11zs9jdwdxhbwbqji73qu\">你可以将这些持久的信息用于需要跨页面提供的信息，例如身份验证令牌或会话 ID。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5297r3krex3w6g2jggdxobl5u\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a> params</code> 和 \n<code>fragment</code> 也可以使用 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 分别使用 \n<code>queryParamsHandling</code> 和 \n<code>preserveFragment</code> 绑定来保留。</p>\n</div>\n<a id=\"asynchronous-routing\"></a>\n<h2 id=\"milestone-6-asynchronous-routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2chgfkvq14hs4d59rqxh6mafc\"><i class=\"material-icons\">link</i>里程碑 6：异步路由</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e45nxebkaq0gapct5r0d3pnl1\">随着你完成各个里程碑，应用程序自然会变得越来越大。 当你继续构建功能区域时，整个应用程序的大小将继续增长。 在某个时刻，你会达到一个临界点，应用程序加载时间会变长。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anal5ukimktcukbhzwn6chmwn\">如何解决这个问题？使用异步路由，它会按需\n<em>惰性</em>加载功能模块。 惰性加载有很多好处。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c59a11zyerb1rv1n35pockhgh\">你可以在用户请求时才加载功能区域。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1scxxl93vhq6wzbgvy3og3tiw\">你可以加快只访问应用程序特定区域的用户加载时间。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fadtixrvnztbpxdwc5eokx6w\">你可以继续扩展惰性加载的功能区域，而不会增加初始加载捆绑包的大小。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ai8yzyp6c7prwawlnbzv2uiok\">你已经完成了一部分工作。 通过将应用程序组织成模块——\n<code>AppModule</code>、 \n<code>HeroesModule</code>、\n<code>AdminModule</code> 和 \n<code>CrisisCenterModule</code>——你 已经有了惰性加载的自然候选者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yhwsmop6qaqvhjuwfc3k7e6g\">一些模块，比如 \n<code>AppModule</code>，必须从一开始就加载。 但其他模块可以而且应该惰性加载。 例如，\n<code>AdminModule</code> 只被少数授权用户需要，所以 你应该只在被正确的人请求时才加载它。</p>\n<a id=\"lazy-loading-route-config\"></a>\n<h3 id=\"lazy-loading-route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cx3na7abbjxz4srf5shzgxks\"><i class=\"material-icons\">link</i>惰性加载路由配置</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9po28qfj8haa1w49m6285g64j\">将 \n<code>admin-routing.module.ts</code> 中的 \n<code>admin</code> \n<strong>路径</strong>从 \n<code>'admin'</code> 更改为一个空字符串 \n<code>''</code>，即\n<em>空路径</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76s64mn9whqbu4hrmr6kn22jx\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 支持\n<em>空路径</em>路由； 使用它们将路由分组在一起，而无需在 URL 中添加任何额外的路径段。 用户仍然会访问 \n<code>/admin</code>，而 \n<code>AdminComponent</code> 仍然充当包含子路由的\n<em>路由组件</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w4s30m4fbxzoej5w7tavgc1x\">打开 \n<code>AppRoutingModule</code> 并向其 \n<code>appRoutes</code> 数组添加一个新的 \n<code>admin</code> 路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n2ktv9tgprjnynnhp033wp3y\">为它提供一个 \n<code>loadChildren</code> 属性（不是 \n<code>children</code> 属性！），并将其设置为 \n<code>AdminModule</code> 的地址。 该地址是 \n<code>AdminModule</code> 文件位置（相对于应用程序根目录）， 后面跟着一个 \n<code>#</code> 分隔符， 最后是导出的模块类名称 \n<code>AdminModule</code>。</p>\n<code-example path=\"router/src/app/app-routing.module.5.ts\" region=\"admin-1\" title=\"app-routing.module.ts (load children)\">\n{\n  path: 'admin',\n  loadChildren: 'app/admin/admin.module#AdminModule',\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pl730zma7hn6gc5pc0ao3n8z\">当路由器导航到此路由时，它使用 \n<code>loadChildren</code> 字符串动态加载 \n<code>AdminModule</code>。 然后，它将 \n<code>AdminModule</code> 路由添加到其当前路由配置中。 最后，它将请求的路由加载到目标管理组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uw4j1lm7eu2uq200s71gf989\">惰性加载和重新配置只发生一次，即在\n<em>首次</em>请求路由时； 模块和路由在后续请求中立即可用。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5f2n2muv922ifye6uqhyaf5v\">Angular 提供了一个内置的模块加载器，它支持 SystemJS 异步加载模块。如果你使用的是其他捆绑工具，比如 Webpack，你将使用 Webpack 机制异步加载模块。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djpvi4gvtfdymj9gws23dt24w\">最后一步，将管理功能集从主应用程序中分离。 根 \n<code>AppModule</code> 既不能加载也不能引用 \n<code>AdminModule</code> 或其文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d46e92tcdx4lzhio0oc2ntxva\">在 \n<code>app.module.ts</code> 中，从文件顶部删除 \n<code>AdminModule</code> 导入语句， 并从 NgModule 的 \n<code>imports</code> 数组中删除 \n<code>AdminModule</code>。</p>\n<a id=\"can-load-guard\"></a>\n<h3 id=\"canload-guard-guarding-unauthorized-loading-of-feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3kzrkufh9w4wfdxhh8bymvwvv\"><i class=\"material-icons\">link</i><em>CanLoad</em> 守卫：保护功能模块的未经授权的加载</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4et3w3roqvz6ydm9m7d19n88s\">你已经使用 \n<code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 守卫保护了 \n<code>AdminModule</code>，它阻止未经授权的用户 访问管理功能区域。 如果用户未经授权，它会重定向到登录页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ea3g08gnn0hocfgzf3xaqsfo\">但是，即使用户无法访问任何组件，路由器仍然会加载 \n<code>AdminModule</code>。 理想情况下，你应该只在用户登录\n<em>并</em>尝试访问管理功能区域时才加载 \n<code>AdminModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dv2g913ipwq0fwhduxcq76lz\">添加一个 \n<strong><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code></strong> 守卫，它只在用户登录\n<em>并</em>尝试访问管理功能区域时才加载 \n<code>AdminModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52yew7mxeht7dfmgkwiatbgjw\">现有的 \n<code>AuthGuard</code> 已经在其 \n<code>checkLogin()</code> 方法中包含了支持 \n<code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫的必要逻辑。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21eso3inwnudmorm6lqc26ydu\">打开 \n<code>auth-guard.service.ts</code>。 从 \n<code>@angular/router</code> 中导入 \n<code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 接口。 将其添加到 \n<code>AuthGuard</code> 类的 \n<code>implements</code> 列表中。 然后，按如下方式实现 \n<code>canLoad()</code>：</p>\n<code-example path=\"router/src/app/auth-guard.service.ts\" linenums=\"false\" title=\"src/app/auth-guard.service.ts (CanLoad guard)\" region=\"canLoad\">\ncanLoad(route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a>): boolean {\n  let url = `/${route.path}`;\n\n  return this.checkLogin(url);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9r55jxa5brsr0gtl4bz4p9y5m\">路由器将 \n<code>canLoad()</code> 方法的 \n<code>route</code> 参数设置为目标 URL。 \n<code>checkLogin()</code> 方法在用户登录后重定向到该 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ucnycpfovtkos1u8quxc0gs7\">现在，将 \n<code>AuthGuard</code> 导入 \n<code>AppRoutingModule</code>，并将 \n<code>AuthGuard</code> 添加到 \n<code>admin</code> 路由的 \n<code>canLoad</code> 数组属性中。 完成的管理路由如下所示：</p>\n<code-example path=\"router/src/app/app-routing.module.5.ts\" region=\"admin\" title=\"app-routing.module.ts (lazy admin route)\">\n{\n  path: 'admin',\n  loadChildren: 'app/admin/admin.module#AdminModule',\n  canLoad: [AuthGuard]\n},\n\n</code-example>\n<a id=\"preloading\"></a>\n<h3 id=\"preloading-background-loading-of-feature-areas\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b6y82wbfbl6h09q2ngcdcsbh\"><i class=\"material-icons\">link</i>预加载：功能区域的后台加载</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7eot2u85r0pj7xxadxfyyp2ae\">你已经了解了如何按需加载模块。 你还可以使用\n<em>预加载</em>异步加载模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cq1zorxsbh5y90e792sdbtzbm\">这可能看起来像是应用程序一直都在做的事情。不完全是。 \n<code>AppModule</code> 在应用程序启动时加载；这就是\n<em>急性</em>加载。 现在，\n<code>AdminModule</code> 只有在用户点击链接时才会加载；这就是\n<em>惰性</em>加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ex5lamp3w8ou24y6y9el48k9u\"><em>预加载</em>介于两者之间。 考虑一下\n<em>危机中心</em>。 它不是用户看到的第一个视图。 默认情况下，\n<em>英雄</em>是第一个视图。 为了获得最小的初始负载和最快的启动时间， 你应该急性加载 \n<code>AppModule</code> 和 \n<code>HeroesModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"m94anixlkueiys29hdwqtsuv\">你可以惰性加载\n<em>危机中心</em>。 但你几乎可以肯定，用户会在启动应用程序后的几分钟内访问\n<em>危机中心</em>。 理想情况下，应用程序应该只加载 \n<code>AppModule</code> 和 \n<code>HeroesModule</code> 就启动， 然后，几乎立即在后台加载 \n<code>CrisisCenterModule</code>。 当用户导航到\n<em>危机中心</em>时，它的模块将已经加载并准备就绪。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahhoyn731rzt2vc528ilxli9e\">这就是\n<em>预加载</em>。</p>\n<a id=\"how-preloading\"></a>\n<h4 id=\"how-preloading-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tfombv9nj5oay6weyrye3fnw\"><i class=\"material-icons\">link</i>预加载的工作原理</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p1bc2ix1kwvagwiq40so0tpn\">在每次\n<em>成功</em>导航后，路由器都会在其配置中查找可以预加载的未加载模块。 它是否预加载模块，以及它预加载哪些模块，取决于\n<em>预加载策略</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7bikglzrydxwqt66zijj6yof\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 提供了两种开箱即用的预加载策略：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t0tyu9k4m5mty7cqfkz32f61\">根本不预加载，这是默认设置。惰性加载的功能区域仍然按需加载。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fant9z98jk66yozb58xjdn2\">预加载所有惰性加载的功能区域。</li>\n</ul>\n<p>Out of the box, the router either never preloads, or preloads every lazy load module.\nThe <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> also supports <a href=\"guide/router#custom-preloading\">custom preloading strategies</a> for\nfine control over which modules to preload and when.</p>\n<p>In this next section, you'll update the <code>CrisisCenterModule</code> to load lazily\nby default and use the <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> strategy\nto load it (and <em>all other</em> lazy loaded modules) as soon as possible.</p>\n<a id=\"lazy-load-crisis-center\"></a>\n<h4 id=\"lazy-load-the-crisis-center\">Lazy load the <em>crisis center</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e76h7cf1egswrqk6k3jycgvk9\">更新路由配置以惰性加载 \n<code>CrisisCenterModule</code>。 执行与配置 \n<code>AdminModule</code> 进行惰性加载相同的步骤。</p>\n<ol>\n<li>\n<p>Change the <code>crisis-center</code> path in the <code>CrisisCenterRoutingModule</code> to an empty string.</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11b75alqia595mzgy3natpgi1\">向 \n<code>AppRoutingModule</code> 添加一个 \n<code>crisis-center</code> 路由。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bqtn8huhqt6cwl46i2fn82lw\">将 \n<code>loadChildren</code> 字符串设置为加载 \n<code>CrisisCenterModule</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5asv98et7tpl5dknd34sd3ce1\">从 \n<code>app.module.ts</code> 中删除所有对 \n<code>CrisisCenterModule</code> 的引用。</p>\n</li>\n</ol>\n<p>Here are the updated modules <em>before enabling preload</em>:</p>\n<code-tabs>\n\n  <code-pane title=\"app.module.ts\" path=\"router/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\n\nimport { AppComponent }            from './app.component';\nimport { AppRoutingModule }        from './app-routing.module';\n\nimport { HeroesModule }            from './heroes/heroes.module';\nimport { ComposeMessageComponent } from './compose-message.component';\nimport { LoginRoutingModule }      from './login-routing.module';\nimport { LoginComponent }          from './login.component';\nimport { PageNotFoundComponent }   from './not-found.component';\n\nimport { DialogService }           from './dialog.service';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    LoginRoutingModule,\n    AppRoutingModule,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    LoginComponent,\n    PageNotFoundComponent\n  ],\n  providers: [\n    DialogService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n  // Diagnostic only: inspect router configuration\n  constructor(router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    console.log('<a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>: ', JSON.stringify(router.config, undefined, 2));\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app-routing.module.ts\" path=\"router/src/app/app-routing.module.6.ts\" region=\"preload-v1\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }     from '@angular/core';\nimport {\n  <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>,\n} from '@angular/router';\n\nimport { ComposeMessageComponent } from './compose-message.component';\nimport { PageNotFoundComponent }   from './not-found.component';\n\nimport { CanDeactivateGuard }      from './can-deactivate-guard.service';\nimport { AuthGuard }               from './auth-guard.service';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'compose',\n    component: ComposeMessageComponent,\n    outlet: 'popup'\n  },\n  {\n    path: 'admin',\n    loadChildren: 'app/admin/admin.module#AdminModule',\n    canLoad: [AuthGuard]\n  },\n  {\n    path: 'crisis-center',\n    loadChildren: 'app/crisis-center/crisis-center.module#CrisisCenterModule'\n  },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ],\n  providers: [\n    CanDeactivateGuard\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-pane>\n\n  <code-pane title=\"crisis-center-routing.module.ts\" path=\"router/src/app/crisis-center/crisis-center-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home.component';\nimport { CrisisListComponent }       from './crisis-list.component';\nimport { CrisisCenterComponent }     from './crisis-center.component';\nimport { CrisisDetailComponent }     from './crisis-detail.component';\n\nimport { CanDeactivateGuard }     from '../can-deactivate-guard.service';\nimport { CrisisDetailResolver }   from './crisis-detail-resolver.service';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [CanDeactivateGuard],\n            resolve: {\n              crisis: CrisisDetailResolver\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ],\n  providers: [\n    CrisisDetailResolver\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewvm8hrcus3twdhaw198x2kst\">你现在可以尝试一下，并确认在点击“危机中心”按钮后 \n<code>CrisisCenterModule</code> 会加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pu78tzldfon5o5cdwbdpuy6u\">要启用所有惰性加载模块的预加载，请从 Angular 路由器包中导入 \n<code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 令牌。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nsbk4qs5mqp7mbmlwyoilnm\"><code>RouterModule.forRoot</code> 方法中的第二个参数接受一个对象，用于提供额外的配置选项。 \n<code>preloadingStrategy</code> 是这些选项之一。 将 \n<code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 令牌添加到 \n<code>forRoot</code> 调用中：</p>\n<code-example path=\"router/src/app/app-routing.module.6.ts\" linenums=\"false\" title=\"src/app/app-routing.module.ts (preload all)\" region=\"forRoot\">\nRouterModule.forRoot(\n  appRoutes,\n  {\n    enableTracing: true, // &lt;-- debugging purposes only\n    preloadingStrategy: <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>\n  }\n)\n\n</code-example>\n<p>This tells the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> preloader to immediately load <em>all</em> lazy loaded routes (routes with a <code>loadChildren</code> property).</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fpwmzg9c3rww7qcclh2jecqa\">当你访问 \n<code>http://localhost:3000</code> 时，\n<code>/heroes</code> 路由会在启动时立即加载， 并且路由器会在 \n<code>HeroesModule</code> 加载后立即开始加载 \n<code>CrisisCenterModule</code>。</p>\n<p>Surprisingly, the <code>AdminModule</code> does <em>not</em> preload. Something is blocking it.</p>\n<a id=\"preload-canload\"></a>\n<h4 id=\"canload-blocks-preload\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4fxo8ppd80um9gvzt69ntud4\"><i class=\"material-icons\">link</i>CanLoad 阻止预加载</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87t7j1kmpxwlt386vev1fneg3\"><code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 策略不会加载受 \n<a href=\"guide/router#can-load-guard\">CanLoad</a> 守卫保护的功能区域。 这是设计使然。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bo9xy2rvhw2t262bjaywk9hy\">你在几步之前向 \n<code>AdminModule</code> 中的路由添加了一个 \n<code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫， 以阻止加载该模块，直到用户获得授权。 该 \n<code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫优先于预加载策略。</p>\n<p>If you want to preload a module <em>and</em> guard against unauthorized access,\ndrop the <code>canLoad()</code> guard method and rely on the <a href=\"guide/router#can-activate-guard\">canActivate()</a> guard alone.</p>\n<a id=\"custom-preloading\"></a>\n<h3 id=\"custom-preloading-strategy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewitf0quklazbdvkzbadl06xx\"><i class=\"material-icons\">link</i>自定义预加载策略</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fv4bzqj52du2s0i0n9hhnbt4\">在许多情况下，预加载所有惰性加载的模块效果很好， 但它并不总是最佳选择，尤其是在移动设备和低带宽连接上。 你可能选择只预加载某些功能模块，这取决于用户指标以及其他业务和技术因素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq5ly1042ioont8fb6zx2vqne\">你可以使用自定义的预加载策略来控制路由器预加载的内容和方式。</p>\n<p>In this section, you'll add a custom strategy that <em>only</em> preloads routes whose <code>data.preload</code> flag is set to <code>true</code>.\nRecall that you can add anything to the <code>data</code> property of a route.</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"980cn4z6fbeq507bsgg7joqhz\">在 \n<code>AppRoutingModule</code> 中的 \n<code>crisis-center</code> 路由中设置 \n<code>data.preload</code> 标志。</p>\n<code-example path=\"router/src/app/app-routing.module.ts\" linenums=\"false\" title=\"src/app/app-routing.module.ts (route data preload)\" region=\"preload-v2\">\n{\n  path: 'crisis-center',\n  loadChildren: 'app/crisis-center/crisis-center.module#CrisisCenterModule',\n  data: { preload: true }\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0cz74nhk8klyvvwuz0z1etcg\">在项目中添加一个名为 \n<code>selective-preloading-strategy.ts</code> 的新文件，并定义一个 \n<code>SelectivePreloadingStrategy</code> 服务类，如下所示：</p>\n<code-example path=\"router/src/app/selective-preloading-strategy.ts\" linenums=\"false\" title=\"src/app/selective-preloading-strategy.ts (excerpt)\">\nimport 'rxjs/add/observable/of';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a>, <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class SelectivePreloadingStrategy implements <a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a> {\n  preloadedModules: string[] = [];\n\n  preload(route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a>, load: () =&gt; Observable&lt;any&gt;): Observable&lt;any&gt; {\n    if (route.data &amp;&amp; route.data['preload']) {\n      // add the route path to the preloaded module array\n      this.preloadedModules.push(route.path);\n\n      // log the route path to the console\n      console.log('Preloaded: ' + route.path);\n\n      return load();\n    } else {\n      return Observable.of(null);\n    }\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b796q2dgyxsnzszgl60a6c5i2\"><code>SelectivePreloadingStrategy</code> 实现 \n<code><a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a></code>，它有一个方法 \n<code>preload</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8y9lj7jeo7zcni8ghktzqy14f\">路由器使用两个参数调用 \n<code>preload</code> 方法：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evs1gftq1x2vz2qrf9kccn1ph\">要考虑的路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1k808znfa2iswyjnujz4ncvwj\">一个可以异步加载路由模块的加载函数。</li>\n</ol>\n<p>An implementation of <code>preload</code>must return an <code>Observable</code>.\nIf the route should preload, it returns the observable returned by calling the loader function.\nIf the route should <em>not</em> preload, it returns an <code>Observable</code> of <code>null</code>.</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeqejds396sn87e2eaozyyssl\">在此示例中，如果路由的 \n<code>data.preload</code> 标志为真值，则 \n<code>preload</code> 方法会加载该路由。</p>\n<p>It also has a side-effect.\n<code>SelectivePreloadingStrategy</code> logs the <code>path</code> of a selected route in its public <code>preloadedModules</code> array.</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h4rmbp01w8ndpn27bixzozse\">稍后，你将扩展 \n<code>AdminDashboardComponent</code> 以注入此服务并显示其 \n<code>preloadedModules</code> 数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbxor5x2vu0e4gn1vy69wxk89\">但首先，对 \n<code>AppRoutingModule</code> 进行一些更改。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ang5i1d8hdn2921nww4g1qg1\">将 \n<code>SelectivePreloadingStrategy</code> 导入 \n<code>AppRoutingModule</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2g2lqunafx9kqu1h1p151n73i\">用此 \n<code>SelectivePreloadingStrategy</code> 替换 \n<code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 策略，该策略在调用 \n<code>forRoot</code> 时使用。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fdcu75oclygucxmlhqetgsuv\">将 \n<code>SelectivePreloadingStrategy</code> 策略添加到 \n<code>AppRoutingModule</code> 的 \n<code>providers</code> 数组中，以便它可以在应用程序的其他地方注入。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ara9aub48x8qyg3585d4pwn07\">现在编辑 \n<code>AdminDashboardComponent</code> 以显示预加载路由的日志。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jx6s1u64ppigmbyr9aksx46l\">导入 \n<code>SelectivePreloadingStrategy</code>（它是一个服务）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfxrvkjderw2dq1zxkwfy1e49\">将其注入到仪表板的构造函数中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70lx7y467m8wu34y15vbq4lta\">更新模板以显示策略服务的 \n<code>preloadedModules</code> 数组。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eron29aa199h15k1toqi1919i\">完成后，它看起来像这样。</p>\n<code-example path=\"router/src/app/admin/admin-dashboard.component.ts\" linenums=\"false\" title=\"src/app/admin/admin-dashboard.component.ts (preloaded modules)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> }    from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> }       from '@angular/router';\nimport { Observable }           from 'rxjs/Observable';\n\nimport { SelectivePreloadingStrategy } from '../selective-preloading-strategy';\n\nimport 'rxjs/add/operator/map';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template:  `\n    &lt;p&gt;Dashboard&lt;/p&gt;\n\n    &lt;p&gt;Session ID: {{ sessionId | async }}&lt;/p&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> id=\"anchor\"&gt;&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;p&gt;Token: {{ token | async }}&lt;/p&gt;\n\n    Preloaded Modules\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let module of modules\"&gt;{{ module }}&lt;/li&gt;\n    &lt;/ul&gt;\n  `\n})\nexport class AdminDashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  sessionId: Observable&lt;string&gt;;\n  token: Observable&lt;string&gt;;\n  modules: string[];\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private preloadStrategy: SelectivePreloadingStrategy\n  ) {\n    this.modules = preloadStrategy.preloadedModules;\n  }\n\n  ngOnInit() {\n    // Capture the session ID if available\n    this.sessionId = this.route\n      .queryParamMap\n      .map(params =&gt; params.get('session_id') || 'None');\n\n    // Capture the fragment if available\n    this.token = this.route\n      .fragment\n      .map(fragment =&gt; fragment || 'None');\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abosn4setwewpkk9npokwyrv6\">应用程序加载初始路由后，\n<code>CrisisCenterModule</code> 会被预加载。通过登录到 \n<code>Admin</code> 功能区并注意 \n<code>crisis-center</code> 是否列在 \n<code>Preloaded Modules</code> 中来验证这一点。它也会记录到浏览器的控制台中。</p>\n<a id=\"redirect-advanced\"></a>\n<h2 id=\"migrating-urls-with-redirects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tolx7h4sj73d49kgs98tyteg\"><i class=\"material-icons\">link</i>使用重定向迁移 URL</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjeqwhsqinc1039orm8yhhsiq\">你已经设置了在应用程序中导航的路由。你已经使用命令式和声明式导航到许多不同的路由。但与任何应用程序一样，需求会随着时间的推移而改变。你已经从 \n<code>HeroListComponent</code> 和 \n<code>HeroDetailComponent</code> 组件设置了指向 \n<code>/heroes</code> 和 \n<code>/hero/:id</code> 的链接和导航。如果需要将指向 \n<code>heroes</code> 的链接改为 \n<code>superheroes</code>，你仍然希望以前的 URL 能正确导航。你也不想更新应用程序中的每个链接，因此重定向使重构路由变得微不足道。</p>\n<a id=\"url-refactor\"></a>\n<h3 id=\"changing-heroes-to-superheroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vjtbzrpx31uavc2v1l0liy3h\"><i class=\"material-icons\">link</i>将 /heroes 更改为 /superheroes</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yq52w43sv50g1dezahdtzgw1\">让我们以 \n<code>Hero</code> 路由为例，将它们迁移到新的 URL。\n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 在导航之前检查配置中的重定向，因此每个重定向在需要时都会被触发。为了支持此更改，你将在 \n<code>heroes-routing.module</code> 中添加从旧路由到新路由的重定向。</p>\n<code-example path=\"router/src/app/heroes/heroes-routing.module.ts\" linenums=\"false\" title=\"src/app/heroes/heroes-routing.module.ts (heroes redirects)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', redirectTo: '/superheroes' },\n  { path: 'hero/:id', redirectTo: '/superhero/:id' },\n  { path: 'superheroes',  component: HeroListComponent },\n  { path: 'superhero/:id', component: HeroDetailComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroRoutingModule { }\n\n</code-example>\n<p>You'll notice two different types of redirects. The first change is from  <code>/heroes</code> to <code>/superheroes</code> without any parameters. This is a straightforward redirect, unlike the change from <code>/hero/:id</code> to <code>/superhero/:id</code>, which includes the <code>:id</code> route parameter. Router redirects also use powerful pattern matching, so the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> inspects the URL and replaces route parameters in the <code>path</code> with their appropriate destination. Previously, you navigated to a URL such as <code>/hero/15</code> with a route parameter <code>id</code> of <code>15</code>.</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adm9f0vec5pneb0wap0lm1ryl\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 还支持使用重定向时的 \n<a href=\"guide/router#query-parameters\">查询参数</a> 和 \n<a href=\"guide/router#fragment\">片段</a>。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v9evn2264lcxgfhpx71yt1w1\">使用绝对重定向时，\n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 将使用路由配置中 \n<code>redirectTo</code> 的查询参数和片段。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2bv35844zzn7jn2s4ld1gemr\">使用相对重定向时，\n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 将使用源 URL 的查询参数和片段。</li>\n</ul>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mtnzabcvkitji14vpqo05pxt\">在更新 \n<code>app-routing.module.ts</code> 之前，你需要考虑一个重要的规则。目前，我们的空路径路由重定向到 \n<code>/heroes</code>，而 \n<code>/heroes</code> 又重定向到 \n<code>/superheroes</code>。这\n<em>不会</em>起作用，这是设计使然，因为 \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 在每个路由配置级别只处理一次重定向。这可以防止重定向链式处理，这会导致无限重定向循环。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gr0e2ez72i92o5klbw1fy1p9\">因此，你将在 \n<code>app-routing.module.ts</code> 中更新空路径路由，使其重定向到 \n<code>/superheroes</code>。</p>\n<code-example path=\"router/src/app/app-routing.module.ts\" linenums=\"false\" title=\"src/app/app-routing.module.ts (superheroes redirect)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { ComposeMessageComponent }  from './compose-message.component';\nimport { PageNotFoundComponent }    from './not-found.component';\n\nimport { CanDeactivateGuard }       from './can-deactivate-guard.service';\nimport { AuthGuard }                from './auth-guard.service';\nimport { SelectivePreloadingStrategy } from './selective-preloading-strategy';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'compose',\n    component: ComposeMessageComponent,\n    outlet: 'popup'\n  },\n  {\n    path: 'admin',\n    loadChildren: 'app/admin/admin.module#AdminModule',\n    canLoad: [AuthGuard]\n  },\n  {\n    path: 'crisis-center',\n    loadChildren: 'app/crisis-center/crisis-center.module#CrisisCenterModule',\n    data: { preload: true }\n  },\n  { path: '',   redirectTo: '/superheroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      {\n        enableTracing: true, // &lt;-- debugging purposes only\n        preloadingStrategy: SelectivePreloadingStrategy,\n\n      }\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ],\n  providers: [\n    CanDeactivateGuard,\n    SelectivePreloadingStrategy\n  ]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5uvsl9paaq008x55bv7n2d0mv\">由于 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 不与路由配置绑定，因此你需要更新相关的路由链接，以便在新路由处于活动状态时它们仍然处于活动状态。你将更新 \n<code>app.component.ts</code> 模板以用于 \n<code>/heroes</code> 路由链接。</p>\n<code-example path=\"router/src/app/app.component.ts\" linenums=\"false\" title=\"src/app/app.component.ts (superheroes active routerLink)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/superheroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Admin&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/login\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt;Login&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;/nav&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  `\n})\nexport class AppComponent {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay8ii1tj4turwgw4jcaotxj55\">设置了重定向后，所有以前的路由现在都指向它们的新目标，并且两个 URL 都按预期工作。</p>\n<a id=\"inspect-config\"></a>\n<h2 id=\"inspect-the-routers-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"867yn80cr13al92k96y4p3t0m\"><i class=\"material-icons\">link</i>检查路由器的配置</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45jmv3ivuc5rqrrglykjncpo6\">你花费了大量精力在多个路由模块文件中配置路由器，并且小心地按照 \n<a href=\"guide/router#routing-module-order\">正确的顺序</a> 列出了它们。路由是否真的按照你的计划进行评估？路由器是如何真正配置的？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eygkkexurkudiisahlfducpgh\">你可以通过注入路由器并检查其 \n<code>config</code> 属性来随时检查路由器的当前配置。例如，按如下方式更新 \n<code>AppModule</code>，并在浏览器控制台窗口中查看完成的路由配置。</p>\n<code-example path=\"router/src/app/app.module.ts\" linenums=\"false\" title=\"src/app/app.module.ts (inspect the router config)\" region=\"inspect-config\">\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\n\nexport class AppModule {\n  // Diagnostic only: inspect router configuration\n  constructor(router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    console.log('<a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>: ', JSON.stringify(router.config, undefined, 2));\n  }\n}\n\n</code-example>\n<a id=\"final-app\"></a>\n<h2 id=\"wrap-up-and-final-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2t0p6x003ex4zfcl4tfi2b6oz\"><i class=\"material-icons\">link</i>总结和最终应用程序</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wc94cfxzgihry6w0u8p2vdtz\">在本指南中，你已经涵盖了很多内容，应用程序太大，无法在此处重新打印。请访问 \n<live-example title=\"Router Sample in Stackblitz\"></live-example>，在那里你可以下载最终的源代码。</p>\n<a id=\"appendices\"></a>\n<h2 id=\"appendices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1x056rvvkp7sxiwe9cpahmr7f\"><i class=\"material-icons\">link</i>附录</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gf23haw20bcpwv82o0t5lo0c\">本指南的剩余部分是一组附录，详细阐述了你在上面快速介绍的一些要点。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ersmo6ust3nmvqlnhxbltre7l\">附录内容不是必需的。继续阅读是为了好奇的人。</p>\n<a id=\"link-parameters-array\"></a>\n<h3 id=\"appendix-link-parameters-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9srn6twpoicvv8w5izpz3bg6e\"><i class=\"material-icons\">link</i>附录：链接参数数组</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"evbclmqfvqfon90lxyuyum14d\">链接参数数组保存路由导航时所需的成分：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"645xo87fc3v7hzyfhuy568cdl\">指向目标组件的路由的\n<em>路径</em>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nib6715uos5swobxspwf1wyn\">进入路由 URL 的必要和可选路由参数。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lngxdtgpu4iimuef0viaqn5e\">你可以将 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令绑定到这样的数组，如下所示：</p>\n<code-example path=\"router/src/app/app.component.3.ts\" linenums=\"false\" title=\"src/app/app.component.ts (h-anchor)\" region=\"h-anchor\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/heroes']\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t0o77bno4hyf3hr82jrici70\">在指定路由参数时，你已经编写了一个包含两个元素的数组，如下所示：</p>\n<code-example path=\"router/src/app/heroes/hero-list.component.1.ts\" linenums=\"false\" title=\"src/app/heroes/hero-list.component.ts (nav-to-detail)\" region=\"nav-to-detail\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n  &lt;span class=\"badge\"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}\n&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ixrws30tq30eiuh6i18qxxk5\">你可以使用以下对象提供可选路由参数：</p>\n<code-example path=\"router/src/app/app.component.3.ts\" linenums=\"false\" title=\"src/app/app.component.ts (cc-query-params)\" region=\"cc-query-params\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center', { foo: 'foo' }]\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18lnjqws70aqhqxy1lhhfsrnb\">这三个示例涵盖了具有单级路由的应用程序的需求。当你添加子路由器（例如危机中心）时，就会创建新的链接数组可能性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90576ev0s3g1a30jscl9hsikv\">回想一下，你为危机中心指定了一个默认的子路由，因此这个简单的 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 就足够了。</p>\n<code-example path=\"router/src/app/app.component.3.ts\" linenums=\"false\" title=\"src/app/app.component.ts (cc-anchor-w-default)\" region=\"cc-anchor-w-default\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center']\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qoegbyk3arcgenguzw8dsesd\">解析它。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mk19wjgiz0anuqs4yp9m32q7\">数组中的第一个项目标识父路由（\n<code>/crisis-center</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8chb7491mwm1q6b7hchzrti17\">此父路由没有参数，因此你已经完成了它。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ovhgozpsj5dghw1x6941h5p6\">子路由没有默认值，因此你需要选择一个。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wozlgcf4jf3z8mm95ndo1c7n\">你正在导航到 \n<code>CrisisListComponent</code>，其路由路径为 \n<code>/</code>，但你不需要显式添加斜杠。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j5n3pl1byq3wgpj1rphknbzh\">瞧！\n<code>['/crisis-center']</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dt2wlzey42fv7hxcv351hq6qp\">更进一步。考虑以下路由链接，它从应用程序的根目录导航到\n<em>龙危机</em>：</p>\n<code-example path=\"router/src/app/app.component.3.ts\" linenums=\"false\" title=\"src/app/app.component.ts (Dragon-anchor)\" region=\"Dragon-anchor\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center', 1]\"&gt;Dragon Crisis&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mk19wjgiz0anuqs4yp9m32q7\">数组中的第一个项目标识父路由（\n<code>/crisis-center</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8chb7491mwm1q6b7hchzrti17\">此父路由没有参数，因此你已经完成了它。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1eg1acaqaa4htn7kjg12qnh4g\">第二个条目标识了特定危机（\n<code>/:id</code>）的子路由详细信息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mfu1i9w00rm3k1dzzke1xyp0\">详细信息子路由需要一个 \n<code>id</code> 路由参数。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1aczgswzvwnqenactygv9irgf\">你将\n<em>龙危机</em>的 \n<code>id</code> 作为数组中的第二个条目添加（\n<code>1</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13f6tkthy4gxpefpxxf7koqd2\">生成的路径为 \n<code>/crisis-center/1</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u5gply0ib4ukb71nysexbeun\">如果你愿意，你可以用\n<em>危机中心</em>路由重新定义 \n<code>AppComponent</code> 模板：</p>\n<code-example path=\"router/src/app/app.component.3.ts\" linenums=\"false\" title=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center']\"&gt;Crisis Center&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center/1', { foo: 'foo' }]\"&gt;Dragon Crisis&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center/2']\"&gt;Shark Crisis&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n  &lt;/nav&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n`\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xbnmxxvaemgds0y53w95z6jb\">总之，你可以编写具有一个、两个或多个路由级别的应用程序。链接参数数组提供了灵活性，可以表示任何路由深度以及任何合法的路由路径序列、（必要）路由参数和（可选）路由参数对象。</p>\n<a id=\"browser-url-styles\"></a>\n<a id=\"location-strategy\"></a>\n<h3 id=\"appendix-locationstrategy-and-browser-url-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emi8vv1idf4jv8xj36xhhet5k\"><i class=\"material-icons\">link</i>附录：\n<em>LocationStrategy</em> 和浏览器 URL 样式</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"104n3whdsa4fxhkzzh43z5ruh\">当路由导航到新的组件视图时，它会使用该视图的 URL 更新浏览器的地址和历史记录。这是一个严格的本地 URL。浏览器不应该将此 URL 发送到服务器，也不应该重新加载页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcbkdjz4h78z1xapote7hb4qk\">现代 HTML5 浏览器支持 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\" title=\"HTML5 browser history push-state\">history.pushState</a>， 这是一种技术，它可以更改浏览器的地址和历史记录，而不会触发服务器页面请求。路由器可以组合一个“自然”URL，它与需要页面加载的 URL 无法区分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lxzdywyc3md9qub8x73fdusp\">这是此“HTML5 pushState”样式中的\n<em>危机中心</em> URL：</p>\n<code-example format=\"nocode\">\n  localhost:3002/crisis-center/\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akqccry53f65i1215u65gjqqh\">较旧的浏览器在地址 URL 更改时会向服务器发送页面请求，\n<em>除非</em>更改发生在“#”（称为“哈希”）之后。路由器可以通过组合带有哈希的应用程序内路由 URL 来利用此例外。这是一个路由到\n<em>危机中心</em>的“哈希 URL”。</p>\n<code-example format=\"nocode\">\n  localhost:3002/src/#/crisis-center/\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fwmpfqgdxb062iibp38uobih\">路由器使用两个 \n<code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code> 提供者支持这两种样式：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ypv84311ffgslr6koehr7zc6\"><code><a href=\"api/common/PathLocationStrategy\" class=\"code-anchor\">PathLocationStrategy</a></code>—默认的“HTML5 pushState”样式。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98ttqn0aquqf7e3snlb9k3xu2\"><code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code>—“哈希 URL”样式。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3599k03fm3dfs2sk6x9k6yuq9\"><code>RouterModule.forRoot</code> 函数将 \n<code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code> 设置为 \n<code><a href=\"api/common/PathLocationStrategy\" class=\"code-anchor\">PathLocationStrategy</a></code>， 使其成为默认策略。如果你更喜欢 \n<code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code>，你可以在引导过程中使用覆盖来切换到它。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75in43qdpee50pmhjhxuoynwd\">在 \n<a href=\"guide/dependency-injection#bootstrap\">依赖注入指南</a> 中了解提供者和引导过程。</p>\n</div>\n<h4 id=\"which-strategy-is-best\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4mi7kpt8oakg895bd24fekpo\"><i class=\"material-icons\">link</i>哪种策略最好？</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23ykj256vdxdi6i92psbk0ww7\">你必须选择一种策略，并且需要在项目早期做出正确的决定。一旦应用程序投入生产，并且在野外存在大量应用程序 URL 引用，以后就很难更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evi8ostjse23pzsyhoq8wdi4m\">几乎所有 Angular 项目都应该使用默认的 HTML5 样式。它生成的 URL 更容易被用户理解。并且它保留了以后进行\n<em>服务器端渲染</em>的选项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xm889ykmmguz91v7rrhath5d\">在服务器上渲染关键页面是一种技术，它可以极大地提高应用程序首次加载时的感知响应速度。一个原本需要十秒或更长时间才能启动的应用程序，可以在服务器上渲染并以不到一秒的时间交付给用户的设备。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"323odkuzx1bcaw2979sazilja\">此选项仅在应用程序 URL 看起来像正常的 Web URL 时才可用，中间没有哈希（#）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3erpm4ntpla9o5e5iui8rehk\">除非你有充分的理由使用哈希路由，否则请坚持使用默认设置。</p>\n<h4 id=\"html5-urls-and-the--base-href\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3o4e7oocwd5wiln50e2xndf22\"><i class=\"material-icons\">link</i>HTML5 URL 和\n<em>&lt;base href&gt;</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32hldla3wpryn06av3c8ph8o8\">虽然路由器默认使用 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\" title=\"Browser history push-state\">HTML5 pushState</a> 样式，但你\n<em>必须</em>使用\n<strong>基本 href</strong>配置该策略。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ywl1rs5jowh94d7opehbsdnf\">配置策略的首选方法是在 \n<code>index.html</code> 的 \n<code>&lt;head&gt;</code> 中添加一个 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\" title=\"base href\">&lt;base href&gt; 元素</a> 标签。</p>\n<code-example path=\"router/src/index.html\" linenums=\"false\" title=\"src/index.html (base-href)\" region=\"base-href\">\n&lt;base href=\"/\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3ltt6pdk83zi899x9gwx0z4y\">如果没有该标签，浏览器可能无法在“深度链接”到应用程序时加载资源（图像、CSS、脚本）。当有人将应用程序链接粘贴到浏览器的地址栏或在电子邮件中点击此类链接时，可能会发生不好的事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1qc5qbko9cw2b5rda6cmtrtt\">一些开发人员可能无法添加 \n<code>&lt;base&gt;</code> 元素，可能是因为他们没有 访问 \n<code>&lt;head&gt;</code> 或 \n<code>index.html</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fk0pi3kjlc41c9ni3tr9tkb2\">这些开发人员仍然可以通过采取两个补救措施来使用 HTML5 URL：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcr0jm7kdtricv2gax37qc32n\">为路由器提供适当的 \n<a href=\"\">APP_BASE_HREF</a> 值。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blm1w8e5x1hsopnfiar3ov4y6\">对所有 Web 资源使用\n<em>根 URL</em>：CSS、图像、脚本和模板 HTML 文件。</li>\n</ol>\n<a id=\"hashlocationstrategy\"></a>\n<h4 id=\"hashlocationstrategy\"><em>HashLocationStrategy</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15ys9qcp1pud58kv7rty7ruwq\">你可以通过在 \n<code>AppModule</code> 中的 \n<code>RouterModule.forRoot</code> 的第二个参数中提供一个对象，并在其中提供 \n<code>useHash: true</code> 来使用 \n<code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code>。</p>\n<code-example path=\"router/src/app/app.module.6.ts\" linenums=\"false\" title=\"src/app/app.module.ts (hash URL strategy)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }        from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }          from '@angular/forms';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { AppComponent }          from './app.component';\nimport { PageNotFoundComponent } from './not-found.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(routes, { useHash: true })  // .../#/crisis-center/\n  ],\n  declarations: [\n    AppComponent,\n    PageNotFoundComponent\n  ],\n  providers: [\n\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n\n</div>\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/architecture\n - guide/change-log\n - guide/dependency-injection-in-action\n - guide/deployment\n - guide/glossary\n - guide/lazy-loading-ngmodules\n - guide/sharing-ngmodules\n - guide/template-syntax\n - guide/testing\n - guide/universal\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/query\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/HashLocationStrategy\n - api/common/LocationStrategy\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/PathLocationStrategy\n - api/core/AnimationEntryMetadata\n - api/core/Component\n - api/core/HostBinding\n - api/core/Injectable\n - api/core/Injector\n - api/core/NgModule\n - api/core/OnInit\n - api/core/testing/async\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/router/ActivatedRoute\n - api/router/ActivatedRoute#paramMap\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/NavigationCancel\n - api/router/NavigationEnd\n - api/router/NavigationError\n - api/router/NavigationExtras\n - api/router/NavigationStart\n - api/router/ParamMap\n - api/router/PreloadAllModules\n - api/router/PreloadingStrategy\n - api/router/Resolve\n - api/router/Route\n - api/router/RouteConfigLoadEnd\n - api/router/RouteConfigLoadStart\n - api/router/Router\n - api/router/Router#events\n - api/router/Router#navigate\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterLinkWithHref\n - api/router/RouterModule\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/RouterState\n - api/router/RouterStateSnapshot\n - api/router/RouterStateSnapshot#url\n - api/router/Routes\n - api/router/RoutesRecognized\n - api/upgrade/static\n - guide/animations\n - guide/dependency-injection#bootstrap\n - guide/glossary#view\n - guide/router#a-crisis-center-with-child-routes\n - guide/router#activated-route\n - guide/router#activated-route-in-action\n - guide/router#add-a-secondary-route\n - guide/router#add-an-admin-feature-module\n - guide/router#add-heroes-functionality\n - guide/router#add-the-logincomponent\n - guide/router#add-the-routing-module-to-the-heroesmodule\n - guide/router#adding-animations-to-the-routed-component\n - guide/router#appendices\n - guide/router#appendix-link-parameters-array\n - guide/router#appendix-locationstrategy-and-browser-url-styles\n - guide/router#asynchronous-routing\n - guide/router#base-href\n - guide/router#basics-wrap-up\n - guide/router#browser-url-styles\n - guide/router#can-activate-child-guard\n - guide/router#can-activate-guard\n - guide/router#can-load-guard\n - guide/router#canactivate-requiring-authentication\n - guide/router#canactivatechild-guarding-child-routes\n - guide/router#cancel-and-save\n - guide/router#candeactivate-handling-unsaved-changes\n - guide/router#canload-blocks-preload\n - guide/router#canload-guard-guarding-unauthorized-loading-of-feature-modules\n - guide/router#changing-heroes-to-superheroes\n - guide/router#child-route-configuration\n - guide/router#child-routing-component\n - guide/router#clear-secondary-routes\n - guide/router#clearing-secondary-routes\n - guide/router#component-less-route-grouping-routes-without-a-component\n - guide/router#configuration\n - guide/router#custom-preloading\n - guide/router#custom-preloading-strategy\n - guide/router#define-routes\n - guide/router#displaying-multiple-routes-in-named-outlets\n - guide/router#do-you-need-a-routing-module\n - guide/router#example-config\n - guide/router#fetch-data-before-navigating\n - guide/router#fragment\n - guide/router#guard-the-admin-feature\n - guide/router#guards\n - guide/router#hashlocationstrategy\n - guide/router#hero-feature-route-configuration\n - guide/router#hero-feature-routing-requirements\n - guide/router#hero-routing-module\n - guide/router#heroes-list-optionally-selecting-a-hero\n - guide/router#how-preloading-works\n - guide/router#html5-urls-and-the--base-href\n - guide/router#import-crisis-center-module-into-the-appmodule-routes\n - guide/router#import-hero-module-into-appmodule\n - guide/router#importing-from-the-router-library\n - guide/router#inspect-config\n - guide/router#inspect-the-routers-configuration\n - guide/router#lazy-load-the-crisis-center\n - guide/router#lazy-loading-route-configuration\n - guide/router#link-parameters-array\n - guide/router#migrating-urls-with-redirects\n - guide/router#milestone-1-getting-started-with-the-router\n - guide/router#milestone-2-routing-module\n - guide/router#milestone-3-heroes-feature\n - guide/router#milestone-3-wrap-up\n - guide/router#milestone-4-crisis-center-feature\n - guide/router#milestone-5-route-guards\n - guide/router#milestone-6-asynchronous-routing\n - guide/router#module-import-order-matters\n - guide/router#navigate-to-crisis-list-with-a-relative-url\n - guide/router#navigating-back-to-the-list-component\n - guide/router#observable-parammap-and-component-reuse\n - guide/router#optional-route-parameters\n - guide/router#overview\n - guide/router#parammap-api\n - guide/router#preloading-background-loading-of-feature-areas\n - guide/router#query-parameters\n - guide/router#query-parameters-and-fragments\n - guide/router#redirect\n - guide/router#redirecting-routes\n - guide/router#refactor-the-routing-configuration-into-a-routing-module\n - guide/router#relative-navigation\n - guide/router#remove-duplicate-hero-routes\n - guide/router#resolve-guard\n - guide/router#resolve-pre-fetching-component-data\n - guide/router#reuse\n - guide/router#route-definition-with-a-parameter\n - guide/router#route-parameters\n - guide/router#route-parameters-in-the-activatedroute-service\n - guide/router#route-parameters-required-or-optional\n - guide/router#router-directives\n - guide/router#router-events\n - guide/router#router-imports\n - guide/router#router-links\n - guide/router#router-outlet\n - guide/router#router-state\n - guide/router#routerlink-binding\n - guide/router#routerlinkactive-binding\n - guide/router#routeroutlet\n - guide/router#routing--navigation\n - guide/router#routing-module\n - guide/router#routing-module-order\n - guide/router#secondary-route-navigation-merging-routes-during-navigation\n - guide/router#secondary-routes\n - guide/router#set-the-base-href\n - guide/router#setting-the-route-parameters-in-the-list-view\n - guide/router#snapshot-the-no-observable-alternative\n - guide/router#summary\n - guide/router#teach-authguard-to-authenticate\n - guide/router#the-appcomponent-shell\n - guide/router#the-basics\n - guide/router#the-default-route-to-heroes\n - guide/router#the-sample-application\n - guide/router#the-sample-application-in-action\n - guide/router#which-strategy-is-best\n - guide/router#wildcard\n - guide/router#wildcard-route\n - guide/router#wrap-up-and-final-app\n - guide/template-syntax#attribute-binding\n - guide/template-syntax#class-binding\n - guide/template-syntax#property-binding\n - tutorial/toh-pt4\n - http://victorsavkin.com/post/146722301646/angular-router-empty-paths-componentless-routes\n - http://www.w3.org/DesignIssues/MatrixURIs.html\n - https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\n - https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\n - https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\n - https://en.wikipedia.org/wiki/Fragment_identifier\n-->"
}