{
  "id" : "guide/ajs-quick-reference",
  "title" : "AngularJS 到 Angular 快速参考",
  "contents" : "<div class=\"content\">\n<h1 id=\"angularjs-to-angular-quick-reference\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ebdv0n2yhj58xtwm5pcassav\"><i class=\"material-icons\">link</i>AngularJS 到 Angular 快速参考</h1>\n<a id=\"top\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tbwrd56k6qtbqvd78cxgqfzm\"><em>Angular</em> 是指当今和未来的 Angular。 \n<em>AngularJS</em> 是指 Angular 的所有 v1.x 版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61t2ir4vt0cw436muhahuso4n\">本指南通过将 AngularJS 语法映射到等效的 Angular 语法，帮助你从 AngularJS 过渡到 Angular。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68g0czvc30s2mflsintpfgizv\"><strong>在此 \n <live-example name=\"ajs-quick-reference\"></live-example> 中查看 Angular 语法。</strong></p>\n<h2 id=\"template-basics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ian8ewsksqxp8yzxjoeuwxkf\"><i class=\"material-icons\">link</i>模板基础</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40bwgnjcr8m8mb0nmjwxa51hf\">模板是 Angular 应用程序面向用户的部分，并使用 HTML 编写。 下表列出了一些关键的 AngularJS 模板特性及其等效的 Angular 模板语法。</p>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      AngularJS\n    </th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b15dx02gvm25ufx1yzzqi9xxk\">Angular</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"bindingsinterpolation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y5kv97lvonszkwnnrdzu9jex\"><i class=\"material-icons\">link</i>绑定/插值</h3>\n      <code-example hidecopy=\"\">\n        Your favorite hero is: {{vm.favoriteHero}}\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddmt3n6nvgno67ud3k6ayfh85\">在 AngularJS 中，花括号中的表达式表示单向绑定。 这将元素的值绑定到与该模板关联的控制器中的属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rubks111tz2rjd4cy1y1ptl0\">使用 \n<code>controller as</code> 语法时， 绑定以控制器别名（\n<code>vm</code> 或 \n<code>$ctrl</code>）为前缀，因为你 必须明确绑定来源。</p>\n    </td>\n    <td>\n<h3 id=\"bindingsinterpolation-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y5kv97lvonszkwnnrdzu9jex\"><i class=\"material-icons\">link</i>绑定/插值</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"interpolation\" linenums=\"false\">\nYour favorite hero is: {{favoriteHero}}\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dogmuz4z57gy6tkhyg02gq3\">在 Angular 中，花括号中的模板表达式仍然表示单向绑定。 这将元素的值绑定到组件的属性。 绑定的上下文是隐式的，并且始终是 关联的组件，因此不需要引用变量。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dpe9dv0z5ukm9o713p7fr1fs\">有关更多信息，请参阅 \n<a href=\"guide/template-syntax#interpolation\">插值</a> 部分的 \n<a href=\"guide/template-syntax\">模板语法</a> 页面。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"filters\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efxpaaz70gnt9an81l66cg3k0\"><i class=\"material-icons\">link</i>过滤器</h3>\n      <code-example hidecopy=\"\">\n        &lt;td&gt;{{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&lt;/td&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lp4kkr3bk8dxgba8mhz8eceb\">要在 AngularJS 模板中过滤输出，请使用管道字符（|）和一个或多个过滤器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eihkr0c0pjcpphiez3dk85z3q\">此示例将 \n<code>title</code> 属性过滤为大写。</p>\n    </td>\n    <td>\n<h3 id=\"pipes\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"4c1vv1rgp7phpgpk7rg59bjk0\"><i class=\"material-icons\">link</i>管道</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"uppercase\" linenums=\"false\">\n&lt;td&gt;{{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&lt;/td&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7f82s87lz0shzih59sqvzzcf8\">在 Angular 中，你使用类似的语法，使用管道字符（|）来过滤输出，但现在你称之为 \n<strong>管道</strong>。 Angular 中内置了许多（但并非全部）AngularJS 中的内置过滤器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jxqijk9fzll4uv1hc35ahu7c\">有关更多信息，请参阅下面的 \n<a href=\"guide/ajs-quick-reference#filters-pipes\">过滤器/管道</a>。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"local-variables\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"f1wux8pbiiaw8gt9kr8fv0zvx\"><i class=\"material-icons\">link</i>局部变量</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;tr ng-repeat=\"movie in vm.movies\"&gt;\n          &lt;td&gt;{{movie.title}}&lt;/td&gt;\n        &lt;/tr&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52avv89fy03f7b473rup7uhas\">这里，\n<code>movie</code> 是一个用户定义的局部变量。</p>\n    </td>\n    <td>\n<h3 id=\"input-variables\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hclqeg2o5tf79qeh5ruqk33u\"><i class=\"material-icons\">link</i>输入变量</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"local\" linenums=\"false\">\n&lt;tr *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\"&gt;\n  &lt;td&gt;{{movie.title}}&lt;/td&gt;\n&lt;/tr&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7px9c9uxzct9abnr5idmjs6il\">Angular 拥有真正的模板输入变量，这些变量是使用 \n<code>let</code> 关键字显式定义的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baosa5a3fqyphihup0e332os5\">有关更多信息，请参阅 \n<a href=\"guide/template-syntax#microsyntax\">ngFor 微语法</a> 部分的 \n<a href=\"guide/template-syntax\">模板语法</a> 页面。</p>\n    </td>\n  </tr>\n</tbody></table>\n<h2 id=\"template-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7xxh7ehctl54h6mud4s2h402\"><i class=\"material-icons\">link</i>模板指令</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ta78v2128r815y6r0bha67lr\">AngularJS 为模板提供了七十多个内置指令。 其中许多在 Angular 中不再需要，因为 Angular 拥有更强大、更具表现力的绑定系统。 以下是 AngularJS 中一些关键的内置指令及其在 Angular 中的等效项。</p>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      AngularJS\n    </th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b15dx02gvm25ufx1yzzqi9xxk\">Angular</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-app\">ng-app</h3>\n      <code-example hidecopy=\"\">\n        &lt;body ng-app=\"movieHunter\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"704260fgsifl0i7qczs7iu70c\">应用程序启动过程称为 \n<strong>引导</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wbzdrbklpwryziwjbdx3l83i\">虽然你可以在代码中引导 AngularJS 应用， 但许多应用程序使用 \n<code>ng-app</code> 指令以声明方式引导， 并为其指定应用程序模块的名称（\n<code>movieHunter</code>）。</p>\n    </td>\n    <td>\n<h3 id=\"bootstrapping\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p29plvvbfir7eo01lmju80ab\"><i class=\"material-icons\">link</i>引导</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/main.ts\" title=\"main.ts\" linenums=\"false\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-example>\n<br></p>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\" title=\"app.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent }  from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6mpr4xl34twfz4g6f6aostlm\">Angular 没有引导指令。 要在代码中启动应用，请在 \n<code>main.ts</code> 中显式引导应用程序的根模块（\n<code>AppModule</code>）， 并在 \n<code>app.module.ts</code> 中引导应用程序的根组件（\n<code>AppComponent</code>）。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-class\">ng-class</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;div ng-class=\"{active: isActive}\"&gt;\n        &lt;div ng-class=\"{active: isActive,\n                           shazam: isImportant}\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9e3y2m6fbgkj2q0nx6lcqfca\">在 AngularJS 中，\n<code>ng-class</code> 指令根据表达式包含/排除 CSS 类。该表达式通常是一个键值控制对象，其中对象的每个键都定义为 CSS 类名，每个值都定义为求值为布尔值的模板表达式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lyr3iyrcgifwgxvthu11ii71\">在第一个示例中，如果 \n<code>isActive</code> 为真，则将 \n<code>active</code> 类应用于元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sp19y1dffxe2294eh7er2no4\">你可以指定多个类，如第二个示例所示。</p>\n    </td>\n    <td>\n<h3 id=\"ngclass\">ngClass</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngClass\" linenums=\"false\">\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive}\"&gt;\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive,\n                 'shazam': isImportant}\"&gt;\n&lt;div [class.active]=\"isActive\"&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92h61xaq1cv8hj15k2xugky3s\">在 Angular 中，\n<code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 指令的工作方式类似。 它根据表达式包含/排除 CSS 类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lyr3iyrcgifwgxvthu11ii71\">在第一个示例中，如果 \n<code>isActive</code> 为真，则将 \n<code>active</code> 类应用于元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sp19y1dffxe2294eh7er2no4\">你可以指定多个类，如第二个示例所示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"967aefdla2ecjw1lq14nvo5ui\">Angular 还拥有 \n<strong>类绑定</strong>，这是一种添加或删除单个类的有效方法， 如第三个示例所示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"288erhs0qy1frnauk4emiig1m\">有关更多信息，请参阅 \n<a href=\"guide/template-syntax#other-bindings\">属性、类和样式绑定</a> 部分的 \n<a href=\"guide/template-syntax\">模板语法</a> 页面。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-click\">ng-click</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;button ng-click=\"vm.toggleImage()\"&gt;\n        &lt;button ng-click=\"vm.toggleImage($event)\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"545wd9a9a08oju4nphse9q7kq\">在 AngularJS 中，\n<code>ng-click</code> 指令允许你指定元素被点击时的自定义行为。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78t80866siz8ari0j2bqcpf8f\">在第一个示例中，当用户点击按钮时，将执行由 \n<code>vm</code> \n<code>controller as</code> 别名引用的控制器中的 \n<code>toggleImage()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pu8hfjm592m44ujbuxsccc4s\">第二个示例演示了传入 \n<code>$event</code> 对象，该对象向控制器提供有关事件的详细信息。</p>\n    </td>\n    <td>\n<h3 id=\"bind-to-the-click-event\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erhezjg6j3oqhsqq2ynoqva2z\"><i class=\"material-icons\">link</i>绑定到 \n<code>click</code> 事件</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"event-binding\" linenums=\"false\">\n&lt;button (click)=\"toggleImage()\"&gt;\n&lt;button (click)=\"toggleImage($event)\"&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0y7p2o6ru2cpi2fr6qt00ak6\">AngularJS 中基于事件的指令在 Angular 中不存在。 相反，使用 \n<strong>事件绑定</strong> 从模板视图到组件定义单向绑定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfbrw8p6nx1kwei8wrlv3vbtw\">对于事件绑定，在括号中定义目标事件的名称，并在等号右侧指定一个带引号的模板语句。然后，Angular 为目标事件设置一个事件处理程序。当事件被触发时，处理程序将执行模板语句。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hklq8wheecp1t0t1rfps3pyb\">在第一个示例中，当用户点击按钮时，将执行关联组件中的 \n<code>toggleImage()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xauzkb8f0obdbqxj9336xl5g\">第二个示例演示了传入 \n<code>$event</code> 对象，该对象向组件提供有关事件的详细信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47a8v4iwohra5oqxliassz554\">有关 DOM 事件的列表，请参阅：\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">https://developer.mozilla.org/en-US/docs/Web/Events</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wwn9b6u67v6toopw5bgftgb9\">有关更多信息，请参阅 \n<a href=\"guide/template-syntax#event-binding\">事件绑定</a> 部分的 \n<a href=\"guide/template-syntax\">模板语法</a> 页面。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-controller\">ng-controller</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;div ng-controller=\"MovieListCtrl as vm\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gu4q9j3su73zzk6jdiw2ym8y\">在 AngularJS 中，\n<code>ng-controller</code> 指令将控制器附加到视图。 使用 \n<code>ng-controller</code>（或将控制器定义为路由的一部分）将视图绑定到与该视图关联的控制器代码。</p>\n    </td>\n    <td>\n<h3 id=\"component-decorator\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2anqswiilxcebm8n4danpqr7f\"><i class=\"material-icons\">link</i>组件装饰器</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nhy24qpd1g1uo2krqyyo2icd\">在 Angular 中，模板不再指定其关联的控制器。 相反，组件在组件类装饰器中指定其关联的模板。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8sm01nspiwf29v02avr760tzw\">有关更多信息，请参阅 \n<a href=\"guide/architecture#components\">架构概述</a>。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-hide\">ng-hide</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bam5damj17whe1hb4ruzgqg10\">在 AngularJS 中，\n<code>ng-hide</code> 指令根据表达式显示或隐藏关联的 HTML 元素。有关更多信息，请参阅 \n<a href=\"guide/ajs-quick-reference#ng-show\">ng-show</a>。</p>\n    </td>\n    <td>\n<h3 id=\"bind-to-the-hidden-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6847ws3z5o75bltwpth5bwvj2\"><i class=\"material-icons\">link</i>绑定到 \n<code>hidden</code> 属性</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj6kuxedodu2tlv9uxueh4erj\">在 Angular 中，你使用属性绑定；没有内置的 \n<em>hide</em> 指令。 有关更多信息，请参阅 \n<a href=\"guide/ajs-quick-reference#ng-show\">ng-show</a>。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-href\">ng-href</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> ng-href=\"{{ angularDocsUrl }}\"&gt;Angular Docs&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49dc3teewddq9nh7f9knrf7q8\"><code>ng-href</code> 指令允许 AngularJS 预处理 \n<code>href</code> 属性，以便在浏览器从该 URL 获取之前，用适当的 URL 替换绑定表达式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93rydp5379yh8fdzaqfp4frw8\">在 AngularJS 中，\n<code>ng-href</code> 通常用于在导航过程中激活路由。</p>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> ng-href=\"#{{ moviesHash }}\"&gt;Movies&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ar8tkx65yzurhtukhaqpm996b\">Angular 中的路由处理方式不同。</p>\n    </td>\n    <td>\n<h3 id=\"bind-to-the-href-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1h7x4ywm1n8wjn77dgqaq83p4\"><i class=\"material-icons\">link</i>绑定到 \n<code>href</code> 属性</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"href\" linenums=\"false\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [href]=\"angularDocsUrl\"&gt;Angular Docs&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0b5ycmazqle2d4n8kcb9kvad\">Angular 使用属性绑定；没有内置的 \n<em>href</em> 指令。 将元素的 \n<code>href</code> 属性放在方括号中，并将其设置为带引号的模板表达式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ew4akch86lmgkvmk36emiz0pb\">有关更多信息，请参阅 \n<a href=\"guide/template-syntax#property-binding\">属性绑定</a> 部分的 \n<a href=\"guide/template-syntax\">模板语法</a> 页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ia61cnay1v3qq83lvns4vtdq\">在 Angular 中，\n<code>href</code> 不再用于路由。路由使用 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>，如以下示例所示。</p>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"router-link\" linenums=\"false\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/movies']\"&gt;Movies&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3sjnag6orv700mdus1lbw88up\">有关路由的更多信息，请参阅 \n<a href=\"guide/router#router-link\">RouterLink 绑定</a> 部分的 \n<a href=\"guide/router\">路由和导航</a> 页面。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-if\">ng-if</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;table ng-if=\"movies.length\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkz8yyqdpyaws8lq5jvuro86k\">在 AngularJS 中，\n<code>ng-if</code> 指令根据表达式删除或重新创建 DOM 的一部分。如果表达式为假，则该元素将从 DOM 中删除。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pm9aedgfk6b2cfd2lbbt0p76\">在此示例中，除非 \n<code>movies</code> 数组的长度大于零，否则 \n<code>&lt;table&gt;</code> 元素将从 DOM 中移除。</p>\n    </td>\n    <td>\n<h3 id=\"ngif\">*ngIf</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngIf\" linenums=\"false\">\n&lt;table *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"movies.length\"&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5uva4as8x7s28xkvezux5x1h\">Angular 中的 \n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令与 AngularJS 中的 \n<code>ng-if</code> 指令的工作原理相同。它根据表达式移除或重新创建 DOM 的一部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3x6t1vqc8i0oritq0z76sluai\">在此示例中，除非 \n<code>movies</code> 数组具有长度，否则 \n<code>&lt;table&gt;</code> 元素将从 DOM 中移除。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbk03fc7gq6xi7pmrl3qa5son\">此示例中 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 前面的 (*) 是必需的。有关更多信息，请参阅 \n<a href=\"guide/structural-directives\">结构型指令</a>。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-model\">ng-model</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;input ng-model=\"vm.favoriteHero\"/&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdjwrwzxqeodu32bzo409ji59\">在 AngularJS 中，\n<code>ng-model</code> 指令将表单控件绑定到与模板关联的控制器中的属性。这提供了\n<strong>双向绑定</strong>，即对视图中值所做的任何更改都会与模型同步，对模型所做的任何更改都会与视图中的值同步。</p>\n    </td>\n    <td>\n<h3 id=\"ngmodel\">ngModel</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngModel\" linenums=\"false\">\n&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"favoriteHero\" /&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ar1mf2i3h6dupta2c16erocem\">在 Angular 中，\n<strong>双向绑定</strong>由 \n<code>[()]</code> 表示，描述性地称为“方框中的香蕉”。此语法是定义属性绑定（从组件到视图）和事件绑定（从视图到组件）的快捷方式，从而提供双向绑定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjv6g4tnetj2319zce5e4y8fp\">有关使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 进行双向绑定的更多信息，请参阅 \n<a href=\"../guide/template-syntax.html#ngModel\">NgModel—使用 <code>[(ngModel)]</code> 对表单元素进行双向绑定</a> \n<a href=\"guide/template-syntax\">模板语法</a> 页面中的部分。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-repeat\">ng-repeat</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;tr ng-repeat=\"movie in vm.movies\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f6l1lilvms3b99w27kgzx8as\">在 AngularJS 中，\n<code>ng-repeat</code> 指令会为指定集合中的每个条目重复关联的 DOM 元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kf42pctidsv6z6rj0w895ix2\">在此示例中，表格行 (\n<code>&lt;tr&gt;</code>) 元素会为电影集合中的每个电影对象重复。</p>\n    </td>\n    <td>\n<h3 id=\"ngfor\">*ngFor</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngFor\" linenums=\"false\">\n&lt;tr *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\"&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3svnsjjoxp6k2v8yv1oy8rt2e\">Angular 中的 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令类似于 AngularJS 中的 \n<code>ng-repeat</code> 指令。它会为指定集合中的每个条目重复关联的 DOM 元素。更准确地说，它会将定义的元素（在此示例中为 \n<code>&lt;tr&gt;</code>）及其内容转换为模板，并使用该模板为列表中的每个条目实例化视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bk6gwv3domqhg7zcom123kc6\">请注意其他语法差异：\n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 前面的 (*) 是必需的；\n<code>let</code> 关键字将 \n<code>movie</code> 标识为输入变量；列表介词为 \n<code>of</code>，而不是 \n<code>in</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6et33rum26dezaw52oij2pd02\">有关更多信息，请参阅 \n<a href=\"guide/structural-directives\">结构型指令</a>。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-show\">ng-show</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;h3 ng-show=\"vm.favoriteHero\"&gt;\n          Your favorite hero is: {{vm.favoriteHero}}\n        &lt;/h3&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2pa0e9fz18swsm9j9e79fo34\">在 AngularJS 中，\n<code>ng-show</code> 指令根据表达式显示或隐藏关联的 DOM 元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ojx4qoexume1ak577855cl3w\">在此示例中，如果 \n<code>favoriteHero</code> 变量为真值，则会显示 \n<code>&lt;div&gt;</code> 元素。</p>\n    </td>\n    <td>\n<h3 id=\"bind-to-the-hidden-property-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6847ws3z5o75bltwpth5bwvj2\"><i class=\"material-icons\">link</i>绑定到 \n<code>hidden</code> 属性</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"hidden\" linenums=\"false\">\n&lt;h3 [hidden]=\"!favoriteHero\"&gt;\n  Your favorite hero is: {{favoriteHero}}\n&lt;/h3&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qf89jnj5hms27kwdtsymzqgs\">Angular 使用属性绑定；没有内置的 \n<em>show</em> 指令。要隐藏和显示元素，请绑定到 HTML \n<code>hidden</code> 属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mhqv7aolj97euhnxgq09h1vl\">要根据条件显示元素，请将元素的 \n<code>hidden</code> 属性放在方括号中，并将其设置为求值为 \n<em>show</em> 的\n<em>相反</em>值的带引号的模板表达式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rq0gd8bh6x57i84i81pgx148\">在此示例中，如果 \n<code>favoriteHero</code> 变量不是真值，则会隐藏 \n<code>&lt;div&gt;</code> 元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anhbvd2plm9y9knthjm16xltc\">有关属性绑定的更多信息，请参阅 \n<a href=\"guide/template-syntax#property-binding\">属性绑定</a> \n<a href=\"guide/template-syntax\">模板语法</a> 页面中的部分。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-src\">ng-src</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;img ng-src=\"{{movie.imageurl}}\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clnco5gykypc1puifb1iskze4\"><code>ng-src</code> 指令允许 AngularJS 预处理 \n<code>src</code> 属性，以便在浏览器从该 URL 获取之前，用适当的 URL 替换绑定表达式。</p>\n    </td>\n    <td>\n<h3 id=\"bind-to-the-src-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7c63tqdxpvlcx6km6g1yisww\"><i class=\"material-icons\">link</i>绑定到 \n<code>src</code> 属性</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"src\" linenums=\"false\">\n&lt;img [src]=\"movie.imageurl\"&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uyqv6la2a6slqskr3mm5f2ig\">Angular 使用属性绑定；没有内置的 \n<em>src</em> 指令。请将 \n<code>src</code> 属性放在方括号中，并将其设置为带引号的模板表达式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anhbvd2plm9y9knthjm16xltc\">有关属性绑定的更多信息，请参阅 \n<a href=\"guide/template-syntax#property-binding\">属性绑定</a> \n<a href=\"guide/template-syntax\">模板语法</a> 页面中的部分。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-style\">ng-style</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;div ng-style=\"{color: colorPreference}\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbifx5b8lj1lfxehoweymktl0\">在 AngularJS 中，\n<code>ng-style</code> 指令根据表达式设置 HTML 元素的 CSS 样式。该表达式通常是一个键值控制对象，其中对象的每个键都定义为 CSS 属性，每个值都定义为求值为适合该样式的值的表达式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efzzx8xuexcm34om43otyeeqb\">在示例中，\n<code>color</code> 样式设置为 \n<code>colorPreference</code> 变量的当前值。</p>\n    </td>\n    <td>\n<h3 id=\"ngstyle\">ngStyle</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngStyle\" linenums=\"false\">\n&lt;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'color': colorPreference}\"&gt;\n&lt;div [style.color]=\"colorPreference\"&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deek9c2oxxn4n3xwmxcv1yrx5\">在 Angular 中，\n<code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 指令的工作原理类似。它根据表达式设置 HTML 元素的 CSS 样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djj64mjnnbdtu1vv969ze5dvv\">在第一个示例中，\n<code>color</code> 样式设置为 \n<code>colorPreference</code> 变量的当前值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19i7cj9lrpet27kvna52ykdcb\">Angular 还具有\n<strong>样式绑定</strong>，这是设置单个样式的好方法。这在第二个示例中显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ez717a7bdg8lv6qfozof5m6ho\">有关样式绑定的更多信息，请参阅 \n<a href=\"guide/template-syntax#style-binding\">样式绑定</a> \n<a href=\"guide/template-syntax\">模板语法</a> 页面中的部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dodcy38whxcdcswuppkxpiaix\">有关 \n<code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 指令的更多信息，请参阅 \n<a href=\"guide/template-syntax#ngStyle\">NgStyle</a> \n<a href=\"guide/template-syntax\">模板语法</a> 页面中的部分。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"ng-switch\">ng-switch</h3>\n      <code-example hidecopy=\"\" format=\"\">\n        &lt;div ng-switch=\"vm.favoriteHero &amp;&amp;\n                        vm.checkMovieHero(vm.favoriteHero)\"&gt;\n            &lt;div ng-switch-when=\"true\"&gt;\n              Excellent choice!\n            &lt;/div&gt;\n            &lt;div ng-switch-when=\"false\"&gt;\n              No movie, sorry!\n            &lt;/div&gt;\n            &lt;div ng-switch-default&gt;\n              Please enter your favorite hero.\n            &lt;/div&gt;\n        &lt;/div&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbe7czsp9u0i2ks2s1gq9kqda\">在 AngularJS 中，\n<code>ng-switch</code> 指令通过根据表达式的当前值选择一个模板来交换元素的内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5ngcgpeet4o5930gazrfzy7o\">在此示例中，如果未设置 \n<code>favoriteHero</code>，则模板会显示“请输入...”。如果设置了 \n<code>favoriteHero</code>，则会通过调用控制器方法来检查电影英雄。如果该方法返回 \n<code>true</code>，则模板会显示“绝佳选择！”。如果该方法返回 \n<code>false</code>，则模板会显示“没有电影，抱歉！”。</p>\n    </td>\n    <td>\n<h3 id=\"ngswitch\">ngSwitch</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngSwitch\" linenums=\"false\">\n&lt;span [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"favoriteHero &amp;&amp;\n               checkMovieHero(favoriteHero)\"&gt;\n  &lt;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\"&gt;\n    Excellent choice!\n  &lt;/p&gt;\n  &lt;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\"&gt;\n    No movie, sorry!\n  &lt;/p&gt;\n  &lt;p *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>&gt;\n    Please enter your favorite hero.\n  &lt;/p&gt;\n&lt;/span&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c42glsxob9apxyke9r00ea8m2\">在 Angular 中，\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 指令的工作原理类似。它会显示一个元素，该元素的 \n<code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 与当前 \n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 表达式值匹配。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h80s589fa6cbhrpgr5ka99da\">在此示例中，如果未设置 \n<code>favoriteHero</code>，则 \n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 值为 \n<code>null</code>，并且 \n<code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> 会显示“请输入...”。如果设置了 \n<code>favoriteHero</code>，则应用会通过调用组件方法来检查电影英雄。如果该方法返回 \n<code>true</code>，则应用会选择 \n<code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\"</code> 并显示：“绝佳选择！”。如果该方法返回 \n<code>false</code>，则应用会选择 \n<code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\"</code> 并显示：“没有电影，抱歉！”。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qmznbnap4fl8hm5bvp7akb8\">此示例中 \n<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 和 \n<code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> 前面的 (*) 是必需的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chx74jvpzxf45p64xiez36mre\">有关更多信息，请参阅 \n<a href=\"guide/template-syntax#ngSwitch\">NgSwitch 指令</a> \n<a href=\"guide/template-syntax\">模板语法</a> 页面中的部分。</p>\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"filters-pipes\"></a>\n<h2 id=\"filterspipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akxgzvo6te9k91l5pfo8tzur9\"><i class=\"material-icons\">link</i>过滤器/管道</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5eh7n57ru8o2d4ejhzudgt45\">Angular \n<strong>管道</strong>为模板中的数据提供格式化和转换，类似于 AngularJS \n<strong>过滤器</strong>。AngularJS 中的许多内置过滤器在 Angular 中都有相应的管道。有关管道的更多信息，请参阅 \n<a href=\"guide/pipes\">管道</a>。</p>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      AngularJS\n    </th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b15dx02gvm25ufx1yzzqi9xxk\">Angular</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"currency\">currency</h3>\n      <code-example hidecopy=\"\">\n        &lt;td&gt;{{movie.price | currency}}&lt;/td&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1czu77dq31wmyo2zri6uz2qb\">将数字格式化为货币。</p>\n    </td>\n    <td>\n<h3 id=\"currency-1\">currency</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"currency\" linenums=\"false\">\n&lt;td&gt;{{movie.price | currency:'USD':true}}&lt;/td&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afl2h0d4tyqqdrdmodpdzmsyy\">Angular 的 \n<code>currency</code> 管道类似，尽管一些参数已更改。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"date\">date</h3>\n      <code-example hidecopy=\"\">\n        &lt;td&gt;{{movie.releaseDate | date}}&lt;/td&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aa8i0knxp7x0i3ttgfuyilghp\">根据请求的格式将日期格式化为字符串。</p>\n    </td>\n    <td>\n<h3 id=\"date-1\">date</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"date\" linenums=\"false\">\n&lt;td&gt;{{movie.releaseDate | date}}&lt;/td&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f013e2eiuy900g3glja0nseht\">Angular 的 \n<code>date</code> 管道类似。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"filter\">filter</h3>\n      <code-example hidecopy=\"\">\n        &lt;tr ng-repeat=\"movie in movieList | filter: {title:listFilter}\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9fzf27ry7mageruyg404ug7h\">根据过滤条件从定义的集合中选择一个条目子集。</p>\n    </td>\n    <td>\n<h3 id=\"none\">none</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h2fccafrva93nezepp5ual5q\">出于性能原因，Angular 中不存在可比较的管道。在组件中完成所有过滤操作。如果在多个模板中需要相同的过滤代码，请考虑构建自定义管道。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"json\">json</h3>\n      <code-example hidecopy=\"\">\n        &lt;pre&gt;{{movie | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&lt;/pre&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clkwzvqr5a91nael2vq6ch1a\">将 JavaScript 对象转换为 JSON 字符串。这对于调试很有用。</p>\n    </td>\n    <td>\n<h3 id=\"json-1\">json</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"json\" linenums=\"false\">\n&lt;pre&gt;{{movie | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&lt;/pre&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7n4aws6j06kcarv0prxltmv5k\">Angular 的 \n<code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code> 管道执行相同的操作。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"limitto\">limitTo</h3>\n      <code-example hidecopy=\"\">\n        &lt;tr ng-repeat=\"movie in movieList | limitTo:2:0\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mmexiqqmwiu92pphlj2svmq\">从集合中选择最多前 (2) 个条目，（可选）从起始索引 (0) 开始。</p>\n    </td>\n    <td>\n<h3 id=\"slice\">slice</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"slice\" linenums=\"false\">\n&lt;tr *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let movie of movies | <a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a>:0:2\"&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jxgur91qqtaaeyty2uqbq6cv\"><code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">SlicePipe</a></code> 执行相同的操作，但\n<em>参数顺序相反</em>，与 JavaScript 的 \n<code>Slice</code> 方法保持一致。 第一个参数是起始索引；第二个参数是限制。 与 AngularJS 一样，在组件中编写此操作可能会提高性能。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"lowercase\">lowercase</h3>\n      <code-example hidecopy=\"\">\n        &lt;div&gt;{{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&lt;/div&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d64uvmkwl41ss6qe0qtz83v0h\">将字符串转换为小写。</p>\n    </td>\n    <td>\n<h3 id=\"lowercase-1\">lowercase</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"lowercase\" linenums=\"false\">\n&lt;td&gt;{{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&lt;/td&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"askkgv4mjeny9bqtdny527u7i\">Angular 的 \n<code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> 管道执行相同的操作。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"number\">number</h3>\n      <code-example hidecopy=\"\">\n        &lt;td&gt;{{movie.starRating | number}}&lt;/td&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsoqi5y0ihgkbf8alt5bv2bmm\">将数字格式化为文本。</p>\n    </td>\n    <td>\n<h3 id=\"number-1\">number</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"number\" linenums=\"false\">\n&lt;td&gt;{{movie.starRating | number}}&lt;/td&gt;\n&lt;td&gt;{{movie.starRating | number:'1.1-2'}}&lt;/td&gt;\n&lt;td&gt;{{movie.approvalRating | percent: '1.0-2'}}&lt;/td&gt;\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el25nobhlu3ui6obvjocl07d8\">Angular 的 \n<code>number</code> 管道类似。 在定义小数位数时，它提供了更多功能，如上面的第二个示例所示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aix0hxxm764hqeocladfqvqpv\">Angular 还具有 \n<code>percent</code> 管道，它将数字格式化为本地百分比，如第三个示例所示。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"orderby\">orderBy</h3>\n      <code-example hidecopy=\"\">\n        &lt;tr ng-repeat=\"movie in movieList | orderBy : 'title'\"&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sqqngp7aaxnzb3ykdvuaplyq\">按表达式指定的顺序显示集合。 在此示例中，电影标题对 \n<code>movieList</code> 进行排序。</p>\n    </td>\n    <td>\n<h3 id=\"none-1\">none</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5aklzkfegs45rm1bi36hg7ocf\">出于性能原因，Angular 中不存在可比较的管道。 相反，使用组件代码对结果进行排序或分类。如果在多个模板中需要相同的排序或分类代码，请考虑构建自定义管道。</p>\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"controllers-components\"></a>\n<h2 id=\"modulescontrollerscomponents\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c0dvvfcqwu4o5w8qqd2m8gss\"><i class=\"material-icons\">link</i>模块/控制器/组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vqhm0ltwznl6zaw4iccw0gft\">在 AngularJS 和 Angular 中，模块帮助你将应用程序组织成具有凝聚力的功能块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nrz0v8xl4yp3bsvb37h1l7i2\">在 AngularJS 中，你编写提供模型和视图方法的代码，这些代码位于\n<strong>控制器</strong>中。 在 Angular 中，你构建一个\n<strong>组件</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3e711fbssj4ja84b457vguhs\">由于许多 AngularJS 代码位于 JavaScript 中，因此 JavaScript 代码显示在 AngularJS 列中。 Angular 代码使用 TypeScript 显示。</p>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      AngularJS\n    </th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b15dx02gvm25ufx1yzzqi9xxk\">Angular</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"iife\">IIFE</h3>\n      <code-example hidecopy=\"\">\n        (function () {\n          ...\n        }());\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cr8n2bryusb9ebdutmde0x4ow\">在 AngularJS 中，控制器代码周围的立即调用函数表达式 (IIFE) 将其保留在全局命名空间之外。</p>\n    </td>\n    <td>\n<h3 id=\"none-2\">none</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8f6zylzwpbki4ufif9e2lb7g2\">这在 Angular 中不是问题，因为 ES 2015 模块 为你处理命名空间。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"m899al2k3suxgujeki7xi68h\">有关模块的更多信息，请参阅\n<a href=\"guide/architecture#modules\">模块</a> 部分的 \n<a href=\"guide/architecture\">体系结构概述</a>。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"angular-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajbumfn1wr876awvp3e7fxk3t\"><i class=\"material-icons\">link</i>Angular 模块</h3>\n      <code-example hidecopy=\"\">\n        angular.module(\"movieHunter\", [\"ngRoute\"]);\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qwmyb9evbrkxfrtbrh7o3xkx\">在 AngularJS 中，Angular 模块跟踪控制器、服务和其他代码。 第二个参数定义此模块依赖的其他模块列表。</p>\n    </td>\n    <td>\n<h3 id=\"ngmodules\">NgModules</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent }  from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpa0wrtvgu9t6eh27u2hy8ry5\">使用 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器定义的 NgModule 具有相同的用途：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq7w515e0dpco3v23ptftn9yp\"><em> <code>imports</code>: 指定此模块依赖的其他模块列表 </em> \n<code>declaration</code>: 跟踪你的组件、管道和指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"815j8xvje4i64jpko0hwidmvy\">有关模块的更多信息，请参阅\n<a href=\"guide/ngmodules\">NgModule</a>。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"controller-registration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agfkafigigrpxt0ms8mpniwch\"><i class=\"material-icons\">link</i>控制器注册</h3>\n      <code-example hidecopy=\"\">\n        angular\n          .module(\"movieHunter\")\n          .controller(\"MovieListCtrl\",\n                      [\"movieService\",\n                       MovieListCtrl]);\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcoqna6kl2wea6f7fcogakl9d\">AngularJS 在每个控制器中都有代码，这些代码查找适当的 Angular 模块 并将控制器注册到该模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4pkviw4z7xh4xpw5uzq9eyk6\">第一个参数是控制器名称。第二个参数定义注入到此控制器的所有依赖项的字符串名称，以及对控制器函数的引用。</p>\n    </td>\n    <td>\n<h3 id=\"component-decorator-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2anqswiilxcebm8n4danpqr7f\"><i class=\"material-icons\">link</i>组件装饰器</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmbdsz45gal87chtwn8bjmdpi\">Angular 向组件类添加装饰器以提供任何必需的元数据。 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器声明该类是一个组件，并提供有关该组件的元数据，例如其选择器（或标签）及其模板。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bm3bk85jmukup2fu6htt7nttd\">这就是你将模板与逻辑关联起来的方式，逻辑在组件类中定义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g3mj3xt2dadn7gk2bhwnygbu\">有关更多信息，请参阅 \n<a href=\"guide/architecture#components\">组件</a> 部分的 \n<a href=\"guide/architecture\">架构概述</a> 页面。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"controller-function\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awnelk4lhknzlxxea22rbdzt5\"><i class=\"material-icons\">link</i>控制器函数</h3>\n      <code-example hidecopy=\"\">\n        function MovieListCtrl(movieService) {\n        }\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j5eui5cdcrisr727kgteotqj\">在 AngularJS 中，你将在控制器函数中编写模型和方法的代码。</p>\n    </td>\n    <td>\n<h3 id=\"component-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qgybwm9hyr481dtzwfz2flx9\"><i class=\"material-icons\">link</i>组件类</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"class\" linenums=\"false\">\nexport class MovieListComponent {\n}\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqenlipyvq3yrswqtci0rifz4\">在 Angular 中，你将创建一个组件类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54vfm0f9sbsazf2oo0qi8eqlr\">注意：如果你在 AngularJS 中使用 TypeScript，则必须使用 \n<code>export</code> 关键字导出组件类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g3mj3xt2dadn7gk2bhwnygbu\">有关更多信息，请参阅 \n<a href=\"guide/architecture#components\">组件</a> 部分的 \n<a href=\"guide/architecture\">架构概述</a> 页面。</p>\n    </td>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ev35fdpq1f46jvj853hmazgoj\"><i class=\"material-icons\">link</i>依赖注入</h3>\n      <code-example hidecopy=\"\">\n        MovieListCtrl.$<a href=\"api/core/testing/inject\" class=\"code-anchor\">inject</a> = ['MovieService'];\n        function MovieListCtrl(movieService) {\n        }\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14jvbembp28bjr6vvm31o4yfq\">在 AngularJS 中，你将所有依赖项作为控制器函数参数传入。 此示例注入了一个 \n<code>MovieService</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cn8dnh95dajjr2rup14qtdwi4\">为了防止混淆问题，明确告诉 Angular 在第一个参数中注入 \n<code>MovieService</code> 的实例。</p>\n    </td>\n    <td>\n<h3 id=\"dependency-injection-1\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"ev35fdpq1f46jvj853hmazgoj\"><i class=\"material-icons\">link</i>依赖注入</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"di\" linenums=\"false\">\nconstructor(movieService: MovieService) {\n}\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qk2x5fbca9kqy0zh09dbtps0\">在 Angular 中，你将依赖项作为参数传入组件类的构造函数。 此示例注入了一个 \n<code>MovieService</code>。 第一个参数的 TypeScript 类型告诉 Angular 要注入什么，即使在混淆之后也是如此。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1yktsjfxv3e6nqpiltd0webt\">有关更多信息，请参阅 \n<a href=\"guide/architecture#dependency-injection\">依赖注入</a> 部分的 \n<a href=\"guide/architecture\">架构概述</a>。</p>\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"style-sheets\"></a>\n<h2 id=\"style-sheets\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nsc319nkoh3phb4nak7wgk3s\"><i class=\"material-icons\">link</i>样式表</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qlf1w6a4nexzbtn3gk3s2dpv\">样式表使你的应用程序看起来更美观。 在 AngularJS 中，你为整个应用程序指定样式表。 随着应用程序的不断发展，来自应用程序各个部分的样式会合并，这可能会导致意想不到的结果。 在 Angular 中，你仍然可以为整个应用程序定义样式表。但现在你也可以将样式表封装在特定组件中。</p>\n<table width=\"100%\">\n  <colgroup><col width=\"50%\">\n  \n  <col width=\"50%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      AngularJS\n    </th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"b15dx02gvm25ufx1yzzqi9xxk\">Angular</th>\n  </tr>\n  <tr style=\"top\">\n    <td>\n<h3 id=\"link-tag\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pv85vy0avjvjnx68y6c67uuj\"><i class=\"material-icons\">link</i>链接标签</h3>\n      <code-example hidecopy=\"\">\n        &lt;link href=\"styles.css\" rel=\"stylesheet\" /&gt;\n      </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hl343xhcr5k6rrxh9sfgpqa8\">AngularJS 在 \n<code>index.html</code> 文件的头部部分使用 \n<code>link</code> 标签来定义应用程序的样式。</p>\n    </td>\n    <td>\n<h3 id=\"styles-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eccaamnvor79m9vkzymep6i53\"><i class=\"material-icons\">link</i>样式配置</h3>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/.angular-cli.1.json\" region=\"styles\" linenums=\"false\">\n\"styles\": [\n  \"styles.css\"\n],\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fctj69hf8vjap7twqpk7ixfi\">使用 Angular CLI，你可以在 \n<code>.angular-cli.json</code> 文件中配置全局样式。 你可以将扩展名重命名为 \n<code>.scss</code> 以使用 sass。</p>\n<h3 id=\"styleurls\">StyleUrls</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a45zn15pseelb8u3pzygjd2q0\">在 Angular 中，你可以使用 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据的 \n<code>styles</code> 或 \n<code>styleUrls</code> 属性来定义 特定组件的样式表。</p>\n<p>      <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"style-url\" linenums=\"false\">\nstyleUrls: [ './movie-list.component.css' ],\n\n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30ebhne82rdz6ty421u0d20r9\">这使你能够为各个组件设置适当的样式，这些样式不会泄漏到 应用程序的其他部分。</p>\n    </td>\n  </tr>\n</tbody></table>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - ../guide/template-syntax.html#ngModel\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/common/SlicePipe\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/NgModule\n - api/core/enableProdMode\n - api/core/testing/inject\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - guide/ajs-quick-reference#angular-modules\n - guide/ajs-quick-reference#angularjs-to-angular-quick-reference\n - guide/ajs-quick-reference#bind-to-the-click-event\n - guide/ajs-quick-reference#bind-to-the-hidden-property\n - guide/ajs-quick-reference#bind-to-the-hidden-property-1\n - guide/ajs-quick-reference#bind-to-the-href-property\n - guide/ajs-quick-reference#bind-to-the-src-property\n - guide/ajs-quick-reference#bindingsinterpolation\n - guide/ajs-quick-reference#bindingsinterpolation-1\n - guide/ajs-quick-reference#bootstrapping\n - guide/ajs-quick-reference#component-class\n - guide/ajs-quick-reference#component-decorator\n - guide/ajs-quick-reference#component-decorator-1\n - guide/ajs-quick-reference#controller-function\n - guide/ajs-quick-reference#controller-registration\n - guide/ajs-quick-reference#currency\n - guide/ajs-quick-reference#currency-1\n - guide/ajs-quick-reference#date\n - guide/ajs-quick-reference#date-1\n - guide/ajs-quick-reference#dependency-injection\n - guide/ajs-quick-reference#dependency-injection-1\n - guide/ajs-quick-reference#filter\n - guide/ajs-quick-reference#filters\n - guide/ajs-quick-reference#filters-pipes\n - guide/ajs-quick-reference#filterspipes\n - guide/ajs-quick-reference#iife\n - guide/ajs-quick-reference#input-variables\n - guide/ajs-quick-reference#json\n - guide/ajs-quick-reference#json-1\n - guide/ajs-quick-reference#limitto\n - guide/ajs-quick-reference#link-tag\n - guide/ajs-quick-reference#local-variables\n - guide/ajs-quick-reference#lowercase\n - guide/ajs-quick-reference#lowercase-1\n - guide/ajs-quick-reference#modulescontrollerscomponents\n - guide/ajs-quick-reference#ng-app\n - guide/ajs-quick-reference#ng-class\n - guide/ajs-quick-reference#ng-click\n - guide/ajs-quick-reference#ng-controller\n - guide/ajs-quick-reference#ng-hide\n - guide/ajs-quick-reference#ng-href\n - guide/ajs-quick-reference#ng-if\n - guide/ajs-quick-reference#ng-model\n - guide/ajs-quick-reference#ng-repeat\n - guide/ajs-quick-reference#ng-show\n - guide/ajs-quick-reference#ng-src\n - guide/ajs-quick-reference#ng-style\n - guide/ajs-quick-reference#ng-switch\n - guide/ajs-quick-reference#ngclass\n - guide/ajs-quick-reference#ngfor\n - guide/ajs-quick-reference#ngif\n - guide/ajs-quick-reference#ngmodel\n - guide/ajs-quick-reference#ngmodules\n - guide/ajs-quick-reference#ngstyle\n - guide/ajs-quick-reference#ngswitch\n - guide/ajs-quick-reference#none\n - guide/ajs-quick-reference#none-1\n - guide/ajs-quick-reference#none-2\n - guide/ajs-quick-reference#number\n - guide/ajs-quick-reference#number-1\n - guide/ajs-quick-reference#orderby\n - guide/ajs-quick-reference#pipes\n - guide/ajs-quick-reference#slice\n - guide/ajs-quick-reference#style-sheets\n - guide/ajs-quick-reference#styles-configuration\n - guide/ajs-quick-reference#styleurls\n - guide/ajs-quick-reference#template-basics\n - guide/ajs-quick-reference#template-directives\n - guide/architecture\n - guide/architecture#components\n - guide/architecture#dependency-injection\n - guide/architecture#modules\n - guide/ngmodules\n - guide/pipes\n - guide/router\n - guide/router#router-link\n - guide/structural-directives\n - guide/template-syntax\n - guide/template-syntax#event-binding\n - guide/template-syntax#interpolation\n - guide/template-syntax#microsyntax\n - guide/template-syntax#ngStyle\n - guide/template-syntax#ngSwitch\n - guide/template-syntax#other-bindings\n - guide/template-syntax#property-binding\n - guide/template-syntax#style-binding\n - https://developer.mozilla.org/en-US/docs/Web/Events\n-->"
}