{
  "id" : "guide/deployment",
  "title" : "部署",
  "contents" : "<div class=\"content\">\n<h1 id=\"deployment\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"dv5xyx954f4euqqbhzcw4cntn\"><i class=\"material-icons\">link</i>部署</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tvqgpzlb45y31vr4h6q8qviv\">此页面描述了将 Angular 应用程序部署到远程服务器的技术。</p>\n<a id=\"dev-deploy\"></a>\n<a id=\"copy-files\"></a>\n<h2 id=\"simplest-deployment-possible\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4thrrmyfrmnda4t3vsyfbbzpb\"><i class=\"material-icons\">link</i>最简单的部署方式</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e18itcdqpnvqa3r02s0dhi4dl\">对于最简单的部署，请构建开发版本并将输出目录复制到 Web 服务器。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"iv6wb0ugr7nvandxlttmeqef\">从开发版本开始</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build\n</code-example>\n</li>\n</ol>\n<ol start=\"2\">\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66f8g10hoonseams5gtrzzxy7\">将输出文件夹（默认情况下为 \n<code>dist/</code>）中的\n<em>所有内容</em>复制到服务器上的一个文件夹中。</li>\n</ol>\n<ol start=\"3\">\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1p6r3d204obpw2ygxxogrutk\">如果你将文件复制到服务器的\n<em>子文件夹</em>中，请附加构建标志 \n<code>--base-href</code> 并相应地设置 \n<code>&lt;base href&gt;</code>。\n<br>\n<br></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsve6bdlzsv69z1wdg7nybetf\">例如，如果 \n<code>index.html</code> 在服务器上的 \n<code>/my/app/index.html</code> 中，请将\n<em>基本 href</em> 设置为 \n<code>&lt;base href=\"/my/app/\"&gt;</code>，如下所示。</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --base-href=/my/app/\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azt7f1w32heynp2bcxarkvz4b\">你会看到 \n<code>&lt;base href&gt;</code> 在生成的 \n<code>dist/index.html</code> 中被正确设置。\n<br>\n<br> 如果你复制到服务器的根目录，请省略此步骤并保留 \n<code>&lt;base href&gt;</code>。\n<br>\n<br> 了解更多关于 \n<code>&lt;base href&gt;</code> 的作用 \n<a href=\"guide/deployment#base-tag\">如下</a>。</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q6aljs138cfzwnb6v2iw3ijw\">配置服务器将对缺少文件的请求重定向到 \n<code>index.html</code>。 了解更多关于服务器端重定向的信息 \n<a href=\"guide/deployment#fallback\">如下</a>。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wxmljrcp7aw0ponesd8frrvg\">这\n<em>不是</em>生产部署。它没有优化，对用户来说速度也不会很快。它可能足以与经理、队友和其他利益相关者内部分享你的进度和想法。</p>\n<a id=\"optimize\"></a>\n<h2 id=\"optimize-for-production\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1d09b4chdcheirx476dridp89\"><i class=\"material-icons\">link</i>优化生产</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49t6vfzck86at7sczei7hsot6\">虽然直接从开发环境部署有效，但你可以使用额外的 CLI 命令行标志生成优化的构建，从 \n<code>--prod</code> 开始。</p>\n<h3 id=\"build-with---prod\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17xoi4wo4r0iytlqmfleqnxiw\"><i class=\"material-icons\">link</i>使用\n<em>--prod</em> 构建</h3>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5szmxconsfxdi3m6ztakqz4wh\"><code>--prod</code> \n<em>元标志</em>会启用以下优化功能。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gbhc0vxlaatgnw9spxlahml2\"><a href=\"guide/aot-compiler\">预先编译 (AOT) 编译</a>：预编译 Angular 组件模板。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92aoj40l7nvsz5gxdkn44okii\"><a href=\"guide/deployment#enable-prod-mode\">生产模式</a>：部署生产环境，该环境启用\n<em>生产模式</em>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chf15on7i2zl3usu9o337jkzb\">捆绑：将你的许多应用程序和库文件合并成几个捆绑包。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b222rqzxg04v242dncv8ypcy5\">最小化：删除多余的空格、注释和可选标记。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a96ey8ttuu85x7o50qe5x8ipo\">丑化：重写代码以使用简短、神秘的变量和函数名称。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d0uynkrszpme4nyvducrsix8\">死代码消除：删除未引用的模块和许多未使用的代码。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bu9xq3ohzvos7wnxdcbj20rk\">其余的 \n<a href=\"guide/deployment#copy-files\">复制部署步骤</a> 与之前相同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8we1m8rsc255i465ckhvtcb5l\">你可以通过添加 \n<code>build-optimizer</code> 标志进一步减小捆绑包大小。</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod --build-optimizer\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7voe2qj32oyel0b39lynq0mk\">有关可用构建选项及其功能的详细信息，请参阅 \n<a href=\"https://github.com/angular/angular-cli/wiki/build\">CLI 文档</a>。</p>\n<a id=\"enable-prod-mode\"></a>\n<h3 id=\"enable-production-mode\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qv8q0f7wobrmsxjxha3ncvro\"><i class=\"material-icons\">link</i>启用生产模式</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1enmvx3xwrx9ihzef3x8f0jzv\">默认情况下，Angular 应用在开发模式下运行，如你在浏览器控制台中看到的消息所示：</p>\n<code-example format=\"nocode\">\n  Angular is running in the development mode. Call <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>() to enable the production mode.\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdnb2oiwlvq3cfxq3vkfd7lkk\">切换到\n<em>生产模式</em>可以通过禁用开发特定检查（例如双重变更检测周期）来提高运行速度。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lp47t97byj77ibpg788c3pm9\">构建用于生产（或附加 \n<code>--environment=prod</code> 标志）将启用\n<em>生产模式</em>。查看 CLI 生成的 \n<code>main.ts</code> 以了解其工作原理。</p>\n<a id=\"lazy-loading\"></a>\n<h3 id=\"lazy-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"506o9p6ll5bmk3b4fpor3jq4e\"><i class=\"material-icons\">link</i>惰性加载</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6si1gfve12dhaw2gxdftrryun\">你可以通过仅加载应用启动时绝对必须存在的应用模块来大幅缩短启动时间。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqu5x57q59p4gu5rcawsfek17\">配置 Angular 路由器以延迟加载所有其他模块（及其关联的代码），方法是 \n<a href=\"guide/router#preloading\" title=\"预加载\">等待应用启动</a> 或 \n<a href=\"guide/router#asynchronous-routing\" title=\"惰性加载\"><em>惰性加载</em></a> 它们以满足需求。</p>\n<h4 id=\"dont-eagerly-import-something-from-a-lazy-loaded-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3o5q4lce2vkd2ngh03o3g3k25\"><i class=\"material-icons\">link</i>不要急切地从惰性加载的模块中导入内容</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pbgrarfy737fgqg40k0yzmqy\">这是一个常见的错误。你已安排惰性加载某个模块。但你无意中使用 JavaScript \n<code>import</code> 语句在应用启动时急切加载的文件（例如根 \n<code>AppModule</code>）中导入了它。如果你这样做，该模块将立即加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87f5gcalr93pjs37ev6h908ae\">捆绑配置必须考虑惰性加载。由于惰性加载的模块不会在 JavaScript 中导入（如上所述），因此捆绑器默认情况下会排除它们。捆绑器不知道路由器配置，不会为惰性加载的模块创建单独的捆绑包。你必须手动创建这些捆绑包。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ovul1kplw1w1e08dvnqw9z7n\">CLI 运行 \n<a href=\"https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\">Angular 预先编译 Webpack 插件</a>，该插件会自动识别惰性加载的 \n<code>NgModules</code> 并为它们创建单独的捆绑包。</p>\n<a id=\"measure\"></a>\n<h3 id=\"measure-performance\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61gtuj9ulcklgc16wrc3bv18c\"><i class=\"material-icons\">link</i>衡量性能</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4c9dzdt94d1lj3wbfphouj69i\">当你清楚地了解导致应用变慢的原因时，你可以更好地决定要优化什么以及如何优化。原因可能并非你所想。你可能会浪费大量时间和金钱来优化对应用没有实际益处甚至会使应用变慢的东西。你应该在对你重要的环境中运行时衡量应用的实际行为。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9c8eeh4k1r5ad6cnbo6akmfk5\"><a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\" title=\"Chrome DevTools 网络性能\">Chrome DevTools 网络性能页面</a> 是开始学习如何衡量性能的好地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92mje2fhejjces6ygo0jlnl7f\"><a href=\"https://www.webpagetest.org/\">WebPageTest</a> 工具是另一个不错的选择，它还可以帮助你验证部署是否成功。</p>\n<a id=\"inspect-bundle\"></a>\n<h3 id=\"inspect-the-bundles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n7405oc0r4l9ueyrptfcggqw\"><i class=\"material-icons\">link</i>检查捆绑包</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd03awwag91maab6lc6v608nl\"><a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a> 工具是检查生产构建后生成的 JavaScript 捆绑包的好方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pzamuhovihop5gj5xgg4n2xo\">安装 \n<code>source-map-explorer</code>：</p>\n<code-example language=\"none\" class=\"code-shell\">\n  npm install source-map-explorer --save-dev\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w1bn80vwrs62tuhpk1nj3c05\">构建用于生产的应用\n<em>（包括源代码映射）</em></p>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod --sourcemaps\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58l9lag1ifmeako3oy003jkgz\">列出 \n<code>dist/</code> 文件夹中生成的捆绑包。</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ls dist/*.bundle.js\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv5vn71jasreh21va7cwgn52t\">运行资源管理器以生成其中一个捆绑包的图形表示。以下示例显示了\n<em>主</em>捆绑包的图形。</p>\n<code-example language=\"none\" class=\"code-shell\">\n  node_modules/.bin/source-map-explorer dist/main.*.bundle.js\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f18zcnm1uf0tm02rqo9yq1xol\"><code>source-map-explorer</code> 分析与捆绑包一起生成的源代码映射，并绘制所有依赖项的映射，准确地显示捆绑包中包含哪些类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pyvib08q0k8pned1bcq9iu33\">以下是 QuickStart 的\n<em>主</em>捆绑包的输出。</p>\n<figure>\n  <img src=\"generated/images/guide/cli-quickstart/quickstart-sourcemap-explorer.png\" alt=\"quickstart sourcemap explorer\" width=\"767\" height=\"401\">\n</figure>\n<a id=\"base-tag\"></a>\n<h2 id=\"the-base-tag\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q21xrxin9eqbr8jcse8aq1kk\"><i class=\"material-icons\">link</i><code>base</code> 标签</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qs03zbvfdekb2bipxbdlmtku\">HTML \n<a href=\"/guide/router\"><em>&lt;base href=\"...\"/&gt;</em></a> 指定一个基本路径，用于解析对资产（如图像、脚本和样式表）的相对 URL。例如，给定 \n<code>&lt;base href=\"/my/app/\"&gt;</code>，浏览器会将 URL（如 \n<code>some/place/foo.jpg</code>）解析为对 \n<code>my/app/some/place/foo.jpg</code> 的服务器请求。在导航期间，Angular 路由器使用\n<em>基本路径</em>作为组件、模板和模块文件的基路径。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bv0vinoqu9p996tl3zmccio4\">另请参阅 \n<a href=\"api/common/APP_BASE_HREF\" title=\"API: APP_BASE_HREF\"><em>APP_BASE_HREF</em></a> 替代方案。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78i5xjwjx28cxsdq9rx44ljjq\">在开发中，你通常会在包含 \n<code>index.html</code> 的文件夹中启动服务器。这是根文件夹，你应该在 \n<code>index.html</code> 的顶部附近添加 \n<code>&lt;base href=\"/\"&gt;</code>，因为 \n<code>/</code> 是应用的根目录。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mdri3eisscd50lsf7crot56q\">但在共享服务器或生产服务器上，你可能会从子文件夹中提供应用。例如，当加载应用的 URL 为 \n<code>http://www.mysite.com/my/app/</code> 时，子文件夹为 \n<code>my/app/</code>，你应该在 \n<code>index.html</code> 的服务器版本中添加 \n<code>&lt;base href=\"/my/app/\"&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rcl4ybgy4cobrp6x1tzmoc96\">当 \n<code>base</code> 标签配置错误时，应用将无法加载，浏览器控制台将显示缺少文件的 \n<code>404 - Not Found</code> 错误。查看它\n<em>尝试</em>查找这些文件的位置，并相应地调整基本标签。</p>\n<h2 id=\"build-vs-serve\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0x2we0x0go4o7ao7id2nwjst\"><i class=\"material-icons\">link</i><em>build</em> 与 \n<em>serve</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86v33dv5pnmopkzbe49f8d452\">你可能更喜欢使用 \n<code>ng build</code> 进行部署。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lomfjkmr04e525c3iy93t76t\"><strong>ng build</strong> 命令用于构建应用并将构建工件部署到其他位置。\n<strong>ng serve</strong> 命令用于快速、本地、迭代开发。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yd1tvh6m940trbpb4qk4hxvd\"><code>ng build</code> 和 \n<code>ng serve</code> 都会在构建项目之前\n<strong>清除输出文件夹</strong>。\n<code>ng build</code> 命令将生成的构建工件写入输出文件夹。\n<code>ng serve</code> 命令不会这样做。它会从内存中提供构建工件，以提供更快的开发体验。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyqg9cg39gf9i83c5vhwmppxv\">输出文件夹默认情况下为 \n<code>dist/</code>。要输出到其他文件夹，请更改 \n<code>.angular-cli.json</code> 中的 \n<code>outDir</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kqqz2pzfz0fo892hml11ooz5\"><code>ng serve</code> 命令从本地 CLI 开发服务器构建、监视和提供应用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"942y6irkere8za9z35jxslwhi\"><code>ng build</code> 命令仅生成一次输出文件，不会提供它们。\n<code>ng build --watch</code> 命令会在源文件更改时重新生成输出文件。此 \n<code>--watch</code> 标志在开发期间构建并将更改自动重新部署到其他服务器时很有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8sidi43yh3vepldnyoci1smq1\">有关更多详细信息和选项，请参阅 \n<a href=\"https://github.com/angular/angular-cli/wiki/build\">CLI <code>build</code> 主题</a>。</p>\n<hr>\n<a id=\"server-configuration\"></a>\n<h2 id=\"server-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cus25l7be89usrqmjupkn8lo3\"><i class=\"material-icons\">link</i>服务器配置</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emsi3qc1i8upc3dtay70vapiv\">本节介绍你可能需要对服务器或部署到服务器的文件进行的更改。</p>\n<a id=\"fallback\"></a>\n<h3 id=\"routed-apps-must-fallback-to-indexhtml\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1v2lenxp6z87e4ctsh5wkadpm\"><i class=\"material-icons\">link</i>路由应用必须回退到 \n<code>index.html</code></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5huvpobay4novo3lnau5akz44\">Angular 应用非常适合使用简单的静态 HTML 服务器提供服务。你不需要服务器端引擎来动态组合应用页面，因为 Angular 会在客户端执行此操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9embuo557nvvvzfw5zbukk6la\">如果应用使用 Angular 路由器，则必须配置服务器，以便在请求它没有的文件时返回应用的主页（\n<code>index.html</code>）。</p>\n<a id=\"deep-link\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e28xp7wgig0y8etzwqyv1l3a\">路由应用应支持“深层链接”。\n<em>深层链接</em>是一个 URL，它指定应用内部组件的路径。例如，\n<code>http://www.mysite.com/heroes/42</code> 是一个指向英雄详细信息页面的\n<em>深层链接</em>，该页面显示 \n<code>id: 42</code> 的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pfaai9eu018fr2qoevh37eu1\">当用户从正在运行的客户端导航到该 URL 时，不会出现任何问题。Angular 路由器会解释 URL 并路由到该页面和英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nctcxybwt8milczv5qowktci\">但单击电子邮件中的链接、在浏览器地址栏中输入它或仅仅在英雄详细信息页面上刷新浏览器——所有这些操作都由浏览器本身处理，\n<em>在</em>正在运行的应用\n<em>之外</em>。浏览器会直接向服务器发出对该 URL 的请求，绕过路由器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u2eq80j2gqm3sh984evouf6b\">静态服务器在收到对 \n<code>http://www.mysite.com/</code> 的请求时通常会返回 \n<code>index.html</code>。但它会拒绝 \n<code>http://www.mysite.com/heroes/42</code> 并返回 \n<code>404 - Not Found</code> 错误，\n<em>除非</em>它被配置为改为返回 \n<code>index.html</code>。</p>\n<h4 id=\"fallback-configuration-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mafbfbru0jg3vqoocfewctnk\"><i class=\"material-icons\">link</i>回退配置示例</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qh0vd35z7dtay8fxfnce0exv\">没有适用于所有服务器的单一配置。以下部分描述了一些最流行服务器的配置。此列表绝非详尽无遗，但应为你提供一个良好的起点。</p>\n<h4 id=\"development-servers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1icrcc6uvy0oonkrhz8vkninb\"><i class=\"material-icons\">link</i>开发服务器</h4>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"467p8qblm733luyf5pn4ttpxa\"><a href=\"https://github.com/johnpapa/lite-server\">Lite-Server</a>：与 \n<a href=\"https://github.com/angular/quickstart\">快速入门仓库</a> 一起安装的默认开发服务器已预先配置为回退到 \n<code>index.html</code>。</li>\n</ul>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"900h6p7kg3w2z5izbif8qe603\"><a href=\"https://github.com/webpack/webpack-dev-server\">Webpack-Dev-Server</a>：在开发服务器选项中设置 \n<code>historyApiFallback</code> 条目，如下所示：</p>\n  <code-example>\n    historyApiFallback: {\n      disableDotRule: true,\n      htmlAcceptHeaders: ['text/html', 'application/xhtml+xml']\n    }\n  </code-example>\n</li>\n</ul>\n<h4 id=\"production-servers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8th8343bxo5xecpdp94s2cl7k\"><i class=\"material-icons\">link</i>生产服务器</h4>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"k33jxrp8ujfpxy0dv12jtqhc\"><a href=\"https://httpd.apache.org/\">Apache</a>：在 \n<code>.htaccess</code> 文件中添加一个 \n<a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\">重写规则</a>，如所示（\n<a href=\"https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/\">https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/</a>）：</p>\n  <code-example format=\".\">\n    RewriteEngine On\n    # If an existing asset or directory is requested go to it as it is\n    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]\n    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d\n    RewriteRule ^ - [L]\n<p>    # If the requested resource doesn't exist, use index.html\nRewriteRule ^ /index.html\n</p>\n</code-example></li>\n</ul>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ew4zao8eqr8q604pwn8rzhfej\"><a href=\"http://nginx.org/\">NGinx</a>：使用 \n<code>try_files</code>，如 \n<a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\">前端控制器模式 Web 应用</a> 中所述，修改为提供 \n<code>index.html</code>：</p>\n  <code-example format=\".\">\n    try_files $uri $uri/ /index.html;\n  </code-example>\n</li>\n</ul>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87x1owemmwb6zoo2zx00z5xyz\"><a href=\"https://www.iis.net/\">IIS</a>：在 \n<code>web.config</code> 中添加一个重写规则，类似于 \n<a href=\"http://stackoverflow.com/a/26152011/2116927\">此处</a> 所示：</p>\n  <code-example format=\".\">\n    &lt;system.webServer&gt;\n      &lt;rewrite&gt;\n        &lt;rules&gt;\n          &lt;rule name=\"Angular <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>\" stopProcessing=\"true\"&gt;\n            &lt;match url=\".*\" /&gt;\n            &lt;conditions logicalGrouping=\"MatchAll\"&gt;\n              &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" /&gt;\n              &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" /&gt;\n            &lt;/conditions&gt;\n            &lt;action type=\"Rewrite\" url=\"/index.html\" /&gt;\n          &lt;/rule&gt;\n        &lt;/rules&gt;\n      &lt;/rewrite&gt;\n    &lt;/system.webServer&gt;\n  </code-example>\n</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5mjr5awwls6vss84ey55xcoc\"><a href=\"https://pages.github.com/\">GitHub Pages</a>：你无法 \n<a href=\"https://github.com/isaacs/github/issues/408\">直接配置</a> GitHub Pages 服务器，但你可以添加一个 404 页面。将 \n<code>index.html</code> 复制到 \n<code>404.html</code>。它仍然会作为 404 响应提供服务，但浏览器会处理该页面并正确加载应用程序。最好也 \n<a href=\"https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\">从 master 上的 <code>docs/</code> 提供服务</a>，并 \n<a href=\"https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\">创建一个 <code>.nojekyll</code> 文件</a></li>\n</ul>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uwl3kfa8wmw9fc3hhti1rb1q\"><a href=\"https://firebase.google.com/docs/hosting/\">Firebase 托管</a>：添加一个 \n<a href=\"https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\">重写规则</a>。</p>\n  <code-example format=\".\">\n    \"rewrites\": [ {\n      \"source\": \"**\",\n      \"destination\": \"/index.html\"\n    } ]\n  </code-example>\n</li>\n</ul>\n<a id=\"cors\"></a>\n<h3 id=\"requesting-services-from-a-different-server-cors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3zpa9m01ec4axufgfr5mltumh\"><i class=\"material-icons\">link</i>从不同服务器请求服务（CORS）</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyaof4l29un8w0bgh5l7hy8i3\">Angular 开发人员在向应用程序自己的主机服务器以外的服务器（通常是数据服务请求）发出服务请求时，可能会遇到 \n<a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"跨域资源共享\"><i>跨域资源共享</i></a> 错误。除非服务器明确允许，否则浏览器会禁止此类请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"db3upsiws1uea4gty238nldjd\">客户端应用程序对此类错误无能为力。服务器必须配置为接受应用程序的请求。在 \n<a href=\"http://enable-cors.org/server.html\" title=\"启用 CORS 服务器\">enable-cors.org</a> 上了解如何为特定服务器启用 CORS。</p>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/change-log\n - guide/npm-packages\n - guide/setup\n - guide/visual-studio-2015\n-->\n<!-- links from this doc:\n - /guide/router\n - api/common/APP_BASE_HREF\n - api/core/enableProdMode\n - api/router/Routes\n - guide/aot-compiler\n - guide/deployment#base-tag\n - guide/deployment#build-vs-serve\n - guide/deployment#build-with---prod\n - guide/deployment#copy-files\n - guide/deployment#deployment\n - guide/deployment#development-servers\n - guide/deployment#dont-eagerly-import-something-from-a-lazy-loaded-module\n - guide/deployment#enable-prod-mode\n - guide/deployment#enable-production-mode\n - guide/deployment#fallback\n - guide/deployment#fallback-configuration-examples\n - guide/deployment#inspect-the-bundles\n - guide/deployment#lazy-loading\n - guide/deployment#measure-performance\n - guide/deployment#optimize-for-production\n - guide/deployment#production-servers\n - guide/deployment#requesting-services-from-a-different-server-cors\n - guide/deployment#routed-apps-must-fallback-to-indexhtml\n - guide/deployment#server-configuration\n - guide/deployment#simplest-deployment-possible\n - guide/deployment#the-base-tag\n - guide/router#asynchronous-routing\n - guide/router#preloading\n - http://enable-cors.org/server.html\n - http://httpd.apache.org/docs/current/mod/mod_rewrite.html\n - http://nginx.org/\n - http://stackoverflow.com/a/26152011/2116927\n - https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\n - https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n - https://firebase.google.com/docs/hosting/\n - https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\n - https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\n - https://github.com/angular/angular-cli/wiki/build\n - https://github.com/angular/quickstart\n - https://github.com/danvk/source-map-explorer/blob/master/README.md\n - https://github.com/isaacs/github/issues/408\n - https://github.com/johnpapa/lite-server\n - https://github.com/webpack/webpack-dev-server\n - https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\n - https://httpd.apache.org/\n - https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/\n - https://pages.github.com/\n - https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\n - https://www.iis.net/\n - https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\n - https://www.webpagetest.org/\n-->"
}