{
  "id": "guide/deployment",
  "title": "Deployment",
  "contents": "\n<div class=\"content\">\n<h1 id=\"deployment\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deployment\"><i class=\"material-icons\">link</i></a>Deployment</h1>\n<p>This page describes techniques for deploying your Angular application to a remote server.</p>\n<a id=\"dev-deploy\"></a>\n<a id=\"copy-files\"></a>\n<h2 id=\"simplest-deployment-possible\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#simplest-deployment-possible\"><i class=\"material-icons\">link</i></a>Simplest deployment possible</h2>\n<p>For the simplest deployment, build for development and copy the output directory to a web server.</p>\n<ol>\n<li>\n<p>Start with the development build</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build\n</code-example>\n</li>\n</ol>\n<ol start=\"2\">\n<li>Copy <em>everything</em> within the output folder (<code>dist/</code> by default) to a folder on the server.</li>\n</ol>\n<ol start=\"3\">\n<li>\n<p>If you copy the files into a server <em>sub-folder</em>, append the build flag, <code>--base-href</code> and set the <code>&#x3C;base href></code> appropriately.<br><br></p>\n<p>For example, if the <code>index.html</code> is on the server at <code>/my/app/index.html</code>, set the <em>base href</em>  to\n<code>&#x3C;base href=\"/my/app/\"></code> like this.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --base-href=/my/app/\n</code-example>\n<p>You'll see that the <code>&#x3C;base href></code> is set properly in the generated <code>dist/index.html</code>.<br><br>\nIf you copy to the server's root directory, omit this step and leave the <code>&#x3C;base href></code> alone.<br><br>\nLearn more about the role of <code>&#x3C;base href></code> <a href=\"guide/deployment#base-tag\">below</a>.</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>Configure the server to redirect requests for missing files to <code>index.html</code>.\nLearn more about server-side redirects <a href=\"guide/deployment#fallback\">below</a>.</li>\n</ol>\n<p>This is <em>not</em> a production deployment. It's not optimized and it won't be fast for users.\nIt might be good enough for sharing your progress and ideas internally with managers, teammates, and other stakeholders.</p>\n<a id=\"optimize\"></a>\n<h2 id=\"optimize-for-production\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#optimize-for-production\"><i class=\"material-icons\">link</i></a>Optimize for production</h2>\n<p>Although deploying directly from the development environment works,\nyou can generate an optimized build with additional CLI command line flags,\nstarting with <code>--prod</code>.</p>\n<h3 id=\"build-with---prod\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#build-with---prod\"><i class=\"material-icons\">link</i></a>Build with <em>--prod</em></h3>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod\n</code-example>\n<p>The <code>--prod</code> <em>meta-flag</em> engages the following optimization features.</p>\n<ul>\n<li><a href=\"guide/aot-compiler\">Ahead-of-Time (AOT) Compilation</a>: pre-compiles Angular component templates.</li>\n<li><a href=\"guide/deployment#enable-prod-mode\">Production mode</a>: deploys the production environment which enables <em>production mode</em>.</li>\n<li>Bundling: concatenates your many application and library files into a few bundles.</li>\n<li>Minification: removes excess whitespace, comments, and optional tokens.</li>\n<li>Uglification: rewrites code to use short, cryptic variable and function names.</li>\n<li>Dead code elimination: removes unreferenced modules and much unused code.</li>\n</ul>\n<p>The remaining <a href=\"guide/deployment#copy-files\">copy deployment steps</a> are the same as before.</p>\n<p>You may further reduce bundle sizes by adding the <code>build-optimizer</code> flag.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod --build-optimizer\n</code-example>\n<p>See the <a href=\"https://github.com/angular/angular-cli/wiki/build\">CLI Documentation</a>\nfor details about available build options and what they do.</p>\n<a id=\"enable-prod-mode\"></a>\n<h3 id=\"enable-production-mode\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#enable-production-mode\"><i class=\"material-icons\">link</i></a>Enable production mode</h3>\n<p>Angular apps run in development mode by default, as you can see by the following message on the browser\nconsole:</p>\n<code-example format=\"nocode\">\n  Angular is running in the development mode. Call <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>() to enable the production mode.\n</code-example>\n<p>Switching to <em>production mode</em> can make it run faster by disabling development specific checks such as the dual change detection cycles.</p>\n<p>Building for production (or appending the <code>--environment=prod</code> flag) enables <em>production mode</em>\nLook at the CLI-generated <code>main.ts</code> to see how this works.</p>\n<a id=\"lazy-loading\"></a>\n<h3 id=\"lazy-loading\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#lazy-loading\"><i class=\"material-icons\">link</i></a>Lazy loading</h3>\n<p>You can dramatically reduce launch time by only loading the application modules that\nabsolutely must be present when the app starts.</p>\n<p>Configure the Angular Router to defer loading of all other modules (and their associated code), either by\n<a href=\"guide/router#preloading\" title=\"Preloading\">waiting until the app has launched</a>\nor by <a href=\"guide/router#asynchronous-routing\" title=\"Lazy loading\"><em>lazy loading</em></a>\nthem on demand.</p>\n<h4 id=\"dont-eagerly-import-something-from-a-lazy-loaded-module\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#dont-eagerly-import-something-from-a-lazy-loaded-module\"><i class=\"material-icons\">link</i></a>Don't eagerly import something from a lazy loaded module</h4>\n<p>It's a common mistake.\nYou've arranged to lazy load a module.\nBut you unintentionally import it, with a JavaScript <code>import</code> statement,\nin a file that's eagerly loaded when the app starts, a file such as the root <code>AppModule</code>.\nIf you do that, the module will be loaded immediately.</p>\n<p>The bundling configuration must take lazy loading into consideration.\nBecause lazy loaded modules aren't imported in JavaScript (as just noted), bundlers exclude them by default.\nBundlers don't know about the router configuration and won't create separate bundles for lazy loaded modules.\nYou have to create these bundles manually.</p>\n<p>The CLI runs the\n<a href=\"https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\">Angular Ahead-of-Time Webpack Plugin</a>\nwhich automatically recognizes lazy loaded <code>NgModules</code> and creates separate bundles for them.</p>\n<a id=\"measure\"></a>\n<h3 id=\"measure-performance\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#measure-performance\"><i class=\"material-icons\">link</i></a>Measure performance</h3>\n<p>You can make better decisions about what to optimize and how when you have a clear and accurate understanding of\nwhat's making the application slow.\nThe cause may not be what you think it is.\nYou can waste a lot of time and money optimizing something that has no tangible benefit or even makes the app slower.\nYou should measure the app's actual behavior when running in the environments that are important to you.</p>\n<p>The\n<a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\" title=\"Chrome DevTools Network Performance\">\nChrome DevTools Network Performance page</a> is a good place to start learning about measuring performance.</p>\n<p>The <a href=\"https://www.webpagetest.org/\">WebPageTest</a> tool is another good choice\nthat can also help verify that your deployment was successful.</p>\n<a id=\"inspect-bundle\"></a>\n<h3 id=\"inspect-the-bundles\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#inspect-the-bundles\"><i class=\"material-icons\">link</i></a>Inspect the bundles</h3>\n<p>The <a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a>\ntool is a great way to inspect the generated JavaScript bundles after a production build.</p>\n<p>Install <code>source-map-explorer</code>:</p>\n<code-example language=\"none\" class=\"code-shell\">\n  npm install source-map-explorer --save-dev\n</code-example>\n<p>Build your app for production <em>including the source maps</em></p>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod --sourcemaps\n</code-example>\n<p>List the generated bundles in the <code>dist/</code> folder.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ls dist/*.bundle.js\n</code-example>\n<p>Run the explorer to generate a graphical representation of one of the bundles.\nThe following example displays the graph for the <em>main</em> bundle.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  node_modules/.bin/source-map-explorer dist/main.*.bundle.js\n</code-example>\n<p>The <code>source-map-explorer</code> analyzes the source map generated with the bundle and draws a map of all dependencies,\nshowing exactly which classes are included in the bundle.</p>\n<p>Here's the output for the <em>main</em> bundle of the QuickStart.</p>\n<figure>\n  <img src=\"generated/images/guide/cli-quickstart/quickstart-sourcemap-explorer.png\" alt=\"quickstart sourcemap explorer\" width=\"767\" height=\"401\">\n</figure>\n<a id=\"base-tag\"></a>\n<h2 id=\"the-base-tag\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-base-tag\"><i class=\"material-icons\">link</i></a>The <code>base</code> tag</h2>\n<p>The HTML <a href=\"/guide/router\"><em>&#x3C;base href=\"...\"/></em></a>\nspecifies a base path for resolving relative URLs to assets such as images, scripts, and style sheets.\nFor example, given the <code>&#x3C;base href=\"/my/app/\"></code>, the browser resolves a URL such as <code>some/place/foo.jpg</code>\ninto a server request for <code>my/app/some/place/foo.jpg</code>.\nDuring navigation, the Angular router uses the <em>base href</em> as the base path to component, template, and module files.</p>\n<div class=\"l-sub-section\">\n<p>See also the <a href=\"api/common/APP_BASE_HREF\" title=\"API: APP_BASE_HREF\"><em>APP_BASE_HREF</em></a> alternative.</p>\n</div>\n<p>In development, you typically start the server in the folder that holds <code>index.html</code>.\nThat's the root folder and you'd add <code>&#x3C;base href=\"/\"></code> near the top of <code>index.html</code> because <code>/</code> is the root of the app.</p>\n<p>But on the shared or production server, you might serve the app from a subfolder.\nFor example, when the URL to load the app is something like <code>http://www.mysite.com/my/app/</code>,\nthe subfolder is <code>my/app/</code> and you should add <code>&#x3C;base href=\"/my/app/\"></code> to the server version of the <code>index.html</code>.</p>\n<p>When the <code>base</code> tag is mis-configured, the app fails to load and the browser console displays <code>404 - Not Found</code> errors\nfor the missing files. Look at where it <em>tried</em> to find those files and adjust the base tag appropriately.</p>\n<h2 id=\"build-vs-serve\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#build-vs-serve\"><i class=\"material-icons\">link</i></a><em>build</em> vs. <em>serve</em></h2>\n<p>You'll probably prefer <code>ng build</code> for deployments.</p>\n<p>The <strong>ng build</strong> command is intended for building the app and deploying the build artifacts elsewhere.\nThe <strong>ng serve</strong> command is intended for fast, local, iterative development.</p>\n<p>Both <code>ng build</code> and <code>ng serve</code> <strong>clear the output folder</strong> before they build the project.\nThe <code>ng build</code> command writes generated build artifacts to the output folder.\nThe <code>ng serve</code> command does not.\nIt serves build artifacts from memory instead for a faster development experience.</p>\n<div class=\"l-sub-section\">\n<p>The output folder is  <code>dist/</code> by default.\nTo output to a different folder, change the <code>outDir</code> in <code>.angular-cli.json</code>.</p>\n</div>\n<p>The <code>ng serve</code> command builds, watches, and serves the application from a local CLI development server.</p>\n<p>The <code>ng build</code> command generates output files just once and does not serve them.\nThe <code>ng build --watch</code> command will regenerate output files when source files change.\nThis <code>--watch</code> flag is useful if you're building during development and\nare automatically re-deploying changes to another server.</p>\n<p>See the <a href=\"https://github.com/angular/angular-cli/wiki/build\">CLI <code>build</code> topic</a> for more details and options.</p>\n<hr>\n<a id=\"server-configuration\"></a>\n<h2 id=\"server-configuration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#server-configuration\"><i class=\"material-icons\">link</i></a>Server configuration</h2>\n<p>This section covers changes you may have make to the server or to files deployed to the server.</p>\n<a id=\"fallback\"></a>\n<h3 id=\"routed-apps-must-fallback-to-indexhtml\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#routed-apps-must-fallback-to-indexhtml\"><i class=\"material-icons\">link</i></a>Routed apps must fallback to <code>index.html</code></h3>\n<p>Angular apps are perfect candidates for serving with a simple static HTML server.\nYou don't need a server-side engine to dynamically compose application pages because\nAngular does that on the client-side.</p>\n<p>If the app uses the Angular router, you must configure the server\nto return the application's host page (<code>index.html</code>) when asked for a file that it does not have.</p>\n<a id=\"deep-link\"></a>\n<p>A routed application should support \"deep links\".\nA <em>deep link</em> is a URL that specifies a path to a component inside the app.\nFor example, <code>http://www.mysite.com/heroes/42</code> is a <em>deep link</em> to the hero detail page\nthat displays the hero with <code>id: 42</code>.</p>\n<p>There is no issue when the user navigates to that URL from within a running client.\nThe Angular router interprets the URL and routes to that page and hero.</p>\n<p>But clicking a link in an email, entering it in the browser address bar,\nor merely refreshing the browser while on the hero detail page —\nall of these actions are handled by the browser itself, <em>outside</em> the running application.\nThe browser makes a direct request to the server for that URL, bypassing the router.</p>\n<p>A static server routinely returns <code>index.html</code> when it receives a request for <code>http://www.mysite.com/</code>.\nBut it rejects <code>http://www.mysite.com/heroes/42</code> and returns a <code>404 - Not Found</code> error <em>unless</em> it is\nconfigured to return <code>index.html</code> instead.</p>\n<h4 id=\"fallback-configuration-examples\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#fallback-configuration-examples\"><i class=\"material-icons\">link</i></a>Fallback configuration examples</h4>\n<p>There is no single configuration that works for every server.\nThe following sections describe configurations for some of the most popular servers.\nThe list is by no means exhaustive, but should provide you with a good starting point.</p>\n<h4 id=\"development-servers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#development-servers\"><i class=\"material-icons\">link</i></a>Development servers</h4>\n<ul>\n<li><a href=\"https://github.com/johnpapa/lite-server\">Lite-Server</a>: the default dev server installed with the\n<a href=\"https://github.com/angular/quickstart\">Quickstart repo</a> is pre-configured to fallback to <code>index.html</code>.</li>\n</ul>\n<ul>\n<li>\n<p><a href=\"https://github.com/webpack/webpack-dev-server\">Webpack-Dev-Server</a>:  setup the\n<code>historyApiFallback</code> entry in the dev server options as follows:</p>\n  <code-example>\n    historyApiFallback: {\n      disableDotRule: true,\n      htmlAcceptHeaders: ['text/html', 'application/xhtml+xml']\n    }\n  </code-example>\n</li>\n</ul>\n<h4 id=\"production-servers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-servers\"><i class=\"material-icons\">link</i></a>Production servers</h4>\n<ul>\n<li>\n<p><a href=\"https://httpd.apache.org/\">Apache</a>: add a\n<a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\">rewrite rule</a> to the <code>.htaccess</code> file as shown\n(<a href=\"https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/\">https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/</a>):</p>\n  <code-example format=\".\">\n    RewriteEngine On\n    # If an existing asset or directory is requested go to it as it is\n    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]\n    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d\n    RewriteRule ^ - [L]\n<p>    # If the requested resource doesn't exist, use index.html\nRewriteRule ^ /index.html\n</p>\n</code-example></li>\n</ul>\n<ul>\n<li>\n<p><a href=\"http://nginx.org/\">NGinx</a>: use <code>try_files</code>, as described in\n<a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\">Front Controller Pattern Web Apps</a>,\nmodified to serve <code>index.html</code>:</p>\n  <code-example format=\".\">\n    try_files $uri $uri/ /index.html;\n  </code-example>\n</li>\n</ul>\n<ul>\n<li>\n<p><a href=\"https://www.iis.net/\">IIS</a>: add a rewrite rule to <code>web.config</code>, similar to the one shown\n<a href=\"http://stackoverflow.com/a/26152011/2116927\">here</a>:</p>\n  <code-example format=\".\">\n    &#x3C;system.webServer>\n      &#x3C;rewrite>\n        &#x3C;rules>\n          &#x3C;rule name=\"Angular <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>\" stopProcessing=\"true\">\n            &#x3C;match url=\".*\" />\n            &#x3C;conditions logicalGrouping=\"MatchAll\">\n              &#x3C;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n              &#x3C;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n            &#x3C;/conditions>\n            &#x3C;action type=\"Rewrite\" url=\"/index.html\" />\n          &#x3C;/rule>\n        &#x3C;/rules>\n      &#x3C;/rewrite>\n    &#x3C;/system.webServer>\n  </code-example>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://pages.github.com/\">GitHub Pages</a>: you can't\n<a href=\"https://github.com/isaacs/github/issues/408\">directly configure</a>\nthe GitHub Pages server, but you can add a 404 page.\nCopy <code>index.html</code> into <code>404.html</code>.\nIt will still be served as the 404 response, but the browser will process that page and load the app properly.\nIt's also a good idea to\n<a href=\"https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\">serve from <code>docs/</code> on master</a>\nand to\n<a href=\"https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\">create a <code>.nojekyll</code> file</a></li>\n</ul>\n<ul>\n<li>\n<p><a href=\"https://firebase.google.com/docs/hosting/\">Firebase hosting</a>: add a\n<a href=\"https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\">rewrite rule</a>.</p>\n  <code-example format=\".\">\n    \"rewrites\": [ {\n      \"source\": \"**\",\n      \"destination\": \"/index.html\"\n    } ]\n  </code-example>\n</li>\n</ul>\n<a id=\"cors\"></a>\n<h3 id=\"requesting-services-from-a-different-server-cors\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#requesting-services-from-a-different-server-cors\"><i class=\"material-icons\">link</i></a>Requesting services from a different server (CORS)</h3>\n<p>Angular developers may encounter a\n<a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"Cross-origin resource sharing\">\n<i>cross-origin resource sharing</i></a> error when making a service request (typically a data service request)\nto a server other than the application's own host server.\nBrowsers forbid such requests unless the server permits them explicitly.</p>\n<p>There isn't anything the client application can do about these errors.\nThe server must be configured to accept the application's requests.\nRead about how to enable CORS for specific servers at\n<a href=\"http://enable-cors.org/server.html\" title=\"Enabling CORS server\">enable-cors.org</a>.</p>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/change-log\n - guide/npm-packages\n - guide/setup\n - guide/visual-studio-2015\n-->\n<!-- links from this doc:\n - /guide/router\n - api/common/APP_BASE_HREF\n - api/core/enableProdMode\n - api/router/Routes\n - guide/aot-compiler\n - guide/deployment#base-tag\n - guide/deployment#build-vs-serve\n - guide/deployment#build-with---prod\n - guide/deployment#copy-files\n - guide/deployment#deployment\n - guide/deployment#development-servers\n - guide/deployment#dont-eagerly-import-something-from-a-lazy-loaded-module\n - guide/deployment#enable-prod-mode\n - guide/deployment#enable-production-mode\n - guide/deployment#fallback\n - guide/deployment#fallback-configuration-examples\n - guide/deployment#inspect-the-bundles\n - guide/deployment#lazy-loading\n - guide/deployment#measure-performance\n - guide/deployment#optimize-for-production\n - guide/deployment#production-servers\n - guide/deployment#requesting-services-from-a-different-server-cors\n - guide/deployment#routed-apps-must-fallback-to-indexhtml\n - guide/deployment#server-configuration\n - guide/deployment#simplest-deployment-possible\n - guide/deployment#the-base-tag\n - guide/router#asynchronous-routing\n - guide/router#preloading\n - http://enable-cors.org/server.html\n - http://httpd.apache.org/docs/current/mod/mod_rewrite.html\n - http://nginx.org/\n - http://stackoverflow.com/a/26152011/2116927\n - https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\n - https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n - https://firebase.google.com/docs/hosting/\n - https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\n - https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\n - https://github.com/angular/angular-cli/wiki/build\n - https://github.com/angular/quickstart\n - https://github.com/danvk/source-map-explorer/blob/master/README.md\n - https://github.com/isaacs/github/issues/408\n - https://github.com/johnpapa/lite-server\n - https://github.com/webpack/webpack-dev-server\n - https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\n - https://httpd.apache.org/\n - https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/\n - https://pages.github.com/\n - https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\n - https://www.iis.net/\n - https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\n - https://www.webpagetest.org/\n-->"
}