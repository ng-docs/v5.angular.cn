{
  "id" : "guide/user-input",
  "title" : "用户输入",
  "contents" : "<div class=\"content\">\n<h1 id=\"user-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"596f8zmwzo2cc45jej6z0xa2z\"><i class=\"material-icons\">link</i>用户输入</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"biozk9ypanxxywojd1tbjj6qh\">用户操作，例如点击链接、按下按钮和输入文本，会触发 DOM 事件。 本页介绍如何使用 Angular 事件绑定语法将这些事件绑定到组件事件处理程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eudb37b4r7dx2vkzc9wx59gbf\">运行 \n<live-example></live-example>。</p>\n<h2 id=\"binding-to-user-input-events\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51dtzyo05uzwbsnimhitz2r56\"><i class=\"material-icons\">link</i>绑定到用户输入事件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o6xdaaycnj8pjt5cnb8lq6h8\">你可以使用 \n<a href=\"guide/template-syntax#event-binding\">Angular 事件绑定</a> 来响应任何 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM 事件</a>。 许多 DOM 事件是由用户输入触发的。绑定到这些事件提供了一种从用户获取输入的方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej1ukf2hse4xn2jdw1kqdnmch\">要绑定到 DOM 事件，请将 DOM 事件名称括在括号中，并将其赋值给一个带引号的 \n<a href=\"guide/template-syntax#template-statements\">模板语句</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tn1qjtmeyls2y5aq01ntv9i0\">以下示例展示了一个实现点击处理程序的事件绑定：</p>\n<code-example path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-button\" title=\"src/app/click-me.component.ts\" linenums=\"false\">\n&lt;button (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n\n</code-example>\n<a id=\"click\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ckx0my74i2do4znqj85c9rjz\">等号左侧的 \n<code>(click)</code> 将按钮的点击事件标识为\n<strong>绑定的目标</strong>。 等号右侧的引号中的文本是\n<strong>模板语句</strong>，它通过调用组件的 \n<code>onClickMe</code> 方法来响应点击事件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8z7sya1ikjznn5k91lue11c0u\">编写绑定时，请注意模板语句的\n<strong>执行上下文</strong>。 模板语句中的标识符属于特定的上下文对象，通常是控制模板的 Angular 组件。 上面的示例显示了一行 HTML，但该 HTML 属于一个更大的组件：</p>\n<code-example path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\" title=\"src/app/click-me.component.ts\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-click-me',\n  template: `\n    &lt;button (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{clickMessage}}`\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gk24v5lormpfqukxc2izrp0t\">当用户点击按钮时，Angular 会调用 \n<code>ClickMeComponent</code> 中的 \n<code>onClickMe</code> 方法。</p>\n<h2 id=\"get-user-input-from-the-event-object\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9rcaf8uuf6tv6y6zmo5pb3fn\"><i class=\"material-icons\">link</i>从 $event 对象获取用户输入</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38y92bsv4pzk8mqdfjsy4g7p3\">DOM 事件会携带一些可能对组件有用的信息。 本节介绍如何绑定到输入框的 \n<code>keyup</code> 事件，以便在每次按键后获取用户的输入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvk36dikov689xc2h72bkyoa9\">以下代码监听 \n<code>keyup</code> 事件，并将整个事件负载 (\n<code>$event</code>) 传递给组件事件处理程序。</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-template\" title=\"src/app/keyup.components.ts (template v.1)\" linenums=\"false\">\ntemplate: `\n  &lt;input (keyup)=\"onKey($event)\"&gt;\n  &lt;p&gt;{{values}}&lt;/p&gt;\n`\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mpudbogboixs6632y3osdazc\">当用户按下并释放一个键时，会发生 \n<code>keyup</code> 事件，Angular 会在 \n<code>$event</code> 变量中提供一个相应的 DOM 事件对象，该代码将其作为参数传递给组件的 \n<code>onKey()</code> 方法。</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-class-no-type\" title=\"src/app/keyup.components.ts (class v.1)\" linenums=\"false\">\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  onKey(event: any) { // without type info\n    this.values += event.target.value + ' | ';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"de8o6jnuaqpb63rrb1vytqr6h\"><code>$event</code> 对象的属性会根据 DOM 事件的类型而有所不同。例如， 鼠标事件包含的信息与输入框编辑事件不同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6x6vlyldahsg5ydq58o4imv6h\">所有 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event\">标准 DOM 事件对象</a> 都有一个 \n<code>target</code> 属性，它是一个指向触发事件的元素的引用。 在本例中，\n<code>target</code> 指的是 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\"><code>&lt;input&gt;</code> 元素</a>， \n<code>event.target.value</code> 返回该元素的当前内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l441wftj3rf46d0pb0uxkevc\">在每次调用后，\n<code>onKey()</code> 方法会将输入框值的内容追加到组件的 \n<code>values</code> 属性中的列表中，并在其后添加一个分隔符 (|)。 \n<a href=\"guide/template-syntax#interpolation\">插值</a> 从 \n<code>values</code> 属性中显示累积的输入框变化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55z5cnczgdgpmpj9i21c8t2j7\">假设用户输入字母 \"abc\"，然后按退格键逐个删除它们。 以下是 UI 显示的内容：</p>\n<code-example>\n  <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> | ab | abc | ab | <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> | |\n</code-example>\n<figure>\n  <img src=\"generated/images/guide/user-input/keyup1-anim.gif\" alt=\"key up 1\" width=\"176\" height=\"100\">\n</figure>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6m910hd0sdsnpjlnw2qj60fnf\">或者，你可以通过用 \n<code>event.key</code> 替换 \n<code>event.target.value</code> 来累积单个键本身，在这种情况下，相同的用户输入将产生：</p>\n<code-example>\n  <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> | b | c | backspace | backspace | backspace |\n\n</code-example>\n</div>\n<a id=\"keyup1\"></a>\n<h3 id=\"type-the-event\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3x2g8hjfy1szizc9ofkhxfua\"><i class=\"material-icons\">link</i>键入 \n<em>$event</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4spl0m8ztjy2mllmgbn3k0bon\">上面的示例将 \n<code>$event</code> 转换为 \n<code>any</code> 类型。 这简化了代码，但也付出了代价。 没有类型信息 可以揭示事件对象的属性，并防止愚蠢的错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cvkpfnic867b0p1nlv8ki6yw\">以下示例使用类型重写了该方法：</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-class\" title=\"src/app/keyup.components.ts (class v.1 - typed )\" linenums=\"false\">\nexport class KeyUpComponent_v1 {\n  values = '';\n\n\n  onKey(event: KeyboardEvent) { // with type info\n    this.values += (&lt;HTMLInputElement&gt;event.target).value + ' | ';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zo1y3oa3b36j4b2k2lqjatbl\"><code>$event</code> 现在是一个特定的 \n<code>KeyboardEvent</code>。 并非所有元素都有 \n<code>value</code> 属性，因此它将 \n<code>target</code> 转换为一个输入元素。 \n<code>OnKey</code> 方法更清楚地表达了它对模板的期望以及它如何解释事件。</p>\n<h3 id=\"passing-event-is-a-dubious-practice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c58ll1q511dk3eazf8nyaygd0\"><i class=\"material-icons\">link</i>传递 \n<em>$event</em> 是一种可疑的做法</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7k8n49br6bv3w7qfae0tbtmni\">键入事件对象揭示了将整个 DOM 事件传递到方法中的一个重大反对意见： 组件对模板细节的了解太多。 它无法提取信息，除非它对 HTML 实现的了解超过了它应该知道的范围。 这打破了模板（\n<em>用户看到的内容</em>） 和组件（\n<em>应用程序如何处理用户数据</em>）之间的关注点分离。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97rgjjv4grj73pfu347do6l8r\">下一节将介绍如何使用模板引用变量来解决这个问题。</p>\n<h2 id=\"get-user-input-from-a-template-reference-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50alqsdtq4innxsaghefo33n1\"><i class=\"material-icons\">link</i>从模板引用变量获取用户输入</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bgw35gdf0bqza9y7qf5ky9ch\">还有另一种获取用户数据的方法：使用 Angular \n<a href=\"guide/template-syntax#ref-vars\"><strong>模板引用变量</strong></a>。 这些变量提供了从模板内部直接访问元素的方法。 要声明模板引用变量，请在标识符前面加上一个井号 (或磅号) 字符 (#)。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nnp1qz9glvtkdzuuhptb62ge\">以下示例使用模板引用变量 在一个简单的模板中实现一个按键循环。</p>\n<code-example path=\"user-input/src/app/loop-back.component.ts\" region=\"loop-back-component\" title=\"src/app/loop-back.component.ts\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-loop-back',\n  template: `\n    &lt;input #box (keyup)=\"0\"&gt;\n    &lt;p&gt;{{box.value}}&lt;/p&gt;\n  `\n})\nexport class LoopbackComponent { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"534cbdngw1qcbojraxlp2q0yl\">在 \n<code>&lt;input&gt;</code> 元素上声明的名为 \n<code>box</code> 的模板引用变量， 指的是 \n<code>&lt;input&gt;</code> 元素本身。 代码使用 \n<code>box</code> 变量获取输入元素的 \n<code>value</code>，并在 \n<code>&lt;p&gt;</code> 标签之间使用插值显示它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"852lvfqxr6vb5o2zzepqrb5it\">模板是完全自包含的。它不绑定到组件， 组件也不做任何事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d28nh2qf03uni4n6oee5jcozz\">在输入框中键入一些内容，并观察显示内容在每次按键时更新。</p>\n<figure>\n  <img src=\"generated/images/guide/user-input/keyup-loop-back-anim.gif\" alt=\"loop back\" width=\"204\" height=\"100\">\n</figure>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bjxzewsmz4zb6zxgos0us6ub\"><strong>除非你绑定到事件，否则这根本无法工作</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kc7frivm3uwxmzjkyuzpkdl1\">只有当应用程序对异步事件（例如按键）做出响应时，Angular 才会更新绑定（以及屏幕）。 此示例代码将 \n<code>keyup</code> 事件 绑定到数字 0，这是最短的模板语句。 虽然该语句没有做任何有用的事情， 但它满足了 Angular 的要求，因此 Angular 会更新屏幕。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vb69ncyyw6t3n2xqmibk3e56\">使用模板引用变量比通过 \n<code>$event</code> 对象更容易访问输入框。以下是使用模板引用变量获取用户输入的先前 \n<code>keyup</code> 示例的重写。</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-2\" title=\"src/app/keyup.components.ts (v2)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up2',\n  template: `\n    &lt;input #box (keyup)=\"onKey(box.value)\"&gt;\n    &lt;p&gt;{{values}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqpnzgm9r5sd1b15ovilpf3rd\">这种方法的一个优点是，组件从视图中获取干净的数据值。 它不再需要了解 \n<code>$event</code> 及其结构。 \n<a id=\"key-event\"></a></p>\n<h2 id=\"key-event-filtering-with-keyenter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4e46jtl5wszl7i6igviza91d0\"><i class=\"material-icons\">link</i>按键事件过滤（使用 \n<code>key.enter</code>）</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atae04jcqfbt6ey7jlzdb2v9s\"><code>(keyup)</code> 事件处理程序会听到\n<em>每次按键</em>。 有时只有\n<em>Enter</em> 键很重要，因为它表示用户已完成输入。 减少噪音的一种方法是检查每个 \n<code>$event.keyCode</code>，并且只在键为\n<em>Enter</em> 时采取行动。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cts6aslwqv1kizwd0k4dbbu3\">有一个更简单的方法：绑定到 Angular 的 \n<code>keyup.enter</code> 伪事件。 然后，只有当用户按下\n<em>Enter</em> 时，Angular 才会调用事件处理程序。</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-3\" title=\"src/app/keyup.components.ts (v3)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up3',\n  template: `\n    &lt;input #box (keyup.enter)=\"onEnter(box.value)\"&gt;\n    &lt;p&gt;{{value}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v3 {\n  value = '';\n  onEnter(value: string) { this.value = value; }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amw92mdguli4j0ilthl5rgfm4\">以下是它的工作原理。</p>\n<figure>\n  <img src=\"generated/images/guide/user-input/keyup3-anim.gif\" alt=\"key up 3\" width=\"280\" height=\"100\">\n</figure>\n<h2 id=\"on-blur\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx0g93m8dq1o84i09dglael7l\"><i class=\"material-icons\">link</i>在失去焦点时</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brun96ms050c4t2ytv03vowf\">在前面的示例中，如果用户将鼠标移开并点击页面上的其他位置， 而没有先按下\n<em>Enter</em>，则输入框的当前状态会丢失。 只有当用户按下\n<em>Enter</em> 时，组件的 \n<code>value</code> 属性才会更新。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55ubt632zu2wgffvfp5pjstna\">为了解决这个问题，监听 \n<em>Enter</em> 键和 \n<em>blur</em> 事件。</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-4\" title=\"src/app/keyup.components.ts (v4)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up4',\n  template: `\n    &lt;input #box\n      (keyup.enter)=\"update(box.value)\"\n      (blur)=\"update(box.value)\"&gt;\n\n    &lt;p&gt;{{value}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v4 {\n  value = '';\n  update(value: string) { this.value = value; }\n}\n\n</code-example>\n<h2 id=\"put-it-all-together\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6daprwlbdjpos0tgj452y7fny\"><i class=\"material-icons\">link</i>把它们都组合起来</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ays100y29db2wjqr6mkxnrpd2\">上一页展示了如何 \n<a href=\"guide/displaying-data\">显示数据</a>。 本页演示了事件绑定技术。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dynoqxo4nh7d51wex063wcs01\">现在，将它们组合成一个微型应用， 该应用可以显示英雄列表并向列表中添加新的英雄。 用户可以通过在输入框中输入英雄姓名并点击 \n<strong>添加</strong> 来添加英雄。</p>\n<figure>\n  <img src=\"generated/images/guide/user-input/little-tour-anim.gif\" alt=\"Little Tour of Heroes\" width=\"472\" height=\"268\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxt07jdk7hg3ksyfd867falwl\">以下是“英雄小游”组件。</p>\n<code-example path=\"user-input/src/app/little-tour.component.ts\" region=\"little-tour\" title=\"src/app/little-tour.component.ts\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-little-tour',\n  template: `\n    &lt;input #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value='' \"&gt;\n\n    &lt;button (click)=\"addHero(newHero.value)\"&gt;Add&lt;/button&gt;\n\n    &lt;ul&gt;&lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;{{hero}}&lt;/li&gt;&lt;/ul&gt;\n  `\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n\n</code-example>\n<h3 id=\"observations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29i636kw0sxb4n621e4lpls85\"><i class=\"material-icons\">link</i>观察结果</h3>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3561kjdc75of8als9cobyyx7\"><strong>使用模板变量引用元素</strong> — \n<code>newHero</code> 模板变量引用 \n<code>&lt;input&gt;</code> 元素。 你可以从 \n<code>&lt;input&gt;</code> 元素的任何兄弟或子元素中引用 \n<code>newHero</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ar6unotflcjwv3foiy184avw\"><strong>传递值，而不是元素</strong> — 不要将 \n<code>newHero</code> 传递到组件的 \n<code>addHero</code> 方法中， 而是获取输入框的值并将 \n<em>该值</em> 传递给 \n<code>addHero</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1u3cb9kfnpwyukb85s9t9th8\"><strong>保持模板语句简单</strong> — \n<code>(blur)</code> 事件绑定到两个 JavaScript 语句。 第一个语句调用 \n<code>addHero</code>。第二个语句 \n<code>newHero.value=''</code>， 在将新英雄添加到列表后清除输入框。</p>\n</li>\n</ul>\n<h2 id=\"source-code\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1dasgglbcjy3vffxua3icpka\"><i class=\"material-icons\">link</i>源代码</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cakgychsup4rho3959ys7t4m\">以下是本页中讨论的所有代码。</p>\n<code-tabs>\n\n  <code-pane title=\"click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-click-me',\n  template: `\n    &lt;button (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{clickMessage}}`\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"keyup.components.ts\" path=\"user-input/src/app/keyup.components.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up1',\n  template: `\n    &lt;input (keyup)=\"onKey($event)\"&gt;\n    &lt;p&gt;{{values}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  /*\n  onKey(event: any) { // without type info\n    this.values += event.target.value + ' | ';\n  }\n  */\n\n  onKey(event: KeyboardEvent) { // with type info\n    this.values += (&lt;HTMLInputElement&gt;event.target).value + ' | ';\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up2',\n  template: `\n    &lt;input #box (keyup)=\"onKey(box.value)\"&gt;\n    &lt;p&gt;{{values}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up3',\n  template: `\n    &lt;input #box (keyup.enter)=\"onEnter(box.value)\"&gt;\n    &lt;p&gt;{{value}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v3 {\n  value = '';\n  onEnter(value: string) { this.value = value; }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up4',\n  template: `\n    &lt;input #box\n      (keyup.enter)=\"update(box.value)\"\n      (blur)=\"update(box.value)\"&gt;\n\n    &lt;p&gt;{{value}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v4 {\n  value = '';\n  update(value: string) { this.value = value; }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"loop-back.component.ts\" path=\"user-input/src/app/loop-back.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-loop-back',\n  template: `\n    &lt;input #box (keyup)=\"0\"&gt;\n    &lt;p&gt;{{box.value}}&lt;/p&gt;\n  `\n})\nexport class LoopbackComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"little-tour.component.ts\" path=\"user-input/src/app/little-tour.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-little-tour',\n  template: `\n    &lt;input #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value='' \"&gt;\n\n    &lt;button (click)=\"addHero(newHero.value)\"&gt;Add&lt;/button&gt;\n\n    &lt;ul&gt;&lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;{{hero}}&lt;/li&gt;&lt;/ul&gt;\n  `\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1veovwypwzz32smp4nmlctmd0\">你已经掌握了响应用户输入和手势的基本原语。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fzs0jn9204p2aw5k5ibhk5aa\">这些技术对于小规模演示很有用，但当处理大量用户输入时，它们会很快变得冗长且笨拙。 双向数据绑定是将值在数据输入字段和模型属性之间移动的更优雅、更紧凑的方式。 下一页 \n<code>Forms</code> 解释了如何使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 编写双向绑定。</p>\n\n</div>\n<!-- links to this doc:\n - guide/architecture-components\n - guide/forms\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/core/Component\n - api/forms/NgModel\n - api/router/RouterLinkWithHref\n - guide/displaying-data\n - guide/template-syntax#event-binding\n - guide/template-syntax#interpolation\n - guide/template-syntax#ref-vars\n - guide/template-syntax#template-statements\n - guide/user-input#binding-to-user-input-events\n - guide/user-input#get-user-input-from-a-template-reference-variable\n - guide/user-input#get-user-input-from-the-event-object\n - guide/user-input#key-event-filtering-with-keyenter\n - guide/user-input#observations\n - guide/user-input#on-blur\n - guide/user-input#passing-event-is-a-dubious-practice\n - guide/user-input#put-it-all-together\n - guide/user-input#source-code\n - guide/user-input#summary\n - guide/user-input#type-the-event\n - guide/user-input#user-input\n - https://developer.mozilla.org/en-US/docs/Web/API/Event\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\n - https://developer.mozilla.org/en-US/docs/Web/Events\n-->"
}