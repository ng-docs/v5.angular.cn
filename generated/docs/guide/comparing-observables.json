{
  "id" : "guide/comparing-observables",
  "title" : "Observable 与其他技术的比较",
  "contents" : "<div class=\"content\">\n<h1 id=\"observables-compared-to-other-techniques\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1uvjh233wlltgdgmc1lv7vzw\"><i class=\"material-icons\">link</i>Observable 与其他技术的比较</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2z3mxn227r4jney7ci9f8nak\">你通常可以使用 Observable 来代替 Promise 异步传递值。类似地，Observable 可以代替事件处理程序。最后，由于 Observable 会传递多个值，因此你可以在需要构建和操作数组的地方使用它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9r9synipvxt7rmhej101ualrb\">在每种情况下，Observable 的行为与替代技术略有不同，但提供了一些显著的优势。以下是差异的详细比较。</p>\n<h2 id=\"observables-compared-to-promises\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5eewgta4y1fj0mjdgkxxi1pg0\"><i class=\"material-icons\">link</i>Observable 与 Promise 的比较</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25znoms6igt7sru12aipjhnoh\">Observable 通常与 Promise 相比较。以下是一些关键区别：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqv2slnrcss81dzkmzi2h3ej2\">Observable 是声明式的；计算直到订阅才会开始。Promise 在创建时立即执行。这使得 Observable 对于定义可以在需要结果时运行的配方非常有用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26d2ms84rxm5lhpd41rnywucv\">Observable 提供多个值。Promise 提供一个值。这使得 Observable 对于随时间获取多个值非常有用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"692kn4oqrmkujwyox30lxz2q9\">Observable 区分链式处理和订阅。Promise 只有 \n<code>.then()</code> 子句。这使得 Observable 对于创建复杂的转换配方非常有用，这些配方可以被系统的其他部分使用，而不会导致工作被执行。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yo9ixfm4kneonuzyg4hs2wwz\">Observable 的 \n<code>subscribe()</code> 负责处理错误。Promise 将错误推送到子 Promise。这使得 Observable 对于集中式和可预测的错误处理非常有用。</p>\n</li>\n</ul>\n<h3 id=\"creation-and-subscription\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2svsa3dj6a6co8ddigtxhyhhr\"><i class=\"material-icons\">link</i>创建和订阅</h3>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yi5tbn92zfkspeuvbx9c15ry\">Observable 直到消费者订阅才会执行。\n<code>subscribe()</code> 执行定义的行为一次，并且可以再次调用。每个订阅都有自己的计算。重新订阅会导致值的重新计算。</li>\n</ul>\n<code-example hidecopy=\"\">\n// declare <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> publishing operation\nnew Observable((observer) =&gt; { subscriber_fn });\n// initiate execution\nobservable.subscribe(() =&gt; {\n      // observer handles notifications\n    });\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1guh3ykme9pd2exb18zz9jzqc\">Promise 立即执行，并且只执行一次。结果的计算在创建 Promise 时启动。无法重新启动工作。所有 \n<code>then</code> 子句（订阅）共享相同的计算。</li>\n</ul>\n<code-example hidecopy=\"\">\n// initiate execution\nnew Promise((resolve, reject) =&gt; { executer_fn });\n// handle return value\npromise.then((value) =&gt; {\n      // handle result here\n    });\n</code-example>\n<h3 id=\"chaining\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bx1qsqweymejkyq5w4vbgja8\"><i class=\"material-icons\">link</i>链式处理</h3>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82lxxcsk4i1wt3tt1cy23vleq\">Observable 区分转换函数（例如映射）和订阅。只有订阅会激活订阅者函数以开始计算值。</li>\n</ul>\n<code-example hidecopy=\"\">observable.map((v) =&gt; 2*v);</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yay2wm0ww35a2t80rc9hr6ap\">Promise 不区分最后一个 \n<code>.then</code> 子句（相当于订阅）和中间 \n<code>.then</code> 子句（相当于映射）。</li>\n</ul>\n<code-example hidecopy=\"\">promise.then((v) =&gt; 2*v);</code-example>\n<h3 id=\"cancellation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hig5i3venj9rjxs56pfm4tia\"><i class=\"material-icons\">link</i>取消</h3>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ew7fp02zhub2j348vhlabp91k\">Observable 订阅是可以取消的。取消订阅会从接收更多值中移除监听器，并通知订阅者函数取消工作。</li>\n</ul>\n<code-example hidecopy=\"\">\nconst sub = obs.subscribe(...);\nsub.unsubscribe();\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1i73fuc34jlgxnsztih4h9idw\">Promise 不可取消。</li>\n</ul>\n<h3 id=\"error-handling\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ad0cx4y7txhii62pgdd0mpma9\"><i class=\"material-icons\">link</i>错误处理</h3>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xfesekmo2yh3lua806csldse\">Observable 执行错误会传递到订阅者的错误处理程序，并且订阅者会自动取消订阅 Observable。</li>\n</ul>\n<code-example hidecopy=\"\">\nobs.subscribe(() =&gt; {\n  throw Error('my error');\n});\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azo62ztgsl0qw9d08fay37mjx\">Promise 将错误推送到子 Promise。</li>\n</ul>\n<code-example hidecopy=\"\">\npromise.then(() =&gt; {\n      throw Error('my error');\n});\n</code-example>\n<h3 id=\"cheat-sheet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4n96tkco64h1h1y9w8ni6s4gh\"><i class=\"material-icons\">link</i>备忘单</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d92908fz00mior3cishfzwfu8\">以下代码片段说明了如何使用 Observable 和 Promise 定义相同类型的操作。</p>\n<table>\n  <tbody><tr>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2iiqzi4ejrbx2pmt311k8lcmp\">操作</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekbi3pmy2k9b83xgx9cjqwdyg\">可观察者</th>\n    <th>Promise</th>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65aoee8m9iko3yov1zjh599wy\">创建</td>\n    <td>\n      <pre>new Observable((observer) =&gt; {\n  observer.next(123);\n});</pre>\n    </td>\n    <td>\n      <pre>new Promise((resolve, reject) =&gt; {\n  resolve(123);\n});</pre>\n    </td>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u7ahyiy0btxd090py74ioj0w\">转换</td>\n    <td><pre>obs.map((value) =&gt; value * 2 );</pre></td>\n    <td><pre>promise.then((value) =&gt; value * 2);</pre></td>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ak8s9elsmfa2mtzkjrtjtrcrr\">订阅</td>\n    <td>\n      <pre>sub = obs.subscribe((value) =&gt; {\n  console.log(value)\n});</pre>\n    </td>\n    <td>\n      <pre>promise.then((value) =&gt; {\n  console.log(value);\n});</pre>\n    </td>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vmer097a4mmhtcjscxqoflnv\">取消订阅</td>\n    <td><pre>sub.unsubscribe();</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nqb2lfrbb3h9905eym4h5wfj\">由 Promise 求解隐式决定。</td>\n  </tr>\n</tbody></table>\n<h2 id=\"observables-compared-to-events-api\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88bsvgmzw28hlyrn79r81rkuw\"><i class=\"material-icons\">link</i>可观察者与事件 API 的比较</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7wkshmzm04ulbwqoiz6708ew\">可观察者与使用事件 API 的事件处理程序非常相似。这两种技术都定义了通知处理程序，并使用它们来处理随时间推移传递的多个值。订阅可观察者等同于添加事件监听器。一个显著的区别是，你可以配置可观察者，在将事件传递给处理程序之前转换事件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i51se048po8o9vz2tdkv42ku\">使用可观察者来处理事件和异步操作，在 HTTP 请求等上下文中可以具有更高的一致性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"936sfb6ynf03sknvdjx0g3y2g\">以下是一些代码示例，说明如何使用可观察者和事件 API 定义相同类型的操作。</p>\n<table>\n  <tbody><tr>\n    <th></th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekbi3pmy2k9b83xgx9cjqwdyg\">可观察者</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ddowl6iqycgbqmuv9g9rqdzo\">事件 API</th>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fiqllqa5hsdumesfzvqz6nrx\">创建和取消</td>\n    <td>\n<pre data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3o5iknpoxktg28t801at9bxl4\">// 设置 \n<code>let clicks$ = fromEvent(buttonEl, ‘click’);</code> // 开始监听 \n<code>let subscription = clicks$ .subscribe(e =&gt; console.log(‘Clicked’, e))</code> // 停止监听 \n<code>subscription.unsubscribe();</code></pre>\n   </td>\n   <td>\n<pre>function handler(e) {\n  console.log(‘Clicked’, e);\n}\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85sqwdvkretyt99mkxeku2fnj\">// 设置和开始监听 \n<code>button.addEventListener(‘click’, handler);</code> // 停止监听 \n<code>button.removeEventListener(‘click’, handler);</code></p>\n</pre>\n    </td>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74rywnpt0ooxmnhwzc08xvy6j\">订阅</td>\n    <td>\n<pre data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2w6c9bt9qpshatotcgej3q1e\"><code>observable.subscribe(() =&gt; { // 通知处理程序在此处 });</code></pre>\n    </td>\n    <td>\n<pre data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwlsbpg5ydd722vdoq1udrds8\"><code>element.addEventListener(eventName, (event) =&gt; { // 通知处理程序在此处 });</code></pre>\n    </td>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"27io2zcn0syxgd4dfu8paj1a1\">配置</td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axnn9htsh58b6oz6wziuj8erb\">监听按键，但提供一个表示输入框中值的流。 \n<code><pre>fromEvent(inputEl, 'keydown').pipe(\n  map(e =&gt; e.target.value)\n);</pre></code></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9brq5teg4lrv0oic5yajt67ti\">不支持配置。 \n<code><pre>element.addEventListener(eventName, (event) =&gt; {\n  // 无法在传递给处理程序之前将传递的 Event 更改为另一个\n  // 值\n});</pre></code></td>\n  </tr>\n</tbody></table>\n<h2 id=\"observables-compared-to-arrays\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rh8zhnj0g4kx6gkj21bp13s1\"><i class=\"material-icons\">link</i>可观察者与数组的比较</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blizz3135u9m50t1e8mqayt2v\">可观察者会随着时间的推移产生值。数组被创建为一组静态值。从某种意义上说，可观察者是异步的，而数组是同步的。在以下示例中，➞ 表示异步值传递。</p>\n<table>\n  <tbody><tr>\n    <th></th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekbi3pmy2k9b83xgx9cjqwdyg\">可观察者</th>\n    <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"412gntjhz0sr7gc41duksraqf\">数组</th>\n  </tr>\n  <tr>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tt94hxd0d5a0h3gexcbnp8uf\">给定</td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7njbdd0o6rl1qfnnmlvsvei0g\"><pre>obs: ➞1➞2➞3➞5➞7</pre>\n      <pre>obsB: ➞'a'➞'b'➞'c'</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ckosxzrsdb358l13wegvm28b\"><pre>arr: [1, 2, 3, 5, 7]</pre>\n      <pre>arrB: ['a', 'b', 'c']</pre></td>\n  </tr>\n  <tr>\n    <td><pre>concat()</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7huxtmkbh7t03foek3u55td4a\"><pre>obs.concat(obsB)</pre>\n      <pre>➞1➞2➞3➞5➞7➞'a'➞'b'➞'c'</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"108tn1ya2d84ytd5qf6kpfbqb\"><pre>arr.concat(arrB)</pre>\n      <pre>[1,2,3,5,7,'a','b','c']</pre></td>\n  </tr>\n  <tr>\n    <td><pre>filter()</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88x6npbib81s2q4g59rpzutin\"><pre>obs.filter((v) =&gt; v&gt;3)</pre>\n      <pre>➞5➞7</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94zw1n9rnlgduz3cjnlt16twm\"><pre>arr.filter((v) =&gt; v&gt;3)</pre>\n      <pre>[5, 7]</pre></td>\n  </tr>\n  <tr>\n    <td><pre>find()</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95v8di3p0wprag955cegwr8l1\"><pre>obs.find((v) =&gt; v&gt;3)</pre>\n      <pre>➞5</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87wyp49ffspdfqbusw2yywq7n\"><pre>arr.find((v) =&gt; v&gt;10)</pre>\n      <pre>5</pre></td>\n  </tr>\n  <tr>\n    <td><pre>findIndex()</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50ch27448rwvu2m0n6766xhmr\"><pre>obs.findIndex((v) =&gt; v&gt;3)</pre>\n      <pre>➞3</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a71bucked6jt8xmfe7nca8ofl\"><pre>arr.findIndex((v) =&gt; v&gt;3)</pre>\n      <pre>3</pre></td>\n  </tr>\n  <tr>\n    <td><pre>forEach()</pre></td>\n    <td>\n      <pre>obs.forEach((v) =&gt; {\n  console.log(v);\n})\n1\n2\n3\n4\n5</pre>\n    </td>\n    <td>\n      <pre>arr.forEach((v) =&gt; {\n  console.log(v);\n})\n1\n2\n3\n4\n5</pre>\n    </td>\n  </tr>\n  <tr>\n    <td><pre>map()</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8v7spr1d186c41aih1yy6j487\"><pre>obs.map((v) =&gt; -v)</pre>\n      <pre>➞-1➞-2➞-3➞-5➞-7</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cszotbx03lhu9prt5knd4qvue\"><pre>arr.map((v) =&gt; -v)</pre>\n      <pre>[-1, -2, -3, -5, -7]</pre></td>\n  </tr>\n  <tr>\n    <td><pre>reduce()</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rtxv2e7kfljrgbgatst4qz9u\"><pre>obs.scan((s,v)=&gt; s+v, 0)</pre>\n      <pre>➞1➞3➞6➞11➞18</pre></td>\n    <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4880x37m4ls61b7h915nh4r2b\"><pre>arr.reduce((s,v) =&gt; s+v, 0)</pre>\n      <pre>18</pre></td>\n  </tr>\n</tbody></table>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/router/RouterLinkWithHref\n - guide/comparing-observables#cancellation\n - guide/comparing-observables#chaining\n - guide/comparing-observables#cheat-sheet\n - guide/comparing-observables#creation-and-subscription\n - guide/comparing-observables#error-handling\n - guide/comparing-observables#observables-compared-to-arrays\n - guide/comparing-observables#observables-compared-to-events-api\n - guide/comparing-observables#observables-compared-to-other-techniques\n - guide/comparing-observables#observables-compared-to-promises\n-->"
}