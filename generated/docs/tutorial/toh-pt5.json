{
  "id" : "tutorial/toh-pt5",
  "title" : "路由",
  "contents" : "<div class=\"content\">\n<h1 id=\"routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74nlsxkr1xp06lifpm36dhjjp\"><i class=\"material-icons\">link</i>路由</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erd1do2jovzgkjmvzj16v5ed5\">Tour of Heroes 应用有新的需求：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7b5kvndquy9cul9c13edx4dav\">添加一个\n<em>仪表盘</em>视图。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rh6em184cjn78df6jc28h6gy\">添加在\n<em>英雄</em>和\n<em>仪表盘</em>视图之间导航的能力。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p6q29y4lgojh8gf5g4fli5dt\">当用户在任一视图中单击英雄姓名时，导航到所选英雄的详细信息视图。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nzsuqxm4xuxwrnwoostbdeks\">当用户在电子邮件中单击\n<em>深层链接</em>时，打开特定英雄的详细信息视图。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20l9u3bqutbvuv5dy21ykn0yh\">完成后，用户将能够像这样导航应用：</p>\n<figure>\n  <img src=\"generated/images/guide/toh/nav-diagram.png\" alt=\"View navigations\" width=\"506\" height=\"433\">\n</figure>\n<h2 id=\"add-the-approutingmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3je6h3t8dhc9fkkfjjueydbbl\"><i class=\"material-icons\">link</i>添加 \n<code>AppRoutingModule</code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7ofs26uf0oghlwl7pc815gp\">Angular 的最佳实践是在一个单独的顶级模块中加载和配置路由器，该模块专门用于路由，并由根 \n<code>AppModule</code> 导入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fz8x7syl1rxiyd6hwh66zvqq\">按照惯例，模块类名为 \n<code>AppRoutingModule</code>，它位于 \n<code>src/app</code> 文件夹中的 \n<code>app-routing.module.ts</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhz81psax1tmbegik4gpbq00o\">使用 CLI 生成它。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate module app-routing --flat --module=app\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vmi9a8mg8ka2mbhrs2s0anhs\"><code>--flat</code> 将文件放在 \n<code>src/app</code> 中，而不是它自己的文件夹中。\n<br>\n<code>--module=app</code> 告诉 CLI 在 \n<code>AppModule</code> 的 \n<code>imports</code> 数组中注册它。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu9g5modz2smrxaphty1zwg4j\">生成的代码如下所示：</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.0.ts\" title=\"src/app/app-routing.module.ts (generated)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9wln7reh9ug3nz0nci3rq8ps\">你通常不会在路由模块中声明组件，因此你可以删除 \n<code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 数组，并删除 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 引用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zqf3cxtxcmzid62pxji5stp\">你将在 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中使用 \n<code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 配置路由器，因此从 \n<code>@angular/router</code> 库导入这两个符号。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3n6bbgex9ar76ityydo3ndj02\">添加一个包含 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 的 \n<code>@<a href=\"api/core/NgModule#exports\" class=\"code-anchor\">NgModule.exports</a></code> 数组。导出 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 使路由器指令可用于需要它们的 \n<code>AppModule</code> 组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9a7vfsed7ecmy901iwmwlk5p\"><code>AppRoutingModule</code> 现在看起来像这样：</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"v1\" title=\"src/app/app-routing.module.ts (v1)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  exports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ]\n})\nexport class AppRoutingModule {}\n\n</code-example>\n<h3 id=\"add-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nk768wvt27fofr68acdq102b\"><i class=\"material-icons\">link</i>添加路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qduduoyob3i6kprafdz20v0m\"><em>路由</em>告诉路由器当用户单击链接或将 URL 粘贴到浏览器地址栏时显示哪个视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asifrk7ysnbmdto17zp94czt6\">一个典型的 Angular \n<code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 具有两个属性：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3z35rbl4g6z3h5wvwukncsn6\"><code>path</code>：一个与浏览器地址栏中的 URL 匹配的字符串。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59m8xotyxh8xv70naqbpfkm8x\"><code>component</code>：当导航到此路由时，路由器应创建的组件。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68jx4xw2gcxx9bhs080mi028b\">当 URL 为 \n<code>localhost:4200/heroes</code> 时，你希望导航到 \n<code>HeroesComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jadzc2u7hn2et4n84s3ha2j1\">导入 \n<code>HeroesComponent</code>，以便你可以在 \n<code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 中引用它。 然后定义一个包含单个 \n<code>route</code> 的路由数组，该路由指向此组件。</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"heroes-route\">\nimport { HeroesComponent }      from './heroes/heroes.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', component: HeroesComponent }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xcr6txs61rbcoeogksus5oof\">完成设置后，路由器会将该 URL 与 \n<code>path: 'heroes'</code> 匹配，并显示 \n<code>HeroesComponent</code>。</p>\n<h3 id=\"routermoduleforroot\"><em>RouterModule.forRoot()</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yvnk9zh5mhmnwjqinrvw9109\">首先，你必须初始化路由器并启动它，使其开始监听浏览器位置变化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdnzn3kinkr3w18kja4xjo3mw\">将 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 添加到 \n<code>@<a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> 数组中， 并通过调用 \n<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 在 \n<code>imports</code> 数组中配置它，如下所示：</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"ngmodule-imports\">\nimports: [ RouterModule.forRoot(routes) ],\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4to8lxy69x5337tq18nyvhgtj\">此方法被称为 \n<code>forRoot()</code>，因为你是在应用程序的根级别配置路由器。 \n<code>forRoot()</code> 方法提供路由所需的 service provider 和指令， 并根据当前浏览器 URL 执行初始导航。</p>\n</div>\n<h2 id=\"add-routeroutlet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv24e8borfzu8utdufpgfiu02\"><i class=\"material-icons\">link</i>添加 \n<em>RouterOutlet</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bo02msur03y7o5m7053xzr83\">打开 \n<code>AppComponent</code> 模板，将 \n<code>&lt;app-heroes&gt;</code> 元素替换为 \n<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 元素。</p>\n<code-example path=\"toh-pt5/src/app/app.component.html\" region=\"outlet\" title=\"src/app/app.component.html (router-outlet)\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oj7sdme6qgzy2zfe138ur7li\">你删除了 \n<code>&lt;app-heroes&gt;</code>，因为你只会在用户导航到它时才显示 \n<code>HeroesComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9turdmmngj6ivbrs4h6tyu76u\"><code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 告诉路由器在哪里显示路由视图。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"biqz4sswvatw25qnigxrhypv0\"><code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 是路由器指令之一，它可用于 \n<code>AppComponent</code>， 因为 \n<code>AppModule</code> 导入了 \n<code>AppRoutingModule</code>，而 \n<code>AppRoutingModule</code> 导出了 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。</p>\n</div>\n<h4 id=\"try-it\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5o8k80g83w0jrloe187y9vxwi\"><i class=\"material-icons\">link</i>试试看</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rwatl9qg0po31r8x1dnoqkc9\">你应该仍然使用此 CLI 命令运行。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng serve\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epcnzqdi79lihnivalas0i3lb\">浏览器应该刷新并显示应用程序标题，但不显示英雄列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18zry3so0iywwt36wqfb7xss1\">查看浏览器的地址栏。 URL 以 \n<code>/</code> 结尾。 \n<code>HeroesComponent</code> 的路由路径为 \n<code>/heroes</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xl7k5mbjxdntqr94b69um2jz\">在浏览器地址栏的 URL 中追加 \n<code>/heroes</code>。 你应该会看到熟悉的英雄主/详情视图。</p>\n<a id=\"routerlink\"></a>\n<h2 id=\"add-a-navigation-link-routerlink\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkffxqiw69ubcd1zf7c9gfakr\"><i class=\"material-icons\">link</i>添加导航链接（\n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>）</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mx38bj8q7aem442i1hz1y440\">用户不应该必须将路由 URL 粘贴到地址栏中。 他们应该能够点击链接进行导航。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r2v1342i3qj6bal6hp32hjk6\">添加一个 \n<code>&lt;nav&gt;</code> 元素，并在其中添加一个锚元素，当点击该元素时， 会触发导航到 \n<code>HeroesComponent</code>。 修改后的 \n<code>AppComponent</code> 模板如下所示：</p>\n<code-example path=\"toh-pt5/src/app/app.component.html\" region=\"heroes\" title=\"src/app/app.component.html (heroes RouterLink)\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"olaylo5hlpe2gul8jusb236n\">一个 \n<a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code> 属性</a> 设置为 \n<code>\"/heroes\"</code>， 这是路由器与 \n<code>HeroesComponent</code> 的路由匹配的字符串。 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 是 \n<a href=\"tutorial/toh-pt5#routerlink\"><code>RouterLink</code> 指令</a> 的选择器， 它将用户点击转换为路由导航。 它是 \n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中的另一个公共指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u0ku2raifbzlpgfe2xptb4c4\">浏览器刷新并显示应用程序标题和英雄链接， 但不显示英雄列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63pn0i6mpnd4u2gbgogpplzll\">点击链接。 地址栏更新为 \n<code>/heroes</code>，并显示英雄列表。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dk07vgyhayspzbqa2inyf1qbq\">通过将私有 CSS 样式添加到 \n<code>app.component.css</code> 中来使此链接和未来的导航链接看起来更好， 如以下 \n<a href=\"tutorial/toh-pt5#appcomponent\">最终代码审查</a> 中所列。</p>\n</div>\n<h2 id=\"add-a-dashboard-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j7a9hu24keu4ta1xz1fur0t9\"><i class=\"material-icons\">link</i>添加仪表盘视图</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0s2f1tf64g62svk3lfmtg7fr\">当有多个视图时，路由更有意义。 到目前为止，只有英雄视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30aji8c47pmvb0wokv1ob19as\">使用 CLI 添加 \n<code>DashboardComponent</code>：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component dashboard\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lahbq9uhckfvp98net7i6308\">CLI 为 \n<code>DashboardComponent</code> 生成文件，并在 \n<code>AppModule</code> 中声明它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1lthk6ifh468km381xfe6rmb\">将以下内容替换这三个文件中默认的文件内容，然后返回进行一些讨论：</p>\n<code-tabs>\n  <code-pane title=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.1.html\">\n&lt;h3&gt;Top Heroes&lt;/h3&gt;\n&lt;div class=\"grid grid-pad\"&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"&gt;\n    &lt;div class=\"module hero\"&gt;\n      &lt;h4&gt;{{hero.name}}&lt;/h4&gt;\n    &lt;/div&gt;\n  &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n[class*='col-'] {\n  float: left;\n  padding-right: 20px;\n  padding-bottom: 20px;\n}\n[class*='col-']:last-of-type {\n  padding-right: 0;\n}\n<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {\n  text-decoration: none;\n}\n*, *:after, *:before {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nh3 {\n  text-align: center; margin-bottom: 0;\n}\nh4 {\n  position: relative;\n}\n.grid {\n  margin: 0;\n}\n.col-1-4 {\n  width: 25%;\n}\n.module {\n  padding: 20px;\n  text-align: center;\n  color: #eee;\n  max-height: 120px;\n  min-width: 120px;\n  background-color: #607D8B;\n  border-radius: 2px;\n}\n.module:hover {\n  background-color: #EEE;\n  cursor: pointer;\n  color: #607d8b;\n}\n.grid-pad {\n  padding: 10px 0;\n}\n.grid-pad &gt; [class*='col-']:last-of-type {\n  padding-right: 20px;\n}\n@media (max-width: 600px) {\n  .module {\n    font-size: 10px;\n    max-height: 75px; }\n}\n@media (max-width: 1024px) {\n  .grid {\n    margin: 0;\n  }\n  .module {\n    min-width: 60px;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mjnnuoenxas7ty0iloc5l64s\"><em>模板</em>呈现一个英雄名称链接网格。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cry4xxwfef3sii616qo8da9z4\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 重复器根据组件的 \n<code>heroes</code> 数组创建尽可能多的链接。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9c7qbj7ofdgdxhk7ltedzhegr\">链接通过 \n<code>dashboard.component.css</code> 样式化为彩色块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"800xoyb8qrr5mc24c1fo6krq8\">这些链接目前还无法跳转，但 \n<a href=\"tutorial/toh-pt5#hero-details\">很快就会实现</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mr5ybylalwzqdweoj8ugdh3p\"><em>类</em>类似于 \n<code>HeroesComponent</code> 类。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ubzeu7q121wu7x3ovaliqutz\">它定义了一个 \n<code>heroes</code> 数组属性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czr08nntkcdn2bi1bqy86pl4q\">构造函数期望 Angular 将 \n<code>HeroService</code> 注入到一个私有的 \n<code>heroService</code> 属性中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3p7tdi8pt5ysl65hgw6zo8j79\"><code>ngOnInit()</code> 生命周期钩子调用 \n<code>getHeroes</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5hlsmxpd73o883e66lrimaps\">此 \n<code>getHeroes</code> 将显示的英雄数量减少到四个 （第 2、3、4 和 5 个）。</p>\n<code-example path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n}\n\n</code-example>\n<h3 id=\"add-the-dashboard-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hy02e86h46ust748sh5u64vb\"><i class=\"material-icons\">link</i>添加仪表盘路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gi684uwl6i28pvl5scvitvjx\">要导航到仪表盘，路由器需要一个合适的路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bom4nbdzzt665qf4vsuf7ock\">在 \n<code>AppRoutingModule</code> 中导入 \n<code>DashboardComponent</code>。</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-dashboard\" title=\"src/app/app-routing.module.ts (import DashboardComponent)\">\nimport { DashboardComponent }   from './dashboard/dashboard.component';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sbeqb184kyvkaquihy95givw\">在 \n<code>AppRoutingModule.routes</code> 数组中添加一个路由，该路由将路径与 \n<code>DashboardComponent</code> 匹配。</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"dashboard-route\">\n{ path: 'dashboard', component: DashboardComponent },\n\n</code-example>\n<h3 id=\"add-a-default-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zds6xfzm0mci66cp8b4ld0m8\"><i class=\"material-icons\">link</i>添加默认路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvyusxnfi0cmi182u352g0d4\">当应用程序启动时，浏览器的地址栏指向网站的根目录。 这与任何现有路由都不匹配，因此路由器不会导航到任何地方。 \n<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 下方的空间是空白的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nq1zdps4ztj2k52prne7nqd5\">要使应用程序自动导航到仪表盘，请将以下 路由添加到 \n<code>AppRoutingModule.Routes</code> 数组中。</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"redirect-route\">\n{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fi8c2l8spz5n9v9xvu8r2yda\">此路由将完全匹配空路径的 URL 重定向到路径为 \n<code>'/dashboard'</code> 的路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"783ezcm6v0d9x42ea7oc5o8z9\">浏览器刷新后，路由器加载 \n<code>DashboardComponent</code>， 并且浏览器地址栏显示 \n<code>/dashboard</code> URL。</p>\n<h3 id=\"add-dashboard-link-to-the-shell\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5oezov8zvfd55u4xwxnswwg1w\"><i class=\"material-icons\">link</i>在 shell 中添加仪表盘链接</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90pdsruk6is25s2ccvauz71te\">用户应该能够通过点击页面顶部导航区域的链接，在 \n<code>DashboardComponent</code> 和 \n<code>HeroesComponent</code> 之间来回导航。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cr5is7k6dt2vrmgussf184a97\">在 \n<code>AppComponent</code> 的 shell 模板中，在 \n<em>英雄</em> 链接上方添加一个仪表盘导航链接。</p>\n<code-example path=\"toh-pt5/src/app/app.component.html\" title=\"src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\"&gt;Dashboard&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19axb20mh2gg16pmpiheil56r\">浏览器刷新后，你可以通过点击链接在两个视图之间自由导航。</p>\n<a id=\"hero-details\"></a>\n<h2 id=\"navigating-to-hero-details\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4a4xmil4p80g89aw045y7nkl\"><i class=\"material-icons\">link</i>导航到英雄详情</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyyuxojeihfkii8mwrof2vi2q\"><code>HeroDetailsComponent</code> 显示所选英雄的详情。目前，\n<code>HeroDetailsComponent</code> 仅在 \n<code>HeroesComponent</code> 底部可见。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blauwuciltiuiueq5c4bmloxd\">用户应该能够通过三种方式获取这些详情。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47kj1bkq6ye27ib4ly0q3dz4c\">点击仪表盘中的英雄。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"comoj1aybyyjx9hoq8wk4hq1p\">点击英雄列表中的英雄。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deyi7o8y7f004i1hmmtnmc8jc\">将一个“深层链接”URL 粘贴到浏览器地址栏中，该 URL 用于标识要显示的英雄。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c43gb98k0f0knlmq8zuabe0ai\">在本节中，你将启用导航到 \n<code>HeroDetailsComponent</code>，并将其从 \n<code>HeroesComponent</code> 中解放出来。</p>\n<h3 id=\"delete-hero-details-from-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"701dlpc7f9frscnqf1bid61ip\"><i class=\"material-icons\">link</i>从 \n<code>HeroesComponent</code> 中删除 \n<em>英雄详情</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mb3wadj5l6aajc5lgq6qxoy9\">当用户点击 \n<code>HeroesComponent</code> 中的英雄条目时，应用应该导航到 \n<code>HeroDetailComponent</code>，用英雄详情视图替换英雄列表视图。英雄列表视图不再像现在这样显示英雄详情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pd95tchssmv4mkeuj9b3z23g\">打开 \n<code>HeroesComponent</code> 模板（\n<code>heroes/heroes.component.html</code>）并从底部删除 \n<code>&lt;app-hero-detail&gt;</code> 元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ps0olioca8srp0sh0zr05vg4\">现在点击英雄条目没有任何反应。你将在启用路由到 \n<code>HeroDetailComponent</code> 后 \n<a href=\"tutorial/toh-pt5#heroes-component-links\">很快修复它</a>。</p>\n<h3 id=\"add-a-hero-detail-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"265xbcwk7scgp1unmtaluwpne\"><i class=\"material-icons\">link</i>添加一个 \n<em>英雄详情</em> 路由</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5df8ayflzeoj5sadoko9d2634\"><code>~/detail/11</code> 这样的 URL 将是一个很好的 URL，用于导航到 \n<code>id</code> 为 \n<code>11</code> 的英雄的 \n<em>英雄详情</em> 视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8fm3ltdgijtf592p3deu9418\">打开 \n<code>AppRoutingModule</code> 并导入 \n<code>HeroDetailComponent</code>。</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-herodetail\" title=\"src/app/app-routing.module.ts (import HeroDetailComponent)\">\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dghm1cb0mr5ialaitfwzia0e7\">然后在 \n<code>AppRoutingModule.routes</code> 数组中添加一个 \n<em>参数化</em> 路由，该路由与 \n<em>英雄详情</em> 视图的路径模式匹配。</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"detail-route\">\n{ path: 'detail/:id', component: HeroDetailComponent },\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egqcb58i8kj4eg3srnssw3wsq\"><code>path</code> 中的冒号 (:) 表示 \n<code>:id</code> 是特定英雄 \n<code>id</code> 的占位符。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfbjcmc2sby2r9giw8pgpmgkf\">此时，所有应用程序路由都已就位。</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"routes\" title=\"src/app/app-routing.module.ts (all routes)\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes', component: HeroesComponent }\n];\n\n</code-example>\n<h3 id=\"dashboardcomponent-hero-links\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3w05n598ly7d8vpibs0k99li3\"><i class=\"material-icons\">link</i><code>DashboardComponent</code> 英雄链接</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehjoufypqyp08w1oeozd1v61s\">目前，\n<code>DashboardComponent</code> 英雄链接没有任何作用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vd5aj7a28pqc2o10bghgnl8a\">现在路由器已经有了指向 \n<code>HeroDetailComponent</code> 的路由，请修复仪表盘英雄链接，使其通过 \n<em>参数化</em> 仪表盘路由进行导航。</p>\n<code-example path=\"toh-pt5/src/app/dashboard/dashboard.component.html\" region=\"click\" title=\"src/app/dashboard/dashboard.component.html (hero links)\">\n&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n    <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5m57bn7kgjeft2qbbt5ony835\">你正在 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 重复器中使用 Angular \n<a href=\"guide/template-syntax#interpolation\">插值绑定</a>，将当前迭代的 \n<code>hero.id</code> 插入到每个 \n<a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code></a> 中。</p>\n<a id=\"heroes-component-links\"></a>\n<h3 id=\"heroescomponent-hero-links\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"m2rzxp74sts23516u32m9vkh\"><i class=\"material-icons\">link</i><code>HeroesComponent</code> 英雄链接</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"483wnu4l7fpup99oxlgz73nj7\"><code>HeroesComponent</code> 中的英雄条目是 \n<code>&lt;li&gt;</code> 元素，其点击事件绑定到组件的 \n<code>onSelect()</code> 方法。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.html\" region=\"list\" title=\"src/app/heroes/heroes.component.html (list with onSelect)\">\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\"&gt;\n    &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3pm9s81g1e1hy3pszluvwquf\">将 \n<code>&lt;li&gt;</code> 剥离到仅包含 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>，将徽章和名称包装在锚元素（\n<code>&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;</code>）中，并向锚添加一个 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 属性，该属性与仪表盘模板中的属性相同。</p>\n<code-example path=\"toh-pt5/src/app/heroes/heroes.component.html\" region=\"list\" title=\"src/app/heroes/heroes.component.html (list with links)\">\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d982aj3vrw7gqiukgn9hv191h\">你将不得不修复私有样式表（\n<code>heroes.component.css</code>）以使列表看起来像以前一样。修改后的样式在本文档底部的 \n<a href=\"tutorial/toh-pt5#heroescomponent\">最终代码审查</a> 中。</p>\n<h4 id=\"remove-dead-code-optional\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3j6fg2ih0ufr6j2onv0lh446\"><i class=\"material-icons\">link</i>删除无用代码（可选）</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1t0k7y7r1mt5y8c3txnbh1xt\">虽然 \n<code>HeroesComponent</code> 类仍然有效，但 \n<code>onSelect()</code> 方法和 \n<code>selectedHero</code> 属性不再使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wivaof7wucuaa1q26j5ro3je\">整理一下很好，你以后会感谢自己的。以下是修剪掉无用代码后的类。</p>\n<code-example path=\"toh-pt5/src/app/heroes/heroes.component.ts\" region=\"class\" title=\"src/app/heroes/heroes.component.ts (cleaned up)\" linenums=\"false\">\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n</code-example>\n<h2 id=\"routable-herodetailcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dv3uz5stid5ktz1g82pl717c\"><i class=\"material-icons\">link</i>可路由的 \n<em>HeroDetailComponent</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6aw876j5wg7nr1p1xxi43b9cc\">以前，父 \n<code>HeroesComponent</code> 设置 \n<code>HeroDetailComponent.hero</code> 属性，\n<code>HeroDetailComponent</code> 显示英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbtofhepil15fihsf2fv7r88k\"><code>HeroesComponent</code> 不再这样做。现在，路由器响应 \n<code>~/detail/11</code> 这样的 URL 创建 \n<code>HeroDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6si97u3uqeno8zxdto0hr3ujs\"><code>HeroDetailComponent</code> 需要一种新的方法来获取 \n<em>要显示的英雄</em>。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0y08gui56vjdb5ncnjfywrvy\">获取创建它的路由，</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sgtzlxgbpjyhrrdswyrxqio3\">从路由中提取 \n<code>id</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ppvf4c6cf9svchdqnhabhjdv\">通过 \n<code>HeroService</code> 从服务器获取具有该 \n<code>id</code> 的英雄</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"calslqvuuj0188cukzg9awi99\">添加以下导入：</p>\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"added-imports\" title=\"src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { HeroService }  from '../hero.service';\n\n</code-example>\n<a id=\"hero-detail-ctor\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mtplrmse32rkcgivtlz0epbc\">将 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>、\n<code>HeroService</code> 和 \n<code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 服务注入到构造函数中，并将它们的值保存在私有字段中：</p>\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"ctor\">\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private heroService: HeroService,\n  private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfs4wej8r8ot7qf458nomrxa5\"><a href=\"api/router/ActivatedRoute\"><code>ActivatedRoute</code></a> 包含有关此 \n<code>HeroDetailComponent</code> 实例的路由的信息。此组件对从 URL 中提取的路由参数包感兴趣。\n<em>“id”</em> 参数是要显示的英雄的 \n<code>id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1on8xd5hana73rbvpecwmk5tk\"><a href=\"tutorial/toh-pt4\"><code>HeroService</code></a> 从远程服务器获取英雄数据，此组件将使用它来获取 \n<em>要显示的英雄</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bi601c5t0z2xkze3l67olsmtt\"><a href=\"api/common/Location\"><code>location</code></a> 是一个 Angular 服务，用于与浏览器交互。你将在 \n<a href=\"tutorial/toh-pt5#goback\">稍后</a> 使用它来导航回导航到此处的视图。</p>\n<h3 id=\"extract-the-id-route-parameter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dz5y9pzw52ghbpsh9vsenq5k\"><i class=\"material-icons\">link</i>提取 \n<em>id</em> 路由参数</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5i03poanus0m51c21vu7gcyz\">在 \n<code>ngOnInit()</code> \n<a href=\"guide/lifecycle-hooks#oninit\">生命周期钩子</a> 中调用 \n<code>getHero()</code> 并将其定义如下。</p>\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"ngOnInit\">\nngOnInit(): void {\n  this.getHero();\n}\n\ngetHero(): void {\n  const id = +this.route.snapshot.paramMap.get('id');\n  this.heroService.getHero(id)\n    .subscribe(hero =&gt; this.hero = hero);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1wn4mrmiwxlye4ulneoi3142\"><code>route.snapshot</code> 是组件创建后不久的路由信息的静态图像。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ace20n1533xmltbpvmdhpav14\"><code>paramMap</code> 是从 URL 中提取的路由参数值的字典。\n<code>\"id\"</code> 键返回要获取的英雄的 \n<code>id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jbs54rdolbp83eo1y8313j0t\">路由参数始终是字符串。JavaScript (+) 运算符将字符串转换为数字，这正是英雄 \n<code>id</code> 应该具有的类型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wxj8sev0ubldr1qgtiledw4u\">浏览器刷新，应用崩溃并出现编译错误。\n<code>HeroService</code> 没有 \n<code>getHero()</code> 方法。现在添加它。</p>\n<h3 id=\"add-heroservicegethero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4q5fosxqtht52cvx5l66jbhxu\"><i class=\"material-icons\">link</i>添加 \n<code>HeroService.getHero()</code></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mswp2t5xh46ycq2ifntw8gwk\">打开 \n<code>HeroService</code> 并添加此 \n<code>getHero()</code> 方法</p>\n<code-example path=\"toh-pt5/src/app/hero.service.ts\" region=\"getHero\" title=\"src/app/hero.service.ts (getHero)\">\ngetHero(id: number): Observable&lt;Hero&gt; {\n  // TODO: send the message _after_ fetching the hero\n  this.messageService.add(`HeroService: fetched hero id=${id}`);\n  return of(HEROES.find(hero =&gt; hero.id === id));\n}\n\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9iwerunms9i1ldpdfn0rwyvp4\">注意反引号（`），它们定义了 JavaScript 的 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"><em>模板字面量</em></a>，用于嵌入 \n<code>id</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5zw61q4bujk781xuhrm6mihf\">与 \n<a href=\"tutorial/toh-pt4#observable-heroservice\"><code>getHeroes()</code></a> 一样，\n<code>getHero()</code> 具有异步签名。它使用 RxJS 的 \n<code>of()</code> 函数，以 \n<code>Observable</code> 的形式返回一个\n<em>模拟英雄</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4imdojamlhxu6l6m76h4sqvu\">你将能够将 \n<code>getHero()</code> 重新实现为一个真正的 \n<code><a href=\"api/http/Http\" class=\"code-anchor\">Http</a></code> 请求，而无需更改调用它的 \n<code>HeroDetailComponent</code>。</p>\n<h4 id=\"try-it-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5o8k80g83w0jrloe187y9vxwi\"><i class=\"material-icons\">link</i>试试看</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7orbd5mnmmoric43pnpku92nw\">浏览器刷新，应用程序再次运行。你可以点击仪表板或英雄列表中的某个英雄，导航到该英雄的详细信息视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4681br0nw5as2gijz3gh3ud9j\">如果你在浏览器地址栏中粘贴 \n<code>localhost:4200/detail/11</code>，路由器将导航到 \n<code>id: 11</code> 的英雄的详细信息视图，即“Mr. Nice”。</p>\n<a id=\"goback\"></a>\n<h3 id=\"find-the-way-back\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adex0z1gbt7i0g794nxcooxh6\"><i class=\"material-icons\">link</i>找到返回的方法</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gr2ik2v13b5oni67wost32z9\">通过点击浏览器的后退按钮，你可以返回到英雄列表或仪表板视图，具体取决于哪个视图将你发送到详细信息视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahxkspumcjc5jgd0qlvmdeao4\">在 \n<code>HeroDetail</code> 视图上有一个按钮可以做到这一点会很好。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pe79nv0w8uucp52ecvusua5l\">在组件模板的底部添加一个\n<em>返回</em>按钮，并将其绑定到组件的 \n<code>goBack()</code> 方法。</p>\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\" region=\"back-button\" title=\"src/app/hero-detail/hero-detail.component.html (back button)\">\n&lt;button (click)=\"goBack()\"&gt;go back&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n4ive419pqhcfvmdmnfsekom\">在组件类中添加一个 \n<code>goBack()</code> \n<em>方法</em>，该方法使用你 \n<a href=\"tutorial/toh-pt5#hero-detail-ctor\">之前注入的</a> \n<code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 服务，在浏览器的历史堆栈中向后导航一步。</p>\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"goBack\" title=\"src/app/hero-detail/hero-detail.component.ts (goBack)\">\ngoBack(): void {\n  this.location.back();\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13p3k15t3er2vap3fbz1xlg85\">刷新浏览器并开始点击。用户可以在应用程序中导航，从仪表板到英雄详细信息，再返回，从英雄列表到迷你详细信息，再到英雄详细信息，最后再返回到英雄列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5m5aheeu9ay7bm6z9jsaj37e\">你已经满足了推动此页面所有导航需求。</p>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\"><i class=\"material-icons\">link</i>最终代码审查</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnjxdgspeot2q433ypezldhyg\">以下是本页讨论的代码文件，你的应用程序应该如下所示 \n<live-example></live-example>。</p>\n<a id=\"approutingmodule\"></a>\n<a id=\"appmodule\"></a>\n<h4 id=\"approutingmodule-appmodule-and-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyu092j2145uys8aajvq4feaq\"><i class=\"material-icons\">link</i><em>AppRoutingModule</em>、\n<em>AppModule</em> 和 \n<em>HeroService</em></h4>\n<code-tabs>\n  <code-pane title=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { DashboardComponent }   from './dashboard/dashboard.component';\nimport { HeroesComponent }      from './heroes/heroes.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes', component: HeroesComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ]\n})\nexport class AppRoutingModule {}\n\n</code-pane>\n  <code-pane title=\"src/app/app.module.ts\" path=\"toh-pt5/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard/dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\nimport { HeroesComponent }      from './heroes/heroes.component';\nimport { HeroService }          from './hero.service';\nimport { MessageService }       from './message.service';\nimport { MessagesComponent }    from './messages/messages.component';\n\nimport { AppRoutingModule }     from './app-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  providers: [ HeroService, MessageService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane title=\"src/app/hero.service.ts\" path=\"toh-pt5/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n\n  getHero(id: number): Observable&lt;Hero&gt; {\n    // TODO: send the message _after_ fetching the hero\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(HEROES.find(hero =&gt; hero.id === id));\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"appcomponent\"></a>\n<h4 id=\"appcomponent\"><em>AppComponent</em></h4>\n<code-tabs>\n  <code-pane title=\"src/app/app.component.html\" path=\"toh-pt5/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\"&gt;Dashboard&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\"&gt;Heroes&lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.css\" path=\"toh-pt5/src/app/app.component.css\">\n/* AppComponent's private CSS styles */\nh1 {\n  font-size: 1.2em;\n  color: #999;\n  margin-bottom: 0;\n}\nh2 {\n  font-size: 2em;\n  margin-top: 0;\n  padding-top: 0;\n}\nnav <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {\n  padding: 5px 10px;\n  text-decoration: none;\n  margin-top: 10px;\n  display: inline-block;\n  background-color: #eee;\n  border-radius: 4px;\n}\nnav <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:visited, <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:link {\n  color: #607D8B;\n}\nnav <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:hover {\n  color: #039be5;\n  background-color: #CFD8DC;\n}\nnav a.active {\n  color: #039be5;\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"dashboardcomponent\"></a>\n<h4 id=\"dashboardcomponent\"><em>DashboardComponent</em></h4>\n<code-tabs>\n  <code-pane title=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.html\">\n&lt;h3&gt;Top Heroes&lt;/h3&gt;\n&lt;div class=\"grid grid-pad\"&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n    &lt;div class=\"module hero\"&gt;\n      &lt;h4&gt;{{hero.name}}&lt;/h4&gt;\n    &lt;/div&gt;\n  &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n[class*='col-'] {\n  float: left;\n  padding-right: 20px;\n  padding-bottom: 20px;\n}\n[class*='col-']:last-of-type {\n  padding-right: 0;\n}\n<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {\n  text-decoration: none;\n}\n*, *:after, *:before {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nh3 {\n  text-align: center; margin-bottom: 0;\n}\nh4 {\n  position: relative;\n}\n.grid {\n  margin: 0;\n}\n.col-1-4 {\n  width: 25%;\n}\n.module {\n  padding: 20px;\n  text-align: center;\n  color: #eee;\n  max-height: 120px;\n  min-width: 120px;\n  background-color: #607D8B;\n  border-radius: 2px;\n}\n.module:hover {\n  background-color: #EEE;\n  cursor: pointer;\n  color: #607d8b;\n}\n.grid-pad {\n  padding: 10px 0;\n}\n.grid-pad &gt; [class*='col-']:last-of-type {\n  padding-right: 20px;\n}\n@media (max-width: 600px) {\n  .module {\n    font-size: 10px;\n    max-height: 75px; }\n}\n@media (max-width: 1024px) {\n  .grid {\n    margin: 0;\n  }\n  .module {\n    min-width: 60px;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"heroescomponent\"></a>\n<h4 id=\"heroescomponent\"><em>HeroesComponent</em></h4>\n<code-tabs>\n  <code-pane title=\"src/app/heroes/heroes.component.html\" path=\"toh-pt5/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt5/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes/heroes.component.css\" path=\"toh-pt5/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n\n.heroes <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {\n  color: #888;\n  text-decoration: none;\n  position: relative;\n  display: block;\n  width: 250px;\n}\n\n.heroes <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:hover {\n  color:#607D8B;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herodetailcomponent\"></a>\n<h4 id=\"herodetailcomponent\"><em>HeroDetailComponent</em></h4>\n<code-tabs>\n  <code-pane title=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n  &lt;h2&gt;{{ hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;name:\n      &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;button (click)=\"goBack()\"&gt;go back&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero }         from '../hero';\nimport { HeroService }  from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.heroService.getHero(id)\n      .subscribe(hero =&gt; this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-detail/hero-detail.component.css\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.css\">\n/* HeroDetailComponent's private CSS styles */\nlabel {\n  display: inline-block;\n  width: 3em;\n  margin: .5em 0;\n  color: #607D8B;\n  font-weight: bold;\n}\ninput {\n  height: 2em;\n  font-size: 1em;\n  padding-left: .4em;\n}\nbutton {\n  margin-top: 20px;\n  font-family: Arial;\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer; cursor: hand;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #ccc;\n  cursor: auto;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gf0exwxqng0gppfxrw6yx2ug\">你添加了 Angular 路由器，以便在不同的组件之间导航。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3h39qe6ijxtar4k1gp1ausoi\">你将 \n<code>AppComponent</code> 转换为一个带有 \n<code>&lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;</code> 链接和 \n<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 的导航外壳。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37fnyq5jr9v1ehn68kk6wu45p\">你在 \n<code>AppRoutingModule</code> 中配置了路由器。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i48hcw2urogtcd0h7hb6jo5d\">你定义了简单的路由、重定向路由和参数化路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtby1rhyv57lgewetuo8qv8gp\">你在锚元素中使用了 \n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fyaxjgtmhhvnofe4km6z2ki9\">你将紧密耦合的主/详细信息视图重构为路由的详细信息视图。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wj9u0cdoypc6i8n440qxe3t6\">你使用路由器链接参数导航到用户选择的英雄的详细信息视图。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23wionn41yd5shsy4euasslwg\">你在多个组件之间共享了 \n<code>HeroService</code>。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/Location\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/core/NgModule#exports\n - api/core/NgModule#imports\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/http/Http\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - api/router/RouterModule\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/lifecycle-hooks#oninit\n - guide/template-syntax#interpolation\n - tutorial/toh-pt4\n - tutorial/toh-pt4#observable-heroservice\n - tutorial/toh-pt5#add-a-dashboard-view\n - tutorial/toh-pt5#add-a-default-route\n - tutorial/toh-pt5#add-a-hero-detail-route\n - tutorial/toh-pt5#add-a-navigation-link-routerlink\n - tutorial/toh-pt5#add-dashboard-link-to-the-shell\n - tutorial/toh-pt5#add-heroservicegethero\n - tutorial/toh-pt5#add-routeroutlet\n - tutorial/toh-pt5#add-routes\n - tutorial/toh-pt5#add-the-approutingmodule\n - tutorial/toh-pt5#add-the-dashboard-route\n - tutorial/toh-pt5#appcomponent\n - tutorial/toh-pt5#approutingmodule-appmodule-and-heroservice\n - tutorial/toh-pt5#dashboardcomponent\n - tutorial/toh-pt5#dashboardcomponent-hero-links\n - tutorial/toh-pt5#delete-hero-details-from-heroescomponent\n - tutorial/toh-pt5#extract-the-id-route-parameter\n - tutorial/toh-pt5#final-code-review\n - tutorial/toh-pt5#find-the-way-back\n - tutorial/toh-pt5#goback\n - tutorial/toh-pt5#hero-detail-ctor\n - tutorial/toh-pt5#hero-details\n - tutorial/toh-pt5#herodetailcomponent\n - tutorial/toh-pt5#heroes-component-links\n - tutorial/toh-pt5#heroescomponent\n - tutorial/toh-pt5#heroescomponent-hero-links\n - tutorial/toh-pt5#navigating-to-hero-details\n - tutorial/toh-pt5#remove-dead-code-optional\n - tutorial/toh-pt5#routable-herodetailcomponent\n - tutorial/toh-pt5#routerlink\n - tutorial/toh-pt5#routermoduleforroot\n - tutorial/toh-pt5#routing\n - tutorial/toh-pt5#summary\n - tutorial/toh-pt5#try-it\n - tutorial/toh-pt5#try-it-1\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\n-->"
}