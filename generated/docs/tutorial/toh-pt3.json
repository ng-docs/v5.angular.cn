{
  "id" : "tutorial/toh-pt3",
  "title" : "主/从组件",
  "contents" : "<div class=\"content\">\n<h1 id=\"masterdetail-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e9yq200kwfw5pliavykue22c\"><i class=\"material-icons\">link</i>主/从组件</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qs4yuxcxudqnurzw4m8ltk2l\">目前，\n<code>HeroesComponent</code> 同时显示英雄列表和所选英雄的详细信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8v3oud165mbvorzpnas1n2zu9\">随着应用程序的增长，将所有功能保留在一个组件中将无法维护。 你可能希望将大型组件拆分为更小的子组件，每个子组件专注于特定任务或工作流。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an6d045su3xu6voy8b2kzlocq\">在本页中，你将通过将英雄详细信息移到一个单独的可重用 \n<code>HeroDetailsComponent</code> 中来迈出第一步。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bu9o09n0afa87oj6fgsmdn2i\"><code>HeroesComponent</code> 将只呈现英雄列表。 \n<code>HeroDetailsComponent</code> 将呈现所选英雄的详细信息。</p>\n<h2 id=\"make-the-herodetailcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4x9vlisbadml1h2uss1wn0e4\"><i class=\"material-icons\">link</i>创建 \n<code>HeroDetailComponent</code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53tm2y1z33qsv01iiwp6vpl7w\">使用 Angular CLI 生成一个名为 \n<code>hero-detail</code> 的新组件。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component hero-detail\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78jrq3bffvvl7s1sabnt7mpx\">该命令会搭建 \n<code>HeroDetailComponent</code> 文件，并在 \n<code>AppModule</code> 中声明该组件。</p>\n<h3 id=\"write-the-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68b1g1uy19c3k8j49mdqfgma1\"><i class=\"material-icons\">link</i>编写模板</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61cmnm98oqtl2h0wmf8sg1wb7\">从 \n<code>HeroesComponent</code> 模板的底部剪切英雄详细信息的 HTML 代码，并将其粘贴到 \n<code>HeroDetailComponent</code> 模板中生成的样板代码之上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb86tz3u1degighr0iejxpdul\">粘贴的 HTML 代码引用了 \n<code>selectedHero</code>。 新的 \n<code>HeroDetailComponent</code> 可以呈现\n<em>任何</em>英雄，而不仅仅是所选英雄。 因此，请在模板中的所有位置将“selectedHero”替换为“hero”。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewjgn7osy445i0ywrdpugjv3u\">完成后，\n<code>HeroDetailComponent</code> 模板应如下所示：</p>\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\" title=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n\n  &lt;h2&gt;{{ hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;name:\n      &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<h3 id=\"add-the-input-hero-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ppk7hgxqjegn4u4xd583jxcw\"><i class=\"material-icons\">link</i>添加 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> hero 属性</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53qj67moxzjqz0ag57inlll71\"><code>HeroDetailComponent</code> 模板绑定到组件的 \n<code>hero</code> 属性，该属性的类型为 \n<code>Hero</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19m4niaao5ep0yvf3bbcmudqc\">打开 \n<code>HeroDetailComponent</code> 类文件并导入 \n<code>Hero</code> 符号。</p>\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-hero\" title=\"src/app/hero-detail/hero-detail.component.ts (import Hero)\">\nimport { Hero } from '../hero';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brx5u8kzkhhdaqo4licppirsr\"><code>hero</code> 属性 \n<a href=\"guide/template-syntax#inputs-outputs\" title=\"输入和输出属性\">必须是<em>输入</em>属性</a>， 用 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器进行注解， 因为\n<em>外部</em> \n<code>HeroesComponent</code> \n<a href=\"tutorial/toh-pt3#heroes-component-template\">将绑定到它</a>，如下所示。</p>\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qzw1yi16qgnjg5czlrt4l38l\">修改 \n<code>@angular/core</code> 导入语句以包含 \n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 符号。</p>\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-input\" title=\"src/app/hero-detail/hero-detail.component.ts (import Input)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4claciqgruu1yhyt17v8e6xn1\">添加一个 \n<code>hero</code> 属性，并在其前面加上 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器。</p>\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"input-hero\" linenums=\"false\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83z4iq71skviwu07rpolfk5c\">这是你应该对 \n<code>HeroDetailComponent</code> 类进行的唯一更改。 没有更多属性。没有呈现逻辑。 此组件只是通过其 \n<code>hero</code> 属性接收一个英雄对象并显示它。</p>\n<h2 id=\"show-the-herodetailcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eiw3tr0s2gczbhi7hlb74i2v\"><i class=\"material-icons\">link</i>显示 \n<code>HeroDetailComponent</code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qt71exc12fr98ey9yxtv7p8w\"><code>HeroesComponent</code> 仍然是主/从视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"l9m07579l2oaqi7fcnm37wzr\">在剪切模板的该部分之前，它曾经自己显示英雄详细信息。现在它将委托给 \n<code>HeroDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45tszfqv654iatsdtq63vb556\">这两个组件将具有父子关系。 父 \n<code>HeroesComponent</code> 将通过在用户从列表中选择英雄时向其发送一个新的英雄来显示，从而控制子 \n<code>HeroDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3syp2twevglz7wojizha6xwzp\">你不会更改 \n<code>HeroesComponent</code> 的\n<em>类</em>，但会更改其\n<em>模板</em>。</p>\n<a id=\"heroes-component-template\"></a>\n<h3 id=\"update-the-heroescomponent-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qqk2htdsh69je217qw6qsels\"><i class=\"material-icons\">link</i>更新 \n<code>HeroesComponent</code> 模板</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61x19g7szsnt4lh6gtrtplewx\"><code>HeroDetailComponent</code> 选择器是 \n<code>'app-hero-detail'</code>。 在 \n<code>HeroesComponent</code> 模板的底部附近添加一个 \n<code>&lt;app-hero-detail&gt;</code> 元素，该元素曾经是英雄详细信息视图所在的位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ld4452nvr64eazyaj2cbzcpz\">将 \n<code>HeroesComponent.selectedHero</code> 绑定到元素的 \n<code>hero</code> 属性，如下所示。</p>\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\" title=\"heroes.component.html (HeroDetail binding)\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qwfyiqaqhsl4m3lgahlkka13\"><code>[hero]=\"selectedHero\"</code> 是 Angular 的 \n<a href=\"guide/template-syntax#property-binding\">属性绑定</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lg07ov7acppj001gkbkdpzks\">这是从 \n<code>HeroesComponent</code> 的 \n<code>selectedHero</code> 属性到目标元素的 \n<code>hero</code> 属性的\n<em>单向</em>数据绑定，该属性映射到 \n<code>HeroDetailComponent</code> 的 \n<code>hero</code> 属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qm9pwreynxwyqwibmkmzlmkq\">现在，当用户点击列表中的某个英雄时，\n<code>selectedHero</code> 会发生变化。当 \n<code>selectedHero</code> 发生变化时，\n<em>属性绑定</em>会更新 \n<code>hero</code>，\n<code>HeroDetailComponent</code> 会显示新的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n0ht7xc919qiykk8uuc8nq64\">修改后的 \n<code>HeroesComponent</code> 模板应该如下所示：</p>\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" title=\"heroes.component.html\" linenums=\"false\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\"&gt;\n    &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zq6rsh2rag61csvyi3nayjzk\">浏览器刷新，应用程序再次开始工作，就像之前一样。</p>\n<h2 id=\"what-changed\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"129c0mke7q6idq4icxw73dvwu\"><i class=\"material-icons\">link</i>发生了什么变化？</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ofvbmzksl3ko98jr67hrbv21\">就像\n<a href=\"tutorial/toh-pt2\">之前</a>一样，每当用户点击英雄名称时，英雄详细信息就会出现在英雄列表下方。现在，\n<code>HeroDetailComponent</code> 正在呈现这些详细信息，而不是 \n<code>HeroesComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e45v8rid6w43qvzj15ubjyht5\">将原始 \n<code>HeroesComponent</code> 重构为两个组件会带来好处，无论现在还是将来：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agp8fdl0wsx0kgp3w138qvzpy\">通过减少 \n<code>HeroesComponent</code> 的职责，简化了它。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5ob7i7xzyria06e2ag1q45b9\">你可以将 \n<code>HeroDetailComponent</code> 发展成一个丰富的英雄编辑器，而无需触碰父级 \n<code>HeroesComponent</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ao1deretyk463oam1z0sxjidi\">你可以发展 \n<code>HeroesComponent</code>，而无需触碰英雄详细信息视图。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1umb8u7q0bs0a6tfu3qa3jjlp\">你可以在未来某个组件的模板中复用 \n<code>HeroDetailComponent</code>。</p>\n</li>\n</ol>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\"><i class=\"material-icons\">link</i>最终代码审查</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnjxdgspeot2q433ypezldhyg\">以下是本页讨论的代码文件，你的应用程序应该如下所示 \n<live-example></live-example>。</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: ['./hero-detail.component.css']\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n\n  &lt;h2&gt;{{ hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;name:\n      &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes/heroes.component.html\" path=\"toh-pt3/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\"&gt;\n    &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afi1kd42gwz1qotbqnf11qwks\">你创建了一个独立的可复用 \n<code>HeroDetailComponent</code>。</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gy1yopama68zmp3zz526xb0w\">你使用\n<a href=\"guide/template-syntax#property-binding\">属性绑定</a>让父级 \n<code>HeroesComponent</code> 控制子级 \n<code>HeroDetailComponent</code>。</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euxybyhn4nnqs9psvfeveiat\">你使用\n<a href=\"guide/template-syntax#inputs-outputs\"><code>@Input</code> 装饰器</a>使 \n<code>hero</code> 属性可供外部 \n<code>HeroesComponent</code> 绑定。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/reactive-forms\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Input\n - api/core/OnInit\n - api/forms/NgModel\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#property-binding\n - tutorial/toh-pt2\n - tutorial/toh-pt3#add-the-input-hero-property\n - tutorial/toh-pt3#final-code-review\n - tutorial/toh-pt3#heroes-component-template\n - tutorial/toh-pt3#make-the-herodetailcomponent\n - tutorial/toh-pt3#masterdetail-components\n - tutorial/toh-pt3#show-the-herodetailcomponent\n - tutorial/toh-pt3#summary\n - tutorial/toh-pt3#update-the-heroescomponent-template\n - tutorial/toh-pt3#what-changed\n - tutorial/toh-pt3#write-the-template\n-->"
}