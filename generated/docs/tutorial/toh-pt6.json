{
  "id" : "tutorial/toh-pt6",
  "title" : "HTTP",
  "contents" : "<div class=\"content\">\n<h1 id=\"http\">HTTP</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55pz1a51r1eslvyt1ohl51ng5\">在本教程中，你将借助 Angular 的 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 添加以下数据持久性特性。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jqdj01cl587jgpzrk3gwu0r6\"><code>HeroService</code> 使用 HTTP 请求获取英雄数据。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lobgqu4iddbb4rlut1ym0uc9\">用户可以通过 HTTP 添加、编辑和删除英雄，并保存这些更改。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clzem2xf2438830wgwss6297q\">用户可以按名称搜索英雄。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"638dydt1z4su5ur18kgnbxdix\">完成此页面后，应用程序应如下所示 \n<live-example></live-example>。</p>\n<h2 id=\"enable-http-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq206hvalkmjbiiqu48od0vkb\"><i class=\"material-icons\">link</i>启用 HTTP 服务</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6w05uzab8rp799agyg5x39vg0\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 是 Angular 用于通过 HTTP 与远程服务器通信的机制。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agiav34giez391aki72c3ih7b\">为了使 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 在应用程序的任何地方都可用，</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20kijpm9bxs382mx2p2o7rveg\">打开根 \n<code>AppModule</code>，</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ii5txih0bajjmsbd3wofafhc\">从 \n<code>@angular/common/http</code> 导入 \n<code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 符号，</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rwznjw8vlxyx296ubm9ywqhe\">将其添加到 \n<code>@<a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> 数组中。</li>\n</ul>\n<h2 id=\"simulate-a-data-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9i7v39yyxazwht3grgx8logn1\"><i class=\"material-icons\">link</i>模拟数据服务器</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68y3fb1pgheoyc7vqscbgidvk\">本教程示例通过使用 \n<a href=\"https://github.com/angular/in-memory-web-api\" title=\"In-memory Web API\"><em>内存中 Web API</em></a> 模块来\n<em>模拟</em>与远程数据服务器的通信。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8y9ec1lci024k1awt2pbtvo5o\">安装模块后，应用程序将向 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 发出请求并接收响应，而无需知道\n<em>内存中 Web API</em> 正在拦截这些请求，将它们应用于内存中数据存储，并返回模拟响应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bru86t95eowv2mg0a6z6penx\">此功能对于本教程来说非常方便。你无需设置服务器即可了解 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b10i5riylzq1ttq7uogug7uv9\">在你的应用程序开发的早期阶段，当服务器的 Web API 定义不明确或尚未实现时，它也可能很方便。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dper87u1w0zlwokjugdv39096\"><strong>重要：</strong>\n<em>内存中 Web API</em> 模块与 Angular 中的 HTTP 无关。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d0mxy73f12luknzh2tpn6hlr\">如果你只是\n<em>阅读</em>本教程以了解 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>，你可以 \n<a href=\"tutorial/toh-pt6#import-heroes\">跳过</a> 此步骤。如果你正在\n<em>边写代码边学习</em>本教程，请留在这里，现在添加\n<em>内存中 Web API</em>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xj37r82jah2jv1vmrlxh0wwx\">从 \n<em>npm</em> 安装\n<em>内存中 Web API</em> 包。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1roovgaggmp2ddwhmvnhbbvx5\"><strong>注意：</strong>此包的版本锁定为 \n<code>v0.5</code>，以保持与当前版本的 \n<code>@angular/cli</code> 的兼容性。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm install angular-in-memory-web-api@0.5 --save\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a66ovxh9bsgrv0aqw0yli4e6m\">导入 \n<code>HttpClientInMemoryWebApiModule</code> 和 \n<code>InMemoryDataService</code> 类，你将在稍后创建此类。</p>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"import-in-mem-stuff\" title=\"src/app/app.module.ts (In-memory Web API imports)\">\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService }  from './in-memory-data.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1r1m9ao0mmzjgvadg7r45xnvn\">将 \n<code>HttpClientInMemoryWebApiModule</code> 添加到 \n<code>@<a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> 数组中（\n<em>在导入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 之后</em>），并使用 \n<code>InMemoryDataService</code> 配置它。</p>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"in-mem-web-api-imports\">\n<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n// The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n// and returns simulated server responses.\n// Remove it when <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> real server is ready to receive requests.\nHttpClientInMemoryWebApiModule.forRoot(\n  InMemoryDataService, { dataEncapsulation: false }\n)\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zai6stth6v0i6zsw2ht3mnr\"><code>forRoot()</code> 配置方法接受一个 \n<code>InMemoryDataService</code> 类，该类为内存数据库提供初始数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xyi9esbjffrl6yosvypwg9yh\"><em>Tour of Heroes</em> 示例创建了这样一个类 \n<code>src/app/in-memory-data.service.ts</code>，其内容如下：</p>\n<code-example path=\"toh-pt6/src/app/in-memory-data.service.ts\" region=\"init\" title=\"src/app/in-memory-data.service.ts\" linenums=\"false\">\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\n\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 11, name: 'Mr. Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3knpntenugvo7tqsl5vc27i6e\">此文件替换了 \n<code>mock-heroes.ts</code>，现在可以安全地删除该文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34hl2m4wm695lq5htqzp4uiv\">当你的服务器准备就绪时，请分离 \n<em>In-memory Web API</em>，应用程序的请求将通过服务器进行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4e1huby1eo25mep7uuympa96\">现在回到 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的故事。</p>\n<a id=\"import-heroes\"></a>\n<h2 id=\"heroes-and-http\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmqhvnycl6mtof7axw2m2o0zy\"><i class=\"material-icons\">link</i>英雄和 HTTP</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cvjek90n5xj11y651icd1pf7\">导入一些你需要的 HTTP 符号：</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-httpclient\" title=\"src/app/hero.service.ts (import HTTP symbols)\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/http';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bb63kq6ncnqpn7cpcsyvwrw7\">将 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入构造函数中，并将其存储在一个名为 \n<code>http</code> 的私有属性中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"ctor\">\nconstructor(\n  private http: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n  private messageService: MessageService) { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6j8z1o6zs5h5w7u8pmxvf5c0\">继续注入 \n<code>MessageService</code>。你将频繁地调用它，因此将其封装在一个私有的 \n<code>log</code> 方法中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"log\">\n/** Log <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> HeroService message with the MessageService */\nprivate log(message: string) {\n  this.messageService.add('HeroService: ' + message);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nrxfngd2b5p1913o4oqarw4w\">使用服务器上英雄资源的地址定义 \n<code>heroesUrl</code>。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"heroesUrl\">\nprivate heroesUrl = 'api/heroes';  // URL to web api\n\n</code-example>\n<h3 id=\"get-heroes-with-httpclient\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9r2mxvgqdgaxyg5yenb975cop\"><i class=\"material-icons\">link</i>使用 \n<em>HttpClient</em> 获取英雄</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b2wxtr8dvnxgp90z3vi41td\">当前的 \n<code>HeroService.getHeroes()</code> 使用 RxJS 的 \n<code>of()</code> 函数返回一个模拟英雄数组，作为 \n<code>Observable&lt;Hero[]&gt;</code>。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\" title=\"src/app/hero.service.ts (getHeroes with RxJs 'of()')\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  return of(HEROES);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x8hndoy3pdrbimf94eywsmze\">将该方法转换为使用 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> \n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-1\">\n  /** GET heroes from the server */ getHeroes (): Observable&lt;Hero[]&gt; { return this.http.get&lt;Hero[]&gt;(this.heroesUrl) } \n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xv0n7grlpuupnijlx72ordpo\">刷新浏览器。英雄数据应该成功地从模拟服务器加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24e72mt04klqs1pa147j12ak7\">你已经用 \n<code>http.get</code> 替换了 \n<code>of</code>，并且应用程序在没有任何其他更改的情况下继续工作，因为这两个函数都返回 \n<code>Observable&lt;Hero[]&gt;</code>。</p>\n<h3 id=\"http-methods-return-one-value\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtkv4ixj94ulyt95y0v5qj3vn\"><i class=\"material-icons\">link</i>Http 方法返回一个值</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98pgsq1ptq8vt8ezj72hp18i0\">所有 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法都返回 RxJS 的 \n<code>Observable</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27ajmog86gze4kij5b2do6dxv\">HTTP 是一种请求/响应协议。你发出请求，它返回一个响应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pqqfj9099l94lv6ta9ldfuv9\">通常，\n<code>Observable</code> \n<em>可以</em>随着时间的推移返回多个值。来自 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的 \n<code>Observable</code> 始终只发出一个值，然后完成，不再发出任何值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nfu1k0wszhf45sa5ffp8ra7y\">此特定的 \n<code>HttpClient.get</code> 调用返回一个 \n<code>Observable&lt;Hero[]&gt;</code>，实际上是“\n<em>一个英雄数组的可观察者</em>”。在实践中，它只会返回一个英雄数组。</p>\n<h3 id=\"httpclientget-returns-response-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48mzm45ygxnpv3u9d2xp02tlm\"><i class=\"material-icons\">link</i><em>HttpClient.get</em> 返回响应数据</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5re388kp3izj5c79mv0t79lo9\"><code>HttpClient.get</code> 默认情况下将响应的 \n<em>主体</em> 作为未类型化的 JSON 对象返回。应用可选的类型说明符 \n<code>&lt;Hero[]&gt;</code>，可以得到一个类型化的结果对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33ogh4u82q58m5lvrnlega8sj\">JSON 数据的形状由服务器的数据 API 决定。\n<em>Tour of Heroes</em> 数据 API 将英雄数据作为数组返回。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8epss1mqdx8zf7t0m1asp7hy7\">其他 API 可能会将你想要的数据埋藏在一个对象中。你可能需要通过使用 RxJS 的 \n<code>map</code> 操作符处理 \n<code>Observable</code> 结果来提取这些数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2medxwlbma9vep3qavv5mzc8\">虽然这里没有讨论，但在示例源代码中包含的 \n<code>getHeroNo404()</code> 方法中有一个 \n<code>map</code> 的示例。</p>\n</div>\n<h3 id=\"error-handling\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ad0cx4y7txhii62pgdd0mpma9\"><i class=\"material-icons\">link</i>错误处理</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70vjuxz1mo06ihd0lhkx1fl3s\">事情会出错，尤其是在你从远程服务器获取数据时。\n<code>HeroService.getHeroes()</code> 方法应该捕获错误并采取适当的措施。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bqhrytxny7poluded321w6u2\">为了捕获错误，你必须\n<strong>“管道化”来自 <code>http.get()</code> 的可观察者结果</strong>，使其通过 RxJS 的 \n<code>catchError()</code> 操作符。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3ixbxku9chcrm8oe3ojkagpv\">从 \n<code>rxjs/operators</code> 中导入 \n<code>catchError</code> 符号，以及稍后需要的一些其他操作符。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-rxjs-operators\">\nimport { catchError, map, tap } from 'rxjs/operators';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ap6imad8otx902mto2dzypcub\">现在使用 \n<code>.pipe()</code> 方法扩展可观察者结果，并为其提供一个 \n<code>catchError()</code> 操作符。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-2\">\ngetHeroes (): Observable&lt;Hero[]&gt; {\n  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n    .pipe(\n      catchError(this.handleError('getHeroes', []))\n    );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8itk6t0sixyt48i9uptkq72cr\"><code>catchError()</code> 操作符会拦截一个\n<strong><code>Observable</code> 失败</strong>。它将错误传递给一个\n<em>错误处理程序</em>，该处理程序可以对错误进行任何操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ig1ycbnykfkc0xjvtm225r3s\">以下 \n<code>handleError()</code> 方法报告错误，然后返回一个无害的结果，以便应用程序继续工作。</p>\n<h4 id=\"handleerror\"><em>handleError</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zfamsg1maojloqi0vv3pux0h\">以下 \n<code>errorHandler()</code> 将由许多 \n<code>HeroService</code> 方法共享，因此它被泛化以满足它们不同的需求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ds163ygrdf5oxvepbf5s7sz7\">它不会直接处理错误，而是向 \n<code>catchError</code> 返回一个\n<em>错误处理程序</em>函数，该函数已使用失败操作的名称和安全返回值进行配置。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"handleError\">\n/**\n * Handle <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> operation that failed.\n * Let the app continue.\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError&lt;T&gt; (operation = 'operation', result?: T) {\n  return (error: any): Observable&lt;T&gt; =&gt; {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cne0xp5j627v9bra0ma3ldv6s\">在将错误报告给控制台后，处理程序会构建一个用户友好的消息，并向应用程序返回一个安全的值，以便它可以继续工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bh9bsot5y3lpylfp460kqm1r\">由于每个服务方法都返回不同类型的 \n<code>Observable</code> 结果，因此 \n<code>errorHandler()</code> 接受一个类型参数，以便它可以将安全值作为应用程序期望的类型返回。</p>\n<h3 id=\"tap-into-the-observable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el8jskz18ruu7t8961n3hg3eo\"><i class=\"material-icons\">link</i>进入 \n<em>Observable</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5lywgbjazy8y138uca3lwzrl\"><code>HeroService</code> 方法将\n<strong>进入</strong>可观察者值的流，并向页面底部的消息区域发送消息（通过 \n<code>log()</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85zj0wwritwgpn2jmem1oaz2l\">它们将使用 RxJS 的 \n<code>tap</code> 操作符来实现，该操作符\n<em>查看</em>可观察者值，对这些值\n<em>做一些事情</em>，然后将它们传递下去。\n<code>tap</code> 回调不会触碰值本身。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abobm1iptbcpqar23gmxb7hk2\">以下是包含记录操作的 \n<code>tap</code> 的 \n<code>getHeroes</code> 的最终版本。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes\">\n/** GET heroes from the server */\ngetHeroes (): Observable&lt;Hero[]&gt; {\n  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n    .pipe(\n      tap(heroes =&gt; this.log(`fetched heroes`)),\n      catchError(this.handleError('getHeroes', []))\n    );\n}\n\n</code-example>\n<h3 id=\"get-hero-by-id\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnr6f1pgdyjy7z99825gsxato\"><i class=\"material-icons\">link</i>按 ID 获取英雄</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xuub7610o2d5oaylymm8fz6t\">大多数 Web API 都支持 \n<code>api/hero/:id</code> 形式的\n<em>按 ID 获取</em>请求（例如 \n<code>api/hero/11</code>）。添加一个 \n<code>HeroService.getHero()</code> 方法来发出该请求：</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHero\" title=\"src/app/hero.service.ts\">\n/** GET hero by id. Will 404 if id not found */\ngetHero(id: number): Observable&lt;Hero&gt; {\n  const url = `${this.heroesUrl}/${id}`;\n  return this.http.get&lt;Hero&gt;(url).pipe(\n    tap(_ =&gt; this.log(`fetched hero id=${id}`)),\n    catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u4z6s2kgzlztwkl7264ektjk\">与 \n<code>getHeroes()</code> 相比，它有三个显著的区别。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1pdmnfj3nr7bqswai9cpvurq\">它使用所需的英雄 ID 构建一个请求 URL。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76qslbklifd8s12hj7w037h81\">服务器应该返回单个英雄，而不是英雄数组。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qvfm57k8nil8l9h7k7hournn\">因此，\n<code>getHero</code> 返回一个 \n<code>Observable&lt;Hero&gt;</code>（“\n<em>一个英雄对象的可观察者</em>”），而不是一个英雄\n<em>数组</em>的可观察者。</li>\n</ul>\n<h2 id=\"update-heroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80tll81yanh36dqqi5wusecu1\"><i class=\"material-icons\">link</i>更新英雄</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqm3410abha85qpq9vq2zaj1b\">在\n<em>英雄详情</em>视图中编辑英雄姓名。 当你输入时，英雄姓名会更新页面顶部的标题。 但当你点击“返回按钮”时，更改会丢失。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6radnrva5hr26mnog4z6gmnqb\">如果你想让更改持久化，你必须将它们写回服务器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2aextbffpg3r2ph2dohlrpdcw\">在英雄详情模板的末尾，添加一个带有 \n<code>click</code> 事件绑定的保存按钮，该事件绑定调用一个名为 \n<code>save()</code> 的新组件方法。</p>\n<code-example path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\" region=\"save\" title=\"src/app/hero-detail/hero-detail.component.html (save)\">\n&lt;button (click)=\"save()\"&gt;save&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cq12pc6222v5m3j6s189qao2\">添加以下 \n<code>save()</code> 方法，该方法使用英雄服务 \n<code>updateHero()</code> 方法持久化英雄姓名更改，然后导航回之前的视图。</p>\n<code-example path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\" region=\"save\" title=\"src/app/hero-detail/hero-detail.component.ts (save)\">\nsave(): void {\n   this.heroService.updateHero(this.hero)\n     .subscribe(() =&gt; this.goBack());\n }\n\n</code-example>\n<h4 id=\"add-heroserviceupdatehero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjv8dt7pl9pgd9hgn20r4nh19\"><i class=\"material-icons\">link</i>添加\n<em>HeroService.updateHero()</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dn3l8kikgalyewp0h2c3u5b7v\"><code>updateHero()</code> 方法的整体结构类似于 \n<code>getHeroes()</code>，但它使用 \n<code>http.put()</code> 将更改后的英雄持久化到服务器。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"updateHero\" title=\"src/app/hero.service.ts (update)\">\n/** PUT: update the hero on the server */\nupdateHero (hero: Hero): Observable&lt;any&gt; {\n  return this.http.put(this.heroesUrl, hero, httpOptions).pipe(\n    tap(_ =&gt; this.log(`updated hero id=${hero.id}`)),\n    catchError(this.handleError&lt;any&gt;('updateHero'))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4tatnpxgp1qqks2091hhsjbu\"><code><a href=\"\" class=\"code-anchor\">HttpClient.put()</a></code> 方法接受三个参数</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab3ghj5o8vnyp8hk9pisqurp8\">URL</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zb5ygvazx2ctxabmiyne506u\">要更新的数据（在本例中为修改后的英雄）</li>\n<li>options</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kcbmk6fgpqip7wj6vvb30b69\">URL 未更改。英雄 Web API 通过查看英雄的 \n<code>id</code> 来知道要更新哪个英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4plh0ph4r22dad06rc8gfr8ip\">英雄 Web API 在 HTTP 保存请求中需要一个特殊的标头。 该标头位于 \n<code>HeroService</code> 中定义的 \n<code>httpOptions</code> 常量中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"http-options\">\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bth69tvfuny4nxvi76s0iuuz\">刷新浏览器，更改英雄姓名，保存更改， 然后点击“返回”按钮。 现在英雄将以更改后的姓名出现在列表中。</p>\n<h2 id=\"add-a-new-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8arpbx6ig96s6l5n6p1iw2fr4\"><i class=\"material-icons\">link</i>添加一个新的英雄</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eytrnd4nlef76jez0tqvl1jne\">要添加一个英雄，此应用只需要英雄的姓名。你可以使用一个 \n<code>input</code> 元素与一个添加按钮配对。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5b2eswny4qq7icts6iuhzslq8\">将以下内容插入 \n<code>HeroesComponent</code> 模板中，紧接在 标题之后：</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"add\" title=\"src/app/heroes/heroes.component.html (add)\">\n&lt;div&gt;\n  &lt;label&gt;Hero name:\n    &lt;input #heroName /&gt;\n  &lt;/label&gt;\n  &lt;!-- (click) passes input value to add() and then clears the input --&gt;\n  &lt;button (click)=\"add(heroName.value); heroName.value=''\"&gt;\n    add\n  &lt;/button&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dusniaiudkr6vomqywbo63rk8\">响应点击事件，调用组件的点击处理程序，然后 清除输入字段，以便它可以接受另一个姓名。</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"add\" title=\"src/app/heroes/heroes.component.ts (add)\">\nadd(name: string): void {\n  name = name.trim();\n  if (!name) { return; }\n  this.heroService.addHero({ name } as Hero)\n    .subscribe(hero =&gt; {\n      this.heroes.push(hero);\n    });\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57fbsg975hi8rnyfhrc8lyxpb\">当给定的姓名不为空时，处理程序会从姓名中创建一个类似 \n<code>Hero</code> 的对象（它只缺少 \n<code>id</code>），并将它传递给服务的 \n<code>addHero()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gruzmkxlbrq6jzn8sqmjn4du\">当 \n<code>addHero</code> 成功保存时，\n<code>subscribe</code> 回调 会接收新的英雄，并将其推入 \n<code>heroes</code> 列表以供显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy1no52ffjze7oaj7en6p2cce\">你将在下一节中编写 \n<code>HeroService.addHero</code>。</p>\n<h4 id=\"add-heroserviceaddhero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gw9er79rf0c8ty1wt08ril7x\"><i class=\"material-icons\">link</i>添加\n<em>HeroService.addHero()</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28et5rhp5sn0mauieom760dzv\">将以下 \n<code>addHero()</code> 方法添加到 \n<code>HeroService</code> 类中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"addHero\" title=\"src/app/hero.service.ts (addHero)\">\n/** POST: add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new hero to the server */\naddHero (hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, httpOptions).pipe(\n    tap((hero: Hero) =&gt; this.log(`added hero w/ id=${hero.id}`)),\n    catchError(this.handleError&lt;Hero&gt;('addHero'))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bv2cr0jn6qr4kygldh8iyd2\"><code>HeroService.addHero()</code> 与 \n<code>updateHero</code> 有两个不同之处。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jtbvbxfyzmi0lklafskhcdsp\">它调用 \n<code><a href=\"\" class=\"code-anchor\">HttpClient.post()</a></code> 而不是 \n<code>put()</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gih8a6lwhzjmafiaq642qiyz\">它期望服务器为新英雄生成一个 id， 它将在 \n<code>Observable&lt;Hero&gt;</code> 中返回给调用者。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9aglwqcmsunfqu9wl8rdo7rho\">刷新浏览器并添加一些英雄。</p>\n<h2 id=\"delete-a-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeuv8p9ba7q4c65b8tyy9gjn4\"><i class=\"material-icons\">link</i>删除一个英雄</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11aoizynq85b3uwb8bqrtjdi0\">英雄列表中的每个英雄都应该有一个删除按钮。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ce521ylq0uiaw75z8cti9eih9\">将以下按钮元素添加到 \n<code>HeroesComponent</code> 模板中，位于重复的 \n<code>&lt;li&gt;</code> 元素中的英雄姓名之后。</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"delete\">\n&lt;button class=\"delete\" title=\"delete hero\"\n(click)=\"delete(hero)\"&gt;x&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlpvi9zlcskc99kymxbyqc2jx\">英雄列表的 HTML 应该如下所示：</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"list\" title=\"src/app/heroes/heroes.component.html (list of heroes)\">\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;button class=\"delete\" title=\"delete hero\"\n    (click)=\"delete(hero)\"&gt;x&lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c6oyihkmi8vxe7u9ytibe9y6\">要将删除按钮定位在英雄条目的最右边， 在 \n<code>heroes.component.css</code> 中添加一些 CSS。你将在下面的 \n<a href=\"tutorial/toh-pt6#heroescomponent\">最终审查代码</a> 中找到该 CSS。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mzuccmfm2i10afeaq49vk0h3\">将 \n<code>delete()</code> 处理程序添加到组件中。</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"delete\" title=\"src/app/heroes/heroes.component.ts (delete)\">\ndelete(hero: Hero): void {\n  this.heroes = this.heroes.filter(h =&gt; h !== hero);\n  this.heroService.deleteHero(hero).subscribe();\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7p3pcv81ycaqrozjvdogsmaiv\">虽然组件将英雄删除委托给 \n<code>HeroService</code>， 但它仍然负责更新自己的英雄列表。 组件的 \n<code>delete()</code> 方法会立即从该列表中删除\n<em>要删除的英雄</em>， 预计 \n<code>HeroService</code> 将在服务器上成功。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1h33z6lt0pj92x6zgzujvt134\">组件对 \n<code>heroService.delete()</code> 返回的 \n<code>Observable</code> 实际上无能为力。\n<strong>它必须订阅</strong>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8odlxidrgi0tduidjnqllrqx7\">如果你忽略了 \n<code>subscribe()</code>，服务将不会向服务器发送删除请求！ 作为一项规则，\n<code>Observable</code> 在有东西订阅之前\n<em>不会做任何事情</em>！</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw44cr27c2rma0e4u9yjxjhk2\">通过暂时删除 \n<code>subscribe()</code> 来确认这一点， 点击“仪表盘”，然后点击“英雄”。 你将再次看到完整的英雄列表。</p>\n</div>\n<h4 id=\"add-heroservicedeletehero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27cssjmzljf5kv9hz33e8nz69\"><i class=\"material-icons\">link</i>添加\n<em>HeroService.deleteHero()</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pp49la27gb19704duo9v0rc1\">向 \n<code>HeroService</code> 添加一个 \n<code>deleteHero()</code> 方法，如下所示。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"deleteHero\" title=\"src/app/hero.service.ts (delete)\">\n/** DELETE: delete the hero from the server */\ndeleteHero (hero: Hero | number): Observable&lt;Hero&gt; {\n  const id = typeof hero === 'number' ? hero : hero.id;\n  const url = `${this.heroesUrl}/${id}`;\n\n  return this.http.delete&lt;Hero&gt;(url, httpOptions).pipe(\n    tap(_ =&gt; this.log(`deleted hero id=${id}`)),\n    catchError(this.handleError&lt;Hero&gt;('deleteHero'))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ra0h98xhrdrf17qa3s2gpyg4\">注意</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8k343nxgbxss1g4ju1efn00h\">它调用 \n<code>HttpClient.delete</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34rp7iiyka1bg0h0exwg1t6no\">URL 是英雄资源 URL 加上要删除的英雄的 \n<code>id</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5h23o2t1drjbdrzjcp5l3uopj\">你不会像使用 \n<code>put</code> 和 \n<code>post</code> 那样发送数据。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84o9szh678wm4zssdfrx2cylh\">你仍然发送 \n<code>httpOptions</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sf3quss92ivf2l3hox2rapfr\">刷新浏览器并尝试新的删除功能。</p>\n<h2 id=\"search-by-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jxapfozmpysbtuoqbmbq2zby\"><i class=\"material-icons\">link</i>按姓名搜索</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3odb4249xjgtjz953s87owi70\">在本练习的最后，你将学习将 \n<code>Observable</code> 操作符链接在一起， 这样你就可以最大限度地减少类似 HTTP 请求的数量， 并经济地使用网络带宽。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uys62bfma7gfcptb5dy06ele\">你将向\n<em>仪表盘</em>添加一个\n<em>英雄搜索</em>功能。 当用户在搜索框中输入姓名时， 你将对按该姓名过滤的英雄发出重复的 HTTP 请求。 你的目标是只发出必要的请求。</p>\n<h4 id=\"heroservicesearchheroes\"><em>HeroService.searchHeroes</em></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k1f09urdvnsxwpfcakderylg\">首先向 \n<code>HeroService</code> 添加一个 \n<code>searchHeroes</code> 方法。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"searchHeroes\" title=\"src/app/hero.service.ts\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&lt;Hero[]&gt; {\n  if (!term.trim()) {\n    // if not search term, return empty hero array.\n    return of([]);\n  }\n  return this.http.get&lt;Hero[]&gt;(`api/heroes/?name=${term}`).pipe(\n    tap(_ =&gt; this.log(`found heroes matching \"${term}\"`)),\n    catchError(this.handleError&lt;Hero[]&gt;('searchHeroes', []))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65sqvdbb15tuefvl901nm2ykf\">如果不存在搜索词，该方法会立即返回一个空数组。 其余部分与 \n<code>getHeroes()</code> 非常相似。 唯一的重大区别是 URL， 它包含一个带有搜索词的查询字符串。</p>\n<h3 id=\"add-search-to-the-dashboard\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vvbylkgki1lgsrlljmauq1bl\"><i class=\"material-icons\">link</i>在仪表盘中添加搜索功能</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ww1p4317pr2g6rq3ibxzecli\">打开 \n<code>DashboardComponent</code> 的\n<em>模板</em>，并将英雄搜索元素 \n<code>&lt;app-hero-search&gt;</code> 添加到 \n<code>DashboardComponent</code> 模板的底部。</p>\n<code-example path=\"toh-pt6/src/app/dashboard/dashboard.component.html\" title=\"src/app/dashboard/dashboard.component.html\" linenums=\"false\">\n&lt;h3&gt;Top Heroes&lt;/h3&gt;\n&lt;div class=\"grid grid-pad\"&gt;\n  &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n    &lt;div class=\"module hero\"&gt;\n      &lt;h4&gt;{{hero.name}}&lt;/h4&gt;\n    &lt;/div&gt;\n  &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n&lt;/div&gt;\n\n&lt;app-hero-search&gt;&lt;/app-hero-search&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yip936g0ijk2c0bawyhbwrzk\">此模板与 \n<code>HeroesComponent</code> 模板中的 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 重复器非常相似。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h45jkkeqfpo4e34m6whaj7t1\">不幸的是，添加此元素会破坏应用程序。Angular 找不到选择器与 \n<code>&lt;app-hero-search&gt;</code> 匹配的组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43x7ppgyrjri13k56wxft6oye\"><code>HeroSearchComponent</code> 尚未存在。修复它。</p>\n<h3 id=\"create-herosearchcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z94u7ouh3thi7alqtuuwmiwe\"><i class=\"material-icons\">link</i>创建\n<em>HeroSearchComponent</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjo3i7jnb6t3qwzenes88d9az\">使用 CLI 创建 \n<code>HeroSearchComponent</code>。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component hero-search\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"564yek6pvih7aqifvpyqcdnlx\">CLI 会生成三个 \n<code>HeroSearchComponent</code> 文件，并将该组件添加到 \n<code>AppModule</code> 的声明中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cke9lqyjcr38h8i52tahwjrie\">用文本框和匹配搜索结果列表替换生成的 \n<code>HeroSearchComponent</code> \n<em>模板</em>，如下所示。</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" title=\"src/app/hero-search/hero-search.component.html\">\n&lt;div id=\"search-component\"&gt;\n  &lt;h4&gt;Hero Search&lt;/h4&gt;\n\n  &lt;input #searchBox id=\"search-box\" (keyup)=\"search(searchBox.value)\" /&gt;\n\n  &lt;ul class=\"search-result\"&gt;\n    &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" &gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n        {{hero.name}}\n      &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azbyjspoosh617lgmgb5866eu\">将私有 CSS 样式添加到 \n<code>hero-search.component.css</code> 中，如以下 \n<a href=\"tutorial/toh-pt6#herosearchcomponent\">最终代码审查</a> 中所列。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mz1qsur512ybm4nulwbw5tlg\">当用户在搜索框中输入时，\n<em>keyup</em> 事件绑定会调用组件的 \n<code>search()</code> 方法，并将新的搜索框值传递给该方法。</p>\n<a id=\"asyncpipe\"></a>\n<h3 id=\"asyncpipe\"><em>AsyncPipe</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ad621b2t5ipp2dab15sa31aa5\">正如预期的那样，\n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 重复英雄对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44uptb3mo981mu5ph9sjzqyvu\">仔细观察，你会发现 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 迭代的是名为 \n<code>heroes$</code> 的列表，而不是 \n<code>heroes</code>。</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"async\">\n&lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" &gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aznsxsygqijnbn78exkdu4ucv\"><code>$</code> 是一个约定，表示 \n<code>heroes$</code> 是一个 \n<code>Observable</code>，而不是一个数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1f7sbc1ce9vvcq32we2rjylqz\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 无法对 \n<code>Observable</code> 做任何操作。但还有一个管道字符 (\n<code>|</code>)，后面跟着 \n<code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code>，它标识了 Angular 的 \n<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3n2h6z2odcv4g8fnhvv7ljp0a\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 会自动订阅 \n<code>Observable</code>，因此你无需在组件类中进行订阅。</p>\n<h3 id=\"fix-the-herosearchcomponent-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pelvpqa6v6x3ribolu17fybj\"><i class=\"material-icons\">link</i>修复\n<em>HeroSearchComponent</em> 类</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jwrnwblb13ahwa5gsznptyco\">用以下内容替换生成的 \n<code>HeroSearchComponent</code> 类和元数据。</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" title=\"src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject }    from 'rxjs/Subject';\nimport { of }         from 'rxjs/observable/of';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&lt;Hero[]&gt;;\n  private searchTerms = new Subject&lt;string&gt;();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfvp67exdn2sjfk0l59etsbk2\">注意 \n<code>heroes$</code> 作为 \n<code>Observable</code> 的声明 \n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"heroes-stream\">\n  heroes$: Observable&lt;Hero[]&gt;; \n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96k9baybg4go7ux9uiohp9d1s\">你将在 \n<a href=\"tutorial/toh-pt6#search-pipe\"><code>ngOnInit()</code></a> 中设置它。在你这样做之前，先关注 \n<code>searchTerms</code> 的定义。</p>\n<h3 id=\"the-searchterms-rxjs-subject\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h5va3ntieu7x0dbwpbm3hnaf\"><i class=\"material-icons\">link</i><em>searchTerms</em> RxJS 主题</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43aq9104cwvh9dvg5o25mgf4c\"><code>searchTerms</code> 属性被声明为 RxJS \n<code>Subject</code>。</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"searchTerms\">\nprivate searchTerms = new Subject&lt;string&gt;();\n\n// Push <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> search term into the observable stream.\nsearch(term: string): void {\n  this.searchTerms.next(term);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qeqr1an0sk8mw5ku1154zz2z\"><code>Subject</code> 既是\n<em>可观察</em>值的来源，本身也是一个 \n<code>Observable</code>。你可以像订阅任何 \n<code>Observable</code> 一样订阅 \n<code>Subject</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4zo7v15rj22vqo58f0zj0ide\">你还可以通过调用其 \n<code>next(value)</code> 方法将值推送到该 \n<code>Observable</code> 中，就像 \n<code>search()</code> 方法所做的那样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcaoqmmn9rvgjzc9hk7r28krt\"><code>search()</code> 方法通过\n<em>事件绑定</em>调用文本框的 \n<code>keystroke</code> 事件。</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"input\">\n&lt;input #searchBox id=\"search-box\" (keyup)=\"search(searchBox.value)\" /&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7j6ha6adr0rv0bgwvjtzx91vt\">每次用户在文本框中输入时，绑定都会调用 \n<code>search()</code>，并将文本框值（一个“搜索词”）传递给它。\n<code>searchTerms</code> 变成一个 \n<code>Observable</code>，发出稳定的搜索词流。</p>\n<a id=\"search-pipe\"></a>\n<h3 id=\"chaining-rxjs-operators\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vrqfqepug5rs0cea0b7e63g2\"><i class=\"material-icons\">link</i>链式调用 RxJS 操作符</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3j6rv0ce8rt4mm0z46cc9prha\">在每次用户按键后直接将新的搜索词传递给 \n<code>searchHeroes()</code> 会产生过多的 HTTP 请求，这会占用服务器资源并消耗蜂窝网络数据计划。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8t9btjhgviyi98myxevm8k10m\">相反，\n<code>ngOnInit()</code> 方法将 \n<code>searchTerms</code> \n<em>可观察者</em> 通过一系列 RxJS 操作符进行管道处理，这些操作符减少了对 \n<code>searchHeroes()</code> 的调用次数，最终返回一个\n<em>可观察者</em>，它包含及时的英雄搜索结果（每个结果都是一个 \n<code>Hero[]</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26yvvrnhlv4zm18vdeszk6v1x\">以下是代码。</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"search\">\nthis.heroes$ = this.searchTerms.pipe(\n  // wait 300ms after each keystroke before considering the term\n  debounceTime(300),\n\n  // ignore new term if same as previous term\n  distinctUntilChanged(),\n\n  // switch to new search observable each time the term changes\n  switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),\n);\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7itqrv3o1bsewxui1ejlq8orh\"><code>debounceTime(300)</code> 会等待新的字符串事件流暂停 300 毫秒，然后再传递最新的字符串。你永远不会比 300 毫秒更频繁地发出请求。</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpjwkaysw2u4yi8juo96ocra\"><code>distinctUntilChanged</code> 确保只有在过滤文本发生更改时才会发送请求。</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2amwkm0zd5ry6fyglr86rwo2q\"><code>switchMap()</code> 会为每个通过 \n<code>debounce</code> 和 \n<code>distinctUntilChanged</code> 的搜索词调用搜索服务。它会取消并丢弃之前的搜索可观察者，只返回最新的搜索服务可观察者。</li>\n</ul>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mj4z13yncmkd3js408m6udnm\">使用 \n<a href=\"http://www.learnrxjs.io/operators/transformation/switchmap.html\">switchMap 操作符</a>，每个符合条件的按键事件都可以触发 \n<code><a href=\"\" class=\"code-anchor\">HttpClient.get()</a></code> 方法调用。即使在请求之间有 300 毫秒的暂停，你仍然可能有多个 HTTP 请求正在进行，并且它们可能不会按发送顺序返回。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ez26hf372n7xlovny59bldvby\"><code>switchMap()</code> 保留原始请求顺序，同时只返回来自最新 HTTP 方法调用的可观察者。来自先前调用的结果会被取消并丢弃。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tmzp9bxw5nrux9qo4rpndv61\">请注意，\n<em>取消</em>之前的 \n<code>searchHeroes()</code> \n<em>Observable</em> 实际上并不会中止正在进行的 HTTP 请求。只是在到达应用程序代码之前，不需要的结果会被简单地丢弃。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ih0s7hwdf4vbpn8ndkjuguxr\">请记住，组件\n<em>类</em>不会订阅 \n<code>heroes$</code> \n<em>可观察者</em>。这是模板中 \n<a href=\"tutorial/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> 的工作。</p>\n<h4 id=\"try-it\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5o8k80g83w0jrloe187y9vxwi\"><i class=\"material-icons\">link</i>试试看</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bogegd693zgwgoaod76d021ng\">再次运行应用程序。在\n<em>仪表盘</em>中，在搜索框中输入一些文本。如果你输入与任何现有英雄名称匹配的字符，你将看到类似以下内容。</p>\n<figure>\n  <img src=\"generated/images/guide/toh/toh-hero-search.png\" alt=\"Hero Search Component\" width=\"240\" height=\"224\">\n</figure>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\"><i class=\"material-icons\">link</i>最终代码审查</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fix8vbrc6hlc62xdabketvo7\">你的应用程序应该看起来像这样 \n<live-example></live-example>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hx7mtdgta5x2pzfhjbqub9f9\">以下是本页讨论的代码文件（都在 \n<code>src/app/</code> 文件夹中）。</p>\n<a id=\"heroservice\"></a>\n<a id=\"inmemorydataservice\"></a>\n<a id=\"appmodule\"></a>\n<h4 id=\"heroservice-inmemorydataservice-appmodule\"><em>HeroService</em>, <em>InMemoryDataService</em>, <em>AppModule</em></h4>\n<code-tabs>\n  <code-pane title=\"hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n};\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  constructor(\n    private http: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes (): Observable&lt;Hero[]&gt; {\n    return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n      .pipe(\n        tap(heroes =&gt; this.log(`fetched heroes`)),\n        catchError(this.handleError('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404&lt;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>&gt;(id: number): Observable&lt;Hero&gt; {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get&lt;Hero[]&gt;(url)\n      .pipe(\n        map(heroes =&gt; heroes[0]), // returns <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {0|1} element array\n        tap(h =&gt; {\n          const outcome = h ? `fetched` : `did not find`;\n          this.log(`${outcome} hero id=${id}`);\n        }),\n        catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable&lt;Hero&gt; {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get&lt;Hero&gt;(url).pipe(\n      tap(_ =&gt; this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n    );\n  }\n\n  /* GET heroes whose name contains search term */\n  searchHeroes(term: string): Observable&lt;Hero[]&gt; {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get&lt;Hero[]&gt;(`api/heroes/?name=${term}`).pipe(\n      tap(_ =&gt; this.log(`found heroes matching \"${term}\"`)),\n      catchError(this.handleError&lt;Hero[]&gt;('searchHeroes', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new hero to the server */\n  addHero (hero: Hero): Observable&lt;Hero&gt; {\n    return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, httpOptions).pipe(\n      tap((hero: Hero) =&gt; this.log(`added hero w/ id=${hero.id}`)),\n      catchError(this.handleError&lt;Hero&gt;('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero (hero: Hero | number): Observable&lt;Hero&gt; {\n    const id = typeof hero === 'number' ? hero : hero.id;\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete&lt;Hero&gt;(url, httpOptions).pipe(\n      tap(_ =&gt; this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError&lt;Hero&gt;('deleteHero'))\n    );\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero (hero: Hero): Observable&lt;any&gt; {\n    return this.http.put(this.heroesUrl, hero, httpOptions).pipe(\n      tap(_ =&gt; this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError&lt;any&gt;('updateHero'))\n    );\n  }\n\n  /**\n   * Handle <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError&lt;T&gt; (operation = 'operation', result?: T) {\n    return (error: any): Observable&lt;T&gt; =&gt; {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add('HeroService: ' + message);\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\">\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\n\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 11, name: 'Mr. Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"app.module.ts\" path=\"toh-pt6/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> }    from '@angular/common/http';\n\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService }  from './in-memory-data.service';\n\nimport { AppRoutingModule }     from './app-routing.module';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard/dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\nimport { HeroesComponent }      from './heroes/heroes.component';\nimport { HeroSearchComponent }  from './hero-search/hero-search.component';\nimport { HeroService }          from './hero.service';\nimport { MessageService }       from './message.service';\nimport { MessagesComponent }    from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n    // and returns simulated server responses.\n    // Remove it when <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> real server is ready to receive requests.\n    HttpClientInMemoryWebApiModule.forRoot(\n      InMemoryDataService, { dataEncapsulation: false }\n    )\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent,\n    HeroSearchComponent\n  ],\n  providers: [ HeroService, MessageService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n</code-tabs>\n<a id=\"heroescomponent\"></a>\n<h4 id=\"heroescomponent\"><em>HeroesComponent</em></h4>\n<code-tabs>\n  <code-pane title=\"heroes/heroes.component.html\" path=\"toh-pt6/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;div&gt;\n  &lt;label&gt;Hero name:\n    &lt;input #heroName /&gt;\n  &lt;/label&gt;\n  &lt;!-- (click) passes input value to add() and then clears the input --&gt;\n  &lt;button (click)=\"add(heroName.value); heroName.value=''\"&gt;\n    add\n  &lt;/button&gt;\n&lt;/div&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;button class=\"delete\" title=\"delete hero\"\n    (click)=\"delete(hero)\"&gt;x&lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n</code-pane>\n  <code-pane title=\"heroes/heroes.component.ts\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n\n  add(name: string): void {\n    name = name.trim();\n    if (!name) { return; }\n    this.heroService.addHero({ name } as Hero)\n      .subscribe(hero =&gt; {\n        this.heroes.push(hero);\n      });\n  }\n\n  delete(hero: Hero): void {\n    this.heroes = this.heroes.filter(h =&gt; h !== hero);\n    this.heroService.deleteHero(hero).subscribe();\n  }\n\n}\n\n\n</code-pane>\n  <code-pane title=\"heroes/heroes.component.css\" path=\"toh-pt6/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n\n.heroes <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {\n  color: #888;\n  text-decoration: none;\n  position: relative;\n  display: block;\n  width: 250px;\n}\n\n.heroes <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:hover {\n  color:#607D8B;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\nbutton {\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  cursor: hand;\n  font-family: Arial;\n}\n\nbutton:hover {\n  background-color: #cfd8dc;\n}\n\nbutton.delete {\n  position: relative;\n  left: 194px;\n  top: -32px;\n  background-color: gray !important;\n  color: white;\n}\n\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herodetailcomponent\"></a>\n<h4 id=\"herodetailcomponent\"><em>HeroDetailComponent</em></h4>\n<code-tabs>\n  <code-pane title=\"hero-detail/hero-detail.component.html\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n  &lt;h2&gt;{{ hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;name:\n      &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;button (click)=\"goBack()\"&gt;go back&lt;/button&gt;\n  &lt;button (click)=\"save()\"&gt;save&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n  <code-pane title=\"hero-detail/hero-detail.component.ts\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero }         from '../hero';\nimport { HeroService }  from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.heroService.getHero(id)\n      .subscribe(hero =&gt; this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n save(): void {\n    this.heroService.updateHero(this.hero)\n      .subscribe(() =&gt; this.goBack());\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herosearchcomponent\"></a>\n<h4 id=\"herosearchcomponent\"><em>HeroSearchComponent</em></h4>\n<code-tabs>\n  <code-pane title=\"hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\">\n&lt;div id=\"search-component\"&gt;\n  &lt;h4&gt;Hero Search&lt;/h4&gt;\n\n  &lt;input #searchBox id=\"search-box\" (keyup)=\"search(searchBox.value)\" /&gt;\n\n  &lt;ul class=\"search-result\"&gt;\n    &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" &gt;\n      &lt;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n        {{hero.name}}\n      &lt;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n  <code-pane title=\"hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject }    from 'rxjs/Subject';\nimport { of }         from 'rxjs/observable/of';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&lt;Hero[]&gt;;\n  private searchTerms = new Subject&lt;string&gt;();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"hero-search/hero-search.component.css\" path=\"toh-pt6/src/app/hero-search/hero-search.component.css\">\n/* HeroSearch private styles */\n.search-result li {\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  width:195px;\n  height: 16px;\n  padding: 5px;\n  background-color: white;\n  cursor: pointer;\n  list-style-type: none;\n}\n\n.search-result li:hover {\n  background-color: #607D8B;\n}\n\n.search-result li <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {\n  color: #888;\n  display: block;\n  text-decoration: none;\n}\n\n.search-result li <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:hover {\n  color: white;\n}\n.search-result li <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:active {\n  color: white;\n}\n#search-box {\n  width: 200px;\n  height: 20px;\n}\n\n\nul.search-result {\n  margin-top: 0;\n  padding-left: 0;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajilzna3wjb7lmdh40fcvf61d\">你已经走到了旅程的尽头，并且取得了很多成就。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agbum8ktnhk7lljudaj4crbe\">你添加了在应用程序中使用 HTTP 所需的依赖项。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bqo5h5ny6kb5tbx6ranvhol4\">你重构了 \n<code>HeroService</code>，使其从 Web API 加载英雄。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p3wh0b3s60gkisxsux8cfyqh\">你扩展了 \n<code>HeroService</code>，使其支持 \n<code>post()</code>、\n<code>put()</code> 和 \n<code>delete()</code> 方法。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3oalqc79rmrugj1ypx66b1kn4\">你更新了组件，使其允许添加、编辑和删除英雄。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7z3c7rp5xreuirjuy8qsilkdq\">你配置了一个内存中的 Web API。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9iojvk9feajftjg1saz1ffhdy\">你学习了如何使用可观察者。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7alrr3yegg561t25gzuju8xu3\">本教程到此结束。 你已经准备好学习更多关于 Angular 开发的知识，从基础部分开始， 首先是 \n<a href=\"guide/architecture\" title=\"架构\">架构</a> 指南。</p>\n\n</div>\n<!-- links to this doc:\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/Location\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/common/http/HttpHeaders\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/NgModule#imports\n - api/core/OnInit\n - api/core/testing/async\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/http/Http\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Data\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - guide/architecture\n - tutorial/toh-pt6#add-a-new-hero\n - tutorial/toh-pt6#add-heroserviceaddhero\n - tutorial/toh-pt6#add-heroservicedeletehero\n - tutorial/toh-pt6#add-heroserviceupdatehero\n - tutorial/toh-pt6#add-search-to-the-dashboard\n - tutorial/toh-pt6#asyncpipe\n - tutorial/toh-pt6#chaining-rxjs-operators\n - tutorial/toh-pt6#create-herosearchcomponent\n - tutorial/toh-pt6#delete-a-hero\n - tutorial/toh-pt6#enable-http-services\n - tutorial/toh-pt6#error-handling\n - tutorial/toh-pt6#final-code-review\n - tutorial/toh-pt6#fix-the-herosearchcomponent-class\n - tutorial/toh-pt6#get-hero-by-id\n - tutorial/toh-pt6#get-heroes-with-httpclient\n - tutorial/toh-pt6#handleerror\n - tutorial/toh-pt6#herodetailcomponent\n - tutorial/toh-pt6#heroes-and-http\n - tutorial/toh-pt6#heroescomponent\n - tutorial/toh-pt6#herosearchcomponent\n - tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\n - tutorial/toh-pt6#heroservicesearchheroes\n - tutorial/toh-pt6#http\n - tutorial/toh-pt6#http-methods-return-one-value\n - tutorial/toh-pt6#httpclientget-returns-response-data\n - tutorial/toh-pt6#import-heroes\n - tutorial/toh-pt6#search-by-name\n - tutorial/toh-pt6#search-pipe\n - tutorial/toh-pt6#simulate-a-data-server\n - tutorial/toh-pt6#summary\n - tutorial/toh-pt6#tap-into-the-observable\n - tutorial/toh-pt6#the-searchterms-rxjs-subject\n - tutorial/toh-pt6#try-it\n - tutorial/toh-pt6#update-heroes\n - http://www.learnrxjs.io/operators/transformation/switchmap.html\n - https://github.com/angular/in-memory-web-api\n-->"
}