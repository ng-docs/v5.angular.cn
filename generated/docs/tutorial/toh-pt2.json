{
  "id" : "tutorial/toh-pt2",
  "title" : "显示英雄列表",
  "contents" : "<div class=\"content\">\n<h1 id=\"display-a-heroes-list\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14n101alerrzq3unjbveeik03\"><i class=\"material-icons\">link</i>显示英雄列表</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mr9mio2igcioxeeonv8k6e3m\">在本页中，你将扩展 Tour of Heroes 应用程序以显示英雄列表，并允许用户选择英雄并显示英雄的详细信息。</p>\n<h2 id=\"create-mock-heroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aogy9ftc3pcrpdhxxhfbmbudn\"><i class=\"material-icons\">link</i>创建模拟英雄</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56e10u7dika9f1xetv4vs4j3i\">你需要一些英雄来显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jm5rwhm1x7d6j17fb99d1u2n\">最终你将从远程数据服务器获取它们。现在，你将创建一些 \n<em>模拟英雄</em>，并假装它们来自服务器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82yjwdoodoew01xyupq1l3ft0\">在 \n<code>src/app/</code> 文件夹中创建一个名为 \n<code>mock-heroes.ts</code> 的文件。将 \n<code>HEROES</code> 常量定义为包含十个英雄的数组，并将其导出。该文件应如下所示。</p>\n<code-example path=\"toh-pt2/src/app/mock-heroes.ts\" linenums=\"false\" title=\"src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-example>\n<h2 id=\"displaying-heroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f3up5by0o1mkmutxmjbegsml\"><i class=\"material-icons\">link</i>显示英雄</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1t4blkicoxfejrc1y2a6uwz3n\">你将要显示 \n<code>HeroesComponent</code> 顶部的英雄列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y3et6c6h90qo9vwgymzqmaoj\">打开 \n<code>HeroesComponent</code> 类文件并导入模拟的 \n<code>HEROES</code>。</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"import-heroes\" title=\"src/app/heroes/heroes.component.ts (import HEROES)\">\nimport { HEROES } from '../mock-heroes';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71sylxz0zfrwfreyv9mugx1ws\">向类中添加一个 \n<code>heroes</code> 属性，用于公开这些英雄以便进行绑定。</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"heroes\">\nheroes = HEROES;\n\n</code-example>\n<h3 id=\"list-heroes-with-ngfor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rdefczgecawnocllaw594b5f\"><i class=\"material-icons\">link</i>使用 \n<em>*ngFor</em> 列出英雄</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pnfs6yp3kwmwhwhn909a6y8b\">打开 \n<code>HeroesComponent</code> 模板文件并进行以下更改：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw437vi55n0grplcn7jfztr2n\">在顶部添加一个 \n<code>&lt;h2&gt;</code>，</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axdzg0512tjaxaixcv52u9142\">在其下方添加一个 HTML 无序列表 (\n<code>&lt;ul&gt;</code>)</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"l5i4blrerg7n2pk9mhhgbk5j\">在 \n<code>&lt;ul&gt;</code> 中插入一个 \n<code>&lt;li&gt;</code>，用于显示 \n<code>hero</code> 的属性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"224il7i7ween1q8l2czv2cw2w\">添加一些 CSS 类用于样式设置（你将在稍后添加 CSS 样式）。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ptjn48eqwocz07oq879j5nod\">使其看起来像这样：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"list\" title=\"heroes.component.html (heroes template)\" linenums=\"false\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li&gt;\n    &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vjpqlu3utt0x0ifnbnggh265\">现在将 \n<code>&lt;li&gt;</code> 更改为：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"li\">\n&lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6a7qsmgu4j68dammncy2gkqwe\"><a href=\"guide/template-syntax#ngFor\"><code>*ngFor</code></a> 是 Angular 的\n<em>重复器</em>指令。它会为列表中的每个元素重复宿主元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek4c2ypzm31ecm75z6rztvu6g\">在本例中</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch51n3p2mng759bhmsh4uubdp\"><code>&lt;li&gt;</code> 是宿主元素</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4b08d79p6mfcjh9he31l2wbhs\"><code>heroes</code> 是来自 \n<code>HeroesComponent</code> 类的列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93r8njec7chq8w03w18dcr7ix\"><code>hero</code> 保存当前英雄对象，用于遍历列表中的每个元素。</li>\n</ul>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgi3xg8jcg25uks942kbzf580\">不要忘记 \n<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 前面的星号 (*)。它是语法中的关键部分。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uxo5eced9nx4old7frg2qgup\">浏览器刷新后，英雄列表就会出现。</p>\n<a id=\"styles\"></a>\n<h3 id=\"style-the-heroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dsvp93epxy6rmr0we3pirpnw\"><i class=\"material-icons\">link</i>设置英雄的样式</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cirwjbpysyupfwkl3mig53r4w\">英雄列表应该具有吸引力，并且当用户将鼠标悬停在列表中的英雄上并选择英雄时，应该在视觉上做出响应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0qekdwum17j8b8364gkeacz6\">在\n<a href=\"tutorial/toh-pt0#app-wide-styles\">第一个教程</a>中，你在 \n<code>styles.css</code> 中设置了整个应用程序的基本样式。该样式表不包含此英雄列表的样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47i44g7jo4pnglucgapmj1e0n\">你可以向 \n<code>styles.css</code> 添加更多样式，并在添加组件时不断扩展该样式表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"234j3slxqmdw4awxsx90c2hqw\">你可能更倾向于为特定组件定义私有样式，并将组件所需的一切（代码、HTML 和 CSS）放在一个地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9pp38cut4907gg5p4dtqwde0k\">这种方法使你更容易在其他地方重用组件，即使全局样式不同，也能提供组件的预期外观。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7x828804852h5dp53xzyefcv4\">你可以通过在 \n<code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> 数组中内联定义私有样式，或者通过在 \n<code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 数组中标识的样式表文件来定义私有样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73ewpsogg9hn4mwwck9uu6gga\">当 CLI 生成 \n<code>HeroesComponent</code> 时，它为 \n<code>HeroesComponent</code> 创建了一个空的 \n<code>heroes.component.css</code> 样式表，并在 \n<code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 中指向它，如下所示。</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"metadata\" title=\"src/app/heroes/heroes.component.ts (@Component)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jvp217qstcruluw5yjrup17h\">打开 \n<code>heroes.component.css</code> 文件，并将 \n<code>HeroesComponent</code> 的私有 CSS 样式粘贴到其中。你可以在本指南末尾的\n<a href=\"tutorial/toh-pt2#final-code-review\">最终代码审查</a>中找到它们。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54vuyspt7au5c4k9tj03s6h4c\">在 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据中标识的样式和样式表的作用域仅限于该特定组件。\n<code>heroes.component.css</code> 样式仅适用于 \n<code>HeroesComponent</code>，不会影响外部 HTML 或任何其他组件中的 HTML。</p>\n</div>\n<h2 id=\"masterdetail\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6glnpcs5ujrm91rdruwdjt977\"><i class=\"material-icons\">link</i>主/从</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2pl97buc1avzh7v9a326jbhc\">当用户点击\n<strong>主</strong>列表中的英雄时，组件应该在页面底部显示所选英雄的\n<strong>详细信息</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47ifvm4bcoqj98m9m4czgfvn\">在本节中，你将监听英雄条目点击事件并更新英雄详细信息。</p>\n<h3 id=\"add-a-click-event-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40o8da41dfpi8y9xycrs71ad5\"><i class=\"material-icons\">link</i>添加点击事件绑定</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fimunr07pkmzqmed4mok55q2\">向 \n<code>&lt;li&gt;</code> 添加点击事件绑定，如下所示：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"selectedHero-click\" title=\"heroes.component.html (template excerpt)\" linenums=\"false\">\n&lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" (click)=\"onSelect(hero)\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7k1e4029xj2se1idzb5x1nps\">这是 Angular 的\n<a href=\"guide/template-syntax#event-binding\">事件绑定</a>语法的示例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c35p9quvtxu81oq36ivtqju9k\"><code>click</code> 周围的括号告诉 Angular 监听 \n<code>&lt;li&gt;</code> 元素的 \n<code>click</code> 事件。当用户点击 \n<code>&lt;li&gt;</code> 时，Angular 会执行 \n<code>onSelect(hero)</code> 表达式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i44g1g55140fmei904t68o9m\"><code>onSelect()</code> 是你将要编写的 \n<code>HeroesComponent</code> 方法。Angular 会使用点击的 \n<code>&lt;li&gt;</code> 中显示的 \n<code>hero</code> 对象调用它，该 \n<code>hero</code> 与之前在 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 表达式中定义的 \n<code>hero</code> 相同。</p>\n<h3 id=\"add-the-click-event-handler\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jqkfiglwl07i38hecdt2d8h\"><i class=\"material-icons\">link</i>添加点击事件处理程序</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iznaf2z6tbmtsiybg7qaiavn\">将组件的 \n<code>hero</code> 属性重命名为 \n<code>selectedHero</code>，但不要为它赋值。应用程序启动时没有\n<em>选定的英雄</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atsd192tlj1ftghrss69s6pu5\">添加以下 \n<code>onSelect()</code> 方法，该方法将模板中点击的英雄赋值给组件的 \n<code>selectedHero</code>。</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"on-select\" title=\"src/app/heroes/heroes.component.ts (onSelect)\" linenums=\"false\">\nselectedHero: Hero;\n\nonSelect(hero: Hero): void {\n  this.selectedHero = hero;\n}\n\n</code-example>\n<h3 id=\"update-the-details-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"doxxok28uxqxj191kqkjgbi44\"><i class=\"material-icons\">link</i>更新详细信息模板</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"g159li7952r49jwiizr5au7w\">模板仍然引用组件的旧 \n<code>hero</code> 属性，该属性不再存在。将 \n<code>hero</code> 重命名为 \n<code>selectedHero</code>。</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"selectedHero-details\" title=\"heroes.component.html (selected hero details)\" linenums=\"false\">\n&lt;h2&gt;{{ selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&lt;/h2&gt;\n&lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{selectedHero.id}}&lt;/div&gt;\n&lt;div&gt;\n  &lt;label&gt;name:\n    &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"&gt;\n  &lt;/label&gt;\n&lt;/div&gt;\n\n</code-example>\n<h3 id=\"hide-empty-details-with-ngif\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9jflu8zpic5jaeevy31315wy\"><i class=\"material-icons\">link</i>使用 \n<em>*ngIf</em> 隐藏空详细信息</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65sj3jmtsimczjdv70emhu5bo\">浏览器刷新后，应用程序就崩溃了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elvt7j1n2mi77pxhm5j0qw25h\">打开浏览器开发者工具，在控制台中查找类似于以下内容的错误消息：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  HeroesComponent.html:3 ERROR TypeError: Cannot read property 'name' of undefined\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coqjnxx8ue3h5dahbs6i8353o\">现在点击其中一个列表项。应用程序似乎又可以正常工作了。英雄显示在列表中，点击的英雄的详细信息显示在页面底部。</p>\n<h4 id=\"what-happened\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etp3uz6pmssfn0fiv3tainmtu\"><i class=\"material-icons\">link</i>发生了什么？</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c17gvg8dbjulgbuv7k3v75iqy\">当应用程序启动时，\n<code>selectedHero</code> 为 \n<code>undefined</code>，\n<em>这是设计使然</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zrnxl4v8glpo1c4b6gvtyol6\">模板中引用 \n<code>selectedHero</code> 属性的绑定表达式（例如 \n<code>{{selectedHero.name}}</code>）\n<em>必须失败</em>，因为没有选定的英雄。</p>\n<h4 id=\"the-fix\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nsa6054p1kwzzcpbs1eqkgpw\"><i class=\"material-icons\">link</i>修复方法</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dneu4dm7rfuezi9lf278nj7t\">此组件仅在 \n<code>selectedHero</code> 存在时才显示所选英雄的详细信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayrcop4qxowjrtxl8je5dz8hu\">将英雄详细信息的 HTML 代码包装在一个 \n<code>&lt;div&gt;</code> 中。 向 \n<code>&lt;div&gt;</code> 添加 Angular 的 \n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令，并将其设置为 \n<code>selectedHero</code>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zmglbrkbqrrqw4rk5qr7m5u2\">不要忘记 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 前面的星号 (*)。它是语法中的关键部分。</p>\n</div>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"ng-if\" title=\"src/app/heroes/heroes.component.html (*ngIf)\" linenums=\"false\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n\n  &lt;h2&gt;{{ selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{selectedHero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;name:\n      &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2oz9up3w6k08xd9hyyx1ki3dr\">浏览器刷新后，名称列表会重新出现。 详细信息区域为空。 单击某个英雄，其详细信息就会出现。</p>\n<h4 id=\"why-it-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39pg5k49wflva9fskba7jahiq\"><i class=\"material-icons\">link</i>为什么它有效</h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e81whbxf1y7jrdruhes36p0ui\">当 \n<code>selectedHero</code> 未定义时，\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 会从 DOM 中移除英雄详细信息。无需担心 \n<code>selectedHero</code> 绑定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5a12t0l0yz6sqz9zfqxxp8d7m\">当用户选择某个英雄时，\n<code>selectedHero</code> 就会有值， \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 会将英雄详细信息放入 DOM 中。</p>\n<h3 id=\"style-the-selected-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2igv40askqfzbr71oj2ku5mp7\"><i class=\"material-icons\">link</i>设置所选英雄的样式</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wxnoxp54s59rc34grew7za1u\">当所有 \n<code>&lt;li&gt;</code> 元素看起来都一样时，很难在列表中识别出\n<em>所选英雄</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6k3bc5che4loklidavu79xxy0\">如果用户单击“Magneta”，则该英雄应以醒目的但微妙的背景色渲染，如下所示：</p>\n<figure>\n  <img src=\"generated/images/guide/toh/heroes-list-selected.png\" alt=\"Selected hero\" width=\"165\" height=\"129\">\n</figure>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rgsvokbgp7mo5u78epd8yvyp\"><em>所选英雄</em>的这种颜色是 \n<a href=\"tutorial/toh-pt2#styles\">之前添加的样式</a> 中的 \n<code>.selected</code> CSS 类所做的。 你只需要在用户单击时将 \n<code>.selected</code> 类应用于 \n<code>&lt;li&gt;</code> 即可。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zf0gd72tuxtlhnw96bu76uc\">Angular 的 \n<a href=\"guide/template-syntax#class-binding\">类绑定</a> 使得有条件地添加和移除 CSS 类变得很容易。 只需将 \n<code>[class.some-css-class]=\"some-condition\"</code> 添加到要设置样式的元素即可。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gs9moqcyjjuzh78s7i1u9vvz\">将以下 \n<code>[class.selected]</code> 绑定添加到 \n<code>HeroesComponent</code> 模板中的 \n<code>&lt;li&gt;</code> 中：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"class-selected\" title=\"heroes.component.html (toggle the 'selected' CSS class)\" linenums=\"false\">\n[class.selected]=\"hero === selectedHero\"\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hchchm9xawzgeyszbchm6q7o\">当当前行英雄与 \n<code>selectedHero</code> 相同时，Angular 会添加 \n<code>selected</code> CSS 类。当两个英雄不同时，Angular 会移除该类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mag5isacs88mjmvbinagn4ji\">完成后的 \n<code>&lt;li&gt;</code> 如下所示：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"li\" title=\"heroes.component.html (list item hero)\" linenums=\"false\">\n&lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n  [class.selected]=\"hero === selectedHero\"\n  (click)=\"onSelect(hero)\"&gt;\n  &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n&lt;/li&gt;\n\n</code-example>\n<a id=\"final-code-review\"></a>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\"><i class=\"material-icons\">link</i>最终代码审查</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f06fpvegtg0aovgtwghshw2r5\">你的应用程序应该看起来像这样 \n<live-example></live-example>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f1hyr4jsxxaq41hg14falawv\">以下是本页讨论的代码文件，包括 \n<code>HeroesComponent</code> 样式。</p>\n<code-tabs>\n  <code-pane title=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HEROES } from '../mock-heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  heroes = HEROES;\n\n  selectedHero: Hero;\n\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes/heroes.component.html\" path=\"toh-pt2/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\"&gt;\n    &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n\n  &lt;h2&gt;{{ selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{selectedHero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;name:\n      &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes/heroes.component.css\" path=\"toh-pt2/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.selected {\n  background-color: #CFD8DC !important;\n  color: white;\n}\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n.heroes li.selected:hover {\n  background-color: #BBD8DC !important;\n  color: white;\n}\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n.heroes .text {\n  position: relative;\n  top: -3px;\n}\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3674wrd6w08d56no2yljk81mu\">Tour of Heroes 应用以主/从视图显示英雄列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6peid57ma6o993ntb81p1o80o\">用户可以选择某个英雄并查看该英雄的详细信息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btk1gh7nhsfo4jyuvofitz60o\">你使用 \n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 来显示列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwkd3jsbjf7qh3h9br1jvbudi\">你使用 \n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 有条件地包含或排除 HTML 代码块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yuxlfmtox7vn4php2o9ohnup\">你可以使用 \n<code>class</code> 绑定来切换 CSS 样式类。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - tutorial/toh-pt3\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/core/OnInit\n - api/forms/NgModel\n - guide/template-syntax#class-binding\n - guide/template-syntax#event-binding\n - guide/template-syntax#ngFor\n - tutorial/toh-pt0#app-wide-styles\n - tutorial/toh-pt2#add-a-click-event-binding\n - tutorial/toh-pt2#add-the-click-event-handler\n - tutorial/toh-pt2#create-mock-heroes\n - tutorial/toh-pt2#display-a-heroes-list\n - tutorial/toh-pt2#displaying-heroes\n - tutorial/toh-pt2#final-code-review\n - tutorial/toh-pt2#hide-empty-details-with-ngif\n - tutorial/toh-pt2#list-heroes-with-ngfor\n - tutorial/toh-pt2#masterdetail\n - tutorial/toh-pt2#style-the-heroes\n - tutorial/toh-pt2#style-the-selected-hero\n - tutorial/toh-pt2#styles\n - tutorial/toh-pt2#summary\n - tutorial/toh-pt2#the-fix\n - tutorial/toh-pt2#update-the-details-template\n - tutorial/toh-pt2#what-happened\n - tutorial/toh-pt2#why-it-works\n-->"
}