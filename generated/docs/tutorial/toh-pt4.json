{
  "id" : "tutorial/toh-pt4",
  "title" : "服务",
  "contents" : "<div class=\"content\">\n<h1 id=\"services\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"92fqgk8698jdwr0o85057qr44\"><i class=\"material-icons\">link</i>服务</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6poghhr6uxr61k615qtl1d65w\">Tour of Heroes 的 \n<code>HeroesComponent</code> 目前正在获取和显示假数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djspp69emour2xlbey44kcwbr\">在本教程的重构之后，\n<code>HeroesComponent</code> 将变得精简，并专注于支持视图。它也更容易使用模拟服务进行单元测试。</p>\n<h2 id=\"why-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bt38w4snw6p59q1lkmpkdzjqy\"><i class=\"material-icons\">link</i>为什么使用服务</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4fnwckunr74doqyu26w1ygy0\">组件不应该直接获取或保存数据，它们当然也不应该故意呈现假数据。它们应该专注于呈现数据，并将数据访问委托给服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c76t277az1uygkscqygv8rf7d\">在本教程中，你将创建一个 \n<code>HeroService</code>，所有应用程序类都可以使用它来获取英雄。你不会使用 \n<code>new</code> 创建该服务，而是依靠 Angular 的\n<a href=\"guide/dependency-injection\"><em>依赖注入</em></a>将其注入到 \n<code>HeroesComponent</code> 构造函数中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vqmtojpgi436bxsqijkjlzwx\">服务是\n<em>彼此不了解</em>的类之间共享信息的好方法。你将创建一个 \n<code>MessageService</code>，并在两个地方注入它：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm46omkh0ft4aj8vxqtysbc4\">在 \n<code>HeroService</code> 中，它使用该服务发送消息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vr9g3ev649cw7fli9na6r3rb\">在 \n<code>MessagesComponent</code> 中，它显示该消息。</li>\n</ol>\n<h2 id=\"create-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0qsptja95ns36id5wr955p2c\"><i class=\"material-icons\">link</i>创建\n<em>HeroService</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kcx6yy8fzqv0gxysv2986zxj\">使用 Angular CLI 创建一个名为 \n<code>hero</code> 的服务。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate service hero\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r6duh6g0ac54zvxemvsbv0ym\">该命令在 \n<code>src/app/hero.service.ts</code> 中生成 \n<code>HeroService</code> 类的骨架。\n<code>HeroService</code> 类应该如下所示。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"new\" title=\"src/app/hero.service.ts (new service)\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n\n  constructor() { }\n\n}\n\n</code-example>\n<h3 id=\"injectable-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nc3j70wjzuapc7naee70sfy4\"><i class=\"material-icons\">link</i><em>@Injectable()</em> 服务</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g09ej3b31shxn7ktd9qpvnjs\">请注意，新服务导入了 Angular 的 \n<code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 符号，并使用 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器对该类进行了注解。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3kjpo5gag9u49lilmoqiz514e\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器告诉 Angular，此服务\n<em>可能</em>本身具有注入的依赖项。它现在没有依赖项，但\n<a href=\"tutorial/toh-pt4#inject-message-service\">很快就会有</a>。无论它是否有依赖项，保持装饰器都是一个好习惯。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9frknscep6i239gfhnwtss1xi\">Angular 的\n<a href=\"guide/styleguide#style-07-04\">样式指南</a>强烈建议保留它，并且 linter 会强制执行此规则。</p>\n</div>\n<h3 id=\"get-hero-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d59k6c66koj6ul70r5cjuk8xz\"><i class=\"material-icons\">link</i>获取英雄数据</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4n6k7tdhzbd3iwbnxkpudhaxj\"><code>HeroService</code> 可以从任何地方获取英雄数据——网络服务、本地存储或模拟数据源。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwi8ghxqih1bi06a87wh4evdf\">从组件中移除数据访问意味着你可以随时更改实现，而无需触碰任何组件。它们不知道服务是如何工作的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uvzh47syauva7mq90dum6y8v\"><em>本</em>教程中的实现将继续提供\n<em>模拟英雄</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0slh8gzfbmhbkna7noshfup9\">导入 \n<code>Hero</code> 和 \n<code>HEROES</code>。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-heroes\">\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ekyyp2i4t718pg89k6nwhadl\">添加一个 \n<code>getHeroes</code> 方法来返回\n<em>模拟英雄</em>。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"getHeroes\">\ngetHeroes(): Hero[] {\n  return HEROES;\n}\n\n</code-example>\n<a id=\"provide\"></a>\n<h2 id=\"provide-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9szo90jhlpfmkal4rd3yavv6z\"><i class=\"material-icons\">link</i>提供 \n<code>HeroService</code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3htupoipir2c0jugv35i4rz44\">你必须在 Angular 可以将其\n<em>注入</em>到 \n<code>HeroesComponent</code> 中之前，在\n<em>依赖注入系统</em>中\n<em>提供</em> \n<code>HeroService</code>，就像你将在\n<a href=\"tutorial/toh-pt4#inject\">下面</a>所做的那样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c41pn24w2q0sgisu36mn5agsf\">有几种方法可以提供 \n<code>HeroService</code>：在 \n<code>HeroesComponent</code> 中、在 \n<code>AppComponent</code> 中、在 \n<code>AppModule</code> 中。每个选项都有优缺点。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e60kuuj8ufiaeim7jt1wz1gkc\">本教程选择在 \n<code>AppModule</code> 中提供它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zx8or5ljqva6x0irmuhfglp9\">这是一个如此受欢迎的选择，以至于你可以告诉 CLI 自动在其中提供它，方法是在后面添加 \n<code>--module=app</code>。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate service hero --module=app\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7wtckeg6fkaodhtag7tajqpy\">由于你没有这样做，因此你必须自己提供它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba0c3jbn0z87fbz3fkdtfhbbn\">打开 \n<code>AppModule</code> 类，导入 \n<code>HeroService</code>，并将其添加到 \n<code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> 数组中。</p>\n<code-example path=\"toh-pt4/src/app/app.module.ts\" linenums=\"false\" title=\"src/app/app.module.ts (providers)\" region=\"providers-heroservice\">\n  providers: [\n    HeroService,\n/* . . . */\n  ],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bum7itz637luhmm2deh780t7\"><code>providers</code> 数组告诉 Angular 创建 \n<code>HeroService</code> 的单个共享实例，并将其注入到任何请求它的类中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rednw8st7ly8p7f7tt5bj9vb\"><code>HeroService</code> 现在已准备好插入 \n<code>HeroesComponent</code> 中。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27stwrpcepx2zfw4nb1epwdyl\">这是一个临时代码示例，它将允许你提供和使用 \n<code>HeroService</code>。此时，代码将与\n<a href=\"tutorial/toh-pt4#final-code-review\">\"最终代码审查\"</a>中的 \n<code>HeroService</code> 不同。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2uwn8z8acxi2g3vw7t57xhxg4\">在\n<a href=\"guide/providers\">提供者</a>指南中了解有关\n<em>提供者</em>的更多信息。</p>\n</div>\n<h2 id=\"update-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zuv4gxlu112rmzeurqzrryjc\"><i class=\"material-icons\">link</i>更新 \n<code>HeroesComponent</code></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am03lk13goyolc587mugsg0sg\">打开 \n<code>HeroesComponent</code> 类文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7pwxe6hfmsbwjoag86c7iwdu\">删除 \n<code>HEROES</code> 导入，因为你不再需要它了。 改为导入 \n<code>HeroService</code>。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.ts\" title=\"src/app/heroes/heroes.component.ts (import HeroService)\" region=\"hero-service-import\">\nimport { HeroService } from '../hero.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75wsi0apap89oqqhyn1pyrrb5\">用简单的声明替换 \n<code>heroes</code> 属性的定义。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"heroes\">\nheroes: Hero[];\n\n</code-example>\n<a id=\"inject\"></a>\n<h3 id=\"inject-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ulsbx0fxq84vdo4pasdqjwpd\"><i class=\"material-icons\">link</i>注入 \n<code>HeroService</code>。</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ne4p9aadiz5uossh1t1xweci\">在构造函数中添加一个类型为 \n<code>HeroService</code> 的私有 \n<code>heroService</code> 参数。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"ctor\">\nconstructor(private heroService: HeroService) { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abyhs61vqy2972up5ldjvd4lm\">该参数同时定义了一个私有 \n<code>heroService</code> 属性，并将其标识为 \n<code>HeroService</code> 注入点。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fde0rab58ccgxa15qiqsz6qt\">当 Angular 创建 \n<code>HeroesComponent</code> 时，\n<a href=\"guide/dependency-injection\">依赖注入</a> 系统会将 \n<code>heroService</code> 参数设置为 \n<code>HeroService</code> 的单例实例。</p>\n<h3 id=\"add-getheroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ng3dymgie23nwei4wmb2yz7b\"><i class=\"material-icons\">link</i>添加 \n<em>getHeroes()</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87ltl8gaz6naq1r04c582yd1g\">创建一个函数从服务中检索英雄。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-example>\n<a id=\"oninit\"></a>\n<h3 id=\"call-it-in-ngoninit\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dum6yja4ae0ca80i0wk8tfxfs\"><i class=\"material-icons\">link</i>在 \n<code>ngOnInit</code> 中调用它。</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4lm7tuwcssbtszmchg16mug9l\">虽然你可以在构造函数中调用 \n<code>getHeroes()</code>，但这并不是最佳实践。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15a6uohzvp805swcnkp1sq5io\">将构造函数保留用于简单的初始化，例如将构造函数参数连接到属性。 构造函数不应该 \n<em>做任何事情</em>。 它当然不应该调用一个函数，该函数会向远程服务器发出 HTTP 请求，就像一个 \n<em>真正的</em> 数据服务那样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tvyo0q4jgytbx3tyoxg7g05r\">相反，在 \n<a href=\"guide/lifecycle-hooks\"><em>ngOnInit 生命周期钩子</em></a> 中调用 \n<code>getHeroes()</code>， 并让 Angular 在构造 \n<code>HeroesComponent</code> 实例 \n<em>之后</em> 的适当时间调用 \n<code>ngOnInit</code>。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"ng-on-init\">\nngOnInit() {\n  this.getHeroes();\n}\n\n</code-example>\n<h3 id=\"see-it-run\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeje8g33hngo686b002aq0mfe\"><i class=\"material-icons\">link</i>运行它</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9e2yx8i4waks2y7plb2e0a9s\">浏览器刷新后，应用程序应该像以前一样运行， 显示英雄列表，并在你点击英雄姓名时显示英雄详细信息视图。</p>\n<h2 id=\"observable-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tq2frer62kl48sxr6mlf2x0w\"><i class=\"material-icons\">link</i>可观察数据</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpuxnd3jx7udm0tqijl1r7gcu\"><code>HeroService.getHeroes()</code> 方法具有 \n<em>同步签名</em>， 这意味着 \n<code>HeroService</code> 可以同步获取英雄。 \n<code>HeroesComponent</code> 使用 \n<code>getHeroes()</code> 结果， 就好像英雄可以同步获取一样。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"get-heroes\">\nthis.heroes = this.heroService.getHeroes();\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bex9mmb4wrc91u7sz3pmrf818\">这在真实的应用程序中是行不通的。 你现在之所以能做到，是因为服务目前返回的是 \n<em>模拟英雄</em>。 但很快应用程序就会从远程服务器获取英雄， 这是一个本质上 \n<em>异步</em> 的操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47l6itwdcya0vdg4iqle5uvip\"><code>HeroService</code> 必须等待服务器响应， \n<code>getHeroes()</code> 不能立即返回英雄数据， 浏览器也不会在服务等待时阻塞。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bf2ph826tgppu0u25xxg95oy\"><code>HeroService.getHeroes()</code> 必须具有某种 \n<em>异步签名</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbjodknnmozk7hsf1gwvq03rg\">它可以接受一个回调函数。它可以返回一个 \n<code>Promise</code>。它可以返回一个 \n<code>Observable</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"plpzkv0zhch9g4lb73a7tfxi\">在本教程中，\n<code>HeroService.getHeroes()</code> 将返回一个 \n<code>Observable</code>， 部分原因是它最终将使用 Angular \n<code>HttpClient.get</code> 方法来获取英雄， 而 \n<a href=\"guide/http\"><code>HttpClient.get()</code> 返回一个 <code>Observable</code></a>.</p>\n<h3 id=\"observable-heroservice\">Observable <em>HeroService</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3kpsr8u379yicm38meaiymi68\"><code>Observable</code> 是 \n<a href=\"http://reactivex.io/rxjs/\">RxJS 库</a> 中的关键类之一。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gb26j3ft1vaccigul50tev6l\">在 \n<a href=\"tutorial/toh-pt6\">关于 HTTP 的后续教程</a> 中，你将了解到 Angular 的 \n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法返回 RxJS \n<code>Observable</code>。 在本教程中，你将使用 RxJS 的 \n<code>of()</code> 函数模拟从服务器获取数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4al1mniwwo48mcsjejhrzoo7h\">打开 \n<code>HeroService</code> 文件，并从 RxJS 中导入 \n<code>Observable</code> 和 \n<code>of</code> 符号。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" title=\"src/app/hero.service.ts (Observable imports)\" region=\"import-observable\">\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ansafzs4fpupmipyo0lugpu6f\">用以下代码替换 \n<code>getHeroes</code> 方法。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  return of(HEROES);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hyb3kebueo6cyzjqh7le75wg\"><code>of(HEROES)</code> 返回一个 \n<code>Observable&lt;Hero[]&gt;</code>，它 \n<em>只发射一个值</em>，即模拟英雄数组。</p>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etapnqqg1uwusl9l94tfhqyj2\">在 \n<a href=\"tutorial/toh-pt6\">HTTP 教程</a> 中，你将调用 \n<code>HttpClient.get&lt;Hero[]&gt;()</code>，它也返回一个 \n<code>Observable&lt;Hero[]&gt;</code>，它 \n<em>只发射一个值</em>，即来自 HTTP 响应正文的英雄数组。</p>\n</div>\n<h3 id=\"subscribe-in-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14u72j7bj01doaruf2r1h2phq\"><i class=\"material-icons\">link</i>在 \n<em>HeroesComponent</em> 中订阅</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wxbhrebu4re220xxjq8opn9c\"><code>HeroService.getHeroes</code> 方法以前返回一个 \n<code>Hero[]</code>。 现在它返回一个 \n<code>Observable&lt;Hero[]&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2uxj44yux617gkwny292xz3ob\">你必须在 \n<code>HeroesComponent</code> 中适应这种差异。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d875kgdr5ej93ubwivddw3raa\">找到 \n<code>getHeroes</code> 方法，并用以下代码替换它 （并排显示与先前版本的比较）</p>\n<code-tabs>\n\n  <code-pane title=\"heroes.component.ts (Observable)\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes);\n}\n\n</code-pane>\n\n  <code-pane title=\"heroes.component.ts (Original)\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9iy59jkctqoy6dms7s9t6g80t\"><code>Observable.subscribe()</code> 是关键区别。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7iogzi25qkgqhe7c990dx9nqp\">先前版本将英雄数组分配给组件的 \n<code>heroes</code> 属性。 分配 \n<em>同步</em> 发生，就好像服务器可以立即返回英雄， 或者浏览器可以在等待服务器响应时冻结 UI 一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5qn5rzciazrvin7mjd2enyjx\">当 \n<code>HeroService</code> 实际上向远程服务器发出请求时，这 \n<em>将不起作用</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g9g6kbhu8xt3xtu26vz7njku\">新版本等待 \n<code>Observable</code> 发射英雄数组—— 这可能现在发生，也可能在几分钟后发生。 然后 \n<code>subscribe</code> 将发射的数组传递给回调函数， 该回调函数设置组件的 \n<code>heroes</code> 属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4k4spfum2rgs6isfhjj50dfro\">这种异步方法 \n<em>将起作用</em>，当 \n<code>HeroService</code> 从服务器请求英雄时。</p>\n<h2 id=\"show-messages\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vbpl0qwgpc1h11q5o9z2qals\"><i class=\"material-icons\">link</i>显示消息</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpta2k1jyox58v55tcb36yld6\">在本节中，你将</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3to3h0yrka0rx2zhxybpdo5c\">添加一个 \n<code>MessagesComponent</code>，它在屏幕底部显示应用程序消息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ds7c5u4jrv0qfknkva1uhj3r\">创建一个可注入的、应用范围的 \n<code>MessageService</code>，用于发送要显示的消息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6y038luisuqtgomgj5f1eb8i7\">将 \n<code>MessageService</code> 注入 \n<code>HeroService</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ecjm44qvh1h86xv7bv9ehwkw\">当 \n<code>HeroService</code> 成功获取英雄时，显示一条消息。</li>\n</ul>\n<h3 id=\"create-messagescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mp8fen1tmqn8czt4onyp8ssd\"><i class=\"material-icons\">link</i>创建 \n<em>MessagesComponent</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ae7qfw4opfd6mpyquonwek2v0\">使用 CLI 创建 \n<code>MessagesComponent</code>。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component messages\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chm5yknk9sdbx7ig90hoqq0hl\">CLI 在 \n<code>src/app/messages</code> 文件夹中创建组件文件，并在 \n<code>AppModule</code> 中声明 \n<code>MessagesComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hh2wnqmjcpbx6hxsiz71wydh\">修改 \n<code>AppComponent</code> 模板以显示生成的 \n<code>MessagesComponent</code>。</p>\n<code-example title=\"/src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnqdvxrt7lti8wrdo1w3b7nkw\">你应该在页面底部看到来自 \n<code>MessagesComponent</code> 的默认段落。</p>\n<h3 id=\"create-the-messageservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xvykhoikyehvyrj7okqyd4tx\"><i class=\"material-icons\">link</i>创建 \n<em>MessageService</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xrckk9q7r9644py48nvf10br\">使用 CLI 在 \n<code>src/app</code> 中创建 \n<code>MessageService</code>。 \n<code>--module=app</code> 选项告诉 CLI 在 \n<code>AppModule</code> 中 \n<a href=\"tutorial/toh-pt4#provide\"><em>提供</em> 此服务</a>，</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate service message --module=app\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"389cjsiwmq6d59ani37ca0r5q\">打开 \n<code>MessageService</code> 并用以下内容替换其内容。</p>\n<code-example title=\"/src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38eduj52bzcgr2vz8dzqzrzu\">此服务公开其 \n<code>messages</code> 缓存和两个方法：一个用于将消息添加到缓存的 \n<code>add()</code> 方法，另一个用于清除缓存的 \n<code>clear()</code> 方法。</p>\n<a id=\"inject-message-service\"></a>\n<h3 id=\"inject-it-into-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atg5rv0g7qudq9s0csqi9d5zs\"><i class=\"material-icons\">link</i>将其注入到 \n<code>HeroService</code> 中。</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zibf66q27v9vl359cm2tgyxx\">重新打开 \n<code>HeroService</code> 并导入 \n<code>MessageService</code>。</p>\n<code-example title=\"/src/app/hero.service.ts (import MessageService)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-message-service\">\nimport { MessageService } from './message.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nhsdww8x03vggwkotv7wz1yw\">使用一个参数修改构造函数，该参数声明一个私有的 \n<code>messageService</code> 属性。当 Angular 创建 \n<code>HeroService</code> 时，它会将单例 \n<code>MessageService</code> 注入到该属性中。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"ctor\">\nconstructor(private messageService: MessageService) { }\n\n</code-example>\n<div class=\"l-sub-section\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rvd2de08ur01xem422te0re9\">这是一个典型的“\n<em>服务在服务中</em>”场景：你将 \n<code>MessageService</code> 注入到 \n<code>HeroService</code> 中，而 \n<code>HeroService</code> 又被注入到 \n<code>HeroesComponent</code> 中。</p>\n</div>\n<h3 id=\"send-a-message-from-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxepj8hub68la13857z4uv6s\"><i class=\"material-icons\">link</i>从 \n<code>HeroService</code> 发送消息。</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahzabrd6i0xblojuaj5h4vn3t\">修改 \n<code>getHeroes</code> 方法，以便在获取英雄时发送消息。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  // TODO: send the message _after_ fetching the heroes\n  this.messageService.add('HeroService: fetched heroes');\n  return of(HEROES);\n}\n\n</code-example>\n<h3 id=\"display-the-message-from-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"da4m41ipdaqlohhz1nr1lampe\"><i class=\"material-icons\">link</i>从 \n<code>HeroService</code> 显示消息。</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ts5r1lshw7h71m00bak081aa\"><code>MessagesComponent</code> 应该显示所有消息，包括 \n<code>HeroService</code> 在获取英雄时发送的消息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99bowtjhwx5ytu95j3ph09jw9\">打开 \n<code>MessagesComponent</code> 并导入 \n<code>MessageService</code>。</p>\n<code-example title=\"/src/app/messages/messages.component.ts (import MessageService)\" path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"import-message-service\">\nimport { MessageService } from '../message.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dqh34yqe9dkvq0yktu7zvf60\">使用一个参数修改构造函数，该参数声明一个\n<strong>公共</strong>的 \n<code>messageService</code> 属性。当 Angular 创建 \n<code>HeroService</code> 时，它会将单例 \n<code>MessageService</code> 注入到该属性中。</p>\n<code-example path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"ctor\">\nconstructor(public messageService: MessageService) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"875t8bfx800wpbf0e3dnxl871\"><code>messageService</code> 属性\n<strong>必须是公共的</strong>，因为你将要在模板中绑定到它。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ut1h9fx2v79ro65a8midlmu\">Angular 仅绑定到\n<em>公共</em>组件属性。</p>\n</div>\n<h3 id=\"bind-to-the-messageservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kxsf6sfzklpr4q650s28eefc\"><i class=\"material-icons\">link</i>绑定到\n<em>MessageService</em>。</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tfhq21v7zfnz1k6310tph8r4\">用以下内容替换 CLI 生成的 \n<code>MessagesComponent</code> 模板。</p>\n<code-example title=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\"&gt;\n\n  &lt;h2&gt;Messages&lt;/h2&gt;\n  &lt;button class=\"clear\"\n          (click)=\"messageService.clear()\"&gt;clear&lt;/button&gt;\n  &lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'&gt; {{message}} &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dn8tqf4zlrt9kz5rcbq4op9wh\">此模板直接绑定到组件的 \n<code>messageService</code>。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cp1mq25ftljq0bl9mviil4xtf\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 仅在有消息要显示时才显示消息区域。</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4poefd3tk7ewrc91b5yakxbxl\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 在重复的 \n<code>&lt;div&gt;</code> 元素中呈现消息列表。</li>\n</ul>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9l38v2qg6745huczj2mv2ejgk\">Angular \n<a href=\"guide/template-syntax#event-binding\">事件绑定</a> 将按钮的点击事件绑定到 \n<code>MessageService.clear()</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajbyqsn809hgrxfeyw0uhp9y8\">当你将私有 CSS 样式添加到 \n<code>messages.component.css</code> 中时，消息看起来会更好，如下面的某个“最终代码审查”选项卡中列出。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l8lnl6mlx1w2eq02xopyi26a\">浏览器刷新，页面显示英雄列表。滚动到底部，在消息区域查看来自 \n<code>HeroService</code> 的消息。单击“清除”按钮，消息区域消失。</p>\n<a id=\"final-code-review\"></a>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\"><i class=\"material-icons\">link</i>最终代码审查</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnjxdgspeot2q433ypezldhyg\">以下是本页讨论的代码文件，你的应用程序应该如下所示 \n<live-example></live-example>。</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n}\n\n</code-pane>\n\n  <code-pane title=\"src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  selectedHero: Hero;\n\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/messages/messages.component.ts\" path=\"toh-pt4/src/app/messages/messages.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor(public messageService: MessageService) {}\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\"&gt;\n\n  &lt;h2&gt;Messages&lt;/h2&gt;\n  &lt;button class=\"clear\"\n          (click)=\"messageService.clear()\"&gt;clear&lt;/button&gt;\n  &lt;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'&gt; {{message}} &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/messages/messages.component.css\" path=\"toh-pt4/src/app/messages/messages.component.css\">\n/* MessagesComponent's private CSS styles */\nh2 {\n  color: red;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: lighter;\n}\nbody {\n  margin: 2em;\n}\nbody, input[text], button {\n  color: crimson;\n  font-family: Cambria, Georgia;\n}\n\nbutton.clear {\n  font-family: Arial;\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  cursor: hand;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #aaa;\n  cursor: auto;\n}\nbutton.clear {\n  color: #888;\n  margin-bottom: 12px;\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"toh-pt4/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { HeroService } from './hero.service';\nimport { MessageService } from './message.service';\nimport { MessagesComponent } from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [\n    HeroService,\n    MessageService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9epvdg8gtyybzbl5rajc8kwq8\">你将数据访问重构到 \n<code>HeroService</code> 类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15urf1z1mwt3d4t3gmutnkihw\">你在根 \n<code>AppModule</code> 中\n<em>提供</em>了 \n<code>HeroService</code>，以便它可以被任何地方注入。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er2seecnd301kugs0jbxr51ib\">你使用 \n<a href=\"guide/dependency-injection\">Angular 依赖注入</a> 将其注入到组件中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6z29pdlqr20uv3e9aot34jmdn\">你为 \n<code>HeroService</code> 的\n<em>获取数据</em>方法赋予了异步签名。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yhe9a8f0jlvrq7s2z5xqy3il\">你发现了 \n<code>Observable</code> 和 RxJS \n<em>Observable</em> 库。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vycxbhx6hrdtsl8s4vp4w4ow\">你使用 RxJS \n<code>of()</code> 返回模拟英雄的\n<em>Observable</em>（\n<code>Observable&lt;Hero[]&gt;</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1moypotdsmu01z3ae94c2zyoo\">组件的 \n<code>ngOnInit</code> 生命周期钩子调用 \n<code>HeroService</code> 方法，而不是构造函数。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64jh86enwwdtsl17vuocbduuv\">你创建了一个 \n<code>MessageService</code>，用于类之间松散耦合的通信。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6euyfvt2cuwinept7e2f9ska1\">注入到组件中的 \n<code>HeroService</code> 是使用另一个注入的服务 \n<code>MessageService</code> 创建的。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/glossary\n - guide/lifecycle-hooks\n - guide/reactive-forms\n - guide/router\n - guide/singleton-services\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/NgModule#providers\n - api/core/OnInit\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/http\n - guide/lifecycle-hooks\n - guide/providers\n - guide/styleguide#style-07-04\n - guide/template-syntax#event-binding\n - tutorial/toh-pt4#add-getheroes\n - tutorial/toh-pt4#bind-to-the-messageservice\n - tutorial/toh-pt4#call-it-in-ngoninit\n - tutorial/toh-pt4#create-messagescomponent\n - tutorial/toh-pt4#create-the-heroservice\n - tutorial/toh-pt4#create-the-messageservice\n - tutorial/toh-pt4#display-the-message-from-heroservice\n - tutorial/toh-pt4#final-code-review\n - tutorial/toh-pt4#get-hero-data\n - tutorial/toh-pt4#inject\n - tutorial/toh-pt4#inject-it-into-the-heroservice\n - tutorial/toh-pt4#inject-message-service\n - tutorial/toh-pt4#inject-the-heroservice\n - tutorial/toh-pt4#injectable-services\n - tutorial/toh-pt4#observable-data\n - tutorial/toh-pt4#observable-heroservice\n - tutorial/toh-pt4#provide\n - tutorial/toh-pt4#provide-the-heroservice\n - tutorial/toh-pt4#see-it-run\n - tutorial/toh-pt4#send-a-message-from-heroservice\n - tutorial/toh-pt4#services\n - tutorial/toh-pt4#show-messages\n - tutorial/toh-pt4#subscribe-in-heroescomponent\n - tutorial/toh-pt4#summary\n - tutorial/toh-pt4#update-heroescomponent\n - tutorial/toh-pt4#why-services\n - tutorial/toh-pt6\n - http://reactivex.io/rxjs/\n-->"
}