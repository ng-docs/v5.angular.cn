{
  "id" : "tutorial/toh-pt1",
  "title" : "英雄编辑器",
  "contents" : "<div class=\"content\">\n<h1 id=\"the-hero-editor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwr3dp3iwi724pmvtt2zibept\"><i class=\"material-icons\">link</i>英雄编辑器</h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awhxf4fmapcss0ivobaa9dyvu\">应用程序现在有一个基本标题。接下来，你将创建一个新组件来显示英雄信息，并将该组件放置在应用程序 shell 中。</p>\n<h2 id=\"create-the-heroes-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djylyul6pr8eqekizrf19ifi1\"><i class=\"material-icons\">link</i>创建英雄组件</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmnv29spu6cu8efdmk7o7sucg\">使用 Angular CLI 生成一个名为 \n<code>heroes</code> 的新组件。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component heroes\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ptiunvgwulmu9583naihcvjo\">CLI 创建一个新文件夹 \n<code>src/app/heroes/</code>，并生成 \n<code>HeroesComponent</code> 的三个文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45n01dkjh2utjozar19n1rnrd\"><code>HeroesComponent</code> 类文件如下所示：</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"v1\" title=\"app/heroes/heroes.component.ts (initial version)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2oavxq5brfxx0q5z2qb0ft2q\">你始终从 Angular 核心库导入 \n<code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 符号，并使用 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 对组件类进行注解。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qeum0noeh8i11kzgggbs6pji\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 是一个装饰器函数，它指定组件的 Angular 元数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cw31qjwn9wjpwhrzwv80lidar\">CLI 生成了三个元数据属性：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfpbrcwnrs3s1in56sadiwghf\"><code>selector</code> — 组件的 CSS 元素选择器</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50ztaithg968kz8rsffude2yk\"><code>templateUrl</code> — 组件模板文件的路径。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17dqupxeor3vsqjnkutv7jar5\"><code>styleUrls</code> — 组件的私有 CSS 样式的路径。</li>\n</ol>\n<a id=\"selector\"></a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d55i95uojb9buqc3xc44o80sr\"><code>'app-heroes'</code> 是 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\">CSS 元素选择器</a>，它与 HTML 元素的名称匹配，该元素在父组件的模板中标识此组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o85xyn60rcodm9hntmk07qv3\"><code>ngOnInit</code> 是一个 \n<a href=\"guide/lifecycle-hooks#oninit\">生命周期钩子</a>，Angular 在创建组件后不久就会调用 \n<code>ngOnInit</code>。它是放置初始化逻辑的好地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93ngazaod1g6oedtici2w29sc\">始终 \n<code>export</code> 组件类，以便你可以在其他地方 \n<code>import</code> 它……例如在 \n<code>AppModule</code> 中。</p>\n<h3 id=\"add-a-hero-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3moa0nuupseqnb6mljg2yzysq\"><i class=\"material-icons\">link</i>添加一个\n<em>英雄</em>属性</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pej7pyj8zhjp1yzfuoxkboid\">向 \n<code>HeroesComponent</code> 添加一个名为 \"Windstorm\" 的英雄的 \n<code>hero</code> 属性。</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"add-hero\" title=\"heroes.component.ts (hero property)\" linenums=\"false\">\nhero = 'Windstorm';\n\n</code-example>\n<h3 id=\"show-the-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ulvgs6dfh8v8wp1fl7grif4t\"><i class=\"material-icons\">link</i>显示英雄</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzf0ihogj8slvvnhk9rkwrjt3\">打开 \n<code>heroes.component.html</code> 模板文件。删除 Angular CLI 生成的默认文本，并用对新 \n<code>hero</code> 属性的数据绑定替换它。</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" title=\"heroes.component.html\" region=\"show-hero-1\" linenums=\"false\">\n{{hero}}\n\n</code-example>\n<h2 id=\"show-the-heroescomponent-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tlgri0e5qonst57yvuxw5n91\"><i class=\"material-icons\">link</i>显示\n<em>HeroesComponent</em> 视图</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axnvbd2qo9rfij4v1i7l0kn3h\">要显示 \n<code>HeroesComponent</code>，你必须将其添加到 shell \n<code>AppComponent</code> 的模板中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1fql26vjxub388ugy1ota6vw\">请记住，\n<code>app-heroes</code> 是 \n<code>HeroesComponent</code> 的 \n<a href=\"tutorial/toh-pt1#selector\">元素选择器</a>。因此，在 \n<code>AppComponent</code> 模板文件中，在标题下方添加一个 \n<code>&lt;app-heroes&gt;</code> 元素。</p>\n<code-example path=\"toh-pt1/src/app/app.component.html\" title=\"src/app/app.component.html\" linenums=\"false\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eetf1gxr5wub1yb9ag6gxvlv\">假设 CLI \n<code>ng serve</code> 命令仍在运行，浏览器应该刷新并显示应用程序标题和英雄名称。</p>\n<h2 id=\"create-a-hero-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dg9y9mol1ezrodz5iy18z8sq\"><i class=\"material-icons\">link</i>创建一个 Hero 类</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6emnex1ncqrgpx9pmu7rwpuwn\">真正的英雄不仅仅是一个名字。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v439inu5p4kzpeosz2ecdq15\">在 \n<code>src/app</code> 文件夹中，在自己的文件中创建一个 \n<code>Hero</code> 类。赋予它 \n<code>id</code> 和 \n<code>name</code> 属性。</p>\n<code-example path=\"toh-pt1/src/app/hero.ts\" title=\"src/app/hero.ts\" linenums=\"false\">\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cvga9c8brq2kurxzagulo9wv\">返回 \n<code>HeroesComponent</code> 类，并导入 \n<code>Hero</code> 类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zlbtui6a6i6pvfxghebua3vt\">将组件的 \n<code>hero</code> 属性重构为 \n<code>Hero</code> 类型。用 \n<code>id</code> 为 \n<code>1</code> 且名称为 \n<code>Windstorm</code> 初始化它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbholqbzg8iqn1xmglu5sz5yh\">修改后的 \n<code>HeroesComponent</code> 类文件应如下所示：</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" linenums=\"false\" title=\"src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdedg863weogwj80jbq67n54l\">页面不再正常显示，因为你将英雄从字符串更改为对象。</p>\n<h2 id=\"show-the-hero-object\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0qxsqjjzrpdk4zv933vbq5la\"><i class=\"material-icons\">link</i>显示英雄对象</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dguuqkplcnjihzqjbydg3ojzf\">更新模板中的绑定，以显示英雄的名字，并以如下所示的详情布局显示 \n<code>id</code> 和 \n<code>name</code>：</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"show-hero-2\" title=\"heroes.component.html (HeroesComponent's template)\" linenums=\"false\">\n&lt;h2&gt;{{ hero.name }} Details&lt;/h2&gt;\n&lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;name: &lt;/span&gt;{{hero.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lytgjxxp1zcmxqlyh2fho8mt\">浏览器刷新并显示英雄的信息。</p>\n<h2 id=\"format-with-the-uppercasepipe\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zlgkz3vemyl1m1odzr3c5nut\"><i class=\"material-icons\">link</i>使用 \n<em>UppercasePipe</em> 格式化</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kupf8yu2hxo0reixmq4gnnur\">修改 \n<code>hero.name</code> 绑定，如下所示： \n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.html\" region=\"pipe\">\n  &lt;h2&gt;{{ hero.name | \n <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&lt;/h2&gt; \n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xg7a2ghwxfah6g3uiutqda9l\">浏览器刷新，现在英雄的名字以大写字母显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bthuwcbmwk1v3rjkgpuhl5u2m\">插值绑定中的 \n<code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> 一词，位于管道操作符（|）之后，激活了内置的 \n<code>UppercasePipe</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2g4xu12kr8kr8fiyydix9eymq\"><a href=\"guide/pipes\">管道</a> 是格式化字符串、货币金额、日期和其他显示数据的有效方法。Angular 自带了一些内置管道，你也可以创建自己的管道。</p>\n<h2 id=\"edit-the-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ep57s1il9r3vpuawp06db4ke\"><i class=\"material-icons\">link</i>编辑英雄</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jt1kaq8i3ew1e3ob4dddy02\">用户应该能够在 \n<code>&lt;input&gt;</code> 文本框中编辑英雄的名字。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1syuo6clfwslxuka396i7zxie\">文本框应该既要 \n<em>显示</em> 英雄的 \n<code>name</code> 属性，又要 \n<em>更新</em> 该属性，以便用户在输入时进行更新。这意味着数据流从组件类 \n<em>流向屏幕</em>，以及从屏幕 \n<em>流回类</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bid2rrcqjrsjsiamu18qwpeue\">为了自动化此数据流，请在 \n<code>&lt;input&gt;</code> 表单元素和 \n<code>hero.name</code> 属性之间设置双向数据绑定。</p>\n<h3 id=\"two-way-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xy6wmoza9k1s7w2doa894ml4\"><i class=\"material-icons\">link</i>双向绑定</h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chefihw490nvrfd14mlz7fylh\">重构 \n<code>HeroesComponent</code> 模板中的详情区域，使其看起来像这样：</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"name-input\" title=\"src/app/heroes/heroes.component.html (HeroesComponent's template)\" linenums=\"false\">\n&lt;div&gt;\n    &lt;label&gt;name:\n      &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"&gt;\n    &lt;/label&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65gcjw1bftev34to49h8hu8tl\"><strong>[(ngModel)]</strong> 是 Angular 的双向数据绑定语法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay115g41tt8vuvz0k1n3q2ej7\">这里它将 \n<code>hero.name</code> 属性绑定到 HTML 文本框，以便数据可以 \n<em>双向流动</em>：从 \n<code>hero.name</code> 属性到文本框，以及从文本框回到 \n<code>hero.name</code>。</p>\n<h3 id=\"the-missing-formsmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rvs0snz9ef08v7aozbnc16cv\"><i class=\"material-icons\">link</i>缺少的 \n<em>FormsModule</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpl1hrxushh0171mdrg3q63cg\">注意，当你添加 \n<code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 时，应用程序停止工作了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f281r6ei62a9bf9resmkyzb2\">要查看错误，请打开浏览器开发工具，并在控制台中查找类似以下内容的消息</p>\n<code-example language=\"sh\" class=\"code-shell\">\nTemplate parse errors:\nCan't bind to '<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>' since it isn't <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> known property of 'input'.\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81ydbr9ozj4to63cm99qsb3z\">虽然 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 是一个有效的 Angular 指令，但它默认情况下不可用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ara1ebrl45je6jdy8f2vyz82\">它属于可选的 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，你必须 \n<em>选择</em> 使用它。</p>\n<h2 id=\"appmodule\"><em>AppModule</em></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aielz59kvlwm6t86l2q2tyv64\">Angular 需要知道应用程序的各个部分如何组合在一起，以及应用程序需要哪些其他文件和库。此信息称为 \n<em>元数据</em></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bk031vjhwyxnyzyhfiov8yqyt\">一些元数据位于你添加到组件类中的 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器中。其他关键元数据位于 \n<a href=\"guide/ngmodules\"><code>@NgModule</code></a> 装饰器中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"275lll6vx4rnrzgsuw32b9wjb\">最重要的 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器注释了顶层的 \n<strong>AppModule</strong> 类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5u0dowjtg3nzeomu6k8nsce02\">Angular CLI 在创建项目时，在 \n<code>src/app/app.module.ts</code> 中生成了一个 \n<code>AppModule</code> 类。你可以在此处 \n<em>选择</em> 使用 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。</p>\n<h3 id=\"import-formsmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34jnxpb3zdzqvap9d3xjlw7yq\"><i class=\"material-icons\">link</i>导入 \n<em>FormsModule</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1en9bmqv9co4bd3yotte5cd4d\">打开 \n<code>AppModule</code>（\n<code>app.module.ts</code>）并从 \n<code>@angular/forms</code> 库中导入 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 符号。</p>\n<code-example path=\"toh-pt1/src/app/app.module.ts\" title=\"app.module.ts (FormsModule symbol import)\" region=\"formsmodule-js-import\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &lt;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> lives here\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bkhehltb95owxk3yc76trikc\">然后将 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 添加到 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据的 \n<code>imports</code> 数组中，该数组包含应用程序所需的外部模块列表。</p>\n<code-example path=\"toh-pt1/src/app/app.module.ts\" title=\"app.module.ts ( @NgModule imports)\" region=\"ng-imports\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cf5fuwcjcvcp87i2oqsv01m9l\">当浏览器刷新时，应用程序应该再次工作。你可以编辑英雄的名字，并看到更改立即反映在文本框上方的 \n<code>&lt;h2&gt;</code> 中。</p>\n<h3 id=\"declare-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7auhpnqk1k3u9mmez1k7q9hz7\"><i class=\"material-icons\">link</i>声明 \n<em>HeroesComponent</em></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqri84b7seqol38spwkiiapeh\">每个组件都必须在 \n<em>一个</em> \n<a href=\"guide/ngmodules\">NgModule</a> 中声明。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkxa5bvxbc92wypidln36l4la\"><em>你</em> 没有声明 \n<code>HeroesComponent</code>。那么为什么应用程序可以工作呢？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xw89jhczmswsequhcs5uaj01\">它可以工作是因为 Angular CLI 在生成该组件时，在 \n<code>AppModule</code> 中声明了 \n<code>HeroesComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6dtplh6k2cid73bam079r2x3\">打开 \n<code>src/app/app.module.ts</code> 并找到在顶部附近导入的 \n<code>HeroesComponent</code>。 \n<code-example path=\"toh-pt1/src/app/app.module.ts\" region=\"heroes-import\">\n  import { HeroesComponent } from './heroes/heroes.component'; \n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"uw1tkwojc669zuttrmmy7rwl\"><code>HeroesComponent</code> 在 \n<code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 数组中声明。 \n<code-example path=\"toh-pt1/src/app/app.module.ts\" region=\"declarations\">\n  declarations: [ AppComponent, HeroesComponent ], \n</code-example></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8q0dosppqcbwk1qu5spgvtl3\">注意，\n<code>AppModule</code> 声明了两个应用程序组件，\n<code>AppComponent</code> 和 \n<code>HeroesComponent</code>。</p>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\"><i class=\"material-icons\">link</i>最终代码审查</h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64evku37p4h5mw2amqheuppr3\">你的应用程序应该看起来像这样 \n<live-example></live-example>。以下是本页讨论的代码文件。</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes/heroes.component.html\" path=\"toh-pt1/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;{{ hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&lt;/h2&gt;\n&lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n&lt;div&gt;\n    &lt;label&gt;name:\n      &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"&gt;\n    &lt;/label&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"toh-pt1/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &lt;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> lives here\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"toh-pt1/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.html\" path=\"toh-pt1/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero.ts\" path=\"toh-pt1/src/app/hero.ts\">\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_confirmed data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\"><i class=\"material-icons\">link</i>总结</h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4vmq8y452v05d563yup0xxlr\">你使用 CLI 创建了第二个 \n<code>HeroesComponent</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56nvum2l9p7446dqk41beio0\">你通过将 \n<code>HeroesComponent</code> 添加到 \n<code>AppComponent</code> 外壳中来显示它。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek6zhutxslsxd71nm4fkcengl\">你应用了 \n<code>UppercasePipe</code> 来格式化名字。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21o9j4ukrkx8e20dxh3hg2wz5\">你使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令进行了双向数据绑定。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86ey9pucwcw89osgfkjz70jlc\">你了解了 \n<code>AppModule</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sent3h9261h3x7l0is0b0kp0\">你在 \n<code>AppModule</code> 中导入了 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，以便 Angular 能够识别并应用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8out9v1psccmrcsbylqklmgjs\">你了解了在 \n<code>AppModule</code> 中声明组件的重要性，并感谢 CLI 为你声明了它。</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - guide/lifecycle-hooks#oninit\n - guide/ngmodules\n - guide/pipes\n - tutorial/toh-pt1#add-a-hero-property\n - tutorial/toh-pt1#appmodule\n - tutorial/toh-pt1#create-a-hero-class\n - tutorial/toh-pt1#create-the-heroes-component\n - tutorial/toh-pt1#declare-heroescomponent\n - tutorial/toh-pt1#edit-the-hero\n - tutorial/toh-pt1#final-code-review\n - tutorial/toh-pt1#format-with-the-uppercasepipe\n - tutorial/toh-pt1#import-formsmodule\n - tutorial/toh-pt1#selector\n - tutorial/toh-pt1#show-the-hero\n - tutorial/toh-pt1#show-the-hero-object\n - tutorial/toh-pt1#show-the-heroescomponent-view\n - tutorial/toh-pt1#summary\n - tutorial/toh-pt1#the-hero-editor\n - tutorial/toh-pt1#the-missing-formsmodule\n - tutorial/toh-pt1#two-way-binding\n - https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\n-->"
}